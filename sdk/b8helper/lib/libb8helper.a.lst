In archive /Users/kzm/git/beep8-sdk/sdk/b8helper/lib/libb8helper.a:

mt.o:     file format elf32-littlearm


Disassembly of section .text.init_genrand:

00000000 <init_genrand>:
   0:	e59fc030 	ldr	r12, [pc, #48]	; 38 <init_genrand+0x38>
   4:	e3a03001 	mov	r3, #1
   8:	e1a0200c 	mov	r2, r12
   c:	e59f1028 	ldr	r1, [pc, #40]	; 3c <init_genrand+0x3c>
  10:	e58c0000 	str	r0, [r12]
  14:	e0200f20 	eor	r0, r0, r0, lsr #30
  18:	e0203091 	mla	r0, r1, r0, r3
  1c:	e2833001 	add	r3, r3, #1
  20:	e3530e27 	cmp	r3, #624	; 0x270
  24:	e5a20004 	str	r0, [r2, #4]!
  28:	1afffff9 	bne	14 <init_genrand+0x14>
  2c:	e59f200c 	ldr	r2, [pc, #12]	; 40 <init_genrand+0x40>
  30:	e5823000 	str	r3, [r2]
  34:	e1a0f00e 	mov	pc, lr
  38:	00000000 	.word	0x00000000
  3c:	6c078965 	.word	0x6c078965
  40:	00000000 	.word	0x00000000

Disassembly of section .text.init_by_array:

00000000 <init_by_array>:
   0:	e59fc0f4 	ldr	r12, [pc, #244]	; fc <init_by_array+0xfc>
   4:	e92d4070 	push	{r4, r5, r6, lr}
   8:	e3a02001 	mov	r2, #1
   c:	e1a04000 	mov	r4, r0
  10:	e1a0e00c 	mov	lr, r12
  14:	e1a00001 	mov	r0, r1
  18:	e59f30e0 	ldr	r3, [pc, #224]	; 100 <init_by_array+0x100>
  1c:	e59f50e0 	ldr	r5, [pc, #224]	; 104 <init_by_array+0x104>
  20:	e58c3000 	str	r3, [r12]
  24:	e0233f23 	eor	r3, r3, r3, lsr #30
  28:	e0232395 	mla	r3, r5, r3, r2
  2c:	e2822001 	add	r2, r2, #1
  30:	e3520e27 	cmp	r2, #624	; 0x270
  34:	e5ae3004 	str	r3, [lr, #4]!
  38:	1afffff9 	bne	24 <init_by_array+0x24>
  3c:	e59f30c4 	ldr	r3, [pc, #196]	; 108 <init_by_array+0x108>
  40:	e3500e27 	cmp	r0, #624	; 0x270
  44:	e5832000 	str	r2, [r3]
  48:	a1a01000 	movge	r1, r0
  4c:	b3a01e27 	movlt	r1, #624	; 0x270
  50:	e3a0e000 	mov	lr, #0
  54:	e3a02001 	mov	r2, #1
  58:	e59c3000 	ldr	r3, [r12]
  5c:	e59f50a8 	ldr	r5, [pc, #168]	; 10c <init_by_array+0x10c>
  60:	e0233f23 	eor	r3, r3, r3, lsr #30
  64:	e0030395 	mul	r3, r5, r3
  68:	e79c6102 	ldr	r6, [r12, r2, lsl #2]
  6c:	e0233006 	eor	r3, r3, r6
  70:	e794610e 	ldr	r6, [r4, lr, lsl #2]
  74:	e0833006 	add	r3, r3, r6
  78:	e083300e 	add	r3, r3, lr
  7c:	e78c3102 	str	r3, [r12, r2, lsl #2]
  80:	e2822001 	add	r2, r2, #1
  84:	e3520e27 	cmp	r2, #624	; 0x270
  88:	059c39bc 	ldreq	r3, [r12, #2492]	; 0x9bc
  8c:	e28ee001 	add	lr, lr, #1
  90:	03a02001 	moveq	r2, #1
  94:	058c3000 	streq	r3, [r12]
  98:	e150000e 	cmp	r0, lr
  9c:	d3a0e000 	movle	lr, #0
  a0:	e2511001 	subs	r1, r1, #1
  a4:	1affffed 	bne	60 <init_by_array+0x60>
  a8:	e59f1060 	ldr	r1, [pc, #96]	; 110 <init_by_array+0x110>
  ac:	e59fe060 	ldr	lr, [pc, #96]	; 114 <init_by_array+0x114>
  b0:	ea000001 	b	bc <init_by_array+0xbc>
  b4:	e2423001 	sub	r3, r2, #1
  b8:	e79c3103 	ldr	r3, [r12, r3, lsl #2]
  bc:	e0233f23 	eor	r3, r3, r3, lsr #30
  c0:	e003039e 	mul	r3, lr, r3
  c4:	e79c0102 	ldr	r0, [r12, r2, lsl #2]
  c8:	e0233000 	eor	r3, r3, r0
  cc:	e0433002 	sub	r3, r3, r2
  d0:	e78c3102 	str	r3, [r12, r2, lsl #2]
  d4:	e2822001 	add	r2, r2, #1
  d8:	e3520e27 	cmp	r2, #624	; 0x270
  dc:	059c39bc 	ldreq	r3, [r12, #2492]	; 0x9bc
  e0:	03a02001 	moveq	r2, #1
  e4:	058c3000 	streq	r3, [r12]
  e8:	e2511001 	subs	r1, r1, #1
  ec:	1afffff0 	bne	b4 <init_by_array+0xb4>
  f0:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
  f4:	e58c3000 	str	r3, [r12]
  f8:	e8bd8070 	pop	{r4, r5, r6, pc}
  fc:	00000000 	.word	0x00000000
 100:	012bd6aa 	.word	0x012bd6aa
 104:	6c078965 	.word	0x6c078965
 108:	00000000 	.word	0x00000000
 10c:	0019660d 	.word	0x0019660d
 110:	0000026f 	.word	0x0000026f
 114:	5d588b65 	.word	0x5d588b65

Disassembly of section .text.genrand_int32:

00000000 <genrand_int32>:
   0:	e59fc134 	ldr	r12, [pc, #308]	; 13c <genrand_int32+0x13c>
   4:	e92d4030 	push	{r4, r5, lr}
   8:	e59c3000 	ldr	r3, [r12]
   c:	e3530e27 	cmp	r3, #624	; 0x270
  10:	aa00000c 	bge	48 <genrand_int32+0x48>
  14:	e59f2124 	ldr	r2, [pc, #292]	; 140 <genrand_int32+0x140>
  18:	e2831001 	add	r1, r3, #1
  1c:	e7922103 	ldr	r2, [r2, r3, lsl #2]
  20:	e59f311c 	ldr	r3, [pc, #284]	; 144 <genrand_int32+0x144>
  24:	e02225a2 	eor	r2, r2, r2, lsr #11
  28:	e0033382 	and	r3, r3, r2, lsl #7
  2c:	e59f0114 	ldr	r0, [pc, #276]	; 148 <genrand_int32+0x148>
  30:	e0233002 	eor	r3, r3, r2
  34:	e0000783 	and	r0, r0, r3, lsl #15
  38:	e0200003 	eor	r0, r0, r3
  3c:	e58c1000 	str	r1, [r12]
  40:	e0200920 	eor	r0, r0, r0, lsr #18
  44:	e8bd8030 	pop	{r4, r5, pc}
  48:	e59f20fc 	ldr	r2, [pc, #252]	; 14c <genrand_int32+0x14c>
  4c:	e1530002 	cmp	r3, r2
  50:	0a00002c 	beq	108 <genrand_int32+0x108>
  54:	e59f50f4 	ldr	r5, [pc, #244]	; 150 <genrand_int32+0x150>
  58:	e59f00f4 	ldr	r0, [pc, #244]	; 154 <genrand_int32+0x154>
  5c:	e245efe3 	sub	lr, r5, #908	; 0x38c
  60:	e1a0200e 	mov	r2, lr
  64:	e5921000 	ldr	r1, [r2]
  68:	e5b23004 	ldr	r3, [r2, #4]!
  6c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  70:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
  74:	e1833001 	orr	r3, r3, r1
  78:	e2034001 	and	r4, r3, #1
  7c:	e5921630 	ldr	r1, [r2, #1584]	; 0x630
  80:	e7904104 	ldr	r4, [r0, r4, lsl #2]
  84:	e02130a3 	eor	r3, r1, r3, lsr #1
  88:	e0233004 	eor	r3, r3, r4
  8c:	e1550002 	cmp	r5, r2
  90:	e5023004 	str	r3, [r2, #-4]
  94:	1afffff2 	bne	64 <genrand_int32+0x64>
  98:	e59f20b8 	ldr	r2, [pc, #184]	; 158 <genrand_int32+0x158>
  9c:	e2825e63 	add	r5, r2, #1584	; 0x630
  a0:	e5923390 	ldr	r3, [r2, #912]	; 0x390
  a4:	e5921394 	ldr	r1, [r2, #916]	; 0x394
  a8:	e2033102 	and	r3, r3, #-2147483648	; 0x80000000
  ac:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  b0:	e1833001 	orr	r3, r3, r1
  b4:	e2034001 	and	r4, r3, #1
  b8:	e5b21004 	ldr	r1, [r2, #4]!
  bc:	e7904104 	ldr	r4, [r0, r4, lsl #2]
  c0:	e02130a3 	eor	r3, r1, r3, lsr #1
  c4:	e0233004 	eor	r3, r3, r4
  c8:	e1550002 	cmp	r5, r2
  cc:	e582338c 	str	r3, [r2, #908]	; 0x38c
  d0:	1afffff2 	bne	a0 <genrand_int32+0xa0>
  d4:	e3a01001 	mov	r1, #1
  d8:	e59e39bc 	ldr	r3, [lr, #2492]	; 0x9bc
  dc:	e59e2000 	ldr	r2, [lr]
  e0:	e2033102 	and	r3, r3, #-2147483648	; 0x80000000
  e4:	e3c24102 	bic	r4, r2, #-2147483648	; 0x80000000
  e8:	e1833004 	orr	r3, r3, r4
  ec:	e59e4630 	ldr	r4, [lr, #1584]	; 0x630
  f0:	e0244133 	eor	r4, r4, r3, lsr r1
  f4:	e0033001 	and	r3, r3, r1
  f8:	e7903103 	ldr	r3, [r0, r3, lsl #2]
  fc:	e0233004 	eor	r3, r3, r4
 100:	e58e39bc 	str	r3, [lr, #2492]	; 0x9bc
 104:	eaffffc5 	b	20 <genrand_int32+0x20>
 108:	e3a02001 	mov	r2, #1
 10c:	e59f002c 	ldr	r0, [pc, #44]	; 140 <genrand_int32+0x140>
 110:	e59f3044 	ldr	r3, [pc, #68]	; 15c <genrand_int32+0x15c>
 114:	e1a01000 	mov	r1, r0
 118:	e5803000 	str	r3, [r0]
 11c:	e59f003c 	ldr	r0, [pc, #60]	; 160 <genrand_int32+0x160>
 120:	e0233f23 	eor	r3, r3, r3, lsr #30
 124:	e0232390 	mla	r3, r0, r3, r2
 128:	e2822001 	add	r2, r2, #1
 12c:	e3520e27 	cmp	r2, #624	; 0x270
 130:	e5a13004 	str	r3, [r1, #4]!
 134:	1afffff9 	bne	120 <genrand_int32+0x120>
 138:	eaffffc5 	b	54 <genrand_int32+0x54>
	...
 144:	9d2c5680 	.word	0x9d2c5680
 148:	efc60000 	.word	0xefc60000
 14c:	00000271 	.word	0x00000271
 150:	0000038c 	.word	0x0000038c
 154:	00000000 	.word	0x00000000
 158:	fffffffc 	.word	0xfffffffc
 15c:	00001571 	.word	0x00001571
 160:	6c078965 	.word	0x6c078965

Disassembly of section .text.genrand_int31:

00000000 <genrand_int31>:
   0:	e92d4010 	push	{r4, lr}
   4:	ebfffffe 	bl	0 <genrand_int31>
   8:	e1a000a0 	lsr	r0, r0, #1
   c:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text.genrand_min_max:

00000000 <genrand_min_max>:
   0:	e1500001 	cmp	r0, r1
   4:	e92d4070 	push	{r4, r5, r6, lr}
   8:	e1a04000 	mov	r4, r0
   c:	0a00000e 	beq	4c <genrand_min_max+0x4c>
  10:	c1a03000 	movgt	r3, r0
  14:	c1a04001 	movgt	r4, r1
  18:	c1a01003 	movgt	r1, r3
  1c:	e2811001 	add	r1, r1, #1
  20:	e0515004 	subs	r5, r1, r4
  24:	4a000005 	bmi	40 <genrand_min_max+0x40>
  28:	ebfffffe 	bl	0 <genrand_min_max>
  2c:	e1a01005 	mov	r1, r5
  30:	e1a000a0 	lsr	r0, r0, #1
  34:	ebfffffe 	bl	0 <__aeabi_uidivmod>
  38:	e0810004 	add	r0, r1, r4
  3c:	e8bd8070 	pop	{r4, r5, r6, pc}
  40:	ebfffffe 	bl	0 <genrand_min_max>
  44:	e08400a0 	add	r0, r4, r0, lsr #1
  48:	e8bd8070 	pop	{r4, r5, r6, pc}
  4c:	e8bd8070 	pop	{r4, r5, r6, pc}

argparse.o:     file format elf32-littlearm


Disassembly of section .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj.isra.0:

00000000 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned int&, unsigned int) [clone .isra.0]>:
   0:	e5903000 	ldr	r3, [r0]
   4:	e92d4010 	push	{r4, lr}
   8:	e3530000 	cmp	r3, #0
   c:	ba00000e 	blt	4c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned int&, unsigned int) [clone .isra.0]+0x4c>
  10:	e1530001 	cmp	r3, r1
  14:	9a000008 	bls	3c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned int&, unsigned int) [clone .isra.0]+0x3c>
  18:	e1530081 	cmp	r3, r1, lsl #1
  1c:	e1a01081 	lsl	r1, r1, #1
  20:	2a000005 	bcs	3c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned int&, unsigned int) [clone .isra.0]+0x3c>
  24:	e3510000 	cmp	r1, #0
  28:	b3e03102 	mvnlt	r3, #-2147483648	; 0x80000000
  2c:	a1a03001 	movge	r3, r1
  30:	a5801000 	strge	r1, [r0]
  34:	b5803000 	strlt	r3, [r0]
  38:	ba000002 	blt	48 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned int&, unsigned int) [clone .isra.0]+0x48>
  3c:	e2930001 	adds	r0, r3, #1
  40:	58bd4010 	poppl	{r4, lr}
  44:	5afffffe 	bpl	0 <operator new(unsigned int)>
  48:	ebfffffe 	bl	0 <std::__throw_bad_alloc()>
  4c:	e59f0000 	ldr	r0, [pc]	; 54 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned int&, unsigned int) [clone .isra.0]+0x54>
  50:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
  54:	00000000 	.word	0x00000000

Disassembly of section .text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8argparse3VarEESt10_Select1stISA_ESt4lessIS5_ESaISA_EE8_M_eraseEPSt13_Rb_tree_nodeISA_E.isra.0:

00000000 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >*) [clone .isra.0]>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e2505000 	subs	r5, r0, #0
   8:	0a000016 	beq	68 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >*) [clone .isra.0]+0x68>
   c:	e1a04005 	mov	r4, r5
  10:	e595000c 	ldr	r0, [r5, #12]
  14:	ebfffff9 	bl	0 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >*) [clone .isra.0]>
  18:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
  1c:	e2843034 	add	r3, r4, #52	; 0x34
  20:	e1500003 	cmp	r0, r3
  24:	e5955008 	ldr	r5, [r5, #8]
  28:	0a000002 	beq	38 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >*) [clone .isra.0]+0x38>
  2c:	e5941034 	ldr	r1, [r4, #52]	; 0x34
  30:	e2811001 	add	r1, r1, #1
  34:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  38:	e5940010 	ldr	r0, [r4, #16]
  3c:	e2843018 	add	r3, r4, #24
  40:	e1500003 	cmp	r0, r3
  44:	0a000002 	beq	54 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >*) [clone .isra.0]+0x54>
  48:	e5941018 	ldr	r1, [r4, #24]
  4c:	e2811001 	add	r1, r1, #1
  50:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  54:	e3a01044 	mov	r1, #68	; 0x44
  58:	e1a00004 	mov	r0, r4
  5c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  60:	e3550000 	cmp	r5, #0
  64:	1affffe8 	bne	c <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >*) [clone .isra.0]+0xc>
  68:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZNK8argparse8Argument8ShowHelpEv:

00000000 <argparse::Argument::ShowHelp() const>:
   0:	e1a01000 	mov	r1, r0
   4:	e59f000c 	ldr	r0, [pc, #12]	; 18 <argparse::Argument::ShowHelp() const+0x18>
   8:	e5913030 	ldr	r3, [r1, #48]	; 0x30
   c:	e5912000 	ldr	r2, [r1]
  10:	e5911018 	ldr	r1, [r1, #24]
  14:	eafffffe 	b	0 <printf>
  18:	00000000 	.word	0x00000000

Disassembly of section .text._ZN8argparse14ArgumentParser8ShowHelpEv:

00000000 <argparse::ArgumentParser::ShowHelp()>:
   0:	e5d0303c 	ldrb	r3, [r0, #60]	; 0x3c
   4:	e3530000 	cmp	r3, #0
   8:	11a0f00e 	movne	pc, lr
   c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  10:	e1a05000 	mov	r5, r0
  14:	e59f003c 	ldr	r0, [pc, #60]	; 58 <argparse::ArgumentParser::ShowHelp()+0x58>
  18:	ebfffffe 	bl	0 <printf>
  1c:	e8950050 	ldm	r5, {r4, r6}
  20:	e1540006 	cmp	r4, r6
  24:	0a000008 	beq	4c <argparse::ArgumentParser::ShowHelp()+0x4c>
  28:	e59f702c 	ldr	r7, [pc, #44]	; 5c <argparse::ArgumentParser::ShowHelp()+0x5c>
  2c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  30:	e5942000 	ldr	r2, [r4]
  34:	e5941018 	ldr	r1, [r4, #24]
  38:	e1a00007 	mov	r0, r7
  3c:	e284404c 	add	r4, r4, #76	; 0x4c
  40:	ebfffffe 	bl	0 <printf>
  44:	e1560004 	cmp	r6, r4
  48:	1afffff7 	bne	2c <argparse::ArgumentParser::ShowHelp()+0x2c>
  4c:	e3a03001 	mov	r3, #1
  50:	e5c5303c 	strb	r3, [r5, #60]	; 0x3c
  54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	...

Disassembly of section .text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8argparse3VarEESt10_Select1stISA_ESt4lessIS5_ESaISA_EE4findERS7_:

00000000 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   4:	e5904008 	ldr	r4, [r0, #8]
   8:	e2808004 	add	r8, r0, #4
   c:	e3540000 	cmp	r4, #0
  10:	0a000030 	beq	d8 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd8>
  14:	e1a07008 	mov	r7, r8
  18:	e5919000 	ldr	r9, [r1]
  1c:	e5916004 	ldr	r6, [r1, #4]
  20:	ea000009 	b	4c <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4c>
  24:	e1a01009 	mov	r1, r9
  28:	ebfffffe 	bl	0 <memcmp>
  2c:	e3500000 	cmp	r0, #0
  30:	0a00000c 	beq	68 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x68>
  34:	e3500000 	cmp	r0, #0
  38:	ba00000e 	blt	78 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x78>
  3c:	e1a07004 	mov	r7, r4
  40:	e5944008 	ldr	r4, [r4, #8]
  44:	e3540000 	cmp	r4, #0
  48:	0a00000d 	beq	84 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x84>
  4c:	e5945014 	ldr	r5, [r4, #20]
  50:	e5940010 	ldr	r0, [r4, #16]
  54:	e1550006 	cmp	r5, r6
  58:	31a02005 	movcc	r2, r5
  5c:	21a02006 	movcs	r2, r6
  60:	e3520000 	cmp	r2, #0
  64:	1affffee 	bne	24 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x24>
  68:	e0550006 	subs	r0, r5, r6
  6c:	0afffff2 	beq	3c <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3c>
  70:	e3500000 	cmp	r0, #0
  74:	aafffff0 	bge	3c <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x3c>
  78:	e594400c 	ldr	r4, [r4, #12]
  7c:	e3540000 	cmp	r4, #0
  80:	1afffff1 	bne	4c <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x4c>
  84:	e1580007 	cmp	r8, r7
  88:	0a00000c 	beq	c0 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc0>
  8c:	e5974014 	ldr	r4, [r7, #20]
  90:	e1540006 	cmp	r4, r6
  94:	31a02004 	movcc	r2, r4
  98:	21a02006 	movcs	r2, r6
  9c:	e3520000 	cmp	r2, #0
  a0:	0a000008 	beq	c8 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc8>
  a4:	e1a00009 	mov	r0, r9
  a8:	e5971010 	ldr	r1, [r7, #16]
  ac:	ebfffffe 	bl	0 <memcmp>
  b0:	e3500000 	cmp	r0, #0
  b4:	0a000003 	beq	c8 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc8>
  b8:	e3500000 	cmp	r0, #0
  bc:	b1a07008 	movlt	r7, r8
  c0:	e1a00007 	mov	r0, r7
  c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  c8:	e0560004 	subs	r0, r6, r4
  cc:	1afffff9 	bne	b8 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb8>
  d0:	e1a00007 	mov	r0, r7
  d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  d8:	e1a07008 	mov	r7, r8
  dc:	e1a00007 	mov	r0, r7
  e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

Disassembly of section .text._ZNSt6vectorIN8argparse8ArgumentESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_:

00000000 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e590b000 	ldr	r11, [r0]
   8:	e5908004 	ldr	r8, [r0, #4]
   c:	e59fc554 	ldr	r12, [pc, #1364]	; 568 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x568>
  10:	e048300b 	sub	r3, r8, r11
  14:	e1a03143 	asr	r3, r3, #2
  18:	e0833083 	add	r3, r3, r3, lsl #1
  1c:	e0833183 	add	r3, r3, r3, lsl #3
  20:	e0633483 	rsb	r3, r3, r3, lsl #9
  24:	e0833903 	add	r3, r3, r3, lsl #18
  28:	e2633000 	rsb	r3, r3, #0
  2c:	e24dd014 	sub	sp, sp, #20
  30:	e153000c 	cmp	r3, r12
  34:	e58d0008 	str	r0, [sp, #8]
  38:	0a000144 	beq	550 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x550>
  3c:	e3530001 	cmp	r3, #1
  40:	e1a04002 	mov	r4, r2
  44:	21a02003 	movcs	r2, r3
  48:	33a02001 	movcc	r2, #1
  4c:	e0933002 	adds	r3, r3, r2
  50:	e58d3004 	str	r3, [sp, #4]
  54:	e1a0a001 	mov	r10, r1
  58:	23e001ee 	mvncs	r0, #-2147483589	; 0x8000003b
  5c:	258dc004 	strcs	r12, [sp, #4]
  60:	2041700b 	subcs	r7, r1, r11
  64:	2a000101 	bcs	470 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x470>
  68:	e59d3004 	ldr	r3, [sp, #4]
  6c:	e041700b 	sub	r7, r1, r11
  70:	e3530000 	cmp	r3, #0
  74:	1a0000f6 	bne	454 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x454>
  78:	e58d3000 	str	r3, [sp]
  7c:	e5949000 	ldr	r9, [r4]
  80:	e5946004 	ldr	r6, [r4, #4]
  84:	e2793001 	rsbs	r3, r9, #1
  88:	e2662000 	rsb	r2, r6, #0
  8c:	33a03000 	movcc	r3, #0
  90:	e1590002 	cmp	r9, r2
  94:	03a03000 	moveq	r3, #0
  98:	e3530000 	cmp	r3, #0
  9c:	e59d3000 	ldr	r3, [sp]
  a0:	e0835007 	add	r5, r3, r7
  a4:	e2850008 	add	r0, r5, #8
  a8:	e7830007 	str	r0, [r3, r7]
  ac:	1a00012b 	bne	560 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x560>
  b0:	e356000f 	cmp	r6, #15
  b4:	8a0000f0 	bhi	47c <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x47c>
  b8:	e3560001 	cmp	r6, #1
  bc:	0a000077 	beq	2a0 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x2a0>
  c0:	e3560000 	cmp	r6, #0
  c4:	1a0000f3 	bne	498 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x498>
  c8:	e3a03000 	mov	r3, #0
  cc:	e5856004 	str	r6, [r5, #4]
  d0:	e7c03006 	strb	r3, [r0, r6]
  d4:	e5947018 	ldr	r7, [r4, #24]
  d8:	e594601c 	ldr	r6, [r4, #28]
  dc:	e0470003 	sub	r0, r7, r3
  e0:	e2703000 	rsbs	r3, r0, #0
  e4:	e2662000 	rsb	r2, r6, #0
  e8:	e0a33000 	adc	r3, r3, r0
  ec:	e1570002 	cmp	r7, r2
  f0:	03a03000 	moveq	r3, #0
  f4:	e2850020 	add	r0, r5, #32
  f8:	e3530000 	cmp	r3, #0
  fc:	e5850018 	str	r0, [r5, #24]
 100:	1a000116 	bne	560 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x560>
 104:	e356000f 	cmp	r6, #15
 108:	8a0000ee 	bhi	4c8 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x4c8>
 10c:	e3560001 	cmp	r6, #1
 110:	1a0000e5 	bne	4ac <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x4ac>
 114:	e5d73000 	ldrb	r3, [r7]
 118:	e5c53020 	strb	r3, [r5, #32]
 11c:	e3a03000 	mov	r3, #0
 120:	e585601c 	str	r6, [r5, #28]
 124:	e7c03006 	strb	r3, [r0, r6]
 128:	e5947030 	ldr	r7, [r4, #48]	; 0x30
 12c:	e5946034 	ldr	r6, [r4, #52]	; 0x34
 130:	e0471003 	sub	r1, r7, r3
 134:	e2713000 	rsbs	r3, r1, #0
 138:	e2662000 	rsb	r2, r6, #0
 13c:	e0a33001 	adc	r3, r3, r1
 140:	e1570002 	cmp	r7, r2
 144:	03a03000 	moveq	r3, #0
 148:	e2850038 	add	r0, r5, #56	; 0x38
 14c:	e3530000 	cmp	r3, #0
 150:	e5850030 	str	r0, [r5, #48]	; 0x30
 154:	1a000101 	bne	560 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x560>
 158:	e356000f 	cmp	r6, #15
 15c:	8a0000ec 	bhi	514 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x514>
 160:	e3560001 	cmp	r6, #1
 164:	1a0000e3 	bne	4f8 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x4f8>
 168:	e5d73000 	ldrb	r3, [r7]
 16c:	e5c53038 	strb	r3, [r5, #56]	; 0x38
 170:	e3a09000 	mov	r9, #0
 174:	e5856034 	str	r6, [r5, #52]	; 0x34
 178:	e7c09006 	strb	r9, [r0, r6]
 17c:	e5d43048 	ldrb	r3, [r4, #72]	; 0x48
 180:	e15a000b 	cmp	r10, r11
 184:	e5c53048 	strb	r3, [r5, #72]	; 0x48
 188:	0a0000ed 	beq	544 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x544>
 18c:	e59d3000 	ldr	r3, [sp]
 190:	e28b7008 	add	r7, r11, #8
 194:	e283604c 	add	r6, r3, #76	; 0x4c
 198:	e28b4038 	add	r4, r11, #56	; 0x38
 19c:	e58d800c 	str	r8, [sp, #12]
 1a0:	ea000034 	b	278 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x278>
 1a4:	e506304c 	str	r3, [r6, #-76]	; 0xffffffb4
 1a8:	e5143030 	ldr	r3, [r4, #-48]	; 0xffffffd0
 1ac:	e5063044 	str	r3, [r6, #-68]	; 0xffffffbc
 1b0:	e5143034 	ldr	r3, [r4, #-52]	; 0xffffffcc
 1b4:	e246002c 	sub	r0, r6, #44	; 0x2c
 1b8:	e5047038 	str	r7, [r4, #-56]	; 0xffffffc8
 1bc:	e5063048 	str	r3, [r6, #-72]	; 0xffffffb8
 1c0:	e5049034 	str	r9, [r4, #-52]	; 0xffffffcc
 1c4:	e5449030 	strb	r9, [r4, #-48]	; 0xffffffd0
 1c8:	e5060034 	str	r0, [r6, #-52]	; 0xffffffcc
 1cc:	e5142020 	ldr	r2, [r4, #-32]	; 0xffffffe0
 1d0:	e2448018 	sub	r8, r4, #24
 1d4:	e1580002 	cmp	r8, r2
 1d8:	0a000037 	beq	2bc <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x2bc>
 1dc:	e5062034 	str	r2, [r6, #-52]	; 0xffffffcc
 1e0:	e5142018 	ldr	r2, [r4, #-24]	; 0xffffffe8
 1e4:	e506202c 	str	r2, [r6, #-44]	; 0xffffffd4
 1e8:	e514201c 	ldr	r2, [r4, #-28]	; 0xffffffe4
 1ec:	e2460014 	sub	r0, r6, #20
 1f0:	e5062030 	str	r2, [r6, #-48]	; 0xffffffd0
 1f4:	e5048020 	str	r8, [r4, #-32]	; 0xffffffe0
 1f8:	e504901c 	str	r9, [r4, #-28]	; 0xffffffe4
 1fc:	e5449018 	strb	r9, [r4, #-24]	; 0xffffffe8
 200:	e506001c 	str	r0, [r6, #-28]	; 0xffffffe4
 204:	e5142008 	ldr	r2, [r4, #-8]
 208:	e1520004 	cmp	r2, r4
 20c:	0a000026 	beq	2ac <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x2ac>
 210:	e506201c 	str	r2, [r6, #-28]	; 0xffffffe4
 214:	e5942000 	ldr	r2, [r4]
 218:	e5062014 	str	r2, [r6, #-20]	; 0xffffffec
 21c:	e5143004 	ldr	r3, [r4, #-4]
 220:	e5140020 	ldr	r0, [r4, #-32]	; 0xffffffe0
 224:	e5063018 	str	r3, [r6, #-24]	; 0xffffffe8
 228:	e5d43010 	ldrb	r3, [r4, #16]
 22c:	e1580000 	cmp	r8, r0
 230:	e5463004 	strb	r3, [r6, #-4]
 234:	0a000002 	beq	244 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x244>
 238:	e5141018 	ldr	r1, [r4, #-24]	; 0xffffffe8
 23c:	e2811001 	add	r1, r1, #1
 240:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 244:	e5140038 	ldr	r0, [r4, #-56]	; 0xffffffc8
 248:	e1570000 	cmp	r7, r0
 24c:	0a000002 	beq	25c <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x25c>
 250:	e5141030 	ldr	r1, [r4, #-48]	; 0xffffffd0
 254:	e2811001 	add	r1, r1, #1
 258:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 25c:	e284304c 	add	r3, r4, #76	; 0x4c
 260:	e2844014 	add	r4, r4, #20
 264:	e15a0004 	cmp	r10, r4
 268:	e286604c 	add	r6, r6, #76	; 0x4c
 26c:	e287704c 	add	r7, r7, #76	; 0x4c
 270:	0a000015 	beq	2cc <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x2cc>
 274:	e1a04003 	mov	r4, r3
 278:	e2460044 	sub	r0, r6, #68	; 0x44
 27c:	e506004c 	str	r0, [r6, #-76]	; 0xffffffb4
 280:	e5143038 	ldr	r3, [r4, #-56]	; 0xffffffc8
 284:	e1a05006 	mov	r5, r6
 288:	e1530007 	cmp	r3, r7
 28c:	1affffc4 	bne	1a4 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x1a4>
 290:	e3a02010 	mov	r2, #16
 294:	e1a01007 	mov	r1, r7
 298:	ebfffffe 	bl	0 <memcpy>
 29c:	eaffffc3 	b	1b0 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x1b0>
 2a0:	e5d93000 	ldrb	r3, [r9]
 2a4:	e5c53008 	strb	r3, [r5, #8]
 2a8:	eaffff86 	b	c8 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0xc8>
 2ac:	e3a02010 	mov	r2, #16
 2b0:	e1a01004 	mov	r1, r4
 2b4:	ebfffffe 	bl	0 <memcpy>
 2b8:	eaffffd7 	b	21c <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x21c>
 2bc:	e3a02010 	mov	r2, #16
 2c0:	e1a01008 	mov	r1, r8
 2c4:	ebfffffe 	bl	0 <memcpy>
 2c8:	eaffffc6 	b	1e8 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x1e8>
 2cc:	e59d800c 	ldr	r8, [sp, #12]
 2d0:	e15a0008 	cmp	r10, r8
 2d4:	e285604c 	add	r6, r5, #76	; 0x4c
 2d8:	0a00004c 	beq	410 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x410>
 2dc:	e1a0700a 	mov	r7, r10
 2e0:	e3a09000 	mov	r9, #0
 2e4:	e2855054 	add	r5, r5, #84	; 0x54
 2e8:	e28a4038 	add	r4, r10, #56	; 0x38
 2ec:	e58d600c 	str	r6, [sp, #12]
 2f0:	ea000026 	b	390 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x390>
 2f4:	e5052008 	str	r2, [r5, #-8]
 2f8:	e5142030 	ldr	r2, [r4, #-48]	; 0xffffffd0
 2fc:	e5852000 	str	r2, [r5]
 300:	e5142020 	ldr	r2, [r4, #-32]	; 0xffffffe0
 304:	e5141034 	ldr	r1, [r4, #-52]	; 0xffffffcc
 308:	e5046038 	str	r6, [r4, #-56]	; 0xffffffc8
 30c:	e2876020 	add	r6, r7, #32
 310:	e2850018 	add	r0, r5, #24
 314:	e1560002 	cmp	r6, r2
 318:	e5449030 	strb	r9, [r4, #-48]	; 0xffffffd0
 31c:	e5850010 	str	r0, [r5, #16]
 320:	e5051004 	str	r1, [r5, #-4]
 324:	e5049034 	str	r9, [r4, #-52]	; 0xffffffcc
 328:	0a000026 	beq	3c8 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x3c8>
 32c:	e5852010 	str	r2, [r5, #16]
 330:	e5142018 	ldr	r2, [r4, #-24]	; 0xffffffe8
 334:	e5852018 	str	r2, [r5, #24]
 338:	e5142008 	ldr	r2, [r4, #-8]
 33c:	e514101c 	ldr	r1, [r4, #-28]	; 0xffffffe4
 340:	e2850030 	add	r0, r5, #48	; 0x30
 344:	e1540002 	cmp	r4, r2
 348:	e5046020 	str	r6, [r4, #-32]	; 0xffffffe0
 34c:	e5449018 	strb	r9, [r4, #-24]	; 0xffffffe8
 350:	e5850028 	str	r0, [r5, #40]	; 0x28
 354:	e5851014 	str	r1, [r5, #20]
 358:	e504901c 	str	r9, [r4, #-28]	; 0xffffffe4
 35c:	0a000015 	beq	3b8 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x3b8>
 360:	e5852028 	str	r2, [r5, #40]	; 0x28
 364:	e5942000 	ldr	r2, [r4]
 368:	e5852030 	str	r2, [r5, #48]	; 0x30
 36c:	e5142004 	ldr	r2, [r4, #-4]
 370:	e287704c 	add	r7, r7, #76	; 0x4c
 374:	e585202c 	str	r2, [r5, #44]	; 0x2c
 378:	e5d42010 	ldrb	r2, [r4, #16]
 37c:	e1580007 	cmp	r8, r7
 380:	e5c52040 	strb	r2, [r5, #64]	; 0x40
 384:	e284404c 	add	r4, r4, #76	; 0x4c
 388:	e285504c 	add	r5, r5, #76	; 0x4c
 38c:	0a000011 	beq	3d8 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x3d8>
 390:	e5142038 	ldr	r2, [r4, #-56]	; 0xffffffc8
 394:	e2876008 	add	r6, r7, #8
 398:	e1560002 	cmp	r6, r2
 39c:	e5055008 	str	r5, [r5, #-8]
 3a0:	1affffd3 	bne	2f4 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x2f4>
 3a4:	e3a02010 	mov	r2, #16
 3a8:	e1a01006 	mov	r1, r6
 3ac:	e1a00005 	mov	r0, r5
 3b0:	ebfffffe 	bl	0 <memcpy>
 3b4:	eaffffd1 	b	300 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x300>
 3b8:	e3a02010 	mov	r2, #16
 3bc:	e1a01004 	mov	r1, r4
 3c0:	ebfffffe 	bl	0 <memcpy>
 3c4:	eaffffe8 	b	36c <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x36c>
 3c8:	e3a02010 	mov	r2, #16
 3cc:	e1a01006 	mov	r1, r6
 3d0:	ebfffffe 	bl	0 <memcpy>
 3d4:	eaffffd7 	b	338 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x338>
 3d8:	e048300a 	sub	r3, r8, r10
 3dc:	e243304c 	sub	r3, r3, #76	; 0x4c
 3e0:	e1a03123 	lsr	r3, r3, #2
 3e4:	e0833083 	add	r3, r3, r3, lsl #1
 3e8:	e0833183 	add	r3, r3, r3, lsl #3
 3ec:	e0633483 	rsb	r3, r3, r3, lsl #9
 3f0:	e0833903 	add	r3, r3, r3, lsl #18
 3f4:	e2633000 	rsb	r3, r3, #0
 3f8:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
 3fc:	e2833001 	add	r3, r3, #1
 400:	e59d600c 	ldr	r6, [sp, #12]
 404:	e0832183 	add	r2, r3, r3, lsl #3
 408:	e0833082 	add	r3, r3, r2, lsl #1
 40c:	e0866103 	add	r6, r6, r3, lsl #2
 410:	e35b0000 	cmp	r11, #0
 414:	0a000004 	beq	42c <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x42c>
 418:	e59d3008 	ldr	r3, [sp, #8]
 41c:	e1a0000b 	mov	r0, r11
 420:	e5931008 	ldr	r1, [r3, #8]
 424:	e041100b 	sub	r1, r1, r11
 428:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 42c:	e59d2004 	ldr	r2, [sp, #4]
 430:	e59d1000 	ldr	r1, [sp]
 434:	e0823182 	add	r3, r2, r2, lsl #3
 438:	e0823083 	add	r3, r2, r3, lsl #1
 43c:	e59d2008 	ldr	r2, [sp, #8]
 440:	e0813103 	add	r3, r1, r3, lsl #2
 444:	e8820042 	stm	r2, {r1, r6}
 448:	e5823008 	str	r3, [r2, #8]
 44c:	e28dd014 	add	sp, sp, #20
 450:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 454:	e59d3004 	ldr	r3, [sp, #4]
 458:	e153000c 	cmp	r3, r12
 45c:	21a0300c 	movcs	r3, r12
 460:	e0830183 	add	r0, r3, r3, lsl #3
 464:	e0830080 	add	r0, r3, r0, lsl #1
 468:	e58d3004 	str	r3, [sp, #4]
 46c:	e1a00100 	lsl	r0, r0, #2
 470:	ebfffffe 	bl	0 <operator new(unsigned int)>
 474:	e58d0000 	str	r0, [sp]
 478:	eafffeff 	b	7c <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x7c>
 47c:	e3560000 	cmp	r6, #0
 480:	ba000034 	blt	558 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x558>
 484:	e2960001 	adds	r0, r6, #1
 488:	4a00002f 	bmi	54c <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x54c>
 48c:	ebfffffe 	bl	0 <operator new(unsigned int)>
 490:	e5856008 	str	r6, [r5, #8]
 494:	e5850000 	str	r0, [r5]
 498:	e1a01009 	mov	r1, r9
 49c:	e1a02006 	mov	r2, r6
 4a0:	ebfffffe 	bl	0 <memcpy>
 4a4:	e5950000 	ldr	r0, [r5]
 4a8:	eaffff06 	b	c8 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0xc8>
 4ac:	e3560000 	cmp	r6, #0
 4b0:	0affff19 	beq	11c <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x11c>
 4b4:	e1a01007 	mov	r1, r7
 4b8:	e1a02006 	mov	r2, r6
 4bc:	ebfffffe 	bl	0 <memcpy>
 4c0:	e5950018 	ldr	r0, [r5, #24]
 4c4:	eaffff14 	b	11c <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x11c>
 4c8:	e3560000 	cmp	r6, #0
 4cc:	ba000021 	blt	558 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x558>
 4d0:	e2960001 	adds	r0, r6, #1
 4d4:	4a00001c 	bmi	54c <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x54c>
 4d8:	ebfffffe 	bl	0 <operator new(unsigned int)>
 4dc:	e1a01007 	mov	r1, r7
 4e0:	e1a02006 	mov	r2, r6
 4e4:	e5856020 	str	r6, [r5, #32]
 4e8:	e5850018 	str	r0, [r5, #24]
 4ec:	ebfffffe 	bl	0 <memcpy>
 4f0:	e5950018 	ldr	r0, [r5, #24]
 4f4:	eaffff08 	b	11c <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x11c>
 4f8:	e3560000 	cmp	r6, #0
 4fc:	0affff1b 	beq	170 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x170>
 500:	e1a01007 	mov	r1, r7
 504:	e1a02006 	mov	r2, r6
 508:	ebfffffe 	bl	0 <memcpy>
 50c:	e5950030 	ldr	r0, [r5, #48]	; 0x30
 510:	eaffff16 	b	170 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x170>
 514:	e3560000 	cmp	r6, #0
 518:	ba00000e 	blt	558 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x558>
 51c:	e2960001 	adds	r0, r6, #1
 520:	4a000009 	bmi	54c <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x54c>
 524:	ebfffffe 	bl	0 <operator new(unsigned int)>
 528:	e1a01007 	mov	r1, r7
 52c:	e1a02006 	mov	r2, r6
 530:	e5856038 	str	r6, [r5, #56]	; 0x38
 534:	e5850030 	str	r0, [r5, #48]	; 0x30
 538:	ebfffffe 	bl	0 <memcpy>
 53c:	e5950030 	ldr	r0, [r5, #48]	; 0x30
 540:	eaffff0a 	b	170 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x170>
 544:	e59d5000 	ldr	r5, [sp]
 548:	eaffff60 	b	2d0 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x2d0>
 54c:	ebfffffe 	bl	0 <std::__throw_bad_alloc()>
 550:	e59f0014 	ldr	r0, [pc, #20]	; 56c <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x56c>
 554:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 558:	e59f0010 	ldr	r0, [pc, #16]	; 570 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x570>
 55c:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 560:	e59f000c 	ldr	r0, [pc, #12]	; 574 <void std::vector<argparse::Argument, std::allocator<argparse::Argument> >::_M_realloc_insert<argparse::Argument const&>(__gnu_cxx::__normal_iterator<argparse::Argument*, std::vector<argparse::Argument, std::allocator<argparse::Argument> > >, argparse::Argument const&)+0x574>
 564:	ebfffffe 	bl	0 <std::__throw_logic_error(char const*)>
 568:	01af286b 	.word	0x01af286b
	...
 574:	0000001c 	.word	0x0000001c

Disassembly of section .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_:

00000000 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   0:	e1500001 	cmp	r0, r1
   4:	01a0f00e 	moveq	pc, lr
   8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   c:	e1a08000 	mov	r8, r0
  10:	e4987008 	ldr	r7, [r8], #8
  14:	e5916004 	ldr	r6, [r1, #4]
  18:	e1580007 	cmp	r8, r7
  1c:	e1a05001 	mov	r5, r1
  20:	03a0100f 	moveq	r1, #15
  24:	15901008 	ldrne	r1, [r0, #8]
  28:	e1a04000 	mov	r4, r0
  2c:	e1510006 	cmp	r1, r6
  30:	e24dd008 	sub	sp, sp, #8
  34:	3a00000d 	bcc	70 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x70>
  38:	e3560000 	cmp	r6, #0
  3c:	0a000006 	beq	5c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5c>
  40:	e3560001 	cmp	r6, #1
  44:	e5951000 	ldr	r1, [r5]
  48:	0a000019 	beq	b4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb4>
  4c:	e1a00007 	mov	r0, r7
  50:	e1a02006 	mov	r2, r6
  54:	ebfffffe 	bl	0 <memcpy>
  58:	e5947000 	ldr	r7, [r4]
  5c:	e3a03000 	mov	r3, #0
  60:	e5846004 	str	r6, [r4, #4]
  64:	e7c73006 	strb	r3, [r7, r6]
  68:	e28dd008 	add	sp, sp, #8
  6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  70:	e28d0004 	add	r0, sp, #4
  74:	e58d6004 	str	r6, [sp, #4]
  78:	ebfffffe 	bl	0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  7c:	e5943000 	ldr	r3, [r4]
  80:	e1a07000 	mov	r7, r0
  84:	e1580003 	cmp	r8, r3
  88:	0a000003 	beq	9c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x9c>
  8c:	e5941008 	ldr	r1, [r4, #8]
  90:	e1a00003 	mov	r0, r3
  94:	e2811001 	add	r1, r1, #1
  98:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  9c:	e59d3004 	ldr	r3, [sp, #4]
  a0:	e3560000 	cmp	r6, #0
  a4:	e5847000 	str	r7, [r4]
  a8:	e5843008 	str	r3, [r4, #8]
  ac:	0affffea 	beq	5c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5c>
  b0:	eaffffe2 	b	40 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x40>
  b4:	e5d13000 	ldrb	r3, [r1]
  b8:	e5c73000 	strb	r3, [r7]
  bc:	e5947000 	ldr	r7, [r4]
  c0:	eaffffe5 	b	5c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x5c>

Disassembly of section .text._ZN8argparse14ArgumentParser11AddArgumentENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_S6_NS_8Argument6ActionE:

00000000 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e1a07003 	mov	r7, r3
   8:	e24dd05c 	sub	sp, sp, #92	; 0x5c
   c:	e5913004 	ldr	r3, [r1, #4]
  10:	e5ddc080 	ldrb	r12, [sp, #128]	; 0x80
  14:	e3530003 	cmp	r3, #3
  18:	e58dc004 	str	r12, [sp, #4]
  1c:	9a00009f 	bls	2a0 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x2a0>
  20:	e5913000 	ldr	r3, [r1]
  24:	e1a05001 	mov	r5, r1
  28:	e5d31000 	ldrb	r1, [r3]
  2c:	e351002d 	cmp	r1, #45	; 0x2d
  30:	1a00009a 	bne	2a0 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x2a0>
  34:	e5d31001 	ldrb	r1, [r3, #1]
  38:	e351002d 	cmp	r1, #45	; 0x2d
  3c:	1a000097 	bne	2a0 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x2a0>
  40:	e1a06000 	mov	r6, r0
  44:	e5d30002 	ldrb	r0, [r3, #2]
  48:	e1a0b002 	mov	r11, r2
  4c:	ebfffffe 	bl	0 <isdigit>
  50:	e3500000 	cmp	r0, #0
  54:	1a000091 	bne	2a0 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x2a0>
  58:	e59b3004 	ldr	r3, [r11, #4]
  5c:	e3530002 	cmp	r3, #2
  60:	1a00008e 	bne	2a0 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x2a0>
  64:	e59b3000 	ldr	r3, [r11]
  68:	e5d31000 	ldrb	r1, [r3]
  6c:	e351002d 	cmp	r1, #45	; 0x2d
  70:	1a00008a 	bne	2a0 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x2a0>
  74:	e5d30001 	ldrb	r0, [r3, #1]
  78:	ebfffffe 	bl	0 <isdigit>
  7c:	e2504000 	subs	r4, r0, #0
  80:	1a000086 	bne	2a0 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x2a0>
  84:	e1a01005 	mov	r1, r5
  88:	e28d000c 	add	r0, sp, #12
  8c:	e28d8014 	add	r8, sp, #20
  90:	e28d902c 	add	r9, sp, #44	; 0x2c
  94:	e28da044 	add	r10, sp, #68	; 0x44
  98:	e58d4010 	str	r4, [sp, #16]
  9c:	e5cd4014 	strb	r4, [sp, #20]
  a0:	e58d4028 	str	r4, [sp, #40]	; 0x28
  a4:	e5cd402c 	strb	r4, [sp, #44]	; 0x2c
  a8:	e58d4040 	str	r4, [sp, #64]	; 0x40
  ac:	e5cd4044 	strb	r4, [sp, #68]	; 0x44
  b0:	e58d800c 	str	r8, [sp, #12]
  b4:	e58d9024 	str	r9, [sp, #36]	; 0x24
  b8:	e58da03c 	str	r10, [sp, #60]	; 0x3c
  bc:	ebfffffe 	bl	0 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)>
  c0:	e1a0100b 	mov	r1, r11
  c4:	e28d0024 	add	r0, sp, #36	; 0x24
  c8:	ebfffffe 	bl	0 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)>
  cc:	e1a01007 	mov	r1, r7
  d0:	e28d003c 	add	r0, sp, #60	; 0x3c
  d4:	ebfffffe 	bl	0 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)>
  d8:	e59d3004 	ldr	r3, [sp, #4]
  dc:	e5965004 	ldr	r5, [r6, #4]
  e0:	e5cd3054 	strb	r3, [sp, #84]	; 0x54
  e4:	e5963008 	ldr	r3, [r6, #8]
  e8:	e1550003 	cmp	r5, r3
  ec:	0a000043 	beq	200 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x200>
  f0:	e2850008 	add	r0, r5, #8
  f4:	e5850000 	str	r0, [r5]
  f8:	e59db00c 	ldr	r11, [sp, #12]
  fc:	e59d7010 	ldr	r7, [sp, #16]
 100:	e27b3001 	rsbs	r3, r11, #1
 104:	e2672000 	rsb	r2, r7, #0
 108:	33a03000 	movcc	r3, #0
 10c:	e15b0002 	cmp	r11, r2
 110:	03a03000 	moveq	r3, #0
 114:	e3530000 	cmp	r3, #0
 118:	1a00008d 	bne	354 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x354>
 11c:	e357000f 	cmp	r7, #15
 120:	8a00004f 	bhi	264 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x264>
 124:	e3570001 	cmp	r7, #1
 128:	0a000059 	beq	294 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x294>
 12c:	e3570000 	cmp	r7, #0
 130:	1a000052 	bne	280 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x280>
 134:	e3a03000 	mov	r3, #0
 138:	e5857004 	str	r7, [r5, #4]
 13c:	e7c03007 	strb	r3, [r0, r7]
 140:	e2850020 	add	r0, r5, #32
 144:	e5850018 	str	r0, [r5, #24]
 148:	e59db024 	ldr	r11, [sp, #36]	; 0x24
 14c:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
 150:	e04bc003 	sub	r12, r11, r3
 154:	e27c3000 	rsbs	r3, r12, #0
 158:	e2672000 	rsb	r2, r7, #0
 15c:	e0a3300c 	adc	r3, r3, r12
 160:	e15b0002 	cmp	r11, r2
 164:	03a03000 	moveq	r3, #0
 168:	e3530000 	cmp	r3, #0
 16c:	1a000078 	bne	354 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x354>
 170:	e357000f 	cmp	r7, #15
 174:	8a00005b 	bhi	2e8 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x2e8>
 178:	e3570001 	cmp	r7, #1
 17c:	1a00004b 	bne	2b0 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x2b0>
 180:	e5db3000 	ldrb	r3, [r11]
 184:	e5c53020 	strb	r3, [r5, #32]
 188:	e3a03000 	mov	r3, #0
 18c:	e585701c 	str	r7, [r5, #28]
 190:	e7c03007 	strb	r3, [r0, r7]
 194:	e2850038 	add	r0, r5, #56	; 0x38
 198:	e5850030 	str	r0, [r5, #48]	; 0x30
 19c:	e59db03c 	ldr	r11, [sp, #60]	; 0x3c
 1a0:	e59d7040 	ldr	r7, [sp, #64]	; 0x40
 1a4:	e04b1003 	sub	r1, r11, r3
 1a8:	e2713000 	rsbs	r3, r1, #0
 1ac:	e2672000 	rsb	r2, r7, #0
 1b0:	e0a33001 	adc	r3, r3, r1
 1b4:	e15b0002 	cmp	r11, r2
 1b8:	03a03000 	moveq	r3, #0
 1bc:	e3530000 	cmp	r3, #0
 1c0:	1a000063 	bne	354 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x354>
 1c4:	e357000f 	cmp	r7, #15
 1c8:	8a000052 	bhi	318 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x318>
 1cc:	e3570001 	cmp	r7, #1
 1d0:	1a00003d 	bne	2cc <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x2cc>
 1d4:	e5db3000 	ldrb	r3, [r11]
 1d8:	e5c53038 	strb	r3, [r5, #56]	; 0x38
 1dc:	e3a03000 	mov	r3, #0
 1e0:	e5857034 	str	r7, [r5, #52]	; 0x34
 1e4:	e7c03007 	strb	r3, [r0, r7]
 1e8:	e5963004 	ldr	r3, [r6, #4]
 1ec:	e5dd2054 	ldrb	r2, [sp, #84]	; 0x54
 1f0:	e283304c 	add	r3, r3, #76	; 0x4c
 1f4:	e5c52048 	strb	r2, [r5, #72]	; 0x48
 1f8:	e5863004 	str	r3, [r6, #4]
 1fc:	ea000003 	b	210 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x210>
 200:	e1a01005 	mov	r1, r5
 204:	e1a00006 	mov	r0, r6
 208:	e28d200c 	add	r2, sp, #12
 20c:	ebfffffe 	bl	0 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)>
 210:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
 214:	e150000a 	cmp	r0, r10
 218:	0a000002 	beq	228 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x228>
 21c:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
 220:	e2811001 	add	r1, r1, #1
 224:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 228:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
 22c:	e1500009 	cmp	r0, r9
 230:	0a000002 	beq	240 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x240>
 234:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
 238:	e2811001 	add	r1, r1, #1
 23c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 240:	e59d000c 	ldr	r0, [sp, #12]
 244:	e1500008 	cmp	r0, r8
 248:	0a000002 	beq	258 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x258>
 24c:	e59d1014 	ldr	r1, [sp, #20]
 250:	e2811001 	add	r1, r1, #1
 254:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 258:	e1a00004 	mov	r0, r4
 25c:	e28dd05c 	add	sp, sp, #92	; 0x5c
 260:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 264:	e3570000 	cmp	r7, #0
 268:	ba000037 	blt	34c <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x34c>
 26c:	e2970001 	adds	r0, r7, #1
 270:	4a000034 	bmi	348 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x348>
 274:	ebfffffe 	bl	0 <operator new(unsigned int)>
 278:	e5857008 	str	r7, [r5, #8]
 27c:	e5850000 	str	r0, [r5]
 280:	e1a0100b 	mov	r1, r11
 284:	e1a02007 	mov	r2, r7
 288:	ebfffffe 	bl	0 <memcpy>
 28c:	e5950000 	ldr	r0, [r5]
 290:	eaffffa7 	b	134 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x134>
 294:	e5db3000 	ldrb	r3, [r11]
 298:	e5c53008 	strb	r3, [r5, #8]
 29c:	eaffffa4 	b	134 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x134>
 2a0:	e3e0407d 	mvn	r4, #125	; 0x7d
 2a4:	e1a00004 	mov	r0, r4
 2a8:	e28dd05c 	add	sp, sp, #92	; 0x5c
 2ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 2b0:	e3570000 	cmp	r7, #0
 2b4:	0affffb3 	beq	188 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x188>
 2b8:	e1a0100b 	mov	r1, r11
 2bc:	e1a02007 	mov	r2, r7
 2c0:	ebfffffe 	bl	0 <memcpy>
 2c4:	e5950018 	ldr	r0, [r5, #24]
 2c8:	eaffffae 	b	188 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x188>
 2cc:	e3570000 	cmp	r7, #0
 2d0:	0affffc1 	beq	1dc <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x1dc>
 2d4:	e1a0100b 	mov	r1, r11
 2d8:	e1a02007 	mov	r2, r7
 2dc:	ebfffffe 	bl	0 <memcpy>
 2e0:	e5950030 	ldr	r0, [r5, #48]	; 0x30
 2e4:	eaffffbc 	b	1dc <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x1dc>
 2e8:	e3570000 	cmp	r7, #0
 2ec:	ba000016 	blt	34c <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x34c>
 2f0:	e2970001 	adds	r0, r7, #1
 2f4:	4a000013 	bmi	348 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x348>
 2f8:	ebfffffe 	bl	0 <operator new(unsigned int)>
 2fc:	e1a0100b 	mov	r1, r11
 300:	e1a02007 	mov	r2, r7
 304:	e5857020 	str	r7, [r5, #32]
 308:	e5850018 	str	r0, [r5, #24]
 30c:	ebfffffe 	bl	0 <memcpy>
 310:	e5950018 	ldr	r0, [r5, #24]
 314:	eaffff9b 	b	188 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x188>
 318:	e3570000 	cmp	r7, #0
 31c:	ba00000a 	blt	34c <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x34c>
 320:	e2970001 	adds	r0, r7, #1
 324:	4a000007 	bmi	348 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x348>
 328:	ebfffffe 	bl	0 <operator new(unsigned int)>
 32c:	e1a0100b 	mov	r1, r11
 330:	e1a02007 	mov	r2, r7
 334:	e5857038 	str	r7, [r5, #56]	; 0x38
 338:	e5850030 	str	r0, [r5, #48]	; 0x30
 33c:	ebfffffe 	bl	0 <memcpy>
 340:	e5950030 	ldr	r0, [r5, #48]	; 0x30
 344:	eaffffa4 	b	1dc <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x1dc>
 348:	ebfffffe 	bl	0 <std::__throw_bad_alloc()>
 34c:	e59f0008 	ldr	r0, [pc, #8]	; 35c <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x35c>
 350:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 354:	e59f0004 	ldr	r0, [pc, #4]	; 360 <argparse::ArgumentParser::AddArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument::Action)+0x360>
 358:	ebfffffe 	bl	0 <std::__throw_logic_error(char const*)>
 35c:	00000000 	.word	0x00000000
 360:	0000001c 	.word	0x0000001c

Disassembly of section .text._ZN8argparse14ArgumentParserC2Ev:

00000000 <argparse::ArgumentParser::ArgumentParser()>:
   0:	e59f3124 	ldr	r3, [pc, #292]	; 12c <argparse::ArgumentParser::ArgumentParser()+0x12c>
   4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   8:	e1a04000 	mov	r4, r0
   c:	e8930003 	ldm	r3, {r0, r1}
  10:	e3a03006 	mov	r3, #6
  14:	e24dd050 	sub	sp, sp, #80	; 0x50
  18:	e58d300c 	str	r3, [sp, #12]
  1c:	e3a03002 	mov	r3, #2
  20:	e3a05000 	mov	r5, #0
  24:	e58d3024 	str	r3, [sp, #36]	; 0x24
  28:	e2843010 	add	r3, r4, #16
  2c:	e5843018 	str	r3, [r4, #24]
  30:	e584301c 	str	r3, [r4, #28]
  34:	e59f30f4 	ldr	r3, [pc, #244]	; 130 <argparse::ArgumentParser::ArgumentParser()+0x130>
  38:	e3a0701f 	mov	r7, #31
  3c:	e1cd32b8 	strh	r3, [sp, #40]	; 0x28
  40:	e284302c 	add	r3, r4, #44	; 0x2c
  44:	e5843024 	str	r3, [r4, #36]	; 0x24
  48:	e58d0010 	str	r0, [sp, #16]
  4c:	e28d8040 	add	r8, sp, #64	; 0x40
  50:	e3a00020 	mov	r0, #32
  54:	e28d9010 	add	r9, sp, #16
  58:	e5845000 	str	r5, [r4]
  5c:	e5845004 	str	r5, [r4, #4]
  60:	e5845008 	str	r5, [r4, #8]
  64:	e5c45010 	strb	r5, [r4, #16]
  68:	e5845014 	str	r5, [r4, #20]
  6c:	e5845020 	str	r5, [r4, #32]
  70:	e5845028 	str	r5, [r4, #40]	; 0x28
  74:	e5c4502c 	strb	r5, [r4, #44]	; 0x2c
  78:	e5c4503c 	strb	r5, [r4, #60]	; 0x3c
  7c:	e28da028 	add	r10, sp, #40	; 0x28
  80:	e1cd11b4 	strh	r1, [sp, #20]
  84:	e58d9008 	str	r9, [sp, #8]
  88:	e5cd5016 	strb	r5, [sp, #22]
  8c:	e5cd502a 	strb	r5, [sp, #42]	; 0x2a
  90:	e58d8038 	str	r8, [sp, #56]	; 0x38
  94:	e58da020 	str	r10, [sp, #32]
  98:	ebfffffe 	bl	0 <operator new(unsigned int)>
  9c:	e1a02007 	mov	r2, r7
  a0:	e59f108c 	ldr	r1, [pc, #140]	; 134 <argparse::ArgumentParser::ArgumentParser()+0x134>
  a4:	e1a06000 	mov	r6, r0
  a8:	e58d7040 	str	r7, [sp, #64]	; 0x40
  ac:	e58d0038 	str	r0, [sp, #56]	; 0x38
  b0:	ebfffffe 	bl	0 <memcpy>
  b4:	e3a00003 	mov	r0, #3
  b8:	e28d3038 	add	r3, sp, #56	; 0x38
  bc:	e58d0000 	str	r0, [sp]
  c0:	e28d2020 	add	r2, sp, #32
  c4:	e1a00004 	mov	r0, r4
  c8:	e28d1008 	add	r1, sp, #8
  cc:	e5c6501f 	strb	r5, [r6, #31]
  d0:	e58d703c 	str	r7, [sp, #60]	; 0x3c
  d4:	ebfffffe 	bl	0 <argparse::ArgumentParser::ArgumentParser()>
  d8:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
  dc:	e1500008 	cmp	r0, r8
  e0:	0a000002 	beq	f0 <argparse::ArgumentParser::ArgumentParser()+0xf0>
  e4:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
  e8:	e2811001 	add	r1, r1, #1
  ec:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  f0:	e59d0020 	ldr	r0, [sp, #32]
  f4:	e150000a 	cmp	r0, r10
  f8:	0a000002 	beq	108 <argparse::ArgumentParser::ArgumentParser()+0x108>
  fc:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
 100:	e2811001 	add	r1, r1, #1
 104:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 108:	e59d0008 	ldr	r0, [sp, #8]
 10c:	e1500009 	cmp	r0, r9
 110:	0a000002 	beq	120 <argparse::ArgumentParser::ArgumentParser()+0x120>
 114:	e59d1010 	ldr	r1, [sp, #16]
 118:	e2811001 	add	r1, r1, #1
 11c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 120:	e1a00004 	mov	r0, r4
 124:	e28dd050 	add	sp, sp, #80	; 0x50
 128:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 12c:	00000000 	.word	0x00000000
 130:	0000682d 	.word	0x0000682d
 134:	00000008 	.word	0x00000008

Disassembly of section .text._ZN8argparse14ArgumentParser11_SearchNameENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_8ArgumentE:

00000000 <argparse::ArgumentParser::_SearchName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e8900090 	ldm	r0, {r4, r7}
   8:	e1570004 	cmp	r7, r4
   c:	0a00001e 	beq	8c <argparse::ArgumentParser::_SearchName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)+0x8c>
  10:	e1a06002 	mov	r6, r2
  14:	e5918000 	ldr	r8, [r1]
  18:	e5915004 	ldr	r5, [r1, #4]
  1c:	ea000002 	b	2c <argparse::ArgumentParser::_SearchName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)+0x2c>
  20:	e284404c 	add	r4, r4, #76	; 0x4c
  24:	e1570004 	cmp	r7, r4
  28:	0a000017 	beq	8c <argparse::ArgumentParser::_SearchName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)+0x8c>
  2c:	e5943004 	ldr	r3, [r4, #4]
  30:	e1530005 	cmp	r3, r5
  34:	1afffff9 	bne	20 <argparse::ArgumentParser::_SearchName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)+0x20>
  38:	e3550000 	cmp	r5, #0
  3c:	e5940000 	ldr	r0, [r4]
  40:	0a000004 	beq	58 <argparse::ArgumentParser::_SearchName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)+0x58>
  44:	e1a02005 	mov	r2, r5
  48:	e1a01008 	mov	r1, r8
  4c:	ebfffffe 	bl	0 <memcmp>
  50:	e3500000 	cmp	r0, #0
  54:	1afffff1 	bne	20 <argparse::ArgumentParser::_SearchName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)+0x20>
  58:	e1a01004 	mov	r1, r4
  5c:	e1a00006 	mov	r0, r6
  60:	ebfffffe 	bl	0 <argparse::ArgumentParser::_SearchName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)>
  64:	e2841018 	add	r1, r4, #24
  68:	e2860018 	add	r0, r6, #24
  6c:	ebfffffe 	bl	0 <argparse::ArgumentParser::_SearchName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)>
  70:	e2860030 	add	r0, r6, #48	; 0x30
  74:	e2841030 	add	r1, r4, #48	; 0x30
  78:	ebfffffe 	bl	0 <argparse::ArgumentParser::_SearchName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)>
  7c:	e5d43048 	ldrb	r3, [r4, #72]	; 0x48
  80:	e3a00001 	mov	r0, #1
  84:	e5c63048 	strb	r3, [r6, #72]	; 0x48
  88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  8c:	e3a00000 	mov	r0, #0
  90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

Disassembly of section .text._ZN8argparse14ArgumentParser17_SearchShortAliasENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERNS_8ArgumentE:

00000000 <argparse::ArgumentParser::_SearchShortAlias(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e8900090 	ldm	r0, {r4, r7}
   8:	e1570004 	cmp	r7, r4
   c:	0a00001e 	beq	8c <argparse::ArgumentParser::_SearchShortAlias(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)+0x8c>
  10:	e1a06002 	mov	r6, r2
  14:	e5918000 	ldr	r8, [r1]
  18:	e5915004 	ldr	r5, [r1, #4]
  1c:	ea000002 	b	2c <argparse::ArgumentParser::_SearchShortAlias(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)+0x2c>
  20:	e284404c 	add	r4, r4, #76	; 0x4c
  24:	e1570004 	cmp	r7, r4
  28:	0a000017 	beq	8c <argparse::ArgumentParser::_SearchShortAlias(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)+0x8c>
  2c:	e594301c 	ldr	r3, [r4, #28]
  30:	e1530005 	cmp	r3, r5
  34:	1afffff9 	bne	20 <argparse::ArgumentParser::_SearchShortAlias(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)+0x20>
  38:	e3550000 	cmp	r5, #0
  3c:	e5940018 	ldr	r0, [r4, #24]
  40:	0a000004 	beq	58 <argparse::ArgumentParser::_SearchShortAlias(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)+0x58>
  44:	e1a02005 	mov	r2, r5
  48:	e1a01008 	mov	r1, r8
  4c:	ebfffffe 	bl	0 <memcmp>
  50:	e3500000 	cmp	r0, #0
  54:	1afffff1 	bne	20 <argparse::ArgumentParser::_SearchShortAlias(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)+0x20>
  58:	e1a01004 	mov	r1, r4
  5c:	e1a00006 	mov	r0, r6
  60:	ebfffffe 	bl	0 <argparse::ArgumentParser::_SearchShortAlias(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)>
  64:	e2841018 	add	r1, r4, #24
  68:	e2860018 	add	r0, r6, #24
  6c:	ebfffffe 	bl	0 <argparse::ArgumentParser::_SearchShortAlias(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)>
  70:	e2860030 	add	r0, r6, #48	; 0x30
  74:	e2841030 	add	r1, r4, #48	; 0x30
  78:	ebfffffe 	bl	0 <argparse::ArgumentParser::_SearchShortAlias(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Argument&)>
  7c:	e5d43048 	ldrb	r3, [r4, #72]	; 0x48
  80:	e3a00001 	mov	r0, #1
  84:	e5c63048 	strb	r3, [r6, #72]	; 0x48
  88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  8c:	e3a00000 	mov	r0, #0
  90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

Disassembly of section .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj:

00000000 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned int, unsigned int, char const*, unsigned int)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e1a09000 	mov	r9, r0
   8:	e24dd00c 	sub	sp, sp, #12
   c:	e59db030 	ldr	r11, [sp, #48]	; 0x30
  10:	e5907004 	ldr	r7, [r0, #4]
  14:	e1a0a003 	mov	r10, r3
  18:	e04b3002 	sub	r3, r11, r2
  1c:	e0833007 	add	r3, r3, r7
  20:	e58d3004 	str	r3, [sp, #4]
  24:	e4993008 	ldr	r3, [r9], #8
  28:	e1a05001 	mov	r5, r1
  2c:	e1590003 	cmp	r9, r3
  30:	e0816002 	add	r6, r1, r2
  34:	e1a04000 	mov	r4, r0
  38:	15901008 	ldrne	r1, [r0, #8]
  3c:	03a0100f 	moveq	r1, #15
  40:	e28d0004 	add	r0, sp, #4
  44:	ebfffffe 	bl	0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned int, unsigned int, char const*, unsigned int)>
  48:	e3550000 	cmp	r5, #0
  4c:	e1a08000 	mov	r8, r0
  50:	e0477006 	sub	r7, r7, r6
  54:	0a000004 	beq	6c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned int, unsigned int, char const*, unsigned int)+0x6c>
  58:	e3550001 	cmp	r5, #1
  5c:	e5941000 	ldr	r1, [r4]
  60:	0a000021 	beq	ec <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned int, unsigned int, char const*, unsigned int)+0xec>
  64:	e1a02005 	mov	r2, r5
  68:	ebfffffe 	bl	0 <memcpy>
  6c:	e35a0000 	cmp	r10, #0
  70:	135b0000 	cmpne	r11, #0
  74:	0a000005 	beq	90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned int, unsigned int, char const*, unsigned int)+0x90>
  78:	e35b0001 	cmp	r11, #1
  7c:	e0880005 	add	r0, r8, r5
  80:	0a00001f 	beq	104 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned int, unsigned int, char const*, unsigned int)+0x104>
  84:	e1a0100a 	mov	r1, r10
  88:	e1a0200b 	mov	r2, r11
  8c:	ebfffffe 	bl	0 <memcpy>
  90:	e3570000 	cmp	r7, #0
  94:	1a00000b 	bne	c8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned int, unsigned int, char const*, unsigned int)+0xc8>
  98:	e594a000 	ldr	r10, [r4]
  9c:	e159000a 	cmp	r9, r10
  a0:	0a000003 	beq	b4 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned int, unsigned int, char const*, unsigned int)+0xb4>
  a4:	e5941008 	ldr	r1, [r4, #8]
  a8:	e1a0000a 	mov	r0, r10
  ac:	e2811001 	add	r1, r1, #1
  b0:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  b4:	e59d3004 	ldr	r3, [sp, #4]
  b8:	e5848000 	str	r8, [r4]
  bc:	e5843008 	str	r3, [r4, #8]
  c0:	e28dd00c 	add	sp, sp, #12
  c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  c8:	e594a000 	ldr	r10, [r4]
  cc:	e085500b 	add	r5, r5, r11
  d0:	e3570001 	cmp	r7, #1
  d4:	e0880005 	add	r0, r8, r5
  d8:	e08a1006 	add	r1, r10, r6
  dc:	0a000005 	beq	f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned int, unsigned int, char const*, unsigned int)+0xf8>
  e0:	e1a02007 	mov	r2, r7
  e4:	ebfffffe 	bl	0 <memcpy>
  e8:	eaffffeb 	b	9c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned int, unsigned int, char const*, unsigned int)+0x9c>
  ec:	e5d13000 	ldrb	r3, [r1]
  f0:	e5c03000 	strb	r3, [r0]
  f4:	eaffffdc 	b	6c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned int, unsigned int, char const*, unsigned int)+0x6c>
  f8:	e7da3006 	ldrb	r3, [r10, r6]
  fc:	e7c83005 	strb	r3, [r8, r5]
 100:	eaffffe5 	b	9c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned int, unsigned int, char const*, unsigned int)+0x9c>
 104:	e5da3000 	ldrb	r3, [r10]
 108:	e7c83005 	strb	r3, [r8, r5]
 10c:	eaffffdf 	b	90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned int, unsigned int, char const*, unsigned int)+0x90>

Disassembly of section .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj.isra.0:

00000000 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e1a08003 	mov	r8, r3
   8:	e24dd00c 	sub	sp, sp, #12
   c:	e5903004 	ldr	r3, [r0, #4]
  10:	e1a05002 	mov	r5, r2
  14:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  18:	e2422106 	sub	r2, r2, #-2147483647	; 0x80000001
  1c:	e0422003 	sub	r2, r2, r3
  20:	e1520007 	cmp	r2, r7
  24:	3a000091 	bcc	270 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x270>
  28:	e1a02000 	mov	r2, r0
  2c:	e1a04000 	mov	r4, r0
  30:	e4920008 	ldr	r0, [r2], #8
  34:	e047b005 	sub	r11, r7, r5
  38:	e1500002 	cmp	r0, r2
  3c:	03a0200f 	moveq	r2, #15
  40:	15942008 	ldrne	r2, [r4, #8]
  44:	e083900b 	add	r9, r3, r11
  48:	e1590002 	cmp	r9, r2
  4c:	8a00002b 	bhi	100 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x100>
  50:	e085a001 	add	r10, r5, r1
  54:	e1500008 	cmp	r0, r8
  58:	e0806001 	add	r6, r0, r1
  5c:	e043a00a 	sub	r10, r3, r10
  60:	9a000010 	bls	a8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0xa8>
  64:	e35a0000 	cmp	r10, #0
  68:	11550007 	cmpne	r5, r7
  6c:	0a000005 	beq	88 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x88>
  70:	e35a0001 	cmp	r10, #1
  74:	e0860007 	add	r0, r6, r7
  78:	e0861005 	add	r1, r6, r5
  7c:	0a000029 	beq	128 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x128>
  80:	e1a0200a 	mov	r2, r10
  84:	ebfffffe 	bl	0 <memmove>
  88:	e3570000 	cmp	r7, #0
  8c:	1a000013 	bne	e0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0xe0>
  90:	e5940000 	ldr	r0, [r4]
  94:	e3a03000 	mov	r3, #0
  98:	e5849004 	str	r9, [r4, #4]
  9c:	e7c03009 	strb	r3, [r0, r9]
  a0:	e28dd00c 	add	sp, sp, #12
  a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  a8:	e0803003 	add	r3, r0, r3
  ac:	e1580003 	cmp	r8, r3
  b0:	8affffeb 	bhi	64 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x64>
  b4:	e2473001 	sub	r3, r7, #1
  b8:	e1550003 	cmp	r5, r3
  bc:	9a00001e 	bls	13c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x13c>
  c0:	e3570001 	cmp	r7, #1
  c4:	0a00001a 	beq	134 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x134>
  c8:	e3570000 	cmp	r7, #0
  cc:	1a000041 	bne	1d8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x1d8>
  d0:	e3550000 	cmp	r5, #0
  d4:	135a0000 	cmpne	r10, #0
  d8:	1a00001a 	bne	148 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x148>
  dc:	eaffffec 	b	94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x94>
  e0:	e3570001 	cmp	r7, #1
  e4:	0a00000b 	beq	118 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x118>
  e8:	e1a02007 	mov	r2, r7
  ec:	e1a01008 	mov	r1, r8
  f0:	e1a00006 	mov	r0, r6
  f4:	ebfffffe 	bl	0 <memcpy>
  f8:	e5940000 	ldr	r0, [r4]
  fc:	eaffffe4 	b	94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x94>
 100:	e1a03008 	mov	r3, r8
 104:	e1a02005 	mov	r2, r5
 108:	e1a00004 	mov	r0, r4
 10c:	e58d7000 	str	r7, [sp]
 110:	ebfffffe 	bl	0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]>
 114:	eaffffdd 	b	90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x90>
 118:	e5d83000 	ldrb	r3, [r8]
 11c:	e5c63000 	strb	r3, [r6]
 120:	e5940000 	ldr	r0, [r4]
 124:	eaffffda 	b	94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x94>
 128:	e7d63005 	ldrb	r3, [r6, r5]
 12c:	e7c63007 	strb	r3, [r6, r7]
 130:	eaffffd4 	b	88 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x88>
 134:	e5d83000 	ldrb	r3, [r8]
 138:	e5c63000 	strb	r3, [r6]
 13c:	e35a0000 	cmp	r10, #0
 140:	11550007 	cmpne	r5, r7
 144:	0a000005 	beq	160 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x160>
 148:	e35a0001 	cmp	r10, #1
 14c:	e0860007 	add	r0, r6, r7
 150:	e0861005 	add	r1, r6, r5
 154:	0a000024 	beq	1ec <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x1ec>
 158:	e1a0200a 	mov	r2, r10
 15c:	ebfffffe 	bl	0 <memmove>
 160:	e1550007 	cmp	r5, r7
 164:	2affffc9 	bcs	90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x90>
 168:	e0865005 	add	r5, r6, r5
 16c:	e0883007 	add	r3, r8, r7
 170:	e1550003 	cmp	r5, r3
 174:	2a00000d 	bcs	1b0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x1b0>
 178:	e1580005 	cmp	r8, r5
 17c:	3a00001d 	bcc	1f8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x1f8>
 180:	e0488006 	sub	r8, r8, r6
 184:	e088800b 	add	r8, r8, r11
 188:	e3570001 	cmp	r7, #1
 18c:	e0861008 	add	r1, r6, r8
 190:	0a000032 	beq	260 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x260>
 194:	e3570000 	cmp	r7, #0
 198:	0affffbc 	beq	90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x90>
 19c:	e1a02007 	mov	r2, r7
 1a0:	e1a00006 	mov	r0, r6
 1a4:	ebfffffe 	bl	0 <memcpy>
 1a8:	e5940000 	ldr	r0, [r4]
 1ac:	eaffffb8 	b	94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x94>
 1b0:	e3570001 	cmp	r7, #1
 1b4:	0affffd7 	beq	118 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x118>
 1b8:	e3570000 	cmp	r7, #0
 1bc:	0affffb3 	beq	90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x90>
 1c0:	e1a02007 	mov	r2, r7
 1c4:	e1a01008 	mov	r1, r8
 1c8:	e1a00006 	mov	r0, r6
 1cc:	ebfffffe 	bl	0 <memmove>
 1d0:	e5940000 	ldr	r0, [r4]
 1d4:	eaffffae 	b	94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x94>
 1d8:	e1a02007 	mov	r2, r7
 1dc:	e1a01008 	mov	r1, r8
 1e0:	e1a00006 	mov	r0, r6
 1e4:	ebfffffe 	bl	0 <memmove>
 1e8:	eaffffd3 	b	13c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x13c>
 1ec:	e7d63005 	ldrb	r3, [r6, r5]
 1f0:	e7c63007 	strb	r3, [r6, r7]
 1f4:	eaffffd9 	b	160 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x160>
 1f8:	e0455008 	sub	r5, r5, r8
 1fc:	e3550001 	cmp	r5, #1
 200:	0a00000f 	beq	244 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x244>
 204:	e3550000 	cmp	r5, #0
 208:	0a000003 	beq	21c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x21c>
 20c:	e1a01008 	mov	r1, r8
 210:	e1a02005 	mov	r2, r5
 214:	e1a00006 	mov	r0, r6
 218:	ebfffffe 	bl	0 <memmove>
 21c:	e0472005 	sub	r2, r7, r5
 220:	e3520001 	cmp	r2, #1
 224:	e0860005 	add	r0, r6, r5
 228:	e0861007 	add	r1, r6, r7
 22c:	0a000007 	beq	250 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x250>
 230:	e3520000 	cmp	r2, #0
 234:	0affff95 	beq	90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x90>
 238:	ebfffffe 	bl	0 <memcpy>
 23c:	e5940000 	ldr	r0, [r4]
 240:	eaffff93 	b	94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x94>
 244:	e5d83000 	ldrb	r3, [r8]
 248:	e5c63000 	strb	r3, [r6]
 24c:	eafffff2 	b	21c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x21c>
 250:	e7d63007 	ldrb	r3, [r6, r7]
 254:	e7c63005 	strb	r3, [r6, r5]
 258:	e5940000 	ldr	r0, [r4]
 25c:	eaffff8c 	b	94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x94>
 260:	e7d63008 	ldrb	r3, [r6, r8]
 264:	e5c63000 	strb	r3, [r6]
 268:	e5940000 	ldr	r0, [r4]
 26c:	eaffff88 	b	94 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x94>
 270:	e59f0000 	ldr	r0, [pc]	; 278 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned int, unsigned int, char const*, unsigned int) [clone .isra.0]+0x278>
 274:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 278:	00000000 	.word	0x00000000

Disassembly of section .text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8argparse3VarEESt10_Select1stISA_ESt4lessIS5_ESaISA_EE24_M_get_insert_unique_posERS7_:

00000000 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e5915008 	ldr	r5, [r1, #8]
   8:	e24dd00c 	sub	sp, sp, #12
   c:	e3550000 	cmp	r5, #0
  10:	e1a0a001 	mov	r10, r1
  14:	e1a08000 	mov	r8, r0
  18:	e58d2004 	str	r2, [sp, #4]
  1c:	02815004 	addeq	r5, r1, #4
  20:	0a000032 	beq	f0 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf0>
  24:	e59d3004 	ldr	r3, [sp, #4]
  28:	e593b000 	ldr	r11, [r3]
  2c:	e5936004 	ldr	r6, [r3, #4]
  30:	ea00000c 	b	68 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x68>
  34:	e1a02009 	mov	r2, r9
  38:	e1a01007 	mov	r1, r7
  3c:	e1a0000b 	mov	r0, r11
  40:	ebfffffe 	bl	0 <memcmp>
  44:	e3500000 	cmp	r0, #0
  48:	0a00000d 	beq	84 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x84>
  4c:	e3500000 	cmp	r0, #0
  50:	ba00000f 	blt	94 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x94>
  54:	e595300c 	ldr	r3, [r5, #12]
  58:	e3a01000 	mov	r1, #0
  5c:	e3530000 	cmp	r3, #0
  60:	0a00000f 	beq	a4 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4>
  64:	e1a05003 	mov	r5, r3
  68:	e5954014 	ldr	r4, [r5, #20]
  6c:	e5957010 	ldr	r7, [r5, #16]
  70:	e1560004 	cmp	r6, r4
  74:	31a09006 	movcc	r9, r6
  78:	21a09004 	movcs	r9, r4
  7c:	e3590000 	cmp	r9, #0
  80:	1affffeb 	bne	34 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x34>
  84:	e0560004 	subs	r0, r6, r4
  88:	0afffff1 	beq	54 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54>
  8c:	e3500000 	cmp	r0, #0
  90:	aaffffef 	bge	54 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x54>
  94:	e5953008 	ldr	r3, [r5, #8]
  98:	e3a01001 	mov	r1, #1
  9c:	e3530000 	cmp	r3, #0
  a0:	1affffef 	bne	64 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x64>
  a4:	e3510000 	cmp	r1, #0
  a8:	01a0a005 	moveq	r10, r5
  ac:	1a00000f 	bne	f0 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf0>
  b0:	e3590000 	cmp	r9, #0
  b4:	0a000005 	beq	d0 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd0>
  b8:	e1a02009 	mov	r2, r9
  bc:	e1a0100b 	mov	r1, r11
  c0:	e1a00007 	mov	r0, r7
  c4:	ebfffffe 	bl	0 <memcmp>
  c8:	e3500000 	cmp	r0, #0
  cc:	1a000019 	bne	138 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x138>
  d0:	e0540006 	subs	r0, r4, r6
  d4:	1a000017 	bne	138 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x138>
  d8:	e3a03000 	mov	r3, #0
  dc:	e5885000 	str	r5, [r8]
  e0:	e5883004 	str	r3, [r8, #4]
  e4:	e1a00008 	mov	r0, r8
  e8:	e28dd00c 	add	sp, sp, #12
  ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  f0:	e59a300c 	ldr	r3, [r10, #12]
  f4:	e1530005 	cmp	r3, r5
  f8:	03a03000 	moveq	r3, #0
  fc:	08880028 	stmeq	r8, {r3, r5}
 100:	0afffff7 	beq	e4 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe4>
 104:	e1a00005 	mov	r0, r5
 108:	ebfffffe 	bl	0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)>
 10c:	e59d3004 	ldr	r3, [sp, #4]
 110:	e5904014 	ldr	r4, [r0, #20]
 114:	e5936004 	ldr	r6, [r3, #4]
 118:	e1a0a005 	mov	r10, r5
 11c:	e1540006 	cmp	r4, r6
 120:	e1a05000 	mov	r5, r0
 124:	31a09004 	movcc	r9, r4
 128:	21a09006 	movcs	r9, r6
 12c:	e593b000 	ldr	r11, [r3]
 130:	e5907010 	ldr	r7, [r0, #16]
 134:	eaffffdd 	b	b0 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb0>
 138:	e3500000 	cmp	r0, #0
 13c:	aaffffe5 	bge	d8 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd8>
 140:	e3a03000 	mov	r3, #0
 144:	e1a00008 	mov	r0, r8
 148:	e8880408 	stm	r8, {r3, r10}
 14c:	e28dd00c 	add	sp, sp, #12
 150:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

Disassembly of section .text._ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_N8argparse3VarEESt10_Select1stISA_ESt4lessIS5_ESaISA_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISA_ERS7_:

00000000 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e1a07003 	mov	r7, r3
   8:	e2813004 	add	r3, r1, #4
   c:	e1520003 	cmp	r2, r3
  10:	e1a06001 	mov	r6, r1
  14:	e1a05000 	mov	r5, r0
  18:	e24dd00c 	sub	sp, sp, #12
  1c:	0a00005b 	beq	190 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x190>
  20:	e5978004 	ldr	r8, [r7, #4]
  24:	e5929014 	ldr	r9, [r2, #20]
  28:	e1a04002 	mov	r4, r2
  2c:	e1580009 	cmp	r8, r9
  30:	31a0a008 	movcc	r10, r8
  34:	21a0a009 	movcs	r10, r9
  38:	e35a0000 	cmp	r10, #0
  3c:	e597b000 	ldr	r11, [r7]
  40:	e5921010 	ldr	r1, [r2, #16]
  44:	0a000016 	beq	a4 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4>
  48:	e1a0200a 	mov	r2, r10
  4c:	e1a0000b 	mov	r0, r11
  50:	e58d1004 	str	r1, [sp, #4]
  54:	ebfffffe 	bl	0 <memcmp>
  58:	e3500000 	cmp	r0, #0
  5c:	e59d1004 	ldr	r1, [sp, #4]
  60:	1a000061 	bne	1ec <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ec>
  64:	e0580009 	subs	r0, r8, r9
  68:	1a00005f 	bne	1ec <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1ec>
  6c:	e1a00001 	mov	r0, r1
  70:	e1a0200a 	mov	r2, r10
  74:	e1a0100b 	mov	r1, r11
  78:	ebfffffe 	bl	0 <memcmp>
  7c:	e3500000 	cmp	r0, #0
  80:	1a000025 	bne	11c <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11c>
  84:	e0590008 	subs	r0, r9, r8
  88:	1a000023 	bne	11c <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x11c>
  8c:	e3a03000 	mov	r3, #0
  90:	e5854000 	str	r4, [r5]
  94:	e5853004 	str	r3, [r5, #4]
  98:	e1a00005 	mov	r0, r5
  9c:	e28dd00c 	add	sp, sp, #12
  a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  a4:	e0483009 	sub	r3, r8, r9
  a8:	e3530000 	cmp	r3, #0
  ac:	0afffff4 	beq	84 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x84>
  b0:	aafffff3 	bge	84 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x84>
  b4:	e596300c 	ldr	r3, [r6, #12]
  b8:	e1530004 	cmp	r3, r4
  bc:	0a000057 	beq	220 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x220>
  c0:	e1a00004 	mov	r0, r4
  c4:	ebfffffe 	bl	0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)>
  c8:	e590a014 	ldr	r10, [r0, #20]
  cc:	e1a09000 	mov	r9, r0
  d0:	e15a0008 	cmp	r10, r8
  d4:	31a0200a 	movcc	r2, r10
  d8:	21a02008 	movcs	r2, r8
  dc:	e3520000 	cmp	r2, #0
  e0:	e5900010 	ldr	r0, [r0, #16]
  e4:	0a000043 	beq	1f8 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1f8>
  e8:	e1a0100b 	mov	r1, r11
  ec:	ebfffffe 	bl	0 <memcmp>
  f0:	e3500000 	cmp	r0, #0
  f4:	0a00003f 	beq	1f8 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1f8>
  f8:	e3500000 	cmp	r0, #0
  fc:	ba000044 	blt	214 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x214>
 100:	e1a02007 	mov	r2, r7
 104:	e1a01006 	mov	r1, r6
 108:	e1a00005 	mov	r0, r5
 10c:	ebfffffe 	bl	0 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
 110:	e1a00005 	mov	r0, r5
 114:	e28dd00c 	add	sp, sp, #12
 118:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 11c:	e3500000 	cmp	r0, #0
 120:	aaffffd9 	bge	8c <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8c>
 124:	e5963010 	ldr	r3, [r6, #16]
 128:	e1530004 	cmp	r3, r4
 12c:	0a000040 	beq	234 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x234>
 130:	e1a00004 	mov	r0, r4
 134:	ebfffffe 	bl	0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)>
 138:	e590a014 	ldr	r10, [r0, #20]
 13c:	e1a09000 	mov	r9, r0
 140:	e15a0008 	cmp	r10, r8
 144:	31a0200a 	movcc	r2, r10
 148:	21a02008 	movcs	r2, r8
 14c:	e3520000 	cmp	r2, #0
 150:	e5901010 	ldr	r1, [r0, #16]
 154:	0a000003 	beq	168 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x168>
 158:	e1a0000b 	mov	r0, r11
 15c:	ebfffffe 	bl	0 <memcmp>
 160:	e3500000 	cmp	r0, #0
 164:	1a000001 	bne	170 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x170>
 168:	e058000a 	subs	r0, r8, r10
 16c:	0affffe3 	beq	100 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x100>
 170:	e3500000 	cmp	r0, #0
 174:	aaffffe1 	bge	100 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x100>
 178:	e594300c 	ldr	r3, [r4, #12]
 17c:	e3530000 	cmp	r3, #0
 180:	15859000 	strne	r9, [r5]
 184:	15859004 	strne	r9, [r5, #4]
 188:	08850018 	stmeq	r5, {r3, r4}
 18c:	eaffffc1 	b	98 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x98>
 190:	e5913014 	ldr	r3, [r1, #20]
 194:	e3530000 	cmp	r3, #0
 198:	0affffd8 	beq	100 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x100>
 19c:	e5919010 	ldr	r9, [r1, #16]
 1a0:	e5974004 	ldr	r4, [r7, #4]
 1a4:	e5998014 	ldr	r8, [r9, #20]
 1a8:	e5990010 	ldr	r0, [r9, #16]
 1ac:	e1580004 	cmp	r8, r4
 1b0:	31a02008 	movcc	r2, r8
 1b4:	21a02004 	movcs	r2, r4
 1b8:	e3520000 	cmp	r2, #0
 1bc:	e5971000 	ldr	r1, [r7]
 1c0:	0a000002 	beq	1d0 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1d0>
 1c4:	ebfffffe 	bl	0 <memcmp>
 1c8:	e3500000 	cmp	r0, #0
 1cc:	1a000001 	bne	1d8 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1d8>
 1d0:	e0580004 	subs	r0, r8, r4
 1d4:	0affffc9 	beq	100 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x100>
 1d8:	e3500000 	cmp	r0, #0
 1dc:	aaffffc7 	bge	100 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x100>
 1e0:	e3a03000 	mov	r3, #0
 1e4:	e8850208 	stm	r5, {r3, r9}
 1e8:	eaffffaa 	b	98 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x98>
 1ec:	e3500000 	cmp	r0, #0
 1f0:	baffffaf 	blt	b4 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb4>
 1f4:	eaffff9c 	b	6c <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6c>
 1f8:	e05a0008 	subs	r0, r10, r8
 1fc:	1affffbd 	bne	f8 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf8>
 200:	e1a02007 	mov	r2, r7
 204:	e1a01006 	mov	r1, r6
 208:	e1a00005 	mov	r0, r5
 20c:	ebfffffe 	bl	0 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
 210:	eaffffbe 	b	110 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x110>
 214:	e599300c 	ldr	r3, [r9, #12]
 218:	e3530000 	cmp	r3, #0
 21c:	0a000007 	beq	240 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x240>
 220:	e1a00005 	mov	r0, r5
 224:	e5854000 	str	r4, [r5]
 228:	e5854004 	str	r4, [r5, #4]
 22c:	e28dd00c 	add	sp, sp, #12
 230:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 234:	e3a03000 	mov	r3, #0
 238:	e8850018 	stm	r5, {r3, r4}
 23c:	eaffff95 	b	98 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x98>
 240:	e8850208 	stm	r5, {r3, r9}
 244:	eaffff93 	b	98 <std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x98>

Disassembly of section .text._ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN8argparse3VarESt4lessIS5_ESaISt4pairIKS5_S7_EEEixERSB_:

00000000 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e5904008 	ldr	r4, [r0, #8]
   8:	e1a08000 	mov	r8, r0
   c:	e3540000 	cmp	r4, #0
  10:	e1a09001 	mov	r9, r1
  14:	e24dd00c 	sub	sp, sp, #12
  18:	e280a004 	add	r10, r0, #4
  1c:	0a00008c 	beq	254 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x254>
  20:	e1a0700a 	mov	r7, r10
  24:	e591b000 	ldr	r11, [r1]
  28:	e5916004 	ldr	r6, [r1, #4]
  2c:	ea000009 	b	58 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x58>
  30:	e1a0100b 	mov	r1, r11
  34:	ebfffffe 	bl	0 <memcmp>
  38:	e3500000 	cmp	r0, #0
  3c:	0a00000c 	beq	74 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x74>
  40:	e3500000 	cmp	r0, #0
  44:	ba00000e 	blt	84 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x84>
  48:	e1a07004 	mov	r7, r4
  4c:	e5944008 	ldr	r4, [r4, #8]
  50:	e3540000 	cmp	r4, #0
  54:	0a00000d 	beq	90 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x90>
  58:	e5945014 	ldr	r5, [r4, #20]
  5c:	e5940010 	ldr	r0, [r4, #16]
  60:	e1550006 	cmp	r5, r6
  64:	31a02005 	movcc	r2, r5
  68:	21a02006 	movcs	r2, r6
  6c:	e3520000 	cmp	r2, #0
  70:	1affffee 	bne	30 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x30>
  74:	e0550006 	subs	r0, r5, r6
  78:	0afffff2 	beq	48 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x48>
  7c:	e3500000 	cmp	r0, #0
  80:	aafffff0 	bge	48 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x48>
  84:	e594400c 	ldr	r4, [r4, #12]
  88:	e3540000 	cmp	r4, #0
  8c:	1afffff1 	bne	58 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x58>
  90:	e15a0007 	cmp	r10, r7
  94:	0a000012 	beq	e4 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe4>
  98:	e5974014 	ldr	r4, [r7, #20]
  9c:	e5971010 	ldr	r1, [r7, #16]
  a0:	e1540006 	cmp	r4, r6
  a4:	31a02004 	movcc	r2, r4
  a8:	21a02006 	movcs	r2, r6
  ac:	e3520000 	cmp	r2, #0
  b0:	0a000003 	beq	c4 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xc4>
  b4:	e1a0000b 	mov	r0, r11
  b8:	ebfffffe 	bl	0 <memcmp>
  bc:	e3500000 	cmp	r0, #0
  c0:	1a000005 	bne	dc <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xdc>
  c4:	e0560004 	subs	r0, r6, r4
  c8:	1a000003 	bne	dc <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xdc>
  cc:	e2874028 	add	r4, r7, #40	; 0x28
  d0:	e1a00004 	mov	r0, r4
  d4:	e28dd00c 	add	sp, sp, #12
  d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  dc:	e3500000 	cmp	r0, #0
  e0:	aafffff9 	bge	cc <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xcc>
  e4:	e3a00044 	mov	r0, #68	; 0x44
  e8:	ebfffffe 	bl	0 <operator new(unsigned int)>
  ec:	e5995000 	ldr	r5, [r9]
  f0:	e5994004 	ldr	r4, [r9, #4]
  f4:	e2753001 	rsbs	r3, r5, #1
  f8:	e2642000 	rsb	r2, r4, #0
  fc:	33a03000 	movcc	r3, #0
 100:	e1550002 	cmp	r5, r2
 104:	03a03000 	moveq	r3, #0
 108:	e2806018 	add	r6, r0, #24
 10c:	e3530000 	cmp	r3, #0
 110:	e1a0b007 	mov	r11, r7
 114:	e5806010 	str	r6, [r0, #16]
 118:	e1a07000 	mov	r7, r0
 11c:	e2809010 	add	r9, r0, #16
 120:	1a000061 	bne	2ac <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2ac>
 124:	e354000f 	cmp	r4, #15
 128:	8a00002c 	bhi	1e0 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1e0>
 12c:	e3540001 	cmp	r4, #1
 130:	0a000036 	beq	210 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x210>
 134:	e3540000 	cmp	r4, #0
 138:	e1a00006 	mov	r0, r6
 13c:	1a00002e 	bne	1fc <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1fc>
 140:	e3a01000 	mov	r1, #0
 144:	e5874014 	str	r4, [r7, #20]
 148:	e7c01004 	strb	r1, [r0, r4]
 14c:	e5871034 	str	r1, [r7, #52]	; 0x34
 150:	e5871028 	str	r1, [r7, #40]	; 0x28
 154:	e5871038 	str	r1, [r7, #56]	; 0x38
 158:	e587103c 	str	r1, [r7, #60]	; 0x3c
 15c:	e5871040 	str	r1, [r7, #64]	; 0x40
 160:	e5871030 	str	r1, [r7, #48]	; 0x30
 164:	e5c71034 	strb	r1, [r7, #52]	; 0x34
 168:	e2871034 	add	r1, r7, #52	; 0x34
 16c:	e1a03009 	mov	r3, r9
 170:	e587102c 	str	r1, [r7, #44]	; 0x2c
 174:	e1a0200b 	mov	r2, r11
 178:	e1a01008 	mov	r1, r8
 17c:	e1a0000d 	mov	r0, sp
 180:	ebfffffe 	bl	0 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
 184:	e59d5004 	ldr	r5, [sp, #4]
 188:	e59d9000 	ldr	r9, [sp]
 18c:	e3550000 	cmp	r5, #0
 190:	e2874028 	add	r4, r7, #40	; 0x28
 194:	0a000021 	beq	220 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x220>
 198:	e04a3005 	sub	r3, r10, r5
 19c:	e2736000 	rsbs	r6, r3, #0
 1a0:	e0a66003 	adc	r6, r6, r3
 1a4:	e3590000 	cmp	r9, #0
 1a8:	13866001 	orrne	r6, r6, #1
 1ac:	e3560000 	cmp	r6, #0
 1b0:	0a000029 	beq	25c <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x25c>
 1b4:	e1a0300a 	mov	r3, r10
 1b8:	e1a00006 	mov	r0, r6
 1bc:	e1a02005 	mov	r2, r5
 1c0:	e1a01007 	mov	r1, r7
 1c4:	ebfffffe 	bl	0 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)>
 1c8:	e1a00004 	mov	r0, r4
 1cc:	e5983014 	ldr	r3, [r8, #20]
 1d0:	e2833001 	add	r3, r3, #1
 1d4:	e5883014 	str	r3, [r8, #20]
 1d8:	e28dd00c 	add	sp, sp, #12
 1dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 1e0:	e3540000 	cmp	r4, #0
 1e4:	ba00002e 	blt	2a4 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2a4>
 1e8:	e2940001 	adds	r0, r4, #1
 1ec:	4a00002b 	bmi	2a0 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2a0>
 1f0:	ebfffffe 	bl	0 <operator new(unsigned int)>
 1f4:	e5874018 	str	r4, [r7, #24]
 1f8:	e5870010 	str	r0, [r7, #16]
 1fc:	e1a01005 	mov	r1, r5
 200:	e1a02004 	mov	r2, r4
 204:	ebfffffe 	bl	0 <memcpy>
 208:	e5970010 	ldr	r0, [r7, #16]
 20c:	eaffffcb 	b	140 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x140>
 210:	e5d53000 	ldrb	r3, [r5]
 214:	e5c03018 	strb	r3, [r0, #24]
 218:	e1a00006 	mov	r0, r6
 21c:	eaffffc7 	b	140 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x140>
 220:	e5970010 	ldr	r0, [r7, #16]
 224:	e1560000 	cmp	r6, r0
 228:	0a000002 	beq	238 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x238>
 22c:	e5971018 	ldr	r1, [r7, #24]
 230:	e2811001 	add	r1, r1, #1
 234:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 238:	e1a00007 	mov	r0, r7
 23c:	e3a01044 	mov	r1, #68	; 0x44
 240:	e2894028 	add	r4, r9, #40	; 0x28
 244:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 248:	e1a00004 	mov	r0, r4
 24c:	e28dd00c 	add	sp, sp, #12
 250:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 254:	e1a0700a 	mov	r7, r10
 258:	eaffffa1 	b	e4 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xe4>
 25c:	e597b014 	ldr	r11, [r7, #20]
 260:	e5959014 	ldr	r9, [r5, #20]
 264:	e15b0009 	cmp	r11, r9
 268:	31a0200b 	movcc	r2, r11
 26c:	21a02009 	movcs	r2, r9
 270:	e3520000 	cmp	r2, #0
 274:	0a000006 	beq	294 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x294>
 278:	e5951010 	ldr	r1, [r5, #16]
 27c:	e5970010 	ldr	r0, [r7, #16]
 280:	ebfffffe 	bl	0 <memcmp>
 284:	e3500000 	cmp	r0, #0
 288:	0a000001 	beq	294 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x294>
 28c:	e1a06fa0 	lsr	r6, r0, #31
 290:	eaffffc7 	b	1b4 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1b4>
 294:	e05b0009 	subs	r0, r11, r9
 298:	0affffc5 	beq	1b4 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x1b4>
 29c:	eafffffa 	b	28c <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x28c>
 2a0:	ebfffffe 	bl	0 <std::__throw_bad_alloc()>
 2a4:	e59f0008 	ldr	r0, [pc, #8]	; 2b4 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2b4>
 2a8:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 2ac:	e59f0004 	ldr	r0, [pc, #4]	; 2b8 <std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, argparse::Var, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, argparse::Var> > >::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x2b8>
 2b0:	ebfffffe 	bl	0 <std::__throw_logic_error(char const*)>
 2b4:	00000000 	.word	0x00000000
 2b8:	0000001c 	.word	0x0000001c

Disassembly of section .text._ZN8argparse14ArgumentParser9GetVarIntENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi:

00000000 <argparse::ArgumentParser::GetVarInt(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e280700c 	add	r7, r0, #12
   8:	e1a04000 	mov	r4, r0
   c:	e1a00007 	mov	r0, r7
  10:	e1a06001 	mov	r6, r1
  14:	e1a05002 	mov	r5, r2
  18:	ebfffffe 	bl	0 <argparse::ArgumentParser::GetVarInt(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int)>
  1c:	e2844010 	add	r4, r4, #16
  20:	e1540000 	cmp	r4, r0
  24:	0a000004 	beq	3c <argparse::ArgumentParser::GetVarInt(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int)+0x3c>
  28:	e1a01006 	mov	r1, r6
  2c:	e1a00007 	mov	r0, r7
  30:	ebfffffe 	bl	0 <argparse::ArgumentParser::GetVarInt(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int)>
  34:	e5900000 	ldr	r0, [r0]
  38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  3c:	e1a00005 	mov	r0, r5
  40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

Disassembly of section .text._ZN8argparse14ArgumentParser9GetVarStrENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_:

00000000 <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e281800c 	add	r8, r1, #12
   8:	e1a05001 	mov	r5, r1
   c:	e1a04000 	mov	r4, r0
  10:	e1a01002 	mov	r1, r2
  14:	e1a00008 	mov	r0, r8
  18:	e1a07002 	mov	r7, r2
  1c:	e1a06003 	mov	r6, r3
  20:	ebfffffe 	bl	0 <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
  24:	e2855010 	add	r5, r5, #16
  28:	e1550000 	cmp	r5, r0
  2c:	0a000026 	beq	cc <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xcc>
  30:	e1a01007 	mov	r1, r7
  34:	e1a00008 	mov	r0, r8
  38:	ebfffffe 	bl	0 <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>
  3c:	e2842008 	add	r2, r4, #8
  40:	e5842000 	str	r2, [r4]
  44:	e5906004 	ldr	r6, [r0, #4]
  48:	e5905008 	ldr	r5, [r0, #8]
  4c:	e2763001 	rsbs	r3, r6, #1
  50:	e2651000 	rsb	r1, r5, #0
  54:	33a03000 	movcc	r3, #0
  58:	e1560001 	cmp	r6, r1
  5c:	03a03000 	moveq	r3, #0
  60:	e3530000 	cmp	r3, #0
  64:	1a000031 	bne	130 <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x130>
  68:	e355000f 	cmp	r5, #15
  6c:	8a000008 	bhi	94 <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x94>
  70:	e3550001 	cmp	r5, #1
  74:	1a000025 	bne	110 <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x110>
  78:	e5d63000 	ldrb	r3, [r6]
  7c:	e5c43008 	strb	r3, [r4, #8]
  80:	e3a03000 	mov	r3, #0
  84:	e5845004 	str	r5, [r4, #4]
  88:	e1a00004 	mov	r0, r4
  8c:	e7c23005 	strb	r3, [r2, r5]
  90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  94:	e3550000 	cmp	r5, #0
  98:	ba000026 	blt	138 <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x138>
  9c:	e2950001 	adds	r0, r5, #1
  a0:	4a000021 	bmi	12c <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x12c>
  a4:	ebfffffe 	bl	0 <operator new(unsigned int)>
  a8:	e1a02000 	mov	r2, r0
  ac:	e5845008 	str	r5, [r4, #8]
  b0:	e5840000 	str	r0, [r4]
  b4:	e1a00002 	mov	r0, r2
  b8:	e1a01006 	mov	r1, r6
  bc:	e1a02005 	mov	r2, r5
  c0:	ebfffffe 	bl	0 <memcpy>
  c4:	e5942000 	ldr	r2, [r4]
  c8:	eaffffec 	b	80 <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x80>
  cc:	e1a05006 	mov	r5, r6
  d0:	e2840008 	add	r0, r4, #8
  d4:	e5840000 	str	r0, [r4]
  d8:	e4953008 	ldr	r3, [r5], #8
  dc:	e1530005 	cmp	r3, r5
  e0:	0a00000d 	beq	11c <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x11c>
  e4:	e5962008 	ldr	r2, [r6, #8]
  e8:	e5843000 	str	r3, [r4]
  ec:	e5842008 	str	r2, [r4, #8]
  f0:	e3a03000 	mov	r3, #0
  f4:	e5962004 	ldr	r2, [r6, #4]
  f8:	e1a00004 	mov	r0, r4
  fc:	e5842004 	str	r2, [r4, #4]
 100:	e5865000 	str	r5, [r6]
 104:	e5863004 	str	r3, [r6, #4]
 108:	e5c63008 	strb	r3, [r6, #8]
 10c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 110:	e3550000 	cmp	r5, #0
 114:	0affffd9 	beq	80 <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x80>
 118:	eaffffe5 	b	b4 <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xb4>
 11c:	e3a02010 	mov	r2, #16
 120:	e1a01005 	mov	r1, r5
 124:	ebfffffe 	bl	0 <memcpy>
 128:	eafffff0 	b	f0 <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0xf0>
 12c:	ebfffffe 	bl	0 <std::__throw_bad_alloc()>
 130:	e59f0008 	ldr	r0, [pc, #8]	; 140 <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x140>
 134:	ebfffffe 	bl	0 <std::__throw_logic_error(char const*)>
 138:	e59f0004 	ldr	r0, [pc, #4]	; 144 <argparse::ArgumentParser::GetVarStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)+0x144>
 13c:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 140:	0000001c 	.word	0x0000001c
 144:	00000000 	.word	0x00000000

Disassembly of section .text._ZN8argparse14ArgumentParser7_ActionERKNS_8ArgumentERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE:

00000000 <argparse::ArgumentParser::_Action(argparse::Argument const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e5926000 	ldr	r6, [r2]
   8:	e24dd028 	sub	sp, sp, #40	; 0x28
   c:	e1a04000 	mov	r4, r0
  10:	e1a00006 	mov	r0, r6
  14:	e1a05001 	mov	r5, r1
  18:	ebfffffe 	bl	0 <strlen>
  1c:	e1a03006 	mov	r3, r6
  20:	e58d0000 	str	r0, [sp]
  24:	e2846024 	add	r6, r4, #36	; 0x24
  28:	e5942028 	ldr	r2, [r4, #40]	; 0x28
  2c:	e3a01000 	mov	r1, #0
  30:	e1a00006 	mov	r0, r6
  34:	ebfffffe 	bl	0 <argparse::ArgumentParser::_Action(argparse::Argument const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  38:	e3a03000 	mov	r3, #0
  3c:	e5d52048 	ldrb	r2, [r5, #72]	; 0x48
  40:	e58d300c 	str	r3, [sp, #12]
  44:	e3520002 	cmp	r2, #2
  48:	e58d3014 	str	r3, [sp, #20]
  4c:	e5cd3018 	strb	r3, [sp, #24]
  50:	03a03001 	moveq	r3, #1
  54:	e28d7018 	add	r7, sp, #24
  58:	e58d7010 	str	r7, [sp, #16]
  5c:	058d300c 	streq	r3, [sp, #12]
  60:	0a000001 	beq	6c <argparse::ArgumentParser::_Action(argparse::Argument const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x6c>
  64:	e3520003 	cmp	r2, #3
  68:	0a000010 	beq	b0 <argparse::ArgumentParser::_Action(argparse::Argument const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb0>
  6c:	e1a01006 	mov	r1, r6
  70:	e284000c 	add	r0, r4, #12
  74:	ebfffffe 	bl	0 <argparse::ArgumentParser::_Action(argparse::Argument const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  78:	e59d300c 	ldr	r3, [sp, #12]
  7c:	e28d1010 	add	r1, sp, #16
  80:	e4803004 	str	r3, [r0], #4
  84:	e3a05000 	mov	r5, #0
  88:	ebfffffe 	bl	0 <argparse::ArgumentParser::_Action(argparse::Argument const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  8c:	e59d0010 	ldr	r0, [sp, #16]
  90:	e1500007 	cmp	r0, r7
  94:	0a000002 	beq	a4 <argparse::ArgumentParser::_Action(argparse::Argument const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4>
  98:	e59d1018 	ldr	r1, [sp, #24]
  9c:	e2811001 	add	r1, r1, #1
  a0:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  a4:	e1a00005 	mov	r0, r5
  a8:	e28dd028 	add	sp, sp, #40	; 0x28
  ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  b0:	e5d4303c 	ldrb	r3, [r4, #60]	; 0x3c
  b4:	e3530000 	cmp	r3, #0
  b8:	13e0507f 	mvnne	r5, #127	; 0x7f
  bc:	1afffff8 	bne	a4 <argparse::ArgumentParser::_Action(argparse::Argument const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xa4>
  c0:	e59f0040 	ldr	r0, [pc, #64]	; 108 <argparse::ArgumentParser::_Action(argparse::Argument const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x108>
  c4:	ebfffffe 	bl	0 <printf>
  c8:	e8940060 	ldm	r4, {r5, r6}
  cc:	e1550006 	cmp	r5, r6
  d0:	0a000008 	beq	f8 <argparse::ArgumentParser::_Action(argparse::Argument const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xf8>
  d4:	e59f8030 	ldr	r8, [pc, #48]	; 10c <argparse::ArgumentParser::_Action(argparse::Argument const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x10c>
  d8:	e5953030 	ldr	r3, [r5, #48]	; 0x30
  dc:	e5952000 	ldr	r2, [r5]
  e0:	e5951018 	ldr	r1, [r5, #24]
  e4:	e1a00008 	mov	r0, r8
  e8:	e285504c 	add	r5, r5, #76	; 0x4c
  ec:	ebfffffe 	bl	0 <printf>
  f0:	e1560005 	cmp	r6, r5
  f4:	1afffff7 	bne	d8 <argparse::ArgumentParser::_Action(argparse::Argument const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xd8>
  f8:	e3a03001 	mov	r3, #1
  fc:	e3e0507f 	mvn	r5, #127	; 0x7f
 100:	e5c4303c 	strb	r3, [r4, #60]	; 0x3c
 104:	eaffffe0 	b	8c <argparse::ArgumentParser::_Action(argparse::Argument const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x8c>
	...

Disassembly of section .text._ZN8argparse14ArgumentParser9ParseArgsERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE:

00000000 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e3a04000 	mov	r4, #0
   8:	e1a06001 	mov	r6, r1
   c:	e1a07000 	mov	r7, r0
  10:	e5903024 	ldr	r3, [r0, #36]	; 0x24
  14:	e24ddf4d 	sub	sp, sp, #308	; 0x134
  18:	e5c0403c 	strb	r4, [r0, #60]	; 0x3c
  1c:	e5804028 	str	r4, [r0, #40]	; 0x28
  20:	e5c34000 	strb	r4, [r3]
  24:	e58d0018 	str	r0, [sp, #24]
  28:	e5900014 	ldr	r0, [r0, #20]
  2c:	ebfffffe 	bl	0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
  30:	e5965000 	ldr	r5, [r6]
  34:	e5961004 	ldr	r1, [r6, #4]
  38:	e2872010 	add	r2, r7, #16
  3c:	e1510005 	cmp	r1, r5
  40:	e58d100c 	str	r1, [sp, #12]
  44:	e58d2010 	str	r2, [sp, #16]
  48:	e5874014 	str	r4, [r7, #20]
  4c:	e5874020 	str	r4, [r7, #32]
  50:	e5872018 	str	r2, [r7, #24]
  54:	e587201c 	str	r2, [r7, #28]
  58:	12878024 	addne	r8, r7, #36	; 0x24
  5c:	1287900c 	addne	r9, r7, #12
  60:	12855018 	addne	r5, r5, #24
  64:	128d6070 	addne	r6, sp, #112	; 0x70
  68:	0a00005c 	beq	1e0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1e0>
  6c:	e5153014 	ldr	r3, [r5, #-20]	; 0xffffffec
  70:	e1a07005 	mov	r7, r5
  74:	e3530002 	cmp	r3, #2
  78:	e2454018 	sub	r4, r5, #24
  7c:	8a000098 	bhi	2e4 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x2e4>
  80:	1a00007c 	bne	278 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x278>
  84:	e515b018 	ldr	r11, [r5, #-24]	; 0xffffffe8
  88:	e5db2000 	ldrb	r2, [r11]
  8c:	e352002d 	cmp	r2, #45	; 0x2d
  90:	0a000074 	beq	268 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x268>
  94:	e58d6068 	str	r6, [sp, #104]	; 0x68
  98:	e1a0000b 	mov	r0, r11
  9c:	ebfffffe 	bl	0 <strlen>
  a0:	e350000f 	cmp	r0, #15
  a4:	e1a04000 	mov	r4, r0
  a8:	8a0000e3 	bhi	43c <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x43c>
  ac:	e3540001 	cmp	r4, #1
  b0:	1a0000dd 	bne	42c <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x42c>
  b4:	e5db3000 	ldrb	r3, [r11]
  b8:	e5cd3070 	strb	r3, [sp, #112]	; 0x70
  bc:	e3a02000 	mov	r2, #0
  c0:	e59d3068 	ldr	r3, [sp, #104]	; 0x68
  c4:	e58d406c 	str	r4, [sp, #108]	; 0x6c
  c8:	e7c32004 	strb	r2, [r3, r4]
  cc:	e59d2068 	ldr	r2, [sp, #104]	; 0x68
  d0:	e59d406c 	ldr	r4, [sp, #108]	; 0x6c
  d4:	e0824004 	add	r4, r2, r4
  d8:	e1520004 	cmp	r2, r4
  dc:	0a00006c 	beq	294 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x294>
  e0:	e1a0b002 	mov	r11, r2
  e4:	ea000001 	b	f0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0xf0>
  e8:	e154000b 	cmp	r4, r11
  ec:	0a000067 	beq	290 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x290>
  f0:	e4dba001 	ldrb	r10, [r11], #1
  f4:	e1a0000a 	mov	r0, r10
  f8:	ebfffffe 	bl	0 <isdigit>
  fc:	e24a302d 	sub	r3, r10, #45	; 0x2d
 100:	e273a000 	rsbs	r10, r3, #0
 104:	e0aaa003 	adc	r10, r10, r3
 108:	e3500000 	cmp	r0, #0
 10c:	138aa001 	orrne	r10, r10, #1
 110:	e35a0000 	cmp	r10, #0
 114:	1afffff3 	bne	e8 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0xe8>
 118:	e59d0068 	ldr	r0, [sp, #104]	; 0x68
 11c:	e1500006 	cmp	r0, r6
 120:	0a000002 	beq	130 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x130>
 124:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
 128:	e2811001 	add	r1, r1, #1
 12c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 130:	e5151018 	ldr	r1, [r5, #-24]	; 0xffffffe8
 134:	e28d4088 	add	r4, sp, #136	; 0x88
 138:	e3510000 	cmp	r1, #0
 13c:	e58d4080 	str	r4, [sp, #128]	; 0x80
 140:	0a000050 	beq	288 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x288>
 144:	e1a00001 	mov	r0, r1
 148:	e58d1014 	str	r1, [sp, #20]
 14c:	ebfffffe 	bl	0 <strlen>
 150:	e350000f 	cmp	r0, #15
 154:	e1a0b000 	mov	r11, r0
 158:	e59d1014 	ldr	r1, [sp, #20]
 15c:	8a0000c3 	bhi	470 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x470>
 160:	e3500001 	cmp	r0, #1
 164:	1a0000bc 	bne	45c <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x45c>
 168:	e5d13000 	ldrb	r3, [r1]
 16c:	e1a01004 	mov	r1, r4
 170:	e5cd3088 	strb	r3, [sp, #136]	; 0x88
 174:	e3a03000 	mov	r3, #0
 178:	e58db084 	str	r11, [sp, #132]	; 0x84
 17c:	e7c1300b 	strb	r3, [r1, r11]
 180:	e59d0080 	ldr	r0, [sp, #128]	; 0x80
 184:	e59d1084 	ldr	r1, [sp, #132]	; 0x84
 188:	e0801001 	add	r1, r0, r1
 18c:	e1500001 	cmp	r0, r1
 190:	0a00001b 	beq	204 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x204>
 194:	e1a02000 	mov	r2, r0
 198:	e4d23001 	ldrb	r3, [r2], #1
 19c:	e353005f 	cmp	r3, #95	; 0x5f
 1a0:	0a000015 	beq	1fc <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1fc>
 1a4:	8a000011 	bhi	1f0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1f0>
 1a8:	e353002d 	cmp	r3, #45	; 0x2d
 1ac:	0a000012 	beq	1fc <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1fc>
 1b0:	e2433041 	sub	r3, r3, #65	; 0x41
 1b4:	e3530019 	cmp	r3, #25
 1b8:	9a00000f 	bls	1fc <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1fc>
 1bc:	e1500004 	cmp	r0, r4
 1c0:	0a000002 	beq	1d0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1d0>
 1c4:	e59d1088 	ldr	r1, [sp, #136]	; 0x88
 1c8:	e2811001 	add	r1, r1, #1
 1cc:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 1d0:	e59d300c 	ldr	r3, [sp, #12]
 1d4:	e2855018 	add	r5, r5, #24
 1d8:	e1530007 	cmp	r3, r7
 1dc:	1affffa2 	bne	6c <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x6c>
 1e0:	e3a04000 	mov	r4, #0
 1e4:	e1a00004 	mov	r0, r4
 1e8:	e28ddf4d 	add	sp, sp, #308	; 0x134
 1ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 1f0:	e2433061 	sub	r3, r3, #97	; 0x61
 1f4:	e3530019 	cmp	r3, #25
 1f8:	8affffef 	bhi	1bc <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1bc>
 1fc:	e1510002 	cmp	r1, r2
 200:	1affffe4 	bne	198 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x198>
 204:	e1500004 	cmp	r0, r4
 208:	0a000002 	beq	218 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x218>
 20c:	e59d1088 	ldr	r1, [sp, #136]	; 0x88
 210:	e2811001 	add	r1, r1, #1
 214:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 218:	e1a01008 	mov	r1, r8
 21c:	e1a00009 	mov	r0, r9
 220:	ebfffffe 	bl	0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
 224:	e59d3010 	ldr	r3, [sp, #16]
 228:	e1530000 	cmp	r3, r0
 22c:	0affffe7 	beq	1d0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1d0>
 230:	e1a01008 	mov	r1, r8
 234:	e1a00009 	mov	r0, r9
 238:	e515b018 	ldr	r11, [r5, #-24]	; 0xffffffe8
 23c:	ebfffffe 	bl	0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
 240:	e1a04000 	mov	r4, r0
 244:	e1a0000b 	mov	r0, r11
 248:	ebfffffe 	bl	0 <strlen>
 24c:	e5942008 	ldr	r2, [r4, #8]
 250:	e1a0300b 	mov	r3, r11
 254:	e58d0000 	str	r0, [sp]
 258:	e3a01000 	mov	r1, #0
 25c:	e2840004 	add	r0, r4, #4
 260:	ebfffffe 	bl	0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
 264:	eaffffd9 	b	1d0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1d0>
 268:	e5db0001 	ldrb	r0, [r11, #1]
 26c:	ebfffffe 	bl	0 <isdigit>
 270:	e3500000 	cmp	r0, #0
 274:	0a000086 	beq	494 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x494>
 278:	e515b018 	ldr	r11, [r5, #-24]	; 0xffffffe8
 27c:	e58d6068 	str	r6, [sp, #104]	; 0x68
 280:	e35b0000 	cmp	r11, #0
 284:	1affff83 	bne	98 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x98>
 288:	e59f0550 	ldr	r0, [pc, #1360]	; 7e0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x7e0>
 28c:	ebfffffe 	bl	0 <std::__throw_logic_error(char const*)>
 290:	e59d4068 	ldr	r4, [sp, #104]	; 0x68
 294:	e1540006 	cmp	r4, r6
 298:	0a000003 	beq	2ac <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x2ac>
 29c:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
 2a0:	e1a00004 	mov	r0, r4
 2a4:	e2811001 	add	r1, r1, #1
 2a8:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 2ac:	e1a01008 	mov	r1, r8
 2b0:	e1a00009 	mov	r0, r9
 2b4:	ebfffffe 	bl	0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
 2b8:	e59d3010 	ldr	r3, [sp, #16]
 2bc:	e1530000 	cmp	r3, r0
 2c0:	0affffc2 	beq	1d0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1d0>
 2c4:	e5150018 	ldr	r0, [r5, #-24]	; 0xffffffe8
 2c8:	ebfffffe 	bl	0 <atoi>
 2cc:	e1a01008 	mov	r1, r8
 2d0:	e1a04000 	mov	r4, r0
 2d4:	e1a00009 	mov	r0, r9
 2d8:	ebfffffe 	bl	0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
 2dc:	e5804000 	str	r4, [r0]
 2e0:	eaffffba 	b	1d0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1d0>
 2e4:	e515b018 	ldr	r11, [r5, #-24]	; 0xffffffe8
 2e8:	e5db2000 	ldrb	r2, [r11]
 2ec:	e352002d 	cmp	r2, #45	; 0x2d
 2f0:	1affff67 	bne	94 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x94>
 2f4:	e5db2001 	ldrb	r2, [r11, #1]
 2f8:	e352002d 	cmp	r2, #45	; 0x2d
 2fc:	1affff64 	bne	94 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x94>
 300:	e3a02000 	mov	r2, #0
 304:	e28d30a0 	add	r3, sp, #160	; 0xa0
 308:	e58d3098 	str	r3, [sp, #152]	; 0x98
 30c:	e28d30b8 	add	r3, sp, #184	; 0xb8
 310:	e58d30b0 	str	r3, [sp, #176]	; 0xb0
 314:	e28d30d0 	add	r3, sp, #208	; 0xd0
 318:	e58d30c8 	str	r3, [sp, #200]	; 0xc8
 31c:	e5cd20a0 	strb	r2, [sp, #160]	; 0xa0
 320:	e5cd20b8 	strb	r2, [sp, #184]	; 0xb8
 324:	e5cd20d0 	strb	r2, [sp, #208]	; 0xd0
 328:	e5151018 	ldr	r1, [r5, #-24]	; 0xffffffe8
 32c:	e28da028 	add	r10, sp, #40	; 0x28
 330:	e1510002 	cmp	r1, r2
 334:	e58d209c 	str	r2, [sp, #156]	; 0x9c
 338:	e58d20b4 	str	r2, [sp, #180]	; 0xb4
 33c:	e58d20cc 	str	r2, [sp, #204]	; 0xcc
 340:	e58da020 	str	r10, [sp, #32]
 344:	0affffcf 	beq	288 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x288>
 348:	e1a00001 	mov	r0, r1
 34c:	e58d1014 	str	r1, [sp, #20]
 350:	ebfffffe 	bl	0 <strlen>
 354:	e350000f 	cmp	r0, #15
 358:	e1a02000 	mov	r2, r0
 35c:	e59d1014 	ldr	r1, [sp, #20]
 360:	8a0000d5 	bhi	6bc <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x6bc>
 364:	e3500001 	cmp	r0, #1
 368:	1a0000ce 	bne	6a8 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x6a8>
 36c:	e5d11000 	ldrb	r1, [r1]
 370:	e5cd1028 	strb	r1, [sp, #40]	; 0x28
 374:	e1a0100a 	mov	r1, r10
 378:	e3a00000 	mov	r0, #0
 37c:	e58d2024 	str	r2, [sp, #36]	; 0x24
 380:	e7c10002 	strb	r0, [r1, r2]
 384:	e28d2098 	add	r2, sp, #152	; 0x98
 388:	e59d0018 	ldr	r0, [sp, #24]
 38c:	e28d1020 	add	r1, sp, #32
 390:	ebfffffe 	bl	0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
 394:	e59d2020 	ldr	r2, [sp, #32]
 398:	e152000a 	cmp	r2, r10
 39c:	e1a0a000 	mov	r10, r0
 3a0:	0a000003 	beq	3b4 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x3b4>
 3a4:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
 3a8:	e1a00002 	mov	r0, r2
 3ac:	e2811001 	add	r1, r1, #1
 3b0:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 3b4:	e35a0000 	cmp	r10, #0
 3b8:	0a0000cc 	beq	6f0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x6f0>
 3bc:	e1a02004 	mov	r2, r4
 3c0:	e59d0018 	ldr	r0, [sp, #24]
 3c4:	e28d1098 	add	r1, sp, #152	; 0x98
 3c8:	ebfffffe 	bl	0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
 3cc:	e2504000 	subs	r4, r0, #0
 3d0:	1a0000cd 	bne	70c <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x70c>
 3d4:	e59d00c8 	ldr	r0, [sp, #200]	; 0xc8
 3d8:	e28d30d0 	add	r3, sp, #208	; 0xd0
 3dc:	e1500003 	cmp	r0, r3
 3e0:	0a000002 	beq	3f0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x3f0>
 3e4:	e59d10d0 	ldr	r1, [sp, #208]	; 0xd0
 3e8:	e2811001 	add	r1, r1, #1
 3ec:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 3f0:	e59d00b0 	ldr	r0, [sp, #176]	; 0xb0
 3f4:	e28d30b8 	add	r3, sp, #184	; 0xb8
 3f8:	e1500003 	cmp	r0, r3
 3fc:	0a000002 	beq	40c <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x40c>
 400:	e59d10b8 	ldr	r1, [sp, #184]	; 0xb8
 404:	e2811001 	add	r1, r1, #1
 408:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 40c:	e59d0098 	ldr	r0, [sp, #152]	; 0x98
 410:	e28d30a0 	add	r3, sp, #160	; 0xa0
 414:	e1500003 	cmp	r0, r3
 418:	0affff6c 	beq	1d0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1d0>
 41c:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
 420:	e2811001 	add	r1, r1, #1
 424:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 428:	eaffff68 	b	1d0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1d0>
 42c:	e3540000 	cmp	r4, #0
 430:	0affff21 	beq	bc <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0xbc>
 434:	e1a00006 	mov	r0, r6
 438:	ea000003 	b	44c <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x44c>
 43c:	e2840001 	add	r0, r4, #1
 440:	ebfffffe 	bl	0 <operator new(unsigned int)>
 444:	e58d4070 	str	r4, [sp, #112]	; 0x70
 448:	e58d0068 	str	r0, [sp, #104]	; 0x68
 44c:	e1a0100b 	mov	r1, r11
 450:	e1a02004 	mov	r2, r4
 454:	ebfffffe 	bl	0 <memcpy>
 458:	eaffff17 	b	bc <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0xbc>
 45c:	e3500000 	cmp	r0, #0
 460:	01a01004 	moveq	r1, r4
 464:	0affff42 	beq	174 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x174>
 468:	e1a00004 	mov	r0, r4
 46c:	ea000004 	b	484 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x484>
 470:	e2800001 	add	r0, r0, #1
 474:	ebfffffe 	bl	0 <operator new(unsigned int)>
 478:	e59d1014 	ldr	r1, [sp, #20]
 47c:	e58db088 	str	r11, [sp, #136]	; 0x88
 480:	e58d0080 	str	r0, [sp, #128]	; 0x80
 484:	e1a0200b 	mov	r2, r11
 488:	ebfffffe 	bl	0 <memcpy>
 48c:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
 490:	eaffff37 	b	174 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x174>
 494:	e28d30ec 	add	r3, sp, #236	; 0xec
 498:	e58d30e4 	str	r3, [sp, #228]	; 0xe4
 49c:	e28d3f41 	add	r3, sp, #260	; 0x104
 4a0:	e58d30fc 	str	r3, [sp, #252]	; 0xfc
 4a4:	e28d3f47 	add	r3, sp, #284	; 0x11c
 4a8:	e5cd00ec 	strb	r0, [sp, #236]	; 0xec
 4ac:	e5cd0104 	strb	r0, [sp, #260]	; 0x104
 4b0:	e5cd011c 	strb	r0, [sp, #284]	; 0x11c
 4b4:	e58d3114 	str	r3, [sp, #276]	; 0x114
 4b8:	e5151018 	ldr	r1, [r5, #-24]	; 0xffffffe8
 4bc:	e28da040 	add	r10, sp, #64	; 0x40
 4c0:	e3510000 	cmp	r1, #0
 4c4:	e58d00e8 	str	r0, [sp, #232]	; 0xe8
 4c8:	e58d0100 	str	r0, [sp, #256]	; 0x100
 4cc:	e58d0118 	str	r0, [sp, #280]	; 0x118
 4d0:	e58da038 	str	r10, [sp, #56]	; 0x38
 4d4:	0affff6b 	beq	288 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x288>
 4d8:	e1a00001 	mov	r0, r1
 4dc:	e58d1014 	str	r1, [sp, #20]
 4e0:	ebfffffe 	bl	0 <strlen>
 4e4:	e350000f 	cmp	r0, #15
 4e8:	e1a02000 	mov	r2, r0
 4ec:	e59d1014 	ldr	r1, [sp, #20]
 4f0:	8a000051 	bhi	63c <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x63c>
 4f4:	e3500001 	cmp	r0, #1
 4f8:	0a00004b 	beq	62c <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x62c>
 4fc:	e3500000 	cmp	r0, #0
 500:	01a0100a 	moveq	r1, r10
 504:	1a0000b3 	bne	7d8 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x7d8>
 508:	e3a00000 	mov	r0, #0
 50c:	e58d203c 	str	r2, [sp, #60]	; 0x3c
 510:	e7c10002 	strb	r0, [r1, r2]
 514:	e28d20e4 	add	r2, sp, #228	; 0xe4
 518:	e59d0018 	ldr	r0, [sp, #24]
 51c:	e28d1038 	add	r1, sp, #56	; 0x38
 520:	ebfffffe 	bl	0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
 524:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
 528:	e152000a 	cmp	r2, r10
 52c:	e1a0a000 	mov	r10, r0
 530:	0a000003 	beq	544 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x544>
 534:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
 538:	e1a00002 	mov	r0, r2
 53c:	e2811001 	add	r1, r1, #1
 540:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 544:	e35a0000 	cmp	r10, #0
 548:	0a000085 	beq	764 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x764>
 54c:	e59d10e4 	ldr	r1, [sp, #228]	; 0xe4
 550:	e28d4058 	add	r4, sp, #88	; 0x58
 554:	e3510000 	cmp	r1, #0
 558:	e58d4050 	str	r4, [sp, #80]	; 0x50
 55c:	0affff49 	beq	288 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x288>
 560:	e1a00001 	mov	r0, r1
 564:	e58d1014 	str	r1, [sp, #20]
 568:	ebfffffe 	bl	0 <strlen>
 56c:	e350000f 	cmp	r0, #15
 570:	e1a0b000 	mov	r11, r0
 574:	e59d1014 	ldr	r1, [sp, #20]
 578:	8a000041 	bhi	684 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x684>
 57c:	e3500001 	cmp	r0, #1
 580:	1a00003a 	bne	670 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x670>
 584:	e5d13000 	ldrb	r3, [r1]
 588:	e5cd3058 	strb	r3, [sp, #88]	; 0x58
 58c:	e1a03004 	mov	r3, r4
 590:	e3a00000 	mov	r0, #0
 594:	e58db054 	str	r11, [sp, #84]	; 0x54
 598:	e28d10e4 	add	r1, sp, #228	; 0xe4
 59c:	e7c3000b 	strb	r0, [r3, r11]
 5a0:	e28d2050 	add	r2, sp, #80	; 0x50
 5a4:	e59d0018 	ldr	r0, [sp, #24]
 5a8:	ebfffffe 	bl	0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)>
 5ac:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
 5b0:	e1530004 	cmp	r3, r4
 5b4:	e1a04000 	mov	r4, r0
 5b8:	0a000003 	beq	5cc <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x5cc>
 5bc:	e59d1058 	ldr	r1, [sp, #88]	; 0x58
 5c0:	e1a00003 	mov	r0, r3
 5c4:	e2811001 	add	r1, r1, #1
 5c8:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 5cc:	e3540000 	cmp	r4, #0
 5d0:	1a00006a 	bne	780 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x780>
 5d4:	e59d0114 	ldr	r0, [sp, #276]	; 0x114
 5d8:	e28d3f47 	add	r3, sp, #284	; 0x11c
 5dc:	e1500003 	cmp	r0, r3
 5e0:	0a000002 	beq	5f0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x5f0>
 5e4:	e59d111c 	ldr	r1, [sp, #284]	; 0x11c
 5e8:	e2811001 	add	r1, r1, #1
 5ec:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 5f0:	e59d00fc 	ldr	r0, [sp, #252]	; 0xfc
 5f4:	e28d3f41 	add	r3, sp, #260	; 0x104
 5f8:	e1500003 	cmp	r0, r3
 5fc:	0a000002 	beq	60c <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x60c>
 600:	e59d1104 	ldr	r1, [sp, #260]	; 0x104
 604:	e2811001 	add	r1, r1, #1
 608:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 60c:	e59d00e4 	ldr	r0, [sp, #228]	; 0xe4
 610:	e28d30ec 	add	r3, sp, #236	; 0xec
 614:	e1500003 	cmp	r0, r3
 618:	0afffeec 	beq	1d0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1d0>
 61c:	e59d10ec 	ldr	r1, [sp, #236]	; 0xec
 620:	e2811001 	add	r1, r1, #1
 624:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 628:	eafffee8 	b	1d0 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1d0>
 62c:	e5d11000 	ldrb	r1, [r1]
 630:	e5cd1040 	strb	r1, [sp, #64]	; 0x40
 634:	e1a0100a 	mov	r1, r10
 638:	eaffffb2 	b	508 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x508>
 63c:	e2800001 	add	r0, r0, #1
 640:	e58d101c 	str	r1, [sp, #28]
 644:	e58d2014 	str	r2, [sp, #20]
 648:	ebfffffe 	bl	0 <operator new(unsigned int)>
 64c:	e59d2014 	ldr	r2, [sp, #20]
 650:	e59d101c 	ldr	r1, [sp, #28]
 654:	e58d2040 	str	r2, [sp, #64]	; 0x40
 658:	e58d0038 	str	r0, [sp, #56]	; 0x38
 65c:	e58d2014 	str	r2, [sp, #20]
 660:	ebfffffe 	bl	0 <memcpy>
 664:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
 668:	e59d2014 	ldr	r2, [sp, #20]
 66c:	eaffffa5 	b	508 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x508>
 670:	e3500000 	cmp	r0, #0
 674:	01a03004 	moveq	r3, r4
 678:	0affffc4 	beq	590 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x590>
 67c:	e1a00004 	mov	r0, r4
 680:	ea000004 	b	698 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x698>
 684:	e2800001 	add	r0, r0, #1
 688:	ebfffffe 	bl	0 <operator new(unsigned int)>
 68c:	e59d1014 	ldr	r1, [sp, #20]
 690:	e58db058 	str	r11, [sp, #88]	; 0x58
 694:	e58d0050 	str	r0, [sp, #80]	; 0x50
 698:	e1a0200b 	mov	r2, r11
 69c:	ebfffffe 	bl	0 <memcpy>
 6a0:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
 6a4:	eaffffb9 	b	590 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x590>
 6a8:	e3500000 	cmp	r0, #0
 6ac:	01a0100a 	moveq	r1, r10
 6b0:	0affff30 	beq	378 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x378>
 6b4:	e1a0000a 	mov	r0, r10
 6b8:	ea000007 	b	6dc <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x6dc>
 6bc:	e2800001 	add	r0, r0, #1
 6c0:	e58d101c 	str	r1, [sp, #28]
 6c4:	e58d2014 	str	r2, [sp, #20]
 6c8:	ebfffffe 	bl	0 <operator new(unsigned int)>
 6cc:	e59d2014 	ldr	r2, [sp, #20]
 6d0:	e59d101c 	ldr	r1, [sp, #28]
 6d4:	e58d2028 	str	r2, [sp, #40]	; 0x28
 6d8:	e58d0020 	str	r0, [sp, #32]
 6dc:	e58d2014 	str	r2, [sp, #20]
 6e0:	ebfffffe 	bl	0 <memcpy>
 6e4:	e59d1020 	ldr	r1, [sp, #32]
 6e8:	e59d2014 	ldr	r2, [sp, #20]
 6ec:	eaffff21 	b	378 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x378>
 6f0:	e59f10ec 	ldr	r1, [pc, #236]	; 7e4 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x7e4>
 6f4:	e5942000 	ldr	r2, [r4]
 6f8:	e5913000 	ldr	r3, [r1]
 6fc:	e59f10e4 	ldr	r1, [pc, #228]	; 7e8 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x7e8>
 700:	e593000c 	ldr	r0, [r3, #12]
 704:	ebfffffe 	bl	0 <fprintf>
 708:	e3e0407e 	mvn	r4, #126	; 0x7e
 70c:	e59d00c8 	ldr	r0, [sp, #200]	; 0xc8
 710:	e28d30d0 	add	r3, sp, #208	; 0xd0
 714:	e1500003 	cmp	r0, r3
 718:	0a000002 	beq	728 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x728>
 71c:	e59d10d0 	ldr	r1, [sp, #208]	; 0xd0
 720:	e2811001 	add	r1, r1, #1
 724:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 728:	e59d00b0 	ldr	r0, [sp, #176]	; 0xb0
 72c:	e28d30b8 	add	r3, sp, #184	; 0xb8
 730:	e1500003 	cmp	r0, r3
 734:	0a000002 	beq	744 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x744>
 738:	e59d10b8 	ldr	r1, [sp, #184]	; 0xb8
 73c:	e2811001 	add	r1, r1, #1
 740:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 744:	e59d0098 	ldr	r0, [sp, #152]	; 0x98
 748:	e28d30a0 	add	r3, sp, #160	; 0xa0
 74c:	e1500003 	cmp	r0, r3
 750:	0afffea3 	beq	1e4 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1e4>
 754:	e59d10a0 	ldr	r1, [sp, #160]	; 0xa0
 758:	e2811001 	add	r1, r1, #1
 75c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 760:	eafffe9f 	b	1e4 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1e4>
 764:	e59f1078 	ldr	r1, [pc, #120]	; 7e4 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x7e4>
 768:	e5942000 	ldr	r2, [r4]
 76c:	e5913000 	ldr	r3, [r1]
 770:	e59f1070 	ldr	r1, [pc, #112]	; 7e8 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x7e8>
 774:	e593000c 	ldr	r0, [r3, #12]
 778:	ebfffffe 	bl	0 <fprintf>
 77c:	e3e0407e 	mvn	r4, #126	; 0x7e
 780:	e59d0114 	ldr	r0, [sp, #276]	; 0x114
 784:	e28d3f47 	add	r3, sp, #284	; 0x11c
 788:	e1500003 	cmp	r0, r3
 78c:	0a000002 	beq	79c <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x79c>
 790:	e59d111c 	ldr	r1, [sp, #284]	; 0x11c
 794:	e2811001 	add	r1, r1, #1
 798:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 79c:	e59d00fc 	ldr	r0, [sp, #252]	; 0xfc
 7a0:	e28d3f41 	add	r3, sp, #260	; 0x104
 7a4:	e1500003 	cmp	r0, r3
 7a8:	0a000002 	beq	7b8 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x7b8>
 7ac:	e59d1104 	ldr	r1, [sp, #260]	; 0x104
 7b0:	e2811001 	add	r1, r1, #1
 7b4:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 7b8:	e59d00e4 	ldr	r0, [sp, #228]	; 0xe4
 7bc:	e28d30ec 	add	r3, sp, #236	; 0xec
 7c0:	e1500003 	cmp	r0, r3
 7c4:	0afffe86 	beq	1e4 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1e4>
 7c8:	e59d10ec 	ldr	r1, [sp, #236]	; 0xec
 7cc:	e2811001 	add	r1, r1, #1
 7d0:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 7d4:	eafffe82 	b	1e4 <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1e4>
 7d8:	e1a0000a 	mov	r0, r10
 7dc:	eaffff9e 	b	65c <argparse::ArgumentParser::ParseArgs(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x65c>
 7e0:	0000001c 	.word	0x0000001c
	...

bgprint.o:     file format elf32-littlearm


Disassembly of section .text._Z12bgprint_openP4File:

00000000 <bgprint_open(File*)>:
   0:	e5903004 	ldr	r3, [r0, #4]
   4:	e5d3001c 	ldrb	r0, [r3, #28]
   8:	e3500000 	cmp	r0, #0
   c:	03a02001 	moveq	r2, #1
  10:	13e00000 	mvnne	r0, #0
  14:	05c3201c 	strbeq	r2, [r3, #28]
  18:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._Z13bgprint_closeP4File:

00000000 <bgprint_close(File*)>:
   0:	e5903004 	ldr	r3, [r0, #4]
   4:	e5d3201c 	ldrb	r2, [r3, #28]
   8:	e3520000 	cmp	r2, #0
   c:	13a02000 	movne	r2, #0
  10:	11a00002 	movne	r0, r2
  14:	15c3201c 	strbne	r2, [r3, #28]
  18:	03e00000 	mvneq	r0, #0
  1c:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._Z13bgprint_ioctlP4FilejPv:

00000000 <bgprint_ioctl(File*, unsigned int, void*)>:
   0:	e92d4010 	push	{r4, lr}
   4:	e5904004 	ldr	r4, [r0, #4]
   8:	e3510003 	cmp	r1, #3
   c:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
  10:	ea000035 	b	ec <bgprint_ioctl(File*, unsigned int, void*)+0xec>
  14:	000000c4 	.word	0x000000c4
  18:	000000ac 	.word	0x000000ac
  1c:	00000050 	.word	0x00000050
  20:	00000024 	.word	0x00000024
  24:	e3520000 	cmp	r2, #0
  28:	0a00002b 	beq	dc <bgprint_ioctl(File*, unsigned int, void*)+0xdc>
  2c:	e3a03000 	mov	r3, #0
  30:	e1d401b6 	ldrh	r0, [r4, #22]
  34:	e1d4c1b4 	ldrh	r12, [r4, #20]
  38:	e5d4101d 	ldrb	r1, [r4, #29]
  3c:	e1c200b2 	strh	r0, [r2, #2]
  40:	e1c2c0b0 	strh	r12, [r2]
  44:	e1a00003 	mov	r0, r3
  48:	e5c21004 	strb	r1, [r2, #4]
  4c:	e8bd8010 	pop	{r4, pc}
  50:	e8920003 	ldm	r2, {r0, r1}
  54:	ebfffffe 	bl	0 <b8PpuBgAllocZ>
  58:	e3a03000 	mov	r3, #0
  5c:	e1d421b8 	ldrh	r2, [r4, #24]
  60:	e1c020ba 	strh	r2, [r0, #10]
  64:	e1d411ba 	ldrh	r1, [r4, #26]
  68:	e1d420be 	ldrh	r2, [r4, #14]
  6c:	e1d4c0bc 	ldrh	r12, [r4, #12]
  70:	e1c010b8 	strh	r1, [r0, #8]
  74:	e5941008 	ldr	r1, [r4, #8]
  78:	e202200f 	and	r2, r2, #15
  7c:	e5801004 	str	r1, [r0, #4]
  80:	e5d0100c 	ldrb	r1, [r0, #12]
  84:	e182260c 	orr	r2, r2, r12, lsl #12
  88:	e3c11001 	bic	r1, r1, #1
  8c:	e3811002 	orr	r1, r1, #2
  90:	e5c0100c 	strb	r1, [r0, #12]
  94:	e1d010b0 	ldrh	r1, [r0]
  98:	e2011eff 	and	r1, r1, #4080	; 0xff0
  9c:	e1822001 	orr	r2, r2, r1
  a0:	e1c020b0 	strh	r2, [r0]
  a4:	e1a00003 	mov	r0, r3
  a8:	e8bd8010 	pop	{r4, pc}
  ac:	e3a03000 	mov	r3, #0
  b0:	e8920006 	ldm	r2, {r1, r2}
  b4:	e1a00003 	mov	r0, r3
  b8:	e1c411b8 	strh	r1, [r4, #24]
  bc:	e1c421ba 	strh	r2, [r4, #26]
  c0:	e8bd8010 	pop	{r4, pc}
  c4:	e3a03000 	mov	r3, #0
  c8:	e8920007 	ldm	r2, {r0, r1, r2}
  cc:	e2844008 	add	r4, r4, #8
  d0:	e8840007 	stm	r4, {r0, r1, r2}
  d4:	e1a00003 	mov	r0, r3
  d8:	e8bd8010 	pop	{r4, pc}
  dc:	e3a00016 	mov	r0, #22
  e0:	ebfffffe 	bl	0 <set_errno>
  e4:	e3e03000 	mvn	r3, #0
  e8:	eaffffed 	b	a4 <bgprint_ioctl(File*, unsigned int, void*)+0xa4>
  ec:	e3a03000 	mov	r3, #0
  f0:	eaffffeb 	b	a4 <bgprint_ioctl(File*, unsigned int, void*)+0xa4>

Disassembly of section .text.__tcf_0:

00000000 <__tcf_0>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e59f4018 	ldr	r4, [pc, #24]	; 24 <__tcf_0+0x24>
   8:	e2445c01 	sub	r5, r4, #256	; 0x100
   c:	e2444020 	sub	r4, r4, #32
  10:	e2840004 	add	r0, r4, #4
  14:	ebfffffe 	bl	0 <CEscapeSeqDecoder::~CEscapeSeqDecoder()>
  18:	e1540005 	cmp	r4, r5
  1c:	1afffffa 	bne	c <__tcf_0+0xc>
  20:	e8bd8070 	pop	{r4, r5, r6, pc}
  24:	00000100 	.word	0x00000100

Disassembly of section .text._ZL13bgprint_writeP4FilePKcj:

00000000 <bgprint_write(File*, char const*, unsigned int)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e5906004 	ldr	r6, [r0, #4]
   8:	e24dd024 	sub	sp, sp, #36	; 0x24
   c:	e5963000 	ldr	r3, [r6]
  10:	e58de004 	str	lr, [sp, #4]
  14:	e3530007 	cmp	r3, #7
  18:	e58d2000 	str	r2, [sp]
  1c:	8a000105 	bhi	438 <bgprint_write(File*, char const*, unsigned int)+0x438>
  20:	e5963008 	ldr	r3, [r6, #8]
  24:	e3530000 	cmp	r3, #0
  28:	0a000102 	beq	438 <bgprint_write(File*, char const*, unsigned int)+0x438>
  2c:	e59d3000 	ldr	r3, [sp]
  30:	e1d620bc 	ldrh	r2, [r6, #12]
  34:	e3530000 	cmp	r3, #0
  38:	e3a03001 	mov	r3, #1
  3c:	e1d600be 	ldrh	r0, [r6, #14]
  40:	e1a02213 	lsl	r2, r3, r2
  44:	e1a03013 	lsl	r3, r3, r0
  48:	e2433001 	sub	r3, r3, #1
  4c:	e1a03803 	lsl	r3, r3, #16
  50:	e1a03823 	lsr	r3, r3, #16
  54:	e58d3010 	str	r3, [sp, #16]
  58:	e2423001 	sub	r3, r2, #1
  5c:	e1a03803 	lsl	r3, r3, #16
  60:	e1a02802 	lsl	r2, r2, #16
  64:	e1a02842 	asr	r2, r2, #16
  68:	e1a03823 	lsr	r3, r3, #16
  6c:	e58d2008 	str	r2, [sp, #8]
  70:	e58d300c 	str	r3, [sp, #12]
  74:	0a000041 	beq	180 <bgprint_write(File*, char const*, unsigned int)+0x180>
  78:	e59d3000 	ldr	r3, [sp]
  7c:	e2415001 	sub	r5, r1, #1
  80:	e0817003 	add	r7, r1, r3
  84:	e2477001 	sub	r7, r7, #1
  88:	e2868004 	add	r8, r6, #4
  8c:	e5f51001 	ldrb	r1, [r5, #1]!
  90:	e1a00008 	mov	r0, r8
  94:	ebfffffe 	bl	0 <CEscapeSeqDecoder::Stream(int)>
  98:	e5d03003 	ldrb	r3, [r0, #3]
  9c:	e1d020b0 	ldrh	r2, [r0]
  a0:	e5d01002 	ldrb	r1, [r0, #2]
  a4:	e1d0c0f4 	ldrsh	r12, [r0, #4]
  a8:	e1d000f6 	ldrsh	r0, [r0, #6]
  ac:	e3530012 	cmp	r3, #18
  b0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  b4:	ea000012 	b	104 <bgprint_write(File*, char const*, unsigned int)+0x104>
  b8:	0000027c 	.word	0x0000027c
  bc:	00000104 	.word	0x00000104
  c0:	00000104 	.word	0x00000104
  c4:	00000104 	.word	0x00000104
  c8:	00000104 	.word	0x00000104
  cc:	00000104 	.word	0x00000104
  d0:	00000270 	.word	0x00000270
  d4:	00000268 	.word	0x00000268
  d8:	00000104 	.word	0x00000104
  dc:	00000104 	.word	0x00000104
  e0:	00000104 	.word	0x00000104
  e4:	0000020c 	.word	0x0000020c
  e8:	00000104 	.word	0x00000104
  ec:	00000104 	.word	0x00000104
  f0:	0000018c 	.word	0x0000018c
  f4:	00000104 	.word	0x00000104
  f8:	00000104 	.word	0x00000104
  fc:	00000104 	.word	0x00000104
 100:	00000178 	.word	0x00000178
 104:	e59f033c 	ldr	r0, [pc, #828]	; 448 <bgprint_write(File*, char const*, unsigned int)+0x448>
 108:	ebfffffe 	bl	0 <b8SysPuts>
 10c:	e59f0338 	ldr	r0, [pc, #824]	; 44c <bgprint_write(File*, char const*, unsigned int)+0x44c>
 110:	ebfffffe 	bl	0 <b8SysPuts>
 114:	e59f0334 	ldr	r0, [pc, #820]	; 450 <bgprint_write(File*, char const*, unsigned int)+0x450>
 118:	ebfffffe 	bl	0 <b8SysPuts>
 11c:	e3a0008c 	mov	r0, #140	; 0x8c
 120:	ebfffffe 	bl	0 <b8SysPutNum>
 124:	e59f0328 	ldr	r0, [pc, #808]	; 454 <bgprint_write(File*, char const*, unsigned int)+0x454>
 128:	ebfffffe 	bl	0 <b8SysPuts>
 12c:	e59f0324 	ldr	r0, [pc, #804]	; 458 <bgprint_write(File*, char const*, unsigned int)+0x458>
 130:	ebfffffe 	bl	0 <b8SysPuts>
 134:	e59f0320 	ldr	r0, [pc, #800]	; 45c <bgprint_write(File*, char const*, unsigned int)+0x45c>
 138:	ebfffffe 	bl	0 <b8SysPuts>
 13c:	e59f031c 	ldr	r0, [pc, #796]	; 460 <bgprint_write(File*, char const*, unsigned int)+0x460>
 140:	ebfffffe 	bl	0 <b8SysPuts>
 144:	e59f0318 	ldr	r0, [pc, #792]	; 464 <bgprint_write(File*, char const*, unsigned int)+0x464>
 148:	ebfffffe 	bl	0 <b8SysPuts>
 14c:	e59f0314 	ldr	r0, [pc, #788]	; 468 <bgprint_write(File*, char const*, unsigned int)+0x468>
 150:	ebfffffe 	bl	0 <b8SysPuts>
 154:	e59d0004 	ldr	r0, [sp, #4]
 158:	ebfffffe 	bl	0 <b8SysPutHex>
 15c:	e59f0300 	ldr	r0, [pc, #768]	; 464 <bgprint_write(File*, char const*, unsigned int)+0x464>
 160:	ebfffffe 	bl	0 <b8SysPuts>
 164:	e59f0300 	ldr	r0, [pc, #768]	; 46c <bgprint_write(File*, char const*, unsigned int)+0x46c>
 168:	ebfffffe 	bl	0 <b8SysPuts>
 16c:	e59f02fc 	ldr	r0, [pc, #764]	; 470 <bgprint_write(File*, char const*, unsigned int)+0x470>
 170:	ebfffffe 	bl	0 <b8SysPuts>
 174:	e1000070 	hlt	0x0000
 178:	e1570005 	cmp	r7, r5
 17c:	1affffc2 	bne	8c <bgprint_write(File*, char const*, unsigned int)+0x8c>
 180:	e59d0000 	ldr	r0, [sp]
 184:	e28dd024 	add	sp, sp, #36	; 0x24
 188:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 18c:	e3a0b001 	mov	r11, #1
 190:	e1d620bc 	ldrh	r2, [r6, #12]
 194:	e1d640be 	ldrh	r4, [r6, #14]
 198:	e1d691b6 	ldrh	r9, [r6, #22]
 19c:	e1a0441b 	lsl	r4, r11, r4
 1a0:	e1a0b21b 	lsl	r11, r11, r2
 1a4:	ebfffffe 	bl	0 <fontdata::gettc()>
 1a8:	e2444001 	sub	r4, r4, #1
 1ac:	e1a04804 	lsl	r4, r4, #16
 1b0:	e1a0b80b 	lsl	r11, r11, #16
 1b4:	e1a04824 	lsr	r4, r4, #16
 1b8:	e0093004 	and	r3, r9, r4
 1bc:	e1a0b84b 	asr	r11, r11, #16
 1c0:	e002039b 	mul	r2, r11, r3
 1c4:	e5963008 	ldr	r3, [r6, #8]
 1c8:	e35b0000 	cmp	r11, #0
 1cc:	e1cd01bc 	strh	r0, [sp, #28]
 1d0:	e0839082 	add	r9, r3, r2, lsl #1
 1d4:	daffffe7 	ble	178 <bgprint_write(File*, char const*, unsigned int)+0x178>
 1d8:	e3a04000 	mov	r4, #0
 1dc:	e28da01c 	add	r10, sp, #28
 1e0:	e2844001 	add	r4, r4, #1
 1e4:	e2899002 	add	r9, r9, #2
 1e8:	e1a04804 	lsl	r4, r4, #16
 1ec:	e3a02002 	mov	r2, #2
 1f0:	e1a0100a 	mov	r1, r10
 1f4:	e2490002 	sub	r0, r9, #2
 1f8:	e1a04824 	lsr	r4, r4, #16
 1fc:	ebfffffe 	bl	0 <memcpy>
 200:	e15b0004 	cmp	r11, r4
 204:	cafffff5 	bgt	1e0 <bgprint_write(File*, char const*, unsigned int)+0x1e0>
 208:	eaffffda 	b	178 <bgprint_write(File*, char const*, unsigned int)+0x178>
 20c:	e3a0b001 	mov	r11, #1
 210:	e1d630bc 	ldrh	r3, [r6, #12]
 214:	e1a0b31b 	lsl	r11, r11, r3
 218:	e1d630be 	ldrh	r3, [r6, #14]
 21c:	e1a0b31b 	lsl	r11, r11, r3
 220:	ebfffffe 	bl	0 <fontdata::gettc()>
 224:	e35b0000 	cmp	r11, #0
 228:	e5969008 	ldr	r9, [r6, #8]
 22c:	e1cd01bc 	strh	r0, [sp, #28]
 230:	0affffd0 	beq	178 <bgprint_write(File*, char const*, unsigned int)+0x178>
 234:	e3a04000 	mov	r4, #0
 238:	e28da01c 	add	r10, sp, #28
 23c:	e2844001 	add	r4, r4, #1
 240:	e2899002 	add	r9, r9, #2
 244:	e1a04804 	lsl	r4, r4, #16
 248:	e3a02002 	mov	r2, #2
 24c:	e1a0100a 	mov	r1, r10
 250:	e2490002 	sub	r0, r9, #2
 254:	e1a04824 	lsr	r4, r4, #16
 258:	ebfffffe 	bl	0 <memcpy>
 25c:	e15b0004 	cmp	r11, r4
 260:	8afffff5 	bhi	23c <bgprint_write(File*, char const*, unsigned int)+0x23c>
 264:	eaffffc3 	b	178 <bgprint_write(File*, char const*, unsigned int)+0x178>
 268:	e5c6101d 	strb	r1, [r6, #29]
 26c:	eaffffc1 	b	178 <bgprint_write(File*, char const*, unsigned int)+0x178>
 270:	e1c6c1b4 	strh	r12, [r6, #20]
 274:	e1c601b6 	strh	r0, [r6, #22]
 278:	eaffffbe 	b	178 <bgprint_write(File*, char const*, unsigned int)+0x178>
 27c:	e352000a 	cmp	r2, #10
 280:	0a00000b 	beq	2b4 <bgprint_write(File*, char const*, unsigned int)+0x2b4>
 284:	e2422020 	sub	r2, r2, #32
 288:	e1a04802 	lsl	r4, r2, #16
 28c:	e354085f 	cmp	r4, #6225920	; 0x5f0000
 290:	e1a02824 	lsr	r2, r4, #16
 294:	8a000063 	bhi	428 <bgprint_write(File*, char const*, unsigned int)+0x428>
 298:	e1d631f4 	ldrsh	r3, [r6, #20]
 29c:	e59d1008 	ldr	r1, [sp, #8]
 2a0:	e1530001 	cmp	r3, r1
 2a4:	ba000033 	blt	378 <bgprint_write(File*, char const*, unsigned int)+0x378>
 2a8:	e2833001 	add	r3, r3, #1
 2ac:	e1c631b4 	strh	r3, [r6, #20]
 2b0:	eaffffb0 	b	178 <bgprint_write(File*, char const*, unsigned int)+0x178>
 2b4:	e3a03000 	mov	r3, #0
 2b8:	e1d641b6 	ldrh	r4, [r6, #22]
 2bc:	e1c631b4 	strh	r3, [r6, #20]
 2c0:	e5d63012 	ldrb	r3, [r6, #18]
 2c4:	e2844001 	add	r4, r4, #1
 2c8:	e3530000 	cmp	r3, #0
 2cc:	e1a03804 	lsl	r3, r4, #16
 2d0:	e1a04003 	mov	r4, r3
 2d4:	e1a03843 	asr	r3, r3, #16
 2d8:	e1a04824 	lsr	r4, r4, #16
 2dc:	e1c631b6 	strh	r3, [r6, #22]
 2e0:	1a00001e 	bne	360 <bgprint_write(File*, char const*, unsigned int)+0x360>
 2e4:	e3a0b001 	mov	r11, #1
 2e8:	e1d630be 	ldrh	r3, [r6, #14]
 2ec:	e1d620bc 	ldrh	r2, [r6, #12]
 2f0:	e1a0331b 	lsl	r3, r11, r3
 2f4:	e2433001 	sub	r3, r3, #1
 2f8:	e1a09803 	lsl	r9, r3, #16
 2fc:	e1a0b21b 	lsl	r11, r11, r2
 300:	ebfffffe 	bl	0 <fontdata::gettc()>
 304:	e1a09829 	lsr	r9, r9, #16
 308:	e1a0b80b 	lsl	r11, r11, #16
 30c:	e1a0b84b 	asr	r11, r11, #16
 310:	e0044009 	and	r4, r4, r9
 314:	e004049b 	mul	r4, r11, r4
 318:	e5963008 	ldr	r3, [r6, #8]
 31c:	e35b0000 	cmp	r11, #0
 320:	e1cd01bc 	strh	r0, [sp, #28]
 324:	e0839084 	add	r9, r3, r4, lsl #1
 328:	daffff92 	ble	178 <bgprint_write(File*, char const*, unsigned int)+0x178>
 32c:	e3a04000 	mov	r4, #0
 330:	e28da01c 	add	r10, sp, #28
 334:	e2844001 	add	r4, r4, #1
 338:	e2899002 	add	r9, r9, #2
 33c:	e1a04804 	lsl	r4, r4, #16
 340:	e3a02002 	mov	r2, #2
 344:	e1a0100a 	mov	r1, r10
 348:	e2490002 	sub	r0, r9, #2
 34c:	e1a04824 	lsr	r4, r4, #16
 350:	ebfffffe 	bl	0 <memcpy>
 354:	e15b0004 	cmp	r11, r4
 358:	cafffff5 	bgt	334 <bgprint_write(File*, char const*, unsigned int)+0x334>
 35c:	eaffff85 	b	178 <bgprint_write(File*, char const*, unsigned int)+0x178>
 360:	e1d621b0 	ldrh	r2, [r6, #16]
 364:	e1530002 	cmp	r3, r2
 368:	c1d631ba 	ldrhgt	r3, [r6, #26]
 36c:	c2833008 	addgt	r3, r3, #8
 370:	c1c631ba 	strhgt	r3, [r6, #26]
 374:	eaffffda 	b	2e4 <bgprint_write(File*, char const*, unsigned int)+0x2e4>
 378:	e58d2014 	str	r2, [sp, #20]
 37c:	e59d200c 	ldr	r2, [sp, #12]
 380:	e5969008 	ldr	r9, [r6, #8]
 384:	e003b002 	and	r11, r3, r2
 388:	e1d631b6 	ldrh	r3, [r6, #22]
 38c:	e59d2010 	ldr	r2, [sp, #16]
 390:	e1a0b80b 	lsl	r11, r11, #16
 394:	e0033002 	and	r3, r3, r2
 398:	e1a02001 	mov	r2, r1
 39c:	e1a03803 	lsl	r3, r3, #16
 3a0:	e1a03843 	asr	r3, r3, #16
 3a4:	e1a0b84b 	asr	r11, r11, #16
 3a8:	e022b293 	mla	r2, r3, r2, r11
 3ac:	e5d6c01d 	ldrb	r12, [r6, #29]
 3b0:	e089a082 	add	r10, r9, r2, lsl #1
 3b4:	e5da0001 	ldrb	r0, [r10, #1]
 3b8:	e20cc003 	and	r12, r12, #3
 3bc:	e3c000c0 	bic	r0, r0, #192	; 0xc0
 3c0:	e180030c 	orr	r0, r0, r12, lsl #6
 3c4:	e5ca0001 	strb	r0, [r10, #1]
 3c8:	e1a0b002 	mov	r11, r2
 3cc:	ebfffffe 	bl	0 <fontdata::dstxtile()>
 3d0:	e59d2014 	ldr	r2, [sp, #20]
 3d4:	e202200f 	and	r2, r2, #15
 3d8:	e0800002 	add	r0, r0, r2
 3dc:	e7d9208b 	ldrb	r2, [r9, r11, lsl #1]
 3e0:	e200c003 	and	r12, r0, #3
 3e4:	e202203f 	and	r2, r2, #63	; 0x3f
 3e8:	e182230c 	orr	r2, r2, r12, lsl #6
 3ec:	e7c9208b 	strb	r2, [r9, r11, lsl #1]
 3f0:	e5da2001 	ldrb	r2, [r10, #1]
 3f4:	e1a00d00 	lsl	r0, r0, #26
 3f8:	e3c2200f 	bic	r2, r2, #15
 3fc:	e1822e20 	orr	r2, r2, r0, lsr #28
 400:	e5ca2001 	strb	r2, [r10, #1]
 404:	ebfffffe 	bl	0 <fontdata::dstytile()>
 408:	e7d9208b 	ldrb	r2, [r9, r11, lsl #1]
 40c:	e0803a24 	add	r3, r0, r4, lsr #20
 410:	e203303f 	and	r3, r3, #63	; 0x3f
 414:	e3c2203f 	bic	r2, r2, #63	; 0x3f
 418:	e1833002 	orr	r3, r3, r2
 41c:	e7c9308b 	strb	r3, [r9, r11, lsl #1]
 420:	e1d631f4 	ldrsh	r3, [r6, #20]
 424:	eaffff9f 	b	2a8 <bgprint_write(File*, char const*, unsigned int)+0x2a8>
 428:	e3a00005 	mov	r0, #5
 42c:	ebfffffe 	bl	0 <set_errno>
 430:	e3e00000 	mvn	r0, #0
 434:	eaffff52 	b	184 <bgprint_write(File*, char const*, unsigned int)+0x184>
 438:	e3a00016 	mov	r0, #22
 43c:	ebfffffe 	bl	0 <set_errno>
 440:	e3e00000 	mvn	r0, #0
 444:	eaffff4e 	b	184 <bgprint_write(File*, char const*, unsigned int)+0x184>
 448:	00000000 	.word	0x00000000
 44c:	0000001c 	.word	0x0000001c
 450:	00000028 	.word	0x00000028
 454:	0000002c 	.word	0x0000002c
 458:	00000030 	.word	0x00000030
 45c:	00000040 	.word	0x00000040
 460:	00000044 	.word	0x00000044
 464:	00000050 	.word	0x00000050
 468:	00000054 	.word	0x00000054
 46c:	00000070 	.word	0x00000070
 470:	000000b8 	.word	0x000000b8

Disassembly of section .text._ZN7bgprint5ResetEv:

00000000 <bgprint::Reset()>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e59f8088 	ldr	r8, [pc, #136]	; 94 <bgprint::Reset()+0x94>
   8:	e24dd020 	sub	sp, sp, #32
   c:	e5d84000 	ldrb	r4, [r8]
  10:	e3540000 	cmp	r4, #0
  14:	0a000001 	beq	20 <bgprint::Reset()+0x20>
  18:	e28dd020 	add	sp, sp, #32
  1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  20:	e3a01030 	mov	r1, #48	; 0x30
  24:	e3a00020 	mov	r0, #32
  28:	ebfffffe 	bl	0 <fontdata::load(unsigned char, unsigned char)>
  2c:	e59f5064 	ldr	r5, [pc, #100]	; 98 <bgprint::Reset()+0x98>
  30:	e59f7064 	ldr	r7, [pc, #100]	; 9c <bgprint::Reset()+0x9c>
  34:	e59f6064 	ldr	r6, [pc, #100]	; a0 <bgprint::Reset()+0xa0>
  38:	e3a01000 	mov	r1, #0
  3c:	e3a02020 	mov	r2, #32
  40:	e1a0000d 	mov	r0, sp
  44:	e5854000 	str	r4, [r5]
  48:	ebfffffe 	bl	0 <memset>
  4c:	e1a03004 	mov	r3, r4
  50:	e1a02007 	mov	r2, r7
  54:	e3a01020 	mov	r1, #32
  58:	e1a0000d 	mov	r0, sp
  5c:	ebfffffe 	bl	0 <snprintf>
  60:	e2844001 	add	r4, r4, #1
  64:	e1a03005 	mov	r3, r5
  68:	e1a01006 	mov	r1, r6
  6c:	e1a0000d 	mov	r0, sp
  70:	e59f202c 	ldr	r2, [pc, #44]	; a4 <bgprint::Reset()+0xa4>
  74:	ebfffffe 	bl	0 <fs_register_driver>
  78:	e3540008 	cmp	r4, #8
  7c:	e2855020 	add	r5, r5, #32
  80:	1affffec 	bne	38 <bgprint::Reset()+0x38>
  84:	e3a03001 	mov	r3, #1
  88:	e5c83000 	strb	r3, [r8]
  8c:	e28dd020 	add	sp, sp, #32
  90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	...
  a4:	000001b6 	.word	0x000001b6

Disassembly of section .text._ZN7bgprint4OpenENS_4EnChEPcjRNS_7ContextE:

00000000 <bgprint::Open(bgprint::EnCh, char*, unsigned int, bgprint::Context&)>:
   0:	e272c001 	rsbs	r12, r2, #1
   4:	33a0c000 	movcc	r12, #0
   8:	e3500007 	cmp	r0, #7
   c:	838cc001 	orrhi	r12, r12, #1
  10:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  14:	e35c0000 	cmp	r12, #0
  18:	e24dd034 	sub	sp, sp, #52	; 0x34
  1c:	1a00004a 	bne	14c <bgprint::Open(bgprint::EnCh, char*, unsigned int, bgprint::Context&)+0x14c>
  20:	e1a05003 	mov	r5, r3
  24:	e3a0300d 	mov	r3, #13
  28:	e1a06002 	mov	r6, r2
  2c:	e59f2150 	ldr	r2, [pc, #336]	; 184 <bgprint::Open(bgprint::EnCh, char*, unsigned int, bgprint::Context&)+0x184>
  30:	e58d301c 	str	r3, [sp, #28]
  34:	e7d22000 	ldrb	r2, [r2, r0]
  38:	e59f3148 	ldr	r3, [pc, #328]	; 188 <bgprint::Open(bgprint::EnCh, char*, unsigned int, bgprint::Context&)+0x188>
  3c:	e28d4008 	add	r4, sp, #8
  40:	e5cd2014 	strb	r2, [sp, #20]
  44:	e5cdc015 	strb	r12, [sp, #21]
  48:	e1a08001 	mov	r8, r1
  4c:	e8930007 	ldm	r3, {r0, r1, r2}
  50:	e8840007 	stm	r4, {r0, r1, r2}
  54:	e28d9020 	add	r9, sp, #32
  58:	e894000f 	ldm	r4, {r0, r1, r2, r3}
  5c:	e889000f 	stm	r9, {r0, r1, r2, r3}
  60:	e1a00009 	mov	r0, r9
  64:	e59f1120 	ldr	r1, [pc, #288]	; 18c <bgprint::Open(bgprint::EnCh, char*, unsigned int, bgprint::Context&)+0x18c>
  68:	e58dc004 	str	r12, [sp, #4]
  6c:	e58d4000 	str	r4, [sp]
  70:	e58d9018 	str	r9, [sp, #24]
  74:	e5cdc008 	strb	r12, [sp, #8]
  78:	ebfffffe 	bl	0 <fopen>
  7c:	e59d3018 	ldr	r3, [sp, #24]
  80:	e1a07000 	mov	r7, r0
  84:	e1530009 	cmp	r3, r9
  88:	0a000003 	beq	9c <bgprint::Open(bgprint::EnCh, char*, unsigned int, bgprint::Context&)+0x9c>
  8c:	e59d1020 	ldr	r1, [sp, #32]
  90:	e1a00003 	mov	r0, r3
  94:	e2811001 	add	r1, r1, #1
  98:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  9c:	e59d0000 	ldr	r0, [sp]
  a0:	e1500004 	cmp	r0, r4
  a4:	0a000002 	beq	b4 <bgprint::Open(bgprint::EnCh, char*, unsigned int, bgprint::Context&)+0xb4>
  a8:	e59d1008 	ldr	r1, [sp, #8]
  ac:	e2811001 	add	r1, r1, #1
  b0:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  b4:	e3570000 	cmp	r7, #0
  b8:	0a000023 	beq	14c <bgprint::Open(bgprint::EnCh, char*, unsigned int, bgprint::Context&)+0x14c>
  bc:	e3580000 	cmp	r8, #0
  c0:	0a00002b 	beq	174 <bgprint::Open(bgprint::EnCh, char*, unsigned int, bgprint::Context&)+0x174>
  c4:	e1a03006 	mov	r3, r6
  c8:	e3a06001 	mov	r6, #1
  cc:	e3a02000 	mov	r2, #0
  d0:	e1a01008 	mov	r1, r8
  d4:	e1a00007 	mov	r0, r7
  d8:	ebfffffe 	bl	0 <setvbuf>
  dc:	e1d520b4 	ldrh	r2, [r5, #4]
  e0:	e5951000 	ldr	r1, [r5]
  e4:	e1d530b6 	ldrh	r3, [r5, #6]
  e8:	e1a06216 	lsl	r6, r6, r2
  ec:	e3510000 	cmp	r1, #0
  f0:	e1a06316 	lsl	r6, r6, r3
  f4:	0a000018 	beq	15c <bgprint::Open(bgprint::EnCh, char*, unsigned int, bgprint::Context&)+0x15c>
  f8:	e3560000 	cmp	r6, #0
  fc:	0a00000b 	beq	130 <bgprint::Open(bgprint::EnCh, char*, unsigned int, bgprint::Context&)+0x130>
 100:	e3a04000 	mov	r4, #0
 104:	ebfffffe 	bl	0 <fontdata::gettc()>
 108:	e5951000 	ldr	r1, [r5]
 10c:	e1a00800 	lsl	r0, r0, #16
 110:	e1a00840 	asr	r0, r0, #16
 114:	e7c10084 	strb	r0, [r1, r4, lsl #1]
 118:	e0813084 	add	r3, r1, r4, lsl #1
 11c:	e2844001 	add	r4, r4, #1
 120:	e1a00420 	lsr	r0, r0, #8
 124:	e1560004 	cmp	r6, r4
 128:	e5c30001 	strb	r0, [r3, #1]
 12c:	1afffff4 	bne	104 <bgprint::Open(bgprint::EnCh, char*, unsigned int, bgprint::Context&)+0x104>
 130:	e1a02005 	mov	r2, r5
 134:	e3a01000 	mov	r1, #0
 138:	e1d700fe 	ldrsh	r0, [r7, #14]
 13c:	ebfffffe 	bl	0 <ioctl>
 140:	e1a00007 	mov	r0, r7
 144:	e28dd034 	add	sp, sp, #52	; 0x34
 148:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
 14c:	e3a07000 	mov	r7, #0
 150:	e1a00007 	mov	r0, r7
 154:	e28dd034 	add	sp, sp, #52	; 0x34
 158:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
 15c:	e3760113 	cmn	r6, #-1073741820	; 0xc0000004
 160:	83e00000 	mvnhi	r0, #0
 164:	91a00086 	lslls	r0, r6, #1
 168:	ebfffffe 	bl	0 <operator new[](unsigned int)>
 16c:	e5850000 	str	r0, [r5]
 170:	eaffffe0 	b	f8 <bgprint::Open(bgprint::EnCh, char*, unsigned int, bgprint::Context&)+0xf8>
 174:	e1a00006 	mov	r0, r6
 178:	ebfffffe 	bl	0 <malloc>
 17c:	e1a08000 	mov	r8, r0
 180:	eaffffcf 	b	c4 <bgprint::Open(bgprint::EnCh, char*, unsigned int, bgprint::Context&)+0xc4>
	...
 18c:	00000010 	.word	0x00000010

Disassembly of section .text._ZN7bgprint11SetUvScrollEP7__sFILERKNS_8UvScrollE:

00000000 <bgprint::SetUvScroll(__sFILE*, bgprint::UvScroll const&)>:
   0:	e1a02001 	mov	r2, r1
   4:	e1d000fe 	ldrsh	r0, [r0, #14]
   8:	e3a01001 	mov	r1, #1
   c:	eafffffe 	b	0 <ioctl>

Disassembly of section .text._ZN7bgprint6ExportEP7__sFILERKNS_12ExportPpuCmdE:

00000000 <bgprint::Export(__sFILE*, bgprint::ExportPpuCmd const&)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e1a05001 	mov	r5, r1
   8:	e1a04000 	mov	r4, r0
   c:	ebfffffe 	bl	0 <fflush>
  10:	e1a02005 	mov	r2, r5
  14:	e1d400fe 	ldrsh	r0, [r4, #14]
  18:	e3a01002 	mov	r1, #2
  1c:	e8bd4070 	pop	{r4, r5, r6, lr}
  20:	eafffffe 	b	0 <ioctl>

Disassembly of section .text._ZN7bgprint6LocateEP7__sFILEss:

00000000 <bgprint::Locate(__sFILE*, short, short)>:
   0:	e1a03001 	mov	r3, r1
   4:	e59f1000 	ldr	r1, [pc]	; c <bgprint::Locate(__sFILE*, short, short)+0xc>
   8:	eafffffe 	b	0 <fprintf>
   c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN7bgprint3PalEP7__sFILEh:

00000000 <bgprint::Pal(__sFILE*, unsigned char)>:
   0:	e3510003 	cmp	r1, #3
   4:	e1a03001 	mov	r3, r1
   8:	81a0f00e 	movhi	pc, lr
   c:	e59f2008 	ldr	r2, [pc, #8]	; 1c <bgprint::Pal(__sFILE*, unsigned char)+0x1c>
  10:	e1a01000 	mov	r1, r0
  14:	e7920103 	ldr	r0, [r2, r3, lsl #2]
  18:	eafffffe 	b	0 <fputs>
  1c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN7bgprint7GetInfoEP7__sFILERNS_4InfoE:

00000000 <bgprint::GetInfo(__sFILE*, bgprint::Info&)>:
   0:	e2503000 	subs	r3, r0, #0
   4:	0a00000f 	beq	48 <bgprint::GetInfo(__sFILE*, bgprint::Info&)+0x48>
   8:	e92d4070 	push	{r4, r5, r6, lr}
   c:	e1d350fe 	ldrsh	r5, [r3, #14]
  10:	e3750001 	cmn	r5, #1
  14:	0a000009 	beq	40 <bgprint::GetInfo(__sFILE*, bgprint::Info&)+0x40>
  18:	e1a04001 	mov	r4, r1
  1c:	ebfffffe 	bl	0 <fflush>
  20:	e1a02004 	mov	r2, r4
  24:	e3a01003 	mov	r1, #3
  28:	e1a00005 	mov	r0, r5
  2c:	ebfffffe 	bl	0 <ioctl>
  30:	e3700001 	cmn	r0, #1
  34:	13a00000 	movne	r0, #0
  38:	03e00002 	mvneq	r0, #2
  3c:	e8bd8070 	pop	{r4, r5, r6, pc}
  40:	e3e00001 	mvn	r0, #1
  44:	e8bd8070 	pop	{r4, r5, r6, pc}
  48:	e3e00000 	mvn	r0, #0
  4c:	e1a0f00e 	mov	pc, lr

Disassembly of section .text.startup._GLOBAL__sub_I__Z12bgprint_openP4File:

00000000 <_GLOBAL__sub_I__Z12bgprint_openP4File>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e3a05000 	mov	r5, #0
   8:	e3a08004 	mov	r8, #4
   c:	e3a07005 	mov	r7, #5
  10:	e59f4060 	ldr	r4, [pc, #96]	; 78 <_GLOBAL__sub_I__Z12bgprint_openP4File+0x78>
  14:	e2846c01 	add	r6, r4, #256	; 0x100
  18:	e1a00004 	mov	r0, r4
  1c:	e5045004 	str	r5, [r4, #-4]
  20:	ebfffffe 	bl	0 <CEscapeSeqDecoder::CEscapeSeqDecoder()>
  24:	e3a0201e 	mov	r2, #30
  28:	e3a03001 	mov	r3, #1
  2c:	e5845004 	str	r5, [r4, #4]
  30:	e1c480b8 	strh	r8, [r4, #8]
  34:	e1c470ba 	strh	r7, [r4, #10]
  38:	e1c451b0 	strh	r5, [r4, #16]
  3c:	e1c451b2 	strh	r5, [r4, #18]
  40:	e1c451b4 	strh	r5, [r4, #20]
  44:	e1c451b6 	strh	r5, [r4, #22]
  48:	e5c45018 	strb	r5, [r4, #24]
  4c:	e5c45019 	strb	r5, [r4, #25]
  50:	e2844020 	add	r4, r4, #32
  54:	e1540006 	cmp	r4, r6
  58:	e14421b4 	strh	r2, [r4, #-20]	; 0xffffffec
  5c:	e5443012 	strb	r3, [r4, #-18]	; 0xffffffee
  60:	1affffec 	bne	18 <_GLOBAL__sub_I__Z12bgprint_openP4File+0x18>
  64:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  68:	e3a00000 	mov	r0, #0
  6c:	e59f2008 	ldr	r2, [pc, #8]	; 7c <_GLOBAL__sub_I__Z12bgprint_openP4File+0x7c>
  70:	e59f1008 	ldr	r1, [pc, #8]	; 80 <_GLOBAL__sub_I__Z12bgprint_openP4File+0x80>
  74:	eafffffe 	b	0 <__aeabi_atexit>
  78:	00000004 	.word	0x00000004
	...

bin.o:     file format elf32-littlearm


Disassembly of section .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.isra.0:

00000000 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .isra.0]>:
   0:	e2523000 	subs	r3, r2, #0
   4:	13a03001 	movne	r3, #1
   8:	e3510000 	cmp	r1, #0
   c:	13a03000 	movne	r3, #0
  10:	e3530000 	cmp	r3, #0
  14:	e92d4070 	push	{r4, r5, r6, lr}
  18:	1a00001e 	bne	98 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .isra.0]+0x98>
  1c:	e0424001 	sub	r4, r2, r1
  20:	e354000f 	cmp	r4, #15
  24:	e1a06001 	mov	r6, r1
  28:	e1a05000 	mov	r5, r0
  2c:	8a00000c 	bhi	64 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .isra.0]+0x64>
  30:	e3540001 	cmp	r4, #1
  34:	e5900000 	ldr	r0, [r0]
  38:	0a000005 	beq	54 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .isra.0]+0x54>
  3c:	e3540000 	cmp	r4, #0
  40:	1a00000e 	bne	80 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .isra.0]+0x80>
  44:	e3a03000 	mov	r3, #0
  48:	e5854004 	str	r4, [r5, #4]
  4c:	e7c03004 	strb	r3, [r0, r4]
  50:	e8bd8070 	pop	{r4, r5, r6, pc}
  54:	e5d13000 	ldrb	r3, [r1]
  58:	e5c03000 	strb	r3, [r0]
  5c:	e5950000 	ldr	r0, [r5]
  60:	eafffff7 	b	44 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .isra.0]+0x44>
  64:	e3540000 	cmp	r4, #0
  68:	ba00000c 	blt	a0 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .isra.0]+0xa0>
  6c:	e2940001 	adds	r0, r4, #1
  70:	4a000007 	bmi	94 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .isra.0]+0x94>
  74:	ebfffffe 	bl	0 <operator new(unsigned int)>
  78:	e5854008 	str	r4, [r5, #8]
  7c:	e5850000 	str	r0, [r5]
  80:	e1a02004 	mov	r2, r4
  84:	e1a01006 	mov	r1, r6
  88:	ebfffffe 	bl	0 <memcpy>
  8c:	e5950000 	ldr	r0, [r5]
  90:	eaffffeb 	b	44 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .isra.0]+0x44>
  94:	ebfffffe 	bl	0 <std::__throw_bad_alloc()>
  98:	e59f0008 	ldr	r0, [pc, #8]	; a8 <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .isra.0]+0xa8>
  9c:	ebfffffe 	bl	0 <std::__throw_logic_error(char const*)>
  a0:	e59f0004 	ldr	r0, [pc, #4]	; ac <void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .isra.0]+0xac>
  a4:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
  a8:	00000000 	.word	0x00000000
  ac:	0000002c 	.word	0x0000002c

Disassembly of section .text._ZN10CBinHolder13GetDictionaryB5cxx11Ev:

00000000 <CBinHolder::GetDictionary[abi:cxx11]()>:
   0:	e59f3004 	ldr	r3, [pc, #4]	; c <CBinHolder::GetDictionary[abi:cxx11]()+0xc>
   4:	e5930000 	ldr	r0, [r3]
   8:	e1a0f00e 	mov	pc, lr
   c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN10CBinHolderC2Ev:

00000000 <CBinHolder::CBinHolder()>:
   0:	e3a02000 	mov	r2, #0
   4:	e3a0c001 	mov	r12, #1
   8:	e3a015fe 	mov	r1, #1065353216	; 0x3f800000
   c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  10:	e59fe024 	ldr	lr, [pc, #36]	; 3c <CBinHolder::CBinHolder()+0x3c>
  14:	e580c004 	str	r12, [r0, #4]
  18:	e58e0000 	str	r0, [lr]
  1c:	e280e018 	add	lr, r0, #24
  20:	e580e000 	str	lr, [r0]
  24:	e5802008 	str	r2, [r0, #8]
  28:	e580200c 	str	r2, [r0, #12]
  2c:	e5801010 	str	r1, [r0, #16]
  30:	e5802014 	str	r2, [r0, #20]
  34:	e5802018 	str	r2, [r0, #24]
  38:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  3c:	00000000 	.word	0x00000000

Disassembly of section .text._ZNK4CBin4AddrEv:

00000000 <CBin::Addr() const>:
   0:	e5900000 	ldr	r0, [r0]
   4:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZNK4CBin4SizeEv:

00000000 <CBin::Size() const>:
   0:	e5900004 	ldr	r0, [r0, #4]
   4:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZNSt10_HashtableINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4CBinESaISA_ENSt8__detail10_Select1stESt8equal_toIS5_ESt4hashIS5_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb1ELb0ELb1EEEE21_M_insert_unique_nodeEjjPNSC_10_Hash_nodeISA_Lb1EEEj:

00000000 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned int, unsigned int, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, true>*, unsigned int)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e24dd01c 	sub	sp, sp, #28
   c:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  10:	e1a05001 	mov	r5, r1
  14:	e58d0000 	str	r0, [sp]
  18:	e1a08002 	mov	r8, r2
  1c:	e1a07003 	mov	r7, r3
  20:	e5942004 	ldr	r2, [r4, #4]
  24:	e594300c 	ldr	r3, [r4, #12]
  28:	e28d0010 	add	r0, sp, #16
  2c:	e2841010 	add	r1, r4, #16
  30:	ebfffffe 	bl	0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned int, unsigned int, unsigned int) const>
  34:	e5dd3010 	ldrb	r3, [sp, #16]
  38:	e3530000 	cmp	r3, #0
  3c:	1a00000f 	bne	80 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned int, unsigned int, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, true>*, unsigned int)+0x80>
  40:	e5946000 	ldr	r6, [r4]
  44:	e7963105 	ldr	r3, [r6, r5, lsl #2]
  48:	e5878020 	str	r8, [r7, #32]
  4c:	e3530000 	cmp	r3, #0
  50:	e0868105 	add	r8, r6, r5, lsl #2
  54:	0a00004b 	beq	188 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned int, unsigned int, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, true>*, unsigned int)+0x188>
  58:	e5933000 	ldr	r3, [r3]
  5c:	e5873000 	str	r3, [r7]
  60:	e7963105 	ldr	r3, [r6, r5, lsl #2]
  64:	e5837000 	str	r7, [r3]
  68:	e1a00007 	mov	r0, r7
  6c:	e594300c 	ldr	r3, [r4, #12]
  70:	e2833001 	add	r3, r3, #1
  74:	e584300c 	str	r3, [r4, #12]
  78:	e28dd01c 	add	sp, sp, #28
  7c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  80:	e59db014 	ldr	r11, [sp, #20]
  84:	e35b0001 	cmp	r11, #1
  88:	01a06004 	moveq	r6, r4
  8c:	03a02000 	moveq	r2, #0
  90:	05a62018 	streq	r2, [r6, #24]!
  94:	058d600c 	streq	r6, [sp, #12]
  98:	0a00000a 	beq	c8 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned int, unsigned int, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, true>*, unsigned int)+0xc8>
  9c:	e37b021e 	cmn	r11, #-536870911	; 0xe0000001
  a0:	8a000045 	bhi	1bc <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned int, unsigned int, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, true>*, unsigned int)+0x1bc>
  a4:	e1a0510b 	lsl	r5, r11, #2
  a8:	e1a00005 	mov	r0, r5
  ac:	ebfffffe 	bl	0 <operator new(unsigned int)>
  b0:	e2843018 	add	r3, r4, #24
  b4:	e1a02005 	mov	r2, r5
  b8:	e3a01000 	mov	r1, #0
  bc:	e1a06000 	mov	r6, r0
  c0:	e58d300c 	str	r3, [sp, #12]
  c4:	ebfffffe 	bl	0 <memset>
  c8:	e3a09000 	mov	r9, #0
  cc:	e594a008 	ldr	r10, [r4, #8]
  d0:	e5849008 	str	r9, [r4, #8]
  d4:	e15a0009 	cmp	r10, r9
  d8:	12843008 	addne	r3, r4, #8
  dc:	158d3008 	strne	r3, [sp, #8]
  e0:	1a000006 	bne	100 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned int, unsigned int, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, true>*, unsigned int)+0x100>
  e4:	ea00001a 	b	154 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned int, unsigned int, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, true>*, unsigned int)+0x154>
  e8:	e5900000 	ldr	r0, [r0]
  ec:	e5850000 	str	r0, [r5]
  f0:	e7961101 	ldr	r1, [r6, r1, lsl #2]
  f4:	e5815000 	str	r5, [r1]
  f8:	e35a0000 	cmp	r10, #0
  fc:	0a000014 	beq	154 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned int, unsigned int, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, true>*, unsigned int)+0x154>
 100:	e1a0500a 	mov	r5, r10
 104:	e1a0100b 	mov	r1, r11
 108:	e5950020 	ldr	r0, [r5, #32]
 10c:	ebfffffe 	bl	0 <__aeabi_uidivmod>
 110:	e7960101 	ldr	r0, [r6, r1, lsl #2]
 114:	e59aa000 	ldr	r10, [r10]
 118:	e3500000 	cmp	r0, #0
 11c:	1afffff1 	bne	e8 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned int, unsigned int, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, true>*, unsigned int)+0xe8>
 120:	e5940008 	ldr	r0, [r4, #8]
 124:	e59d3008 	ldr	r3, [sp, #8]
 128:	e5850000 	str	r0, [r5]
 12c:	e5845008 	str	r5, [r4, #8]
 130:	e7863101 	str	r3, [r6, r1, lsl #2]
 134:	e5950000 	ldr	r0, [r5]
 138:	e3500000 	cmp	r0, #0
 13c:	01a09001 	moveq	r9, r1
 140:	0affffec 	beq	f8 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned int, unsigned int, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, true>*, unsigned int)+0xf8>
 144:	e35a0000 	cmp	r10, #0
 148:	e7865109 	str	r5, [r6, r9, lsl #2]
 14c:	e1a09001 	mov	r9, r1
 150:	1affffea 	bne	100 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned int, unsigned int, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, true>*, unsigned int)+0x100>
 154:	e5940000 	ldr	r0, [r4]
 158:	e59d300c 	ldr	r3, [sp, #12]
 15c:	e5941004 	ldr	r1, [r4, #4]
 160:	e1530000 	cmp	r3, r0
 164:	11a01101 	lslne	r1, r1, #2
 168:	1bfffffe 	blne	0 <operator delete(void*, unsigned int)>
 16c:	e1a0100b 	mov	r1, r11
 170:	e1a00008 	mov	r0, r8
 174:	e584b004 	str	r11, [r4, #4]
 178:	e5846000 	str	r6, [r4]
 17c:	ebfffffe 	bl	0 <__aeabi_uidivmod>
 180:	e1a05001 	mov	r5, r1
 184:	eaffffae 	b	44 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned int, unsigned int, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, true>*, unsigned int)+0x44>
 188:	e5943008 	ldr	r3, [r4, #8]
 18c:	e5873000 	str	r3, [r7]
 190:	e5847008 	str	r7, [r4, #8]
 194:	e5973000 	ldr	r3, [r7]
 198:	e3530000 	cmp	r3, #0
 19c:	0a000003 	beq	1b0 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned int, unsigned int, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, true>*, unsigned int)+0x1b0>
 1a0:	e5930020 	ldr	r0, [r3, #32]
 1a4:	e5941004 	ldr	r1, [r4, #4]
 1a8:	ebfffffe 	bl	0 <__aeabi_uidivmod>
 1ac:	e7867101 	str	r7, [r6, r1, lsl #2]
 1b0:	e2843008 	add	r3, r4, #8
 1b4:	e5883000 	str	r3, [r8]
 1b8:	eaffffaa 	b	68 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(unsigned int, unsigned int, std::__detail::_Hash_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, true>*, unsigned int)+0x68>
 1bc:	e37b0107 	cmn	r11, #-1073741823	; 0xc0000001
 1c0:	8bfffffe 	blhi	0 <std::__throw_bad_array_new_length()>
 1c4:	ebfffffe 	bl	0 <std::__throw_bad_alloc()>

Disassembly of section .text._ZNKSt10_HashtableINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_P4CBinESaISA_ENSt8__detail10_Select1stESt8equal_toIS5_ESt4hashIS5_ENSC_18_Mod_range_hashingENSC_20_Default_ranged_hashENSC_20_Prime_rehash_policyENSC_17_Hashtable_traitsILb1ELb0ELb1EEEE19_M_find_before_nodeEjRS7_j:

00000000 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) const>:
   0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e1a09003 	mov	r9, r3
   8:	e5903000 	ldr	r3, [r0]
   c:	e793b101 	ldr	r11, [r3, r1, lsl #2]
  10:	e35b0000 	cmp	r11, #0
  14:	0a00001d 	beq	90 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) const+0x90>
  18:	e59b5000 	ldr	r5, [r11]
  1c:	e1a07000 	mov	r7, r0
  20:	e1a08001 	mov	r8, r1
  24:	e1a0a002 	mov	r10, r2
  28:	e5956020 	ldr	r6, [r5, #32]
  2c:	ea00000a 	b	5c <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) const+0x5c>
  30:	e5954000 	ldr	r4, [r5]
  34:	e3540000 	cmp	r4, #0
  38:	0a000016 	beq	98 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) const+0x98>
  3c:	e5946020 	ldr	r6, [r4, #32]
  40:	e5971004 	ldr	r1, [r7, #4]
  44:	e1a00006 	mov	r0, r6
  48:	ebfffffe 	bl	0 <__aeabi_uidivmod>
  4c:	e1580001 	cmp	r8, r1
  50:	e1a0b005 	mov	r11, r5
  54:	1a000012 	bne	a4 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) const+0xa4>
  58:	e1a05004 	mov	r5, r4
  5c:	e1560009 	cmp	r6, r9
  60:	1afffff2 	bne	30 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) const+0x30>
  64:	e59a2004 	ldr	r2, [r10, #4]
  68:	e5953008 	ldr	r3, [r5, #8]
  6c:	e1520003 	cmp	r2, r3
  70:	1affffee 	bne	30 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) const+0x30>
  74:	e3520000 	cmp	r2, #0
  78:	0a000004 	beq	90 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) const+0x90>
  7c:	e5951004 	ldr	r1, [r5, #4]
  80:	e59a0000 	ldr	r0, [r10]
  84:	ebfffffe 	bl	0 <memcmp>
  88:	e3500000 	cmp	r0, #0
  8c:	1affffe7 	bne	30 <std::_Hashtable<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int) const+0x30>
  90:	e1a0000b 	mov	r0, r11
  94:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
  98:	e1a0b004 	mov	r11, r4
  9c:	e1a0000b 	mov	r0, r11
  a0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
  a4:	e3a0b000 	mov	r11, #0
  a8:	e1a0000b 	mov	r0, r11
  ac:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

Disassembly of section .text._ZNSt8__detail9_Map_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_P4CBinESaISB_ENS_10_Select1stESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb0ELb1EEELb1EEixERS8_:

00000000 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e1a04001 	mov	r4, r1
   8:	e1a05000 	mov	r5, r0
   c:	e59f20a0 	ldr	r2, [pc, #160]	; b4 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0xb4>
  10:	e24dd008 	sub	sp, sp, #8
  14:	e5911004 	ldr	r1, [r1, #4]
  18:	e5940000 	ldr	r0, [r4]
  1c:	ebfffffe 	bl	0 <std::_Hash_bytes(void const*, unsigned int, unsigned int)>
  20:	e5951004 	ldr	r1, [r5, #4]
  24:	e1a06000 	mov	r6, r0
  28:	ebfffffe 	bl	0 <__aeabi_uidivmod>
  2c:	e1a02004 	mov	r2, r4
  30:	e1a00005 	mov	r0, r5
  34:	e1a03006 	mov	r3, r6
  38:	e1a07001 	mov	r7, r1
  3c:	ebfffffe 	bl	0 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  40:	e3500000 	cmp	r0, #0
  44:	0a000005 	beq	60 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x60>
  48:	e590c000 	ldr	r12, [r0]
  4c:	e35c0000 	cmp	r12, #0
  50:	128c001c 	addne	r0, r12, #28
  54:	0a000001 	beq	60 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x60>
  58:	e28dd008 	add	sp, sp, #8
  5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  60:	e3a00024 	mov	r0, #36	; 0x24
  64:	ebfffffe 	bl	0 <operator new(unsigned int)>
  68:	e8940006 	ldm	r4, {r1, r2}
  6c:	e3a08000 	mov	r8, #0
  70:	e1a04000 	mov	r4, r0
  74:	e280300c 	add	r3, r0, #12
  78:	e0812002 	add	r2, r1, r2
  7c:	e4808004 	str	r8, [r0], #4
  80:	e5843004 	str	r3, [r4, #4]
  84:	ebfffffe 	bl	0 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  88:	e3a0c001 	mov	r12, #1
  8c:	e584801c 	str	r8, [r4, #28]
  90:	e1a02006 	mov	r2, r6
  94:	e1a01007 	mov	r1, r7
  98:	e1a00005 	mov	r0, r5
  9c:	e1a03004 	mov	r3, r4
  a0:	e58dc000 	str	r12, [sp]
  a4:	ebfffffe 	bl	0 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>
  a8:	e280001c 	add	r0, r0, #28
  ac:	e28dd008 	add	sp, sp, #8
  b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  b4:	c70f6907 	.word	0xc70f6907

Disassembly of section .text._ZNSt8__detail9_Map_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_P4CBinESaISB_ENS_10_Select1stESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb0ELb1EEELb1EEixEOS6_:

00000000 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e1a04001 	mov	r4, r1
   8:	e1a05000 	mov	r5, r0
   c:	e59f20d8 	ldr	r2, [pc, #216]	; ec <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xec>
  10:	e24dd010 	sub	sp, sp, #16
  14:	e5911004 	ldr	r1, [r1, #4]
  18:	e5940000 	ldr	r0, [r4]
  1c:	ebfffffe 	bl	0 <std::_Hash_bytes(void const*, unsigned int, unsigned int)>
  20:	e5951004 	ldr	r1, [r5, #4]
  24:	e1a06000 	mov	r6, r0
  28:	ebfffffe 	bl	0 <__aeabi_uidivmod>
  2c:	e1a02004 	mov	r2, r4
  30:	e1a00005 	mov	r0, r5
  34:	e1a03006 	mov	r3, r6
  38:	e1a07001 	mov	r7, r1
  3c:	ebfffffe 	bl	0 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
  40:	e3500000 	cmp	r0, #0
  44:	0a000005 	beq	60 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x60>
  48:	e590c000 	ldr	r12, [r0]
  4c:	e35c0000 	cmp	r12, #0
  50:	128c001c 	addne	r0, r12, #28
  54:	0a000001 	beq	60 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x60>
  58:	e28dd010 	add	sp, sp, #16
  5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  60:	e3a00024 	mov	r0, #36	; 0x24
  64:	ebfffffe 	bl	0 <operator new(unsigned int)>
  68:	e1a08004 	mov	r8, r4
  6c:	e3a01000 	mov	r1, #0
  70:	e1a03000 	mov	r3, r0
  74:	e4982008 	ldr	r2, [r8], #8
  78:	e480100c 	str	r1, [r0], #12
  7c:	e1520008 	cmp	r2, r8
  80:	e5830004 	str	r0, [r3, #4]
  84:	0a000012 	beq	d4 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0xd4>
  88:	e5832004 	str	r2, [r3, #4]
  8c:	e5942008 	ldr	r2, [r4, #8]
  90:	e583200c 	str	r2, [r3, #12]
  94:	e3a0e001 	mov	lr, #1
  98:	e3a0c000 	mov	r12, #0
  9c:	e5848000 	str	r8, [r4]
  a0:	e58de000 	str	lr, [sp]
  a4:	e594e004 	ldr	lr, [r4, #4]
  a8:	e1a02006 	mov	r2, r6
  ac:	e1a01007 	mov	r1, r7
  b0:	e1a00005 	mov	r0, r5
  b4:	e5c4c008 	strb	r12, [r4, #8]
  b8:	e583c01c 	str	r12, [r3, #28]
  bc:	e584c004 	str	r12, [r4, #4]
  c0:	e583e008 	str	lr, [r3, #8]
  c4:	ebfffffe 	bl	0 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)>
  c8:	e280001c 	add	r0, r0, #28
  cc:	e28dd010 	add	sp, sp, #16
  d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  d4:	e3a02010 	mov	r2, #16
  d8:	e1a01008 	mov	r1, r8
  dc:	e58d300c 	str	r3, [sp, #12]
  e0:	ebfffffe 	bl	0 <memcpy>
  e4:	e59d300c 	ldr	r3, [sp, #12]
  e8:	eaffffe9 	b	94 <std::__detail::_Map_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, CBin*> >, std::__detail::_Select1st, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)+0x94>
  ec:	c70f6907 	.word	0xc70f6907

Disassembly of section .text._ZN10CBinHolder8RegisterEP4CBin:

00000000 <CBinHolder::Register(CBin*)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e1a04001 	mov	r4, r1
   8:	e1a05000 	mov	r5, r0
   c:	e59f20c8 	ldr	r2, [pc, #200]	; dc <CBinHolder::Register(CBin*)+0xdc>
  10:	e591100c 	ldr	r1, [r1, #12]
  14:	e5940008 	ldr	r0, [r4, #8]
  18:	e1a0700e 	mov	r7, lr
  1c:	ebfffffe 	bl	0 <std::_Hash_bytes(void const*, unsigned int, unsigned int)>
  20:	e1a06000 	mov	r6, r0
  24:	e5951004 	ldr	r1, [r5, #4]
  28:	e2848008 	add	r8, r4, #8
  2c:	ebfffffe 	bl	0 <__aeabi_uidivmod>
  30:	e1a03006 	mov	r3, r6
  34:	e1a02008 	mov	r2, r8
  38:	e1a00005 	mov	r0, r5
  3c:	ebfffffe 	bl	0 <CBinHolder::Register(CBin*)>
  40:	e3500000 	cmp	r0, #0
  44:	0a00001f 	beq	c8 <CBinHolder::Register(CBin*)+0xc8>
  48:	e5903000 	ldr	r3, [r0]
  4c:	e3530000 	cmp	r3, #0
  50:	0a00001c 	beq	c8 <CBinHolder::Register(CBin*)+0xc8>
  54:	e59f0084 	ldr	r0, [pc, #132]	; e0 <CBinHolder::Register(CBin*)+0xe0>
  58:	ebfffffe 	bl	0 <b8SysPuts>
  5c:	e59f0080 	ldr	r0, [pc, #128]	; e4 <CBinHolder::Register(CBin*)+0xe4>
  60:	ebfffffe 	bl	0 <b8SysPuts>
  64:	e59f007c 	ldr	r0, [pc, #124]	; e8 <CBinHolder::Register(CBin*)+0xe8>
  68:	ebfffffe 	bl	0 <b8SysPuts>
  6c:	e3a0000b 	mov	r0, #11
  70:	ebfffffe 	bl	0 <b8SysPutNum>
  74:	e59f0070 	ldr	r0, [pc, #112]	; ec <CBinHolder::Register(CBin*)+0xec>
  78:	ebfffffe 	bl	0 <b8SysPuts>
  7c:	e59f006c 	ldr	r0, [pc, #108]	; f0 <CBinHolder::Register(CBin*)+0xf0>
  80:	ebfffffe 	bl	0 <b8SysPuts>
  84:	e59f0068 	ldr	r0, [pc, #104]	; f4 <CBinHolder::Register(CBin*)+0xf4>
  88:	ebfffffe 	bl	0 <b8SysPuts>
  8c:	e59f0064 	ldr	r0, [pc, #100]	; f8 <CBinHolder::Register(CBin*)+0xf8>
  90:	ebfffffe 	bl	0 <b8SysPuts>
  94:	e59f0060 	ldr	r0, [pc, #96]	; fc <CBinHolder::Register(CBin*)+0xfc>
  98:	ebfffffe 	bl	0 <b8SysPuts>
  9c:	e59f005c 	ldr	r0, [pc, #92]	; 100 <CBinHolder::Register(CBin*)+0x100>
  a0:	ebfffffe 	bl	0 <b8SysPuts>
  a4:	e1a00007 	mov	r0, r7
  a8:	ebfffffe 	bl	0 <b8SysPutHex>
  ac:	e59f0048 	ldr	r0, [pc, #72]	; fc <CBinHolder::Register(CBin*)+0xfc>
  b0:	ebfffffe 	bl	0 <b8SysPuts>
  b4:	e59f0048 	ldr	r0, [pc, #72]	; 104 <CBinHolder::Register(CBin*)+0x104>
  b8:	ebfffffe 	bl	0 <b8SysPuts>
  bc:	e59f0044 	ldr	r0, [pc, #68]	; 108 <CBinHolder::Register(CBin*)+0x108>
  c0:	ebfffffe 	bl	0 <b8SysPuts>
  c4:	e1000070 	hlt	0x0000
  c8:	e1a01008 	mov	r1, r8
  cc:	e1a00005 	mov	r0, r5
  d0:	ebfffffe 	bl	0 <CBinHolder::Register(CBin*)>
  d4:	e5804000 	str	r4, [r0]
  d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  dc:	c70f6907 	.word	0xc70f6907
  e0:	00000000 	.word	0x00000000
  e4:	0000001c 	.word	0x0000001c
  e8:	00000024 	.word	0x00000024
  ec:	00000028 	.word	0x00000028
  f0:	0000002c 	.word	0x0000002c
  f4:	00000038 	.word	0x00000038
  f8:	0000003c 	.word	0x0000003c
  fc:	00000068 	.word	0x00000068
 100:	0000006c 	.word	0x0000006c
 104:	00000088 	.word	0x00000088
 108:	000000d0 	.word	0x000000d0

Disassembly of section .text._ZN4CBinC2EPKcPKvj:

00000000 <CBin::CBin(char const*, void const*, unsigned int)>:
   0:	e3a0c000 	mov	r12, #0
   4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   8:	e59f92b0 	ldr	r9, [pc, #688]	; 2c0 <CBin::CBin(char const*, void const*, unsigned int)+0x2c0>
   c:	e280a010 	add	r10, r0, #16
  10:	e5995000 	ldr	r5, [r9]
  14:	e1a04000 	mov	r4, r0
  18:	e155000c 	cmp	r5, r12
  1c:	e1a06001 	mov	r6, r1
  20:	e1a07002 	mov	r7, r2
  24:	e1a08003 	mov	r8, r3
  28:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  2c:	e280b008 	add	r11, r0, #8
  30:	e580c00c 	str	r12, [r0, #12]
  34:	e5c0c010 	strb	r12, [r0, #16]
  38:	e580a008 	str	r10, [r0, #8]
  3c:	0a000088 	beq	264 <CBin::CBin(char const*, void const*, unsigned int)+0x264>
  40:	e28d5018 	add	r5, sp, #24
  44:	e3560000 	cmp	r6, #0
  48:	e58d5010 	str	r5, [sp, #16]
  4c:	059f0270 	ldreq	r0, [pc, #624]	; 2c4 <CBin::CBin(char const*, void const*, unsigned int)+0x2c4>
  50:	0bfffffe 	bleq	0 <std::__throw_logic_error(char const*)>
  54:	e1a00006 	mov	r0, r6
  58:	ebfffffe 	bl	0 <strlen>
  5c:	e350000f 	cmp	r0, #15
  60:	e1a02000 	mov	r2, r0
  64:	8a000049 	bhi	190 <CBin::CBin(char const*, void const*, unsigned int)+0x190>
  68:	e3520001 	cmp	r2, #1
  6c:	0a000043 	beq	180 <CBin::CBin(char const*, void const*, unsigned int)+0x180>
  70:	e3520000 	cmp	r2, #0
  74:	01a01005 	moveq	r1, r5
  78:	1a00008e 	bne	2b8 <CBin::CBin(char const*, void const*, unsigned int)+0x2b8>
  7c:	e3a03000 	mov	r3, #0
  80:	e58d2014 	str	r2, [sp, #20]
  84:	e7c13002 	strb	r3, [r1, r2]
  88:	e59d3010 	ldr	r3, [sp, #16]
  8c:	e3a0202e 	mov	r2, #46	; 0x2e
  90:	e58d3004 	str	r3, [sp, #4]
  94:	e59f322c 	ldr	r3, [pc, #556]	; 2c8 <CBin::CBin(char const*, void const*, unsigned int)+0x2c8>
  98:	e59f122c 	ldr	r1, [pc, #556]	; 2cc <CBin::CBin(char const*, void const*, unsigned int)+0x2cc>
  9c:	e58d3000 	str	r3, [sp]
  a0:	e59f0228 	ldr	r0, [pc, #552]	; 2d0 <CBin::CBin(char const*, void const*, unsigned int)+0x2d0>
  a4:	e59f3228 	ldr	r3, [pc, #552]	; 2d4 <CBin::CBin(char const*, void const*, unsigned int)+0x2d4>
  a8:	ebfffffe 	bl	0 <printf>
  ac:	e59d0010 	ldr	r0, [sp, #16]
  b0:	e1500005 	cmp	r0, r5
  b4:	0a000002 	beq	c4 <CBin::CBin(char const*, void const*, unsigned int)+0xc4>
  b8:	e59d1018 	ldr	r1, [sp, #24]
  bc:	e2811001 	add	r1, r1, #1
  c0:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  c4:	e1a00006 	mov	r0, r6
  c8:	e58d5010 	str	r5, [sp, #16]
  cc:	ebfffffe 	bl	0 <strlen>
  d0:	e350000f 	cmp	r0, #15
  d4:	e1a02000 	mov	r2, r0
  d8:	8a00003d 	bhi	1d4 <CBin::CBin(char const*, void const*, unsigned int)+0x1d4>
  dc:	e3520001 	cmp	r2, #1
  e0:	1a000036 	bne	1c0 <CBin::CBin(char const*, void const*, unsigned int)+0x1c0>
  e4:	e1a01005 	mov	r1, r5
  e8:	e5d63000 	ldrb	r3, [r6]
  ec:	e5cd3018 	strb	r3, [sp, #24]
  f0:	e3a03000 	mov	r3, #0
  f4:	e58d2014 	str	r2, [sp, #20]
  f8:	e7c13002 	strb	r3, [r1, r2]
  fc:	e59d3010 	ldr	r3, [sp, #16]
 100:	e5940008 	ldr	r0, [r4, #8]
 104:	e1530005 	cmp	r3, r5
 108:	e28d2010 	add	r2, sp, #16
 10c:	0a00003c 	beq	204 <CBin::CBin(char const*, void const*, unsigned int)+0x204>
 110:	e15a0000 	cmp	r10, r0
 114:	e5843008 	str	r3, [r4, #8]
 118:	0a000049 	beq	244 <CBin::CBin(char const*, void const*, unsigned int)+0x244>
 11c:	e59d3014 	ldr	r3, [sp, #20]
 120:	e59d2018 	ldr	r2, [sp, #24]
 124:	e3500000 	cmp	r0, #0
 128:	e584300c 	str	r3, [r4, #12]
 12c:	e5943010 	ldr	r3, [r4, #16]
 130:	e5842010 	str	r2, [r4, #16]
 134:	0a000046 	beq	254 <CBin::CBin(char const*, void const*, unsigned int)+0x254>
 138:	e58d3018 	str	r3, [sp, #24]
 13c:	e58d0010 	str	r0, [sp, #16]
 140:	e3a03000 	mov	r3, #0
 144:	e58d3014 	str	r3, [sp, #20]
 148:	e5c03000 	strb	r3, [r0]
 14c:	e59d0010 	ldr	r0, [sp, #16]
 150:	e1500005 	cmp	r0, r5
 154:	0a000002 	beq	164 <CBin::CBin(char const*, void const*, unsigned int)+0x164>
 158:	e59d1018 	ldr	r1, [sp, #24]
 15c:	e2811001 	add	r1, r1, #1
 160:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 164:	e5990000 	ldr	r0, [r9]
 168:	e1a01004 	mov	r1, r4
 16c:	e8840180 	stm	r4, {r7, r8}
 170:	ebfffffe 	bl	0 <CBin::CBin(char const*, void const*, unsigned int)>
 174:	e1a00004 	mov	r0, r4
 178:	e28dd02c 	add	sp, sp, #44	; 0x2c
 17c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 180:	e5d63000 	ldrb	r3, [r6]
 184:	e1a01005 	mov	r1, r5
 188:	e5cd3018 	strb	r3, [sp, #24]
 18c:	eaffffba 	b	7c <CBin::CBin(char const*, void const*, unsigned int)+0x7c>
 190:	e2820001 	add	r0, r2, #1
 194:	e58d200c 	str	r2, [sp, #12]
 198:	ebfffffe 	bl	0 <operator new(unsigned int)>
 19c:	e59d200c 	ldr	r2, [sp, #12]
 1a0:	e58d0010 	str	r0, [sp, #16]
 1a4:	e58d2018 	str	r2, [sp, #24]
 1a8:	e1a01006 	mov	r1, r6
 1ac:	e58d200c 	str	r2, [sp, #12]
 1b0:	ebfffffe 	bl	0 <memcpy>
 1b4:	e59d1010 	ldr	r1, [sp, #16]
 1b8:	e59d200c 	ldr	r2, [sp, #12]
 1bc:	eaffffae 	b	7c <CBin::CBin(char const*, void const*, unsigned int)+0x7c>
 1c0:	e3520000 	cmp	r2, #0
 1c4:	01a01005 	moveq	r1, r5
 1c8:	0affffc8 	beq	f0 <CBin::CBin(char const*, void const*, unsigned int)+0xf0>
 1cc:	e1a00005 	mov	r0, r5
 1d0:	ea000005 	b	1ec <CBin::CBin(char const*, void const*, unsigned int)+0x1ec>
 1d4:	e2820001 	add	r0, r2, #1
 1d8:	e58d200c 	str	r2, [sp, #12]
 1dc:	ebfffffe 	bl	0 <operator new(unsigned int)>
 1e0:	e59d200c 	ldr	r2, [sp, #12]
 1e4:	e58d0010 	str	r0, [sp, #16]
 1e8:	e58d2018 	str	r2, [sp, #24]
 1ec:	e1a01006 	mov	r1, r6
 1f0:	e58d200c 	str	r2, [sp, #12]
 1f4:	ebfffffe 	bl	0 <memcpy>
 1f8:	e59d1010 	ldr	r1, [sp, #16]
 1fc:	e59d200c 	ldr	r2, [sp, #12]
 200:	eaffffba 	b	f0 <CBin::CBin(char const*, void const*, unsigned int)+0xf0>
 204:	e152000b 	cmp	r2, r11
 208:	0a000028 	beq	2b0 <CBin::CBin(char const*, void const*, unsigned int)+0x2b0>
 20c:	e59d2014 	ldr	r2, [sp, #20]
 210:	e3520000 	cmp	r2, #0
 214:	0a000005 	beq	230 <CBin::CBin(char const*, void const*, unsigned int)+0x230>
 218:	e3520001 	cmp	r2, #1
 21c:	0a00001e 	beq	29c <CBin::CBin(char const*, void const*, unsigned int)+0x29c>
 220:	e1a01005 	mov	r1, r5
 224:	ebfffffe 	bl	0 <memcpy>
 228:	e59d2014 	ldr	r2, [sp, #20]
 22c:	e5940008 	ldr	r0, [r4, #8]
 230:	e3a03000 	mov	r3, #0
 234:	e584200c 	str	r2, [r4, #12]
 238:	e7c03002 	strb	r3, [r0, r2]
 23c:	e59d0010 	ldr	r0, [sp, #16]
 240:	eaffffbe 	b	140 <CBin::CBin(char const*, void const*, unsigned int)+0x140>
 244:	e59d3014 	ldr	r3, [sp, #20]
 248:	e584300c 	str	r3, [r4, #12]
 24c:	e59d3018 	ldr	r3, [sp, #24]
 250:	e5843010 	str	r3, [r4, #16]
 254:	e58d5010 	str	r5, [sp, #16]
 258:	e28d5018 	add	r5, sp, #24
 25c:	e1a00005 	mov	r0, r5
 260:	eaffffb6 	b	140 <CBin::CBin(char const*, void const*, unsigned int)+0x140>
 264:	e3a0001c 	mov	r0, #28
 268:	ebfffffe 	bl	0 <operator new(unsigned int)>
 26c:	e3a035fe 	mov	r3, #1065353216	; 0x3f800000
 270:	e3a02001 	mov	r2, #1
 274:	e5803010 	str	r3, [r0, #16]
 278:	e2803018 	add	r3, r0, #24
 27c:	e5802004 	str	r2, [r0, #4]
 280:	e5805008 	str	r5, [r0, #8]
 284:	e580500c 	str	r5, [r0, #12]
 288:	e5805014 	str	r5, [r0, #20]
 28c:	e5805018 	str	r5, [r0, #24]
 290:	e5890000 	str	r0, [r9]
 294:	e5803000 	str	r3, [r0]
 298:	eaffff68 	b	40 <CBin::CBin(char const*, void const*, unsigned int)+0x40>
 29c:	e5dd3018 	ldrb	r3, [sp, #24]
 2a0:	e5c03000 	strb	r3, [r0]
 2a4:	e59d2014 	ldr	r2, [sp, #20]
 2a8:	e5940008 	ldr	r0, [r4, #8]
 2ac:	eaffffdf 	b	230 <CBin::CBin(char const*, void const*, unsigned int)+0x230>
 2b0:	e1a00005 	mov	r0, r5
 2b4:	eaffffa1 	b	140 <CBin::CBin(char const*, void const*, unsigned int)+0x140>
 2b8:	e1a00005 	mov	r0, r5
 2bc:	eaffffb9 	b	1a8 <CBin::CBin(char const*, void const*, unsigned int)+0x1a8>
	...
 2c8:	00000028 	.word	0x00000028
 2cc:	0000001c 	.word	0x0000001c
 2d0:	00000008 	.word	0x00000008
 2d4:	00000000 	.word	0x00000000

Disassembly of section .text._ZN10CBinHolder3GetEPKc:

00000000 <CBinHolder::Get(char const*)>:
   0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   4:	e59f73e8 	ldr	r7, [pc, #1000]	; 3f4 <CBinHolder::Get(char const*)+0x3f4>
   8:	e1a0800e 	mov	r8, lr
   c:	e5979000 	ldr	r9, [r7]
  10:	e1a06000 	mov	r6, r0
  14:	e3590000 	cmp	r9, #0
  18:	e24dd024 	sub	sp, sp, #36	; 0x24
  1c:	0a0000aa 	beq	2cc <CBinHolder::Get(char const*)+0x2cc>
  20:	e28d500c 	add	r5, sp, #12
  24:	e3560000 	cmp	r6, #0
  28:	e58d5004 	str	r5, [sp, #4]
  2c:	059f03c4 	ldreq	r0, [pc, #964]	; 3f8 <CBinHolder::Get(char const*)+0x3f8>
  30:	0bfffffe 	bleq	0 <std::__throw_logic_error(char const*)>
  34:	e1a00006 	mov	r0, r6
  38:	ebfffffe 	bl	0 <strlen>
  3c:	e350000f 	cmp	r0, #15
  40:	e1a04000 	mov	r4, r0
  44:	8a00003d 	bhi	140 <CBinHolder::Get(char const*)+0x140>
  48:	e3540001 	cmp	r4, #1
  4c:	0a000037 	beq	130 <CBinHolder::Get(char const*)+0x130>
  50:	e3540000 	cmp	r4, #0
  54:	01a02005 	moveq	r2, r5
  58:	1a0000e3 	bne	3ec <CBinHolder::Get(char const*)+0x3ec>
  5c:	e3a03000 	mov	r3, #0
  60:	e58d4008 	str	r4, [sp, #8]
  64:	e7c23004 	strb	r3, [r2, r4]
  68:	e99d0003 	ldmib	sp, {r0, r1}
  6c:	e59f2388 	ldr	r2, [pc, #904]	; 3fc <CBinHolder::Get(char const*)+0x3fc>
  70:	ebfffffe 	bl	0 <std::_Hash_bytes(void const*, unsigned int, unsigned int)>
  74:	e1a04000 	mov	r4, r0
  78:	e5991004 	ldr	r1, [r9, #4]
  7c:	ebfffffe 	bl	0 <__aeabi_uidivmod>
  80:	e1a03004 	mov	r3, r4
  84:	e1a00009 	mov	r0, r9
  88:	e28d2004 	add	r2, sp, #4
  8c:	ebfffffe 	bl	0 <CBinHolder::Get(char const*)>
  90:	e3500000 	cmp	r0, #0
  94:	0a000040 	beq	19c <CBinHolder::Get(char const*)+0x19c>
  98:	e5904000 	ldr	r4, [r0]
  9c:	e59d0004 	ldr	r0, [sp, #4]
  a0:	e1500005 	cmp	r0, r5
  a4:	0a000002 	beq	b4 <CBinHolder::Get(char const*)+0xb4>
  a8:	e59d100c 	ldr	r1, [sp, #12]
  ac:	e2811001 	add	r1, r1, #1
  b0:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  b4:	e3540000 	cmp	r4, #0
  b8:	0a00003d 	beq	1b4 <CBinHolder::Get(char const*)+0x1b4>
  bc:	e1a00006 	mov	r0, r6
  c0:	e58d5004 	str	r5, [sp, #4]
  c4:	ebfffffe 	bl	0 <strlen>
  c8:	e350000f 	cmp	r0, #15
  cc:	e1a04000 	mov	r4, r0
  d0:	e5977000 	ldr	r7, [r7]
  d4:	8a000027 	bhi	178 <CBinHolder::Get(char const*)+0x178>
  d8:	e3540001 	cmp	r4, #1
  dc:	1a000020 	bne	164 <CBinHolder::Get(char const*)+0x164>
  e0:	e5d63000 	ldrb	r3, [r6]
  e4:	e5cd300c 	strb	r3, [sp, #12]
  e8:	e1a03005 	mov	r3, r5
  ec:	e3a02000 	mov	r2, #0
  f0:	e58d4008 	str	r4, [sp, #8]
  f4:	e1a00007 	mov	r0, r7
  f8:	e7c32004 	strb	r2, [r3, r4]
  fc:	e28d1004 	add	r1, sp, #4
 100:	ebfffffe 	bl	0 <CBinHolder::Get(char const*)>
 104:	e59d3004 	ldr	r3, [sp, #4]
 108:	e5904000 	ldr	r4, [r0]
 10c:	e1530005 	cmp	r3, r5
 110:	0a000003 	beq	124 <CBinHolder::Get(char const*)+0x124>
 114:	e59d100c 	ldr	r1, [sp, #12]
 118:	e1a00003 	mov	r0, r3
 11c:	e2811001 	add	r1, r1, #1
 120:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 124:	e1a00004 	mov	r0, r4
 128:	e28dd024 	add	sp, sp, #36	; 0x24
 12c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
 130:	e5d63000 	ldrb	r3, [r6]
 134:	e1a02005 	mov	r2, r5
 138:	e5cd300c 	strb	r3, [sp, #12]
 13c:	eaffffc6 	b	5c <CBinHolder::Get(char const*)+0x5c>
 140:	e2840001 	add	r0, r4, #1
 144:	ebfffffe 	bl	0 <operator new(unsigned int)>
 148:	e58d400c 	str	r4, [sp, #12]
 14c:	e58d0004 	str	r0, [sp, #4]
 150:	e1a02004 	mov	r2, r4
 154:	e1a01006 	mov	r1, r6
 158:	ebfffffe 	bl	0 <memcpy>
 15c:	e59d2004 	ldr	r2, [sp, #4]
 160:	eaffffbd 	b	5c <CBinHolder::Get(char const*)+0x5c>
 164:	e3540000 	cmp	r4, #0
 168:	01a03005 	moveq	r3, r5
 16c:	0affffde 	beq	ec <CBinHolder::Get(char const*)+0xec>
 170:	e1a00005 	mov	r0, r5
 174:	ea000003 	b	188 <CBinHolder::Get(char const*)+0x188>
 178:	e2840001 	add	r0, r4, #1
 17c:	ebfffffe 	bl	0 <operator new(unsigned int)>
 180:	e58d400c 	str	r4, [sp, #12]
 184:	e58d0004 	str	r0, [sp, #4]
 188:	e1a01006 	mov	r1, r6
 18c:	e1a02004 	mov	r2, r4
 190:	ebfffffe 	bl	0 <memcpy>
 194:	e59d3004 	ldr	r3, [sp, #4]
 198:	eaffffd3 	b	ec <CBinHolder::Get(char const*)+0xec>
 19c:	e59d0004 	ldr	r0, [sp, #4]
 1a0:	e1500005 	cmp	r0, r5
 1a4:	0a000002 	beq	1b4 <CBinHolder::Get(char const*)+0x1b4>
 1a8:	e59d100c 	ldr	r1, [sp, #12]
 1ac:	e2811001 	add	r1, r1, #1
 1b0:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 1b4:	e5979000 	ldr	r9, [r7]
 1b8:	e5994008 	ldr	r4, [r9, #8]
 1bc:	e3540000 	cmp	r4, #0
 1c0:	0a000014 	beq	218 <CBinHolder::Get(char const*)+0x218>
 1c4:	e59f9234 	ldr	r9, [pc, #564]	; 400 <CBinHolder::Get(char const*)+0x400>
 1c8:	e58d5004 	str	r5, [sp, #4]
 1cc:	e9940006 	ldmib	r4, {r1, r2}
 1d0:	e28d0004 	add	r0, sp, #4
 1d4:	e0812002 	add	r2, r1, r2
 1d8:	ebfffffe 	bl	0 <CBinHolder::Get(char const*)>
 1dc:	e594301c 	ldr	r3, [r4, #28]
 1e0:	e1a00009 	mov	r0, r9
 1e4:	e59d1004 	ldr	r1, [sp, #4]
 1e8:	e58d301c 	str	r3, [sp, #28]
 1ec:	ebfffffe 	bl	0 <printf>
 1f0:	e59d0004 	ldr	r0, [sp, #4]
 1f4:	e1500005 	cmp	r0, r5
 1f8:	0a000002 	beq	208 <CBinHolder::Get(char const*)+0x208>
 1fc:	e59d100c 	ldr	r1, [sp, #12]
 200:	e2811001 	add	r1, r1, #1
 204:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 208:	e5944000 	ldr	r4, [r4]
 20c:	e3540000 	cmp	r4, #0
 210:	1affffec 	bne	1c8 <CBinHolder::Get(char const*)+0x1c8>
 214:	e5979000 	ldr	r9, [r7]
 218:	e1a00006 	mov	r0, r6
 21c:	e58d5004 	str	r5, [sp, #4]
 220:	ebfffffe 	bl	0 <strlen>
 224:	e350000f 	cmp	r0, #15
 228:	e1a04000 	mov	r4, r0
 22c:	8a00001d 	bhi	2a8 <CBinHolder::Get(char const*)+0x2a8>
 230:	e3500001 	cmp	r0, #1
 234:	1a000043 	bne	348 <CBinHolder::Get(char const*)+0x348>
 238:	e1a02005 	mov	r2, r5
 23c:	e5d63000 	ldrb	r3, [r6]
 240:	e5cd300c 	strb	r3, [sp, #12]
 244:	e3a03000 	mov	r3, #0
 248:	e58d4008 	str	r4, [sp, #8]
 24c:	e7c23004 	strb	r3, [r2, r4]
 250:	e99d0003 	ldmib	sp, {r0, r1}
 254:	e59f21a0 	ldr	r2, [pc, #416]	; 3fc <CBinHolder::Get(char const*)+0x3fc>
 258:	ebfffffe 	bl	0 <std::_Hash_bytes(void const*, unsigned int, unsigned int)>
 25c:	e1a04000 	mov	r4, r0
 260:	e5991004 	ldr	r1, [r9, #4]
 264:	ebfffffe 	bl	0 <__aeabi_uidivmod>
 268:	e1a03004 	mov	r3, r4
 26c:	e1a00009 	mov	r0, r9
 270:	e28d2004 	add	r2, sp, #4
 274:	ebfffffe 	bl	0 <CBinHolder::Get(char const*)>
 278:	e3500000 	cmp	r0, #0
 27c:	0a000036 	beq	35c <CBinHolder::Get(char const*)+0x35c>
 280:	e5904000 	ldr	r4, [r0]
 284:	e59d0004 	ldr	r0, [sp, #4]
 288:	e1500005 	cmp	r0, r5
 28c:	0a000002 	beq	29c <CBinHolder::Get(char const*)+0x29c>
 290:	e59d100c 	ldr	r1, [sp, #12]
 294:	e2811001 	add	r1, r1, #1
 298:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 29c:	e3540000 	cmp	r4, #0
 2a0:	1affff85 	bne	bc <CBinHolder::Get(char const*)+0xbc>
 2a4:	ea000032 	b	374 <CBinHolder::Get(char const*)+0x374>
 2a8:	e2800001 	add	r0, r0, #1
 2ac:	ebfffffe 	bl	0 <operator new(unsigned int)>
 2b0:	e58d400c 	str	r4, [sp, #12]
 2b4:	e58d0004 	str	r0, [sp, #4]
 2b8:	e1a02004 	mov	r2, r4
 2bc:	e1a01006 	mov	r1, r6
 2c0:	ebfffffe 	bl	0 <memcpy>
 2c4:	e59d2004 	ldr	r2, [sp, #4]
 2c8:	eaffffdd 	b	244 <CBinHolder::Get(char const*)+0x244>
 2cc:	e59f0130 	ldr	r0, [pc, #304]	; 404 <CBinHolder::Get(char const*)+0x404>
 2d0:	ebfffffe 	bl	0 <b8SysPuts>
 2d4:	e59f012c 	ldr	r0, [pc, #300]	; 408 <CBinHolder::Get(char const*)+0x408>
 2d8:	ebfffffe 	bl	0 <b8SysPuts>
 2dc:	e59f0128 	ldr	r0, [pc, #296]	; 40c <CBinHolder::Get(char const*)+0x40c>
 2e0:	ebfffffe 	bl	0 <b8SysPuts>
 2e4:	e3a00010 	mov	r0, #16
 2e8:	ebfffffe 	bl	0 <b8SysPutNum>
 2ec:	e59f011c 	ldr	r0, [pc, #284]	; 410 <CBinHolder::Get(char const*)+0x410>
 2f0:	ebfffffe 	bl	0 <b8SysPuts>
 2f4:	e59f0118 	ldr	r0, [pc, #280]	; 414 <CBinHolder::Get(char const*)+0x414>
 2f8:	ebfffffe 	bl	0 <b8SysPuts>
 2fc:	e59f0114 	ldr	r0, [pc, #276]	; 418 <CBinHolder::Get(char const*)+0x418>
 300:	ebfffffe 	bl	0 <b8SysPuts>
 304:	e59f0110 	ldr	r0, [pc, #272]	; 41c <CBinHolder::Get(char const*)+0x41c>
 308:	ebfffffe 	bl	0 <b8SysPuts>
 30c:	e59f010c 	ldr	r0, [pc, #268]	; 420 <CBinHolder::Get(char const*)+0x420>
 310:	ebfffffe 	bl	0 <b8SysPuts>
 314:	e59f0108 	ldr	r0, [pc, #264]	; 424 <CBinHolder::Get(char const*)+0x424>
 318:	ebfffffe 	bl	0 <b8SysPuts>
 31c:	e1a00008 	mov	r0, r8
 320:	ebfffffe 	bl	0 <b8SysPutHex>
 324:	e59f00f4 	ldr	r0, [pc, #244]	; 420 <CBinHolder::Get(char const*)+0x420>
 328:	ebfffffe 	bl	0 <b8SysPuts>
 32c:	e59f00f4 	ldr	r0, [pc, #244]	; 428 <CBinHolder::Get(char const*)+0x428>
 330:	ebfffffe 	bl	0 <b8SysPuts>
 334:	e59f00f0 	ldr	r0, [pc, #240]	; 42c <CBinHolder::Get(char const*)+0x42c>
 338:	ebfffffe 	bl	0 <b8SysPuts>
 33c:	e1000070 	hlt	0x0000
 340:	e5979000 	ldr	r9, [r7]
 344:	eaffff35 	b	20 <CBinHolder::Get(char const*)+0x20>
 348:	e3500000 	cmp	r0, #0
 34c:	01a02005 	moveq	r2, r5
 350:	0affffbb 	beq	244 <CBinHolder::Get(char const*)+0x244>
 354:	e1a00005 	mov	r0, r5
 358:	eaffffd6 	b	2b8 <CBinHolder::Get(char const*)+0x2b8>
 35c:	e59d0004 	ldr	r0, [sp, #4]
 360:	e1500005 	cmp	r0, r5
 364:	0a000002 	beq	374 <CBinHolder::Get(char const*)+0x374>
 368:	e59d100c 	ldr	r1, [sp, #12]
 36c:	e2811001 	add	r1, r1, #1
 370:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 374:	e59f0088 	ldr	r0, [pc, #136]	; 404 <CBinHolder::Get(char const*)+0x404>
 378:	ebfffffe 	bl	0 <b8SysPuts>
 37c:	e59f0084 	ldr	r0, [pc, #132]	; 408 <CBinHolder::Get(char const*)+0x408>
 380:	ebfffffe 	bl	0 <b8SysPuts>
 384:	e59f0080 	ldr	r0, [pc, #128]	; 40c <CBinHolder::Get(char const*)+0x40c>
 388:	ebfffffe 	bl	0 <b8SysPuts>
 38c:	e3a00015 	mov	r0, #21
 390:	ebfffffe 	bl	0 <b8SysPutNum>
 394:	e59f0074 	ldr	r0, [pc, #116]	; 410 <CBinHolder::Get(char const*)+0x410>
 398:	ebfffffe 	bl	0 <b8SysPuts>
 39c:	e59f0070 	ldr	r0, [pc, #112]	; 414 <CBinHolder::Get(char const*)+0x414>
 3a0:	ebfffffe 	bl	0 <b8SysPuts>
 3a4:	e59f006c 	ldr	r0, [pc, #108]	; 418 <CBinHolder::Get(char const*)+0x418>
 3a8:	ebfffffe 	bl	0 <b8SysPuts>
 3ac:	e59f0068 	ldr	r0, [pc, #104]	; 41c <CBinHolder::Get(char const*)+0x41c>
 3b0:	ebfffffe 	bl	0 <b8SysPuts>
 3b4:	e59f0064 	ldr	r0, [pc, #100]	; 420 <CBinHolder::Get(char const*)+0x420>
 3b8:	ebfffffe 	bl	0 <b8SysPuts>
 3bc:	e59f0060 	ldr	r0, [pc, #96]	; 424 <CBinHolder::Get(char const*)+0x424>
 3c0:	ebfffffe 	bl	0 <b8SysPuts>
 3c4:	e1a00008 	mov	r0, r8
 3c8:	ebfffffe 	bl	0 <b8SysPutHex>
 3cc:	e59f004c 	ldr	r0, [pc, #76]	; 420 <CBinHolder::Get(char const*)+0x420>
 3d0:	ebfffffe 	bl	0 <b8SysPuts>
 3d4:	e59f004c 	ldr	r0, [pc, #76]	; 428 <CBinHolder::Get(char const*)+0x428>
 3d8:	ebfffffe 	bl	0 <b8SysPuts>
 3dc:	e59f0048 	ldr	r0, [pc, #72]	; 42c <CBinHolder::Get(char const*)+0x42c>
 3e0:	ebfffffe 	bl	0 <b8SysPuts>
 3e4:	e1000070 	hlt	0x0000
 3e8:	eaffff33 	b	bc <CBinHolder::Get(char const*)+0xbc>
 3ec:	e1a00005 	mov	r0, r5
 3f0:	eaffff56 	b	150 <CBinHolder::Get(char const*)+0x150>
	...
 3fc:	c70f6907 	.word	0xc70f6907
 400:	00000010 	.word	0x00000010
 404:	00000000 	.word	0x00000000
 408:	0000001c 	.word	0x0000001c
 40c:	00000024 	.word	0x00000024
 410:	00000028 	.word	0x00000028
 414:	00000000 	.word	0x00000000
 418:	00000038 	.word	0x00000038
 41c:	00000004 	.word	0x00000004
 420:	00000068 	.word	0x00000068
 424:	0000006c 	.word	0x0000006c
 428:	00000088 	.word	0x00000088
 42c:	000000d0 	.word	0x000000d0

clipboard.o:     file format elf32-littlearm


Disassembly of section .text._ZL14clipboard_openP4File:

00000000 <clipboard_open(File*)>:
   0:	e5903004 	ldr	r3, [r0, #4]
   4:	e59f2050 	ldr	r2, [pc, #80]	; 5c <clipboard_open(File*)+0x5c>
   8:	e5931000 	ldr	r1, [r3]
   c:	e1510002 	cmp	r1, r2
  10:	1a00000f 	bne	54 <clipboard_open(File*)+0x54>
  14:	e92d4070 	push	{r4, r5, r6, lr}
  18:	e5d35004 	ldrb	r5, [r3, #4]
  1c:	e3550000 	cmp	r5, #0
  20:	1a000009 	bne	4c <clipboard_open(File*)+0x4c>
  24:	e1a04000 	mov	r4, r0
  28:	e3a00018 	mov	r0, #24
  2c:	ebfffffe 	bl	0 <operator new(unsigned int)>
  30:	e1a03000 	mov	r3, r0
  34:	e2832008 	add	r2, r3, #8
  38:	e1a00005 	mov	r0, r5
  3c:	e8830024 	stm	r3, {r2, r5}
  40:	e5c35008 	strb	r5, [r3, #8]
  44:	e5843000 	str	r3, [r4]
  48:	e8bd8070 	pop	{r4, r5, r6, pc}
  4c:	e3e00001 	mvn	r0, #1
  50:	e8bd8070 	pop	{r4, r5, r6, pc}
  54:	e3e00000 	mvn	r0, #0
  58:	e1a0f00e 	mov	pc, lr
  5c:	facecade 	.word	0xfacecade

Disassembly of section .text._ZL15clipboard_closeP4File:

00000000 <clipboard_close(File*)>:
   0:	e590c004 	ldr	r12, [r0, #4]
   4:	e59f3090 	ldr	r3, [pc, #144]	; 9c <clipboard_close(File*)+0x9c>
   8:	e59c2000 	ldr	r2, [r12]
   c:	e1520003 	cmp	r2, r3
  10:	1a00001f 	bne	94 <clipboard_close(File*)+0x94>
  14:	e92d4010 	push	{r4, lr}
  18:	e5904000 	ldr	r4, [r0]
  1c:	e5943000 	ldr	r3, [r4]
  20:	e5941004 	ldr	r1, [r4, #4]
  24:	e0831001 	add	r1, r3, r1
  28:	e1530001 	cmp	r3, r1
  2c:	0a000005 	beq	48 <clipboard_close(File*)+0x48>
  30:	e3e00b0f 	mvn	r0, #15360	; 0x3c00
  34:	e4d32001 	ldrb	r2, [r3], #1
  38:	e1510003 	cmp	r1, r3
  3c:	e54020bb 	strb	r2, [r0, #-187]	; 0xffffff45
  40:	1afffffb 	bne	34 <clipboard_close(File*)+0x34>
  44:	e5941000 	ldr	r1, [r4]
  48:	e3a02000 	mov	r2, #0
  4c:	e3e00b0f 	mvn	r0, #15360	; 0x3c00
  50:	e3e0e000 	mvn	lr, #0
  54:	e1a03004 	mov	r3, r4
  58:	e5842004 	str	r2, [r4, #4]
  5c:	e5c12000 	strb	r2, [r1]
  60:	e540e0bb 	strb	lr, [r0, #-187]	; 0xffffff45
  64:	e4930008 	ldr	r0, [r3], #8
  68:	e5cc2004 	strb	r2, [r12, #4]
  6c:	e1500003 	cmp	r0, r3
  70:	0a000002 	beq	80 <clipboard_close(File*)+0x80>
  74:	e5941008 	ldr	r1, [r4, #8]
  78:	e2811001 	add	r1, r1, #1
  7c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  80:	e1a00004 	mov	r0, r4
  84:	e3a01018 	mov	r1, #24
  88:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  8c:	e3a00000 	mov	r0, #0
  90:	e8bd8010 	pop	{r4, pc}
  94:	e3e00000 	mvn	r0, #0
  98:	e1a0f00e 	mov	pc, lr
  9c:	facecade 	.word	0xfacecade

Disassembly of section .text._ZL15clipboard_writeP4FilePKcj:

00000000 <clipboard_write(File*, char const*, unsigned int)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e24dd014 	sub	sp, sp, #20
   8:	e1a0c002 	mov	r12, r2
   c:	e58d200c 	str	r2, [sp, #12]
  10:	e5902004 	ldr	r2, [r0, #4]
  14:	e59f3180 	ldr	r3, [pc, #384]	; 19c <clipboard_write(File*, char const*, unsigned int)+0x19c>
  18:	e5922000 	ldr	r2, [r2]
  1c:	e1520003 	cmp	r2, r3
  20:	1a000059 	bne	18c <clipboard_write(File*, char const*, unsigned int)+0x18c>
  24:	e35c0000 	cmp	r12, #0
  28:	e5904000 	ldr	r4, [r0]
  2c:	0a000029 	beq	d8 <clipboard_write(File*, char const*, unsigned int)+0xd8>
  30:	e59d200c 	ldr	r2, [sp, #12]
  34:	e2418001 	sub	r8, r1, #1
  38:	e0811002 	add	r1, r1, r2
  3c:	e2412001 	sub	r2, r1, #1
  40:	e3a0b000 	mov	r11, #0
  44:	e3e09b0f 	mvn	r9, #15360	; 0x3c00
  48:	e2843008 	add	r3, r4, #8
  4c:	e58d2000 	str	r2, [sp]
  50:	ea000002 	b	60 <clipboard_write(File*, char const*, unsigned int)+0x60>
  54:	e59d2000 	ldr	r2, [sp]
  58:	e1520008 	cmp	r2, r8
  5c:	0a00001d 	beq	d8 <clipboard_write(File*, char const*, unsigned int)+0xd8>
  60:	e5946000 	ldr	r6, [r4]
  64:	e5942004 	ldr	r2, [r4, #4]
  68:	e1560003 	cmp	r6, r3
  6c:	e5f8a001 	ldrb	r10, [r8, #1]!
  70:	e2825001 	add	r5, r2, #1
  74:	0a00001a 	beq	e4 <clipboard_write(File*, char const*, unsigned int)+0xe4>
  78:	e5947008 	ldr	r7, [r4, #8]
  7c:	e1550007 	cmp	r5, r7
  80:	8a00001a 	bhi	f0 <clipboard_write(File*, char const*, unsigned int)+0xf0>
  84:	e7c6a002 	strb	r10, [r6, r2]
  88:	e5942000 	ldr	r2, [r4]
  8c:	e5845004 	str	r5, [r4, #4]
  90:	e7c2b005 	strb	r11, [r2, r5]
  94:	e5941004 	ldr	r1, [r4, #4]
  98:	e3510c01 	cmp	r1, #256	; 0x100
  9c:	9affffec 	bls	54 <clipboard_write(File*, char const*, unsigned int)+0x54>
  a0:	e5942000 	ldr	r2, [r4]
  a4:	e0821001 	add	r1, r2, r1
  a8:	e1520001 	cmp	r2, r1
  ac:	0a000004 	beq	c4 <clipboard_write(File*, char const*, unsigned int)+0xc4>
  b0:	e4d20001 	ldrb	r0, [r2], #1
  b4:	e1510002 	cmp	r1, r2
  b8:	e54900bb 	strb	r0, [r9, #-187]	; 0xffffff45
  bc:	1afffffb 	bne	b0 <clipboard_write(File*, char const*, unsigned int)+0xb0>
  c0:	e5941000 	ldr	r1, [r4]
  c4:	e59d2000 	ldr	r2, [sp]
  c8:	e584b004 	str	r11, [r4, #4]
  cc:	e1520008 	cmp	r2, r8
  d0:	e5c1b000 	strb	r11, [r1]
  d4:	1affffe1 	bne	60 <clipboard_write(File*, char const*, unsigned int)+0x60>
  d8:	e59d000c 	ldr	r0, [sp, #12]
  dc:	e28dd014 	add	sp, sp, #20
  e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  e4:	e355000f 	cmp	r5, #15
  e8:	9affffe5 	bls	84 <clipboard_write(File*, char const*, unsigned int)+0x84>
  ec:	e3a0700f 	mov	r7, #15
  f0:	e3550000 	cmp	r5, #0
  f4:	ba000026 	blt	194 <clipboard_write(File*, char const*, unsigned int)+0x194>
  f8:	e1550087 	cmp	r5, r7, lsl #1
  fc:	e1a07087 	lsl	r7, r7, #1
 100:	2a00001b 	bcs	174 <clipboard_write(File*, char const*, unsigned int)+0x174>
 104:	e3570000 	cmp	r7, #0
 108:	ba00001b 	blt	17c <clipboard_write(File*, char const*, unsigned int)+0x17c>
 10c:	e2970001 	adds	r0, r7, #1
 110:	4a000019 	bmi	17c <clipboard_write(File*, char const*, unsigned int)+0x17c>
 114:	e98d000c 	stmib	sp, {r2, r3}
 118:	ebfffffe 	bl	0 <operator new(unsigned int)>
 11c:	e59d2004 	ldr	r2, [sp, #4]
 120:	e1a06000 	mov	r6, r0
 124:	e3520000 	cmp	r2, #0
 128:	e59d3008 	ldr	r3, [sp, #8]
 12c:	0a000005 	beq	148 <clipboard_write(File*, char const*, unsigned int)+0x148>
 130:	e3520001 	cmp	r2, #1
 134:	e5941000 	ldr	r1, [r4]
 138:	0a000010 	beq	180 <clipboard_write(File*, char const*, unsigned int)+0x180>
 13c:	e98d000c 	stmib	sp, {r2, r3}
 140:	ebfffffe 	bl	0 <memcpy>
 144:	e99d000c 	ldmib	sp, {r2, r3}
 148:	e5940000 	ldr	r0, [r4]
 14c:	e1530000 	cmp	r3, r0
 150:	0a000004 	beq	168 <clipboard_write(File*, char const*, unsigned int)+0x168>
 154:	e5941008 	ldr	r1, [r4, #8]
 158:	e98d000c 	stmib	sp, {r2, r3}
 15c:	e2811001 	add	r1, r1, #1
 160:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 164:	e99d000c 	ldmib	sp, {r2, r3}
 168:	e5847008 	str	r7, [r4, #8]
 16c:	e5846000 	str	r6, [r4]
 170:	eaffffc3 	b	84 <clipboard_write(File*, char const*, unsigned int)+0x84>
 174:	e1a07005 	mov	r7, r5
 178:	eaffffe3 	b	10c <clipboard_write(File*, char const*, unsigned int)+0x10c>
 17c:	ebfffffe 	bl	0 <std::__throw_bad_alloc()>
 180:	e5d11000 	ldrb	r1, [r1]
 184:	e5c01000 	strb	r1, [r0]
 188:	eaffffee 	b	148 <clipboard_write(File*, char const*, unsigned int)+0x148>
 18c:	e3e00000 	mvn	r0, #0
 190:	eaffffd1 	b	dc <clipboard_write(File*, char const*, unsigned int)+0xdc>
 194:	e59f0004 	ldr	r0, [pc, #4]	; 1a0 <clipboard_write(File*, char const*, unsigned int)+0x1a0>
 198:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 19c:	facecade 	.word	0xfacecade
 1a0:	00000000 	.word	0x00000000

Disassembly of section .text._ZN9clipboard5ResetEv:

00000000 <clipboard::Reset()>:
   0:	e92d4030 	push	{r4, r5, lr}
   4:	e59f506c 	ldr	r5, [pc, #108]	; 78 <clipboard::Reset()+0x78>
   8:	e24dd024 	sub	sp, sp, #36	; 0x24
   c:	e5d54000 	ldrb	r4, [r5]
  10:	e3540000 	cmp	r4, #0
  14:	0a000001 	beq	20 <clipboard::Reset()+0x20>
  18:	e28dd024 	add	sp, sp, #36	; 0x24
  1c:	e8bd8030 	pop	{r4, r5, pc}
  20:	e1a01004 	mov	r1, r4
  24:	e3a02020 	mov	r2, #32
  28:	e1a0000d 	mov	r0, sp
  2c:	ebfffffe 	bl	0 <memset>
  30:	e3a01020 	mov	r1, #32
  34:	e59f2040 	ldr	r2, [pc, #64]	; 7c <clipboard::Reset()+0x7c>
  38:	e1a0000d 	mov	r0, sp
  3c:	ebfffffe 	bl	0 <snprintf>
  40:	e3a00008 	mov	r0, #8
  44:	ebfffffe 	bl	0 <operator new(unsigned int)>
  48:	e1a03000 	mov	r3, r0
  4c:	e59fc02c 	ldr	r12, [pc, #44]	; 80 <clipboard::Reset()+0x80>
  50:	e5c34004 	strb	r4, [r3, #4]
  54:	e583c000 	str	r12, [r3]
  58:	e1a0000d 	mov	r0, sp
  5c:	e59f2020 	ldr	r2, [pc, #32]	; 84 <clipboard::Reset()+0x84>
  60:	e59f1020 	ldr	r1, [pc, #32]	; 88 <clipboard::Reset()+0x88>
  64:	ebfffffe 	bl	0 <fs_register_driver>
  68:	e3a03001 	mov	r3, #1
  6c:	e5c53000 	strb	r3, [r5]
  70:	e28dd024 	add	sp, sp, #36	; 0x24
  74:	e8bd8030 	pop	{r4, r5, pc}
	...
  80:	facecade 	.word	0xfacecade
  84:	000001b6 	.word	0x000001b6
  88:	00000000 	.word	0x00000000

cobj.o:     file format elf32-littlearm


Disassembly of section .text._ZN4CObj8vOnTouchEv:

00000000 <CObj::vOnTouch()>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN4CObj7vOnDrawEP9_b8PpuCmd:

00000000 <CObj::vOnDraw(_b8PpuCmd*)>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text.__tcf_1:

00000000 <__tcf_1>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e59f5030 	ldr	r5, [pc, #48]	; 3c <__tcf_1+0x3c>
   8:	e2456d06 	sub	r6, r5, #384	; 0x180
   c:	e535400c 	ldr	r4, [r5, #-12]!
  10:	e1550004 	cmp	r5, r4
  14:	0a000005 	beq	30 <__tcf_1+0x30>
  18:	e1a00004 	mov	r0, r4
  1c:	e5944000 	ldr	r4, [r4]
  20:	e3a0100c 	mov	r1, #12
  24:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  28:	e1550004 	cmp	r5, r4
  2c:	1afffff9 	bne	18 <__tcf_1+0x18>
  30:	e1550006 	cmp	r5, r6
  34:	1afffff4 	bne	c <__tcf_1+0xc>
  38:	e8bd8070 	pop	{r4, r5, r6, pc}
  3c:	00000180 	.word	0x00000180

Disassembly of section .text.__tcf_0:

00000000 <__tcf_0>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e59f5030 	ldr	r5, [pc, #48]	; 3c <__tcf_0+0x3c>
   8:	e2456024 	sub	r6, r5, #36	; 0x24
   c:	e535400c 	ldr	r4, [r5, #-12]!
  10:	e1550004 	cmp	r5, r4
  14:	0a000005 	beq	30 <__tcf_0+0x30>
  18:	e1a00004 	mov	r0, r4
  1c:	e5944000 	ldr	r4, [r4]
  20:	e3a0100c 	mov	r1, #12
  24:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  28:	e1550004 	cmp	r5, r4
  2c:	1afffff9 	bne	18 <__tcf_0+0x18>
  30:	e1550006 	cmp	r5, r6
  34:	1afffff4 	bne	c <__tcf_0+0xc>
  38:	e8bd8070 	pop	{r4, r5, r6, pc}
  3c:	00000024 	.word	0x00000024

Disassembly of section .text._ZN4CObj4StepEv:

00000000 <CObj::Step()>:
   0:	e5903000 	ldr	r3, [r0]
   4:	e5933000 	ldr	r3, [r3]
   8:	e1a0f003 	mov	pc, r3

Disassembly of section .text._ZN4CObj4DrawEP9_b8PpuCmd:

00000000 <CObj::Draw(_b8PpuCmd*)>:
   0:	e5903000 	ldr	r3, [r0]
   4:	e59f200c 	ldr	r2, [pc, #12]	; 18 <CObj::Draw(_b8PpuCmd*)+0x18>
   8:	e5933008 	ldr	r3, [r3, #8]
   c:	e1530002 	cmp	r3, r2
  10:	01a0f00e 	moveq	pc, lr
  14:	e1a0f003 	mov	pc, r3
  18:	00000000 	.word	0x00000000

Disassembly of section .text._ZN4CObj5TouchEv:

00000000 <CObj::Touch()>:
   0:	e5903000 	ldr	r3, [r0]
   4:	e59f200c 	ldr	r2, [pc, #12]	; 18 <CObj::Touch()+0x18>
   8:	e5933004 	ldr	r3, [r3, #4]
   c:	e1530002 	cmp	r3, r2
  10:	01a0f00e 	moveq	pc, lr
  14:	e1a0f003 	mov	pc, r3
  18:	00000000 	.word	0x00000000

Disassembly of section .text._ZN4CObjC2Ev:

00000000 <CObj::CObj()>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e3a03000 	mov	r3, #0
   8:	e1a04000 	mov	r4, r0
   c:	e59f005c 	ldr	r0, [pc, #92]	; 70 <CObj::CObj()+0x70>
  10:	e59f505c 	ldr	r5, [pc, #92]	; 74 <CObj::CObj()+0x74>
  14:	e5901000 	ldr	r1, [r0]
  18:	e59fc058 	ldr	r12, [pc, #88]	; 78 <CObj::CObj()+0x78>
  1c:	e201201f 	and	r2, r1, #31
  20:	e0822082 	add	r2, r2, r2, lsl #1
  24:	e0855102 	add	r5, r5, r2, lsl #2
  28:	e2812001 	add	r2, r1, #1
  2c:	e984000a 	stmib	r4, {r1, r3}
  30:	e5802000 	str	r2, [r0]
  34:	e584300c 	str	r3, [r4, #12]
  38:	e5843010 	str	r3, [r4, #16]
  3c:	e5c43014 	strb	r3, [r4, #20]
  40:	e5843018 	str	r3, [r4, #24]
  44:	e584c000 	str	r12, [r4]
  48:	e3a0000c 	mov	r0, #12
  4c:	ebfffffe 	bl	0 <operator new(unsigned int)>
  50:	e1a01005 	mov	r1, r5
  54:	e5804008 	str	r4, [r0, #8]
  58:	ebfffffe 	bl	0 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
  5c:	e5953008 	ldr	r3, [r5, #8]
  60:	e1a00004 	mov	r0, r4
  64:	e2833001 	add	r3, r3, #1
  68:	e5853008 	str	r3, [r5, #8]
  6c:	e8bd8070 	pop	{r4, r5, r6, pc}
	...
  78:	00000008 	.word	0x00000008

Disassembly of section .text._ZN4CObjD2Ev:

00000000 <CObj::~CObj()>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN4CObjD0Ev:

00000000 <CObj::~CObj()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e3a0101c 	mov	r1, #28
   c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  10:	e1a00004 	mov	r0, r4
  14:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._Z16CObjHolder_Resetv:

00000000 <CObjHolder_Reset()>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e3a01001 	mov	r1, #1
   8:	e3a06000 	mov	r6, #0
   c:	e59f20c4 	ldr	r2, [pc, #196]	; d8 <CObjHolder_Reset()+0xd8>
  10:	e59f30c4 	ldr	r3, [pc, #196]	; dc <CObjHolder_Reset()+0xdc>
  14:	e59f50c4 	ldr	r5, [pc, #196]	; e0 <CObjHolder_Reset()+0xe0>
  18:	e5821000 	str	r1, [r2]
  1c:	e2857024 	add	r7, r5, #36	; 0x24
  20:	e5836000 	str	r6, [r3]
  24:	e5954000 	ldr	r4, [r5]
  28:	e1540005 	cmp	r4, r5
  2c:	0a000005 	beq	48 <CObjHolder_Reset()+0x48>
  30:	e1a00004 	mov	r0, r4
  34:	e5944000 	ldr	r4, [r4]
  38:	e3a0100c 	mov	r1, #12
  3c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  40:	e1540005 	cmp	r4, r5
  44:	1afffff9 	bne	30 <CObjHolder_Reset()+0x30>
  48:	e9850060 	stmib	r5, {r5, r6}
  4c:	e5855000 	str	r5, [r5]
  50:	e285500c 	add	r5, r5, #12
  54:	e1550007 	cmp	r5, r7
  58:	1afffff1 	bne	24 <CObjHolder_Reset()+0x24>
  5c:	e3a07000 	mov	r7, #0
  60:	e59f507c 	ldr	r5, [pc, #124]	; e4 <CObjHolder_Reset()+0xe4>
  64:	e2856d06 	add	r6, r5, #384	; 0x180
  68:	e5954000 	ldr	r4, [r5]
  6c:	e1540005 	cmp	r4, r5
  70:	0a000012 	beq	c0 <CObjHolder_Reset()+0xc0>
  74:	e5940008 	ldr	r0, [r4, #8]
  78:	e3500000 	cmp	r0, #0
  7c:	0a000003 	beq	90 <CObjHolder_Reset()+0x90>
  80:	e5903000 	ldr	r3, [r0]
  84:	e5933010 	ldr	r3, [r3, #16]
  88:	e1a0e00f 	mov	lr, pc
  8c:	e1a0f003 	mov	pc, r3
  90:	e5944000 	ldr	r4, [r4]
  94:	e1540005 	cmp	r4, r5
  98:	1afffff5 	bne	74 <CObjHolder_Reset()+0x74>
  9c:	e5954000 	ldr	r4, [r5]
  a0:	e1540005 	cmp	r4, r5
  a4:	0a000005 	beq	c0 <CObjHolder_Reset()+0xc0>
  a8:	e1a00004 	mov	r0, r4
  ac:	e5944000 	ldr	r4, [r4]
  b0:	e3a0100c 	mov	r1, #12
  b4:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  b8:	e1550004 	cmp	r5, r4
  bc:	1afffff9 	bne	a8 <CObjHolder_Reset()+0xa8>
  c0:	e98500a0 	stmib	r5, {r5, r7}
  c4:	e5855000 	str	r5, [r5]
  c8:	e285500c 	add	r5, r5, #12
  cc:	e1550006 	cmp	r5, r6
  d0:	1affffe4 	bne	68 <CObjHolder_Reset()+0x68>
  d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	...

Disassembly of section .text._Z16CObjHolder_EntryP4CObjm:

00000000 <CObjHolder_Entry(CObj*, unsigned long)>:
   0:	e3510002 	cmp	r1, #2
   4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   8:	e1a05001 	mov	r5, r1
   c:	e1a0600e 	mov	r6, lr
  10:	e1a04000 	mov	r4, r0
  14:	8a000016 	bhi	74 <CObjHolder_Entry(CObj*, unsigned long)+0x74>
  18:	e3540000 	cmp	r4, #0
  1c:	0a000033 	beq	f0 <CObjHolder_Entry(CObj*, unsigned long)+0xf0>
  20:	e594300c 	ldr	r3, [r4, #12]
  24:	e3530000 	cmp	r3, #0
  28:	1a000050 	bne	170 <CObjHolder_Entry(CObj*, unsigned long)+0x170>
  2c:	e1a00004 	mov	r0, r4
  30:	ebfffffe 	bl	0 <Handle_Entry(void*)>
  34:	e59f71ac 	ldr	r7, [pc, #428]	; 1e8 <CObjHolder_Entry(CObj*, unsigned long)+0x1e8>
  38:	e1a06000 	mov	r6, r0
  3c:	e0853085 	add	r3, r5, r5, lsl #1
  40:	e3a0000c 	mov	r0, #12
  44:	e0877103 	add	r7, r7, r3, lsl #2
  48:	ebfffffe 	bl	0 <operator new(unsigned int)>
  4c:	e1a01007 	mov	r1, r7
  50:	e5806008 	str	r6, [r0, #8]
  54:	ebfffffe 	bl	0 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
  58:	e5973008 	ldr	r3, [r7, #8]
  5c:	e1a00006 	mov	r0, r6
  60:	e2833001 	add	r3, r3, #1
  64:	e5873008 	str	r3, [r7, #8]
  68:	e5845010 	str	r5, [r4, #16]
  6c:	e584600c 	str	r6, [r4, #12]
  70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  74:	e59f0170 	ldr	r0, [pc, #368]	; 1ec <CObjHolder_Entry(CObj*, unsigned long)+0x1ec>
  78:	ebfffffe 	bl	0 <b8SysPuts>
  7c:	e59f016c 	ldr	r0, [pc, #364]	; 1f0 <CObjHolder_Entry(CObj*, unsigned long)+0x1f0>
  80:	ebfffffe 	bl	0 <b8SysPuts>
  84:	e59f0168 	ldr	r0, [pc, #360]	; 1f4 <CObjHolder_Entry(CObj*, unsigned long)+0x1f4>
  88:	ebfffffe 	bl	0 <b8SysPuts>
  8c:	e3a00038 	mov	r0, #56	; 0x38
  90:	ebfffffe 	bl	0 <b8SysPutNum>
  94:	e59f015c 	ldr	r0, [pc, #348]	; 1f8 <CObjHolder_Entry(CObj*, unsigned long)+0x1f8>
  98:	ebfffffe 	bl	0 <b8SysPuts>
  9c:	e59f0158 	ldr	r0, [pc, #344]	; 1fc <CObjHolder_Entry(CObj*, unsigned long)+0x1fc>
  a0:	ebfffffe 	bl	0 <b8SysPuts>
  a4:	e59f0154 	ldr	r0, [pc, #340]	; 200 <CObjHolder_Entry(CObj*, unsigned long)+0x200>
  a8:	ebfffffe 	bl	0 <b8SysPuts>
  ac:	e59f0150 	ldr	r0, [pc, #336]	; 204 <CObjHolder_Entry(CObj*, unsigned long)+0x204>
  b0:	ebfffffe 	bl	0 <b8SysPuts>
  b4:	e59f014c 	ldr	r0, [pc, #332]	; 208 <CObjHolder_Entry(CObj*, unsigned long)+0x208>
  b8:	ebfffffe 	bl	0 <b8SysPuts>
  bc:	e59f0148 	ldr	r0, [pc, #328]	; 20c <CObjHolder_Entry(CObj*, unsigned long)+0x20c>
  c0:	ebfffffe 	bl	0 <b8SysPuts>
  c4:	e1a00006 	mov	r0, r6
  c8:	ebfffffe 	bl	0 <b8SysPutHex>
  cc:	e59f0134 	ldr	r0, [pc, #308]	; 208 <CObjHolder_Entry(CObj*, unsigned long)+0x208>
  d0:	ebfffffe 	bl	0 <b8SysPuts>
  d4:	e59f0134 	ldr	r0, [pc, #308]	; 210 <CObjHolder_Entry(CObj*, unsigned long)+0x210>
  d8:	ebfffffe 	bl	0 <b8SysPuts>
  dc:	e59f0130 	ldr	r0, [pc, #304]	; 214 <CObjHolder_Entry(CObj*, unsigned long)+0x214>
  e0:	ebfffffe 	bl	0 <b8SysPuts>
  e4:	e1000070 	hlt	0x0000
  e8:	e3540000 	cmp	r4, #0
  ec:	1affffcb 	bne	20 <CObjHolder_Entry(CObj*, unsigned long)+0x20>
  f0:	e59f00f4 	ldr	r0, [pc, #244]	; 1ec <CObjHolder_Entry(CObj*, unsigned long)+0x1ec>
  f4:	ebfffffe 	bl	0 <b8SysPuts>
  f8:	e59f00f0 	ldr	r0, [pc, #240]	; 1f0 <CObjHolder_Entry(CObj*, unsigned long)+0x1f0>
  fc:	ebfffffe 	bl	0 <b8SysPuts>
 100:	e59f00ec 	ldr	r0, [pc, #236]	; 1f4 <CObjHolder_Entry(CObj*, unsigned long)+0x1f4>
 104:	ebfffffe 	bl	0 <b8SysPuts>
 108:	e3a00039 	mov	r0, #57	; 0x39
 10c:	ebfffffe 	bl	0 <b8SysPutNum>
 110:	e59f00e0 	ldr	r0, [pc, #224]	; 1f8 <CObjHolder_Entry(CObj*, unsigned long)+0x1f8>
 114:	ebfffffe 	bl	0 <b8SysPuts>
 118:	e59f00dc 	ldr	r0, [pc, #220]	; 1fc <CObjHolder_Entry(CObj*, unsigned long)+0x1fc>
 11c:	ebfffffe 	bl	0 <b8SysPuts>
 120:	e59f00d8 	ldr	r0, [pc, #216]	; 200 <CObjHolder_Entry(CObj*, unsigned long)+0x200>
 124:	ebfffffe 	bl	0 <b8SysPuts>
 128:	e59f00e8 	ldr	r0, [pc, #232]	; 218 <CObjHolder_Entry(CObj*, unsigned long)+0x218>
 12c:	ebfffffe 	bl	0 <b8SysPuts>
 130:	e59f00d0 	ldr	r0, [pc, #208]	; 208 <CObjHolder_Entry(CObj*, unsigned long)+0x208>
 134:	ebfffffe 	bl	0 <b8SysPuts>
 138:	e59f00cc 	ldr	r0, [pc, #204]	; 20c <CObjHolder_Entry(CObj*, unsigned long)+0x20c>
 13c:	ebfffffe 	bl	0 <b8SysPuts>
 140:	e1a00006 	mov	r0, r6
 144:	ebfffffe 	bl	0 <b8SysPutHex>
 148:	e59f00b8 	ldr	r0, [pc, #184]	; 208 <CObjHolder_Entry(CObj*, unsigned long)+0x208>
 14c:	ebfffffe 	bl	0 <b8SysPuts>
 150:	e59f00b8 	ldr	r0, [pc, #184]	; 210 <CObjHolder_Entry(CObj*, unsigned long)+0x210>
 154:	ebfffffe 	bl	0 <b8SysPuts>
 158:	e59f00b4 	ldr	r0, [pc, #180]	; 214 <CObjHolder_Entry(CObj*, unsigned long)+0x214>
 15c:	ebfffffe 	bl	0 <b8SysPuts>
 160:	e1000070 	hlt	0x0000
 164:	e594300c 	ldr	r3, [r4, #12]
 168:	e3530000 	cmp	r3, #0
 16c:	0affffae 	beq	2c <CObjHolder_Entry(CObj*, unsigned long)+0x2c>
 170:	e59f0074 	ldr	r0, [pc, #116]	; 1ec <CObjHolder_Entry(CObj*, unsigned long)+0x1ec>
 174:	ebfffffe 	bl	0 <b8SysPuts>
 178:	e59f0070 	ldr	r0, [pc, #112]	; 1f0 <CObjHolder_Entry(CObj*, unsigned long)+0x1f0>
 17c:	ebfffffe 	bl	0 <b8SysPuts>
 180:	e59f006c 	ldr	r0, [pc, #108]	; 1f4 <CObjHolder_Entry(CObj*, unsigned long)+0x1f4>
 184:	ebfffffe 	bl	0 <b8SysPuts>
 188:	e3a0003a 	mov	r0, #58	; 0x3a
 18c:	ebfffffe 	bl	0 <b8SysPutNum>
 190:	e59f0060 	ldr	r0, [pc, #96]	; 1f8 <CObjHolder_Entry(CObj*, unsigned long)+0x1f8>
 194:	ebfffffe 	bl	0 <b8SysPuts>
 198:	e59f005c 	ldr	r0, [pc, #92]	; 1fc <CObjHolder_Entry(CObj*, unsigned long)+0x1fc>
 19c:	ebfffffe 	bl	0 <b8SysPuts>
 1a0:	e59f0058 	ldr	r0, [pc, #88]	; 200 <CObjHolder_Entry(CObj*, unsigned long)+0x200>
 1a4:	ebfffffe 	bl	0 <b8SysPuts>
 1a8:	e59f006c 	ldr	r0, [pc, #108]	; 21c <CObjHolder_Entry(CObj*, unsigned long)+0x21c>
 1ac:	ebfffffe 	bl	0 <b8SysPuts>
 1b0:	e59f0050 	ldr	r0, [pc, #80]	; 208 <CObjHolder_Entry(CObj*, unsigned long)+0x208>
 1b4:	ebfffffe 	bl	0 <b8SysPuts>
 1b8:	e59f004c 	ldr	r0, [pc, #76]	; 20c <CObjHolder_Entry(CObj*, unsigned long)+0x20c>
 1bc:	ebfffffe 	bl	0 <b8SysPuts>
 1c0:	e1a00006 	mov	r0, r6
 1c4:	ebfffffe 	bl	0 <b8SysPutHex>
 1c8:	e59f0038 	ldr	r0, [pc, #56]	; 208 <CObjHolder_Entry(CObj*, unsigned long)+0x208>
 1cc:	ebfffffe 	bl	0 <b8SysPuts>
 1d0:	e59f0038 	ldr	r0, [pc, #56]	; 210 <CObjHolder_Entry(CObj*, unsigned long)+0x210>
 1d4:	ebfffffe 	bl	0 <b8SysPuts>
 1d8:	e59f0034 	ldr	r0, [pc, #52]	; 214 <CObjHolder_Entry(CObj*, unsigned long)+0x214>
 1dc:	ebfffffe 	bl	0 <b8SysPuts>
 1e0:	e1000070 	hlt	0x0000
 1e4:	eaffff90 	b	2c <CObjHolder_Entry(CObj*, unsigned long)+0x2c>
	...
 1f0:	0000001c 	.word	0x0000001c
 1f4:	00000028 	.word	0x00000028
 1f8:	0000002c 	.word	0x0000002c
 1fc:	00000030 	.word	0x00000030
 200:	00000044 	.word	0x00000044
 204:	00000048 	.word	0x00000048
 208:	0000005c 	.word	0x0000005c
 20c:	00000060 	.word	0x00000060
 210:	0000007c 	.word	0x0000007c
 214:	000000c4 	.word	0x000000c4
 218:	00000120 	.word	0x00000120
 21c:	00000130 	.word	0x00000130

Disassembly of section .text._Z17CObjHolder_Removem:

00000000 <CObjHolder_Remove(unsigned long)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e24dd010 	sub	sp, sp, #16
   8:	e1a06000 	mov	r6, r0
   c:	ebfffffe 	bl	0 <Handle_IsAlive(unsigned long)>
  10:	e3500000 	cmp	r0, #0
  14:	1a000001 	bne	20 <CObjHolder_Remove(unsigned long)+0x20>
  18:	e28dd010 	add	sp, sp, #16
  1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  20:	e1a00006 	mov	r0, r6
  24:	ebfffffe 	bl	0 <Handle_GetPointer(unsigned long)>
  28:	e3a01000 	mov	r1, #0
  2c:	e5903010 	ldr	r3, [r0, #16]
  30:	e59f209c 	ldr	r2, [pc, #156]	; d4 <CObjHolder_Remove(unsigned long)+0xd4>
  34:	e0833083 	add	r3, r3, r3, lsl #1
  38:	e7925103 	ldr	r5, [r2, r3, lsl #2]
  3c:	e0828103 	add	r8, r2, r3, lsl #2
  40:	e28d7004 	add	r7, sp, #4
  44:	e1580005 	cmp	r8, r5
  48:	e58d7008 	str	r7, [sp, #8]
  4c:	e58d7004 	str	r7, [sp, #4]
  50:	e58d100c 	str	r1, [sp, #12]
  54:	0affffef 	beq	18 <CObjHolder_Remove(unsigned long)+0x18>
  58:	e1a04007 	mov	r4, r7
  5c:	ea000001 	b	68 <CObjHolder_Remove(unsigned long)+0x68>
  60:	e1580005 	cmp	r8, r5
  64:	0a000016 	beq	c4 <CObjHolder_Remove(unsigned long)+0xc4>
  68:	e1a01005 	mov	r1, r5
  6c:	e5913008 	ldr	r3, [r1, #8]
  70:	e5955000 	ldr	r5, [r5]
  74:	e1530006 	cmp	r3, r6
  78:	1afffff8 	bne	60 <CObjHolder_Remove(unsigned long)+0x60>
  7c:	e1550004 	cmp	r5, r4
  80:	11510004 	cmpne	r1, r4
  84:	0afffff5 	beq	60 <CObjHolder_Remove(unsigned long)+0x60>
  88:	e1a00004 	mov	r0, r4
  8c:	e1a02005 	mov	r2, r5
  90:	ebfffffe 	bl	0 <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
  94:	e59d200c 	ldr	r2, [sp, #12]
  98:	e5983008 	ldr	r3, [r8, #8]
  9c:	e2822001 	add	r2, r2, #1
  a0:	e2433001 	sub	r3, r3, #1
  a4:	e59d4004 	ldr	r4, [sp, #4]
  a8:	e58d200c 	str	r2, [sp, #12]
  ac:	e5883008 	str	r3, [r8, #8]
  b0:	eaffffea 	b	60 <CObjHolder_Remove(unsigned long)+0x60>
  b4:	e1a00004 	mov	r0, r4
  b8:	e3a0100c 	mov	r1, #12
  bc:	e5944000 	ldr	r4, [r4]
  c0:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  c4:	e1540007 	cmp	r4, r7
  c8:	1afffff9 	bne	b4 <CObjHolder_Remove(unsigned long)+0xb4>
  cc:	e28dd010 	add	sp, sp, #16
  d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  d4:	00000000 	.word	0x00000000

Disassembly of section .text._Z15CObjHolder_StepP9_b8PpuCmd:

00000000 <CObjHolder_Step(_b8PpuCmd*)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e59f62c4 	ldr	r6, [pc, #708]	; 2d0 <CObjHolder_Step(_b8PpuCmd*)+0x2d0>
   8:	e1a05000 	mov	r5, r0
   c:	e5963000 	ldr	r3, [r6]
  10:	e24dd01c 	sub	sp, sp, #28
  14:	e3530000 	cmp	r3, #0
  18:	da000075 	ble	1f4 <CObjHolder_Step(_b8PpuCmd*)+0x1f4>
  1c:	e59f22b0 	ldr	r2, [pc, #688]	; 2d4 <CObjHolder_Step(_b8PpuCmd*)+0x2d4>
  20:	e58d2004 	str	r2, [sp, #4]
  24:	e59f82ac 	ldr	r8, [pc, #684]	; 2d8 <CObjHolder_Step(_b8PpuCmd*)+0x2d8>
  28:	e2433001 	sub	r3, r3, #1
  2c:	e5863000 	str	r3, [r6]
  30:	e1a06008 	mov	r6, r8
  34:	e59f72a0 	ldr	r7, [pc, #672]	; 2dc <CObjHolder_Step(_b8PpuCmd*)+0x2dc>
  38:	e5964000 	ldr	r4, [r6]
  3c:	e1540006 	cmp	r4, r6
  40:	1a000003 	bne	54 <CObjHolder_Step(_b8PpuCmd*)+0x54>
  44:	ea000013 	b	98 <CObjHolder_Step(_b8PpuCmd*)+0x98>
  48:	e5944000 	ldr	r4, [r4]
  4c:	e1540006 	cmp	r4, r6
  50:	0a000010 	beq	98 <CObjHolder_Step(_b8PpuCmd*)+0x98>
  54:	e5940008 	ldr	r0, [r4, #8]
  58:	ebfffffe 	bl	0 <Handle_GetPointer(unsigned long)>
  5c:	e2503000 	subs	r3, r0, #0
  60:	0afffff8 	beq	48 <CObjHolder_Step(_b8PpuCmd*)+0x48>
  64:	e5932008 	ldr	r2, [r3, #8]
  68:	e3520000 	cmp	r2, #0
  6c:	0afffff5 	beq	48 <CObjHolder_Step(_b8PpuCmd*)+0x48>
  70:	e5933000 	ldr	r3, [r3]
  74:	e5933008 	ldr	r3, [r3, #8]
  78:	e1530007 	cmp	r3, r7
  7c:	0afffff1 	beq	48 <CObjHolder_Step(_b8PpuCmd*)+0x48>
  80:	e1a01005 	mov	r1, r5
  84:	e1a0e00f 	mov	lr, pc
  88:	e1a0f003 	mov	pc, r3
  8c:	e5944000 	ldr	r4, [r4]
  90:	e1540006 	cmp	r4, r6
  94:	1affffee 	bne	54 <CObjHolder_Step(_b8PpuCmd*)+0x54>
  98:	e59d3004 	ldr	r3, [sp, #4]
  9c:	e286600c 	add	r6, r6, #12
  a0:	e1530006 	cmp	r3, r6
  a4:	1affffe3 	bne	38 <CObjHolder_Step(_b8PpuCmd*)+0x38>
  a8:	e59f9230 	ldr	r9, [pc, #560]	; 2e0 <CObjHolder_Step(_b8PpuCmd*)+0x2e0>
  ac:	e28d700c 	add	r7, sp, #12
  b0:	e5986000 	ldr	r6, [r8]
  b4:	e1560008 	cmp	r6, r8
  b8:	1a000002 	bne	c8 <CObjHolder_Step(_b8PpuCmd*)+0xc8>
  bc:	ea000046 	b	1dc <CObjHolder_Step(_b8PpuCmd*)+0x1dc>
  c0:	e1580006 	cmp	r8, r6
  c4:	0a000044 	beq	1dc <CObjHolder_Step(_b8PpuCmd*)+0x1dc>
  c8:	e5960008 	ldr	r0, [r6, #8]
  cc:	ebfffffe 	bl	0 <Handle_GetPointer(unsigned long)>
  d0:	e5d03014 	ldrb	r3, [r0, #20]
  d4:	e1a05000 	mov	r5, r0
  d8:	e3530000 	cmp	r3, #0
  dc:	05966000 	ldreq	r6, [r6]
  e0:	0afffff6 	beq	c0 <CObjHolder_Step(_b8PpuCmd*)+0xc0>
  e4:	e5960008 	ldr	r0, [r6, #8]
  e8:	ebfffffe 	bl	0 <Handle_Remove(unsigned long)>
  ec:	e5953004 	ldr	r3, [r5, #4]
  f0:	e58d700c 	str	r7, [sp, #12]
  f4:	e203301f 	and	r3, r3, #31
  f8:	e0833083 	add	r3, r3, r3, lsl #1
  fc:	e799a103 	ldr	r10, [r9, r3, lsl #2]
 100:	e089b103 	add	r11, r9, r3, lsl #2
 104:	e3a03000 	mov	r3, #0
 108:	e15b000a 	cmp	r11, r10
 10c:	11a04007 	movne	r4, r7
 110:	e58d7010 	str	r7, [sp, #16]
 114:	e58d3014 	str	r3, [sp, #20]
 118:	1a000002 	bne	128 <CObjHolder_Step(_b8PpuCmd*)+0x128>
 11c:	ea00001d 	b	198 <CObjHolder_Step(_b8PpuCmd*)+0x198>
 120:	e15b000a 	cmp	r11, r10
 124:	0a000013 	beq	178 <CObjHolder_Step(_b8PpuCmd*)+0x178>
 128:	e1a0100a 	mov	r1, r10
 12c:	e5910008 	ldr	r0, [r1, #8]
 130:	e59aa000 	ldr	r10, [r10]
 134:	e1550000 	cmp	r5, r0
 138:	1afffff8 	bne	120 <CObjHolder_Step(_b8PpuCmd*)+0x120>
 13c:	e15a0004 	cmp	r10, r4
 140:	11540001 	cmpne	r4, r1
 144:	0afffff5 	beq	120 <CObjHolder_Step(_b8PpuCmd*)+0x120>
 148:	e1a00004 	mov	r0, r4
 14c:	e1a0200a 	mov	r2, r10
 150:	ebfffffe 	bl	0 <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
 154:	e59d0014 	ldr	r0, [sp, #20]
 158:	e59b1008 	ldr	r1, [r11, #8]
 15c:	e2800001 	add	r0, r0, #1
 160:	e2411001 	sub	r1, r1, #1
 164:	e15b000a 	cmp	r11, r10
 168:	e59d400c 	ldr	r4, [sp, #12]
 16c:	e58d0014 	str	r0, [sp, #20]
 170:	e58b1008 	str	r1, [r11, #8]
 174:	1affffeb 	bne	128 <CObjHolder_Step(_b8PpuCmd*)+0x128>
 178:	e1540007 	cmp	r4, r7
 17c:	0a000005 	beq	198 <CObjHolder_Step(_b8PpuCmd*)+0x198>
 180:	e1a00004 	mov	r0, r4
 184:	e5944000 	ldr	r4, [r4]
 188:	e3a0100c 	mov	r1, #12
 18c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 190:	e1540007 	cmp	r4, r7
 194:	1afffff9 	bne	180 <CObjHolder_Step(_b8PpuCmd*)+0x180>
 198:	e5953000 	ldr	r3, [r5]
 19c:	e1a00005 	mov	r0, r5
 1a0:	e5933010 	ldr	r3, [r3, #16]
 1a4:	e1a0e00f 	mov	lr, pc
 1a8:	e1a0f003 	mov	pc, r3
 1ac:	e5983008 	ldr	r3, [r8, #8]
 1b0:	e5964000 	ldr	r4, [r6]
 1b4:	e2433001 	sub	r3, r3, #1
 1b8:	e1a00006 	mov	r0, r6
 1bc:	e5883008 	str	r3, [r8, #8]
 1c0:	ebfffffe 	bl	0 <std::__detail::_List_node_base::_M_unhook()>
 1c4:	e1a00006 	mov	r0, r6
 1c8:	e1a06004 	mov	r6, r4
 1cc:	e3a0100c 	mov	r1, #12
 1d0:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 1d4:	e1580006 	cmp	r8, r6
 1d8:	1affffba 	bne	c8 <CObjHolder_Step(_b8PpuCmd*)+0xc8>
 1dc:	e59d3004 	ldr	r3, [sp, #4]
 1e0:	e288800c 	add	r8, r8, #12
 1e4:	e1530008 	cmp	r3, r8
 1e8:	1affffb0 	bne	b0 <CObjHolder_Step(_b8PpuCmd*)+0xb0>
 1ec:	e28dd01c 	add	sp, sp, #28
 1f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 1f4:	e59f70dc 	ldr	r7, [pc, #220]	; 2d8 <CObjHolder_Step(_b8PpuCmd*)+0x2d8>
 1f8:	e1a09007 	mov	r9, r7
 1fc:	e2873024 	add	r3, r7, #36	; 0x24
 200:	e58d3004 	str	r3, [sp, #4]
 204:	e5998000 	ldr	r8, [r9]
 208:	e1580009 	cmp	r8, r9
 20c:	0a00000d 	beq	248 <CObjHolder_Step(_b8PpuCmd*)+0x248>
 210:	e5980008 	ldr	r0, [r8, #8]
 214:	ebfffffe 	bl	0 <Handle_GetPointer(unsigned long)>
 218:	e2504000 	subs	r4, r0, #0
 21c:	0a000006 	beq	23c <CObjHolder_Step(_b8PpuCmd*)+0x23c>
 220:	e5943000 	ldr	r3, [r4]
 224:	e5933000 	ldr	r3, [r3]
 228:	e1a0e00f 	mov	lr, pc
 22c:	e1a0f003 	mov	pc, r3
 230:	e5943008 	ldr	r3, [r4, #8]
 234:	e2833001 	add	r3, r3, #1
 238:	e5843008 	str	r3, [r4, #8]
 23c:	e5988000 	ldr	r8, [r8]
 240:	e1580009 	cmp	r8, r9
 244:	1afffff1 	bne	210 <CObjHolder_Step(_b8PpuCmd*)+0x210>
 248:	e59d3004 	ldr	r3, [sp, #4]
 24c:	e289900c 	add	r9, r9, #12
 250:	e1590003 	cmp	r9, r3
 254:	1affffea 	bne	204 <CObjHolder_Step(_b8PpuCmd*)+0x204>
 258:	e59f8084 	ldr	r8, [pc, #132]	; 2e4 <CObjHolder_Step(_b8PpuCmd*)+0x2e4>
 25c:	e5974000 	ldr	r4, [r7]
 260:	e1540007 	cmp	r4, r7
 264:	1a000003 	bne	278 <CObjHolder_Step(_b8PpuCmd*)+0x278>
 268:	ea000012 	b	2b8 <CObjHolder_Step(_b8PpuCmd*)+0x2b8>
 26c:	e5944000 	ldr	r4, [r4]
 270:	e1540007 	cmp	r4, r7
 274:	0a00000f 	beq	2b8 <CObjHolder_Step(_b8PpuCmd*)+0x2b8>
 278:	e5940008 	ldr	r0, [r4, #8]
 27c:	ebfffffe 	bl	0 <Handle_GetPointer(unsigned long)>
 280:	e2503000 	subs	r3, r0, #0
 284:	0afffff8 	beq	26c <CObjHolder_Step(_b8PpuCmd*)+0x26c>
 288:	e5932008 	ldr	r2, [r3, #8]
 28c:	e3520000 	cmp	r2, #0
 290:	0afffff5 	beq	26c <CObjHolder_Step(_b8PpuCmd*)+0x26c>
 294:	e5933000 	ldr	r3, [r3]
 298:	e5933004 	ldr	r3, [r3, #4]
 29c:	e1530008 	cmp	r3, r8
 2a0:	0afffff1 	beq	26c <CObjHolder_Step(_b8PpuCmd*)+0x26c>
 2a4:	e1a0e00f 	mov	lr, pc
 2a8:	e1a0f003 	mov	pc, r3
 2ac:	e5944000 	ldr	r4, [r4]
 2b0:	e1540007 	cmp	r4, r7
 2b4:	1affffef 	bne	278 <CObjHolder_Step(_b8PpuCmd*)+0x278>
 2b8:	e59d3004 	ldr	r3, [sp, #4]
 2bc:	e287700c 	add	r7, r7, #12
 2c0:	e1570003 	cmp	r7, r3
 2c4:	1affffe4 	bne	25c <CObjHolder_Step(_b8PpuCmd*)+0x25c>
 2c8:	e5963000 	ldr	r3, [r6]
 2cc:	eaffff54 	b	24 <CObjHolder_Step(_b8PpuCmd*)+0x24>
 2d0:	00000000 	.word	0x00000000
 2d4:	00000024 	.word	0x00000024
	...

Disassembly of section .text._Z16CObjHolder_Pausei:

00000000 <CObjHolder_Pause(int)>:
   0:	e59f3004 	ldr	r3, [pc, #4]	; c <CObjHolder_Pause(int)+0xc>
   4:	e5830000 	str	r0, [r3]
   8:	e1a0f00e 	mov	pc, lr
   c:	00000000 	.word	0x00000000

Disassembly of section .text._Z4cobjm:

00000000 <cobj(unsigned long)>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	ebfffffe 	bl	0 <Handle_IsAlive(unsigned long)>
   c:	e3500000 	cmp	r0, #0
  10:	0a000002 	beq	20 <cobj(unsigned long)+0x20>
  14:	e1a00004 	mov	r0, r4
  18:	e8bd4010 	pop	{r4, lr}
  1c:	eafffffe 	b	0 <Handle_GetPointer(unsigned long)>
  20:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_:

00000000 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)>:
   0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e8900180 	ldm	r0, {r7, r8}
   8:	e0483007 	sub	r3, r8, r7
   c:	e1a03143 	asr	r3, r3, #2
  10:	e373021e 	cmn	r3, #-536870911	; 0xe0000001
  14:	0a000040 	beq	11c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x11c>
  18:	e3530001 	cmp	r3, #1
  1c:	e1a09002 	mov	r9, r2
  20:	21a02003 	movcs	r2, r3
  24:	33a02001 	movcc	r2, #1
  28:	e0934002 	adds	r4, r3, r2
  2c:	e1a05000 	mov	r5, r0
  30:	e1a06001 	mov	r6, r1
  34:	2a000035 	bcs	110 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x110>
  38:	e3540000 	cmp	r4, #0
  3c:	01a0b004 	moveq	r11, r4
  40:	e041a007 	sub	r10, r1, r7
  44:	1a000028 	bne	ec <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xec>
  48:	e5993000 	ldr	r3, [r9]
  4c:	e35a0000 	cmp	r10, #0
  50:	e78b300a 	str	r3, [r11, r10]
  54:	e0488006 	sub	r8, r8, r6
  58:	ca000017 	bgt	bc <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xbc>
  5c:	e28aa004 	add	r10, r10, #4
  60:	e3580000 	cmp	r8, #0
  64:	e08ba00a 	add	r10, r11, r10
  68:	ca00000b 	bgt	9c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x9c>
  6c:	e3570000 	cmp	r7, #0
  70:	e08aa008 	add	r10, r10, r8
  74:	1a000003 	bne	88 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x88>
  78:	e585b000 	str	r11, [r5]
  7c:	e585a004 	str	r10, [r5, #4]
  80:	e5854008 	str	r4, [r5, #8]
  84:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
  88:	e5951008 	ldr	r1, [r5, #8]
  8c:	e0411007 	sub	r1, r1, r7
  90:	e1a00007 	mov	r0, r7
  94:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  98:	eafffff6 	b	78 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x78>
  9c:	e1a0000a 	mov	r0, r10
  a0:	e1a01006 	mov	r1, r6
  a4:	e1a02008 	mov	r2, r8
  a8:	ebfffffe 	bl	0 <memcpy>
  ac:	e3570000 	cmp	r7, #0
  b0:	e08aa008 	add	r10, r10, r8
  b4:	0affffef 	beq	78 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x78>
  b8:	eafffff2 	b	88 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x88>
  bc:	e1a0200a 	mov	r2, r10
  c0:	e1a01007 	mov	r1, r7
  c4:	e1a0000b 	mov	r0, r11
  c8:	ebfffffe 	bl	0 <memmove>
  cc:	e28aa004 	add	r10, r10, #4
  d0:	e3580000 	cmp	r8, #0
  d4:	e08ba00a 	add	r10, r11, r10
  d8:	caffffef 	bgt	9c <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x9c>
  dc:	e5951008 	ldr	r1, [r5, #8]
  e0:	e08aa008 	add	r10, r10, r8
  e4:	e0411007 	sub	r1, r1, r7
  e8:	eaffffe8 	b	90 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x90>
  ec:	e3e0320e 	mvn	r3, #-536870912	; 0xe0000000
  f0:	e1540003 	cmp	r4, r3
  f4:	21a04003 	movcs	r4, r3
  f8:	e1a04104 	lsl	r4, r4, #2
  fc:	e1a00004 	mov	r0, r4
 100:	ebfffffe 	bl	0 <operator new(unsigned int)>
 104:	e1a0b000 	mov	r11, r0
 108:	e0804004 	add	r4, r0, r4
 10c:	eaffffcd 	b	48 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x48>
 110:	e3e0410e 	mvn	r4, #-2147483645	; 0x80000003
 114:	e041a007 	sub	r10, r1, r7
 118:	eafffff7 	b	fc <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0xfc>
 11c:	e59f0000 	ldr	r0, [pc]	; 124 <void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)+0x124>
 120:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 124:	00000000 	.word	0x00000000

Disassembly of section .text._Z15CObjHolder_EnumRSt6vectorImSaImEEmm:

00000000 <CObjHolder_Enum(std::vector<unsigned long, std::allocator<unsigned long> >&, unsigned long, unsigned long)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e0811081 	add	r1, r1, r1, lsl #1
   8:	e59f6080 	ldr	r6, [pc, #128]	; 90 <CObjHolder_Enum(std::vector<unsigned long, std::allocator<unsigned long> >&, unsigned long, unsigned long)+0x90>
   c:	e5903000 	ldr	r3, [r0]
  10:	e1a07002 	mov	r7, r2
  14:	e1a01101 	lsl	r1, r1, #2
  18:	e5902004 	ldr	r2, [r0, #4]
  1c:	e7b64001 	ldr	r4, [r6, r1]!
  20:	e1520003 	cmp	r2, r3
  24:	15803004 	strne	r3, [r0, #4]
  28:	e1540006 	cmp	r4, r6
  2c:	e1a05000 	mov	r5, r0
  30:	1a000003 	bne	44 <CObjHolder_Enum(std::vector<unsigned long, std::allocator<unsigned long> >&, unsigned long, unsigned long)+0x44>
  34:	ea000010 	b	7c <CObjHolder_Enum(std::vector<unsigned long, std::allocator<unsigned long> >&, unsigned long, unsigned long)+0x7c>
  38:	e5944000 	ldr	r4, [r4]
  3c:	e1540006 	cmp	r4, r6
  40:	0a00000d 	beq	7c <CObjHolder_Enum(std::vector<unsigned long, std::allocator<unsigned long> >&, unsigned long, unsigned long)+0x7c>
  44:	e5940008 	ldr	r0, [r4, #8]
  48:	ebfffffe 	bl	0 <Handle_GetPointer(unsigned long)>
  4c:	e5903018 	ldr	r3, [r0, #24]
  50:	e1530007 	cmp	r3, r7
  54:	1afffff7 	bne	38 <CObjHolder_Enum(std::vector<unsigned long, std::allocator<unsigned long> >&, unsigned long, unsigned long)+0x38>
  58:	e995000a 	ldmib	r5, {r1, r3}
  5c:	e1510003 	cmp	r1, r3
  60:	0a000006 	beq	80 <CObjHolder_Enum(std::vector<unsigned long, std::allocator<unsigned long> >&, unsigned long, unsigned long)+0x80>
  64:	e5943008 	ldr	r3, [r4, #8]
  68:	e5944000 	ldr	r4, [r4]
  6c:	e4813004 	str	r3, [r1], #4
  70:	e1540006 	cmp	r4, r6
  74:	e5851004 	str	r1, [r5, #4]
  78:	1afffff1 	bne	44 <CObjHolder_Enum(std::vector<unsigned long, std::allocator<unsigned long> >&, unsigned long, unsigned long)+0x44>
  7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  80:	e1a00005 	mov	r0, r5
  84:	e2842008 	add	r2, r4, #8
  88:	ebfffffe 	bl	0 <CObjHolder_Enum(std::vector<unsigned long, std::allocator<unsigned long> >&, unsigned long, unsigned long)>
  8c:	eaffffe9 	b	38 <CObjHolder_Enum(std::vector<unsigned long, std::allocator<unsigned long> >&, unsigned long, unsigned long)+0x38>
  90:	00000000 	.word	0x00000000

Disassembly of section .text.startup._GLOBAL__sub_I__ZN4CObj4StepEv:

00000000 <_GLOBAL__sub_I__ZN4CObj4StepEv>:
   0:	e92d4010 	push	{r4, lr}
   4:	e3a04000 	mov	r4, #0
   8:	e59f3068 	ldr	r3, [pc, #104]	; 78 <_GLOBAL__sub_I__ZN4CObj4StepEv+0x78>
   c:	e59f2068 	ldr	r2, [pc, #104]	; 7c <_GLOBAL__sub_I__ZN4CObj4StepEv+0x7c>
  10:	e283000c 	add	r0, r3, #12
  14:	e2831018 	add	r1, r3, #24
  18:	e5830010 	str	r0, [r3, #16]
  1c:	e583000c 	str	r0, [r3, #12]
  20:	e583101c 	str	r1, [r3, #28]
  24:	e5831018 	str	r1, [r3, #24]
  28:	e5833004 	str	r3, [r3, #4]
  2c:	e5833000 	str	r3, [r3]
  30:	e5834008 	str	r4, [r3, #8]
  34:	e5834014 	str	r4, [r3, #20]
  38:	e5834020 	str	r4, [r3, #32]
  3c:	e1a00004 	mov	r0, r4
  40:	e59f1038 	ldr	r1, [pc, #56]	; 80 <_GLOBAL__sub_I__ZN4CObj4StepEv+0x80>
  44:	ebfffffe 	bl	0 <__aeabi_atexit>
  48:	e59f3034 	ldr	r3, [pc, #52]	; 84 <_GLOBAL__sub_I__ZN4CObj4StepEv+0x84>
  4c:	e2832d06 	add	r2, r3, #384	; 0x180
  50:	e9830018 	stmib	r3, {r3, r4}
  54:	e5833000 	str	r3, [r3]
  58:	e283300c 	add	r3, r3, #12
  5c:	e1530002 	cmp	r3, r2
  60:	1afffffa 	bne	50 <_GLOBAL__sub_I__ZN4CObj4StepEv+0x50>
  64:	e3a00000 	mov	r0, #0
  68:	e8bd4010 	pop	{r4, lr}
  6c:	e59f2008 	ldr	r2, [pc, #8]	; 7c <_GLOBAL__sub_I__ZN4CObj4StepEv+0x7c>
  70:	e59f1010 	ldr	r1, [pc, #16]	; 88 <_GLOBAL__sub_I__ZN4CObj4StepEv+0x88>
  74:	eafffffe 	b	0 <__aeabi_atexit>
	...

cstr.o:     file format elf32-littlearm


Disassembly of section .text._Z11cstr_strlenPKc:

00000000 <cstr_strlen(char const*)>:
   0:	e2503000 	subs	r3, r0, #0
   4:	0a000008 	beq	2c <cstr_strlen(char const*)+0x2c>
   8:	e4d30001 	ldrb	r0, [r3], #1
   c:	e3500000 	cmp	r0, #0
  10:	01a0f00e 	moveq	pc, lr
  14:	e3a00000 	mov	r0, #0
  18:	e4d32001 	ldrb	r2, [r3], #1
  1c:	e2800001 	add	r0, r0, #1
  20:	e3520000 	cmp	r2, #0
  24:	1afffffb 	bne	18 <cstr_strlen(char const*)+0x18>
  28:	e1a0f00e 	mov	pc, lr
  2c:	e1a00003 	mov	r0, r3
  30:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._Z11cstr_strcmpPKcS0_:

00000000 <cstr_strcmp(char const*, char const*)>:
   0:	e5d03000 	ldrb	r3, [r0]
   4:	e5d12000 	ldrb	r2, [r1]
   8:	e1520003 	cmp	r2, r3
   c:	0a000004 	beq	24 <cstr_strcmp(char const*, char const*)+0x24>
  10:	ea000005 	b	2c <cstr_strcmp(char const*, char const*)+0x2c>
  14:	e5f03001 	ldrb	r3, [r0, #1]!
  18:	e5f12001 	ldrb	r2, [r1, #1]!
  1c:	e1530002 	cmp	r3, r2
  20:	1a000001 	bne	2c <cstr_strcmp(char const*, char const*)+0x2c>
  24:	e3530000 	cmp	r3, #0
  28:	1afffff9 	bne	14 <cstr_strcmp(char const*, char const*)+0x14>
  2c:	e0430002 	sub	r0, r3, r2
  30:	e1a0f00e 	mov	pc, lr

esc_decoder.o:     file format elf32-littlearm


Disassembly of section .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj.isra.0:

00000000 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned int&, unsigned int) [clone .isra.0]>:
   0:	e5903000 	ldr	r3, [r0]
   4:	e92d4010 	push	{r4, lr}
   8:	e3530000 	cmp	r3, #0
   c:	ba00000e 	blt	4c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned int&, unsigned int) [clone .isra.0]+0x4c>
  10:	e1530001 	cmp	r3, r1
  14:	9a000008 	bls	3c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned int&, unsigned int) [clone .isra.0]+0x3c>
  18:	e1530081 	cmp	r3, r1, lsl #1
  1c:	e1a01081 	lsl	r1, r1, #1
  20:	2a000005 	bcs	3c <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned int&, unsigned int) [clone .isra.0]+0x3c>
  24:	e3510000 	cmp	r1, #0
  28:	b3e03102 	mvnlt	r3, #-2147483648	; 0x80000000
  2c:	a1a03001 	movge	r3, r1
  30:	a5801000 	strge	r1, [r0]
  34:	b5803000 	strlt	r3, [r0]
  38:	ba000002 	blt	48 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned int&, unsigned int) [clone .isra.0]+0x48>
  3c:	e2930001 	adds	r0, r3, #1
  40:	58bd4010 	poppl	{r4, lr}
  44:	5afffffe 	bpl	0 <operator new(unsigned int)>
  48:	ebfffffe 	bl	0 <std::__throw_bad_alloc()>
  4c:	e59f0000 	ldr	r0, [pc]	; 54 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_create(unsigned int&, unsigned int) [clone .isra.0]+0x54>
  50:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
  54:	00000000 	.word	0x00000000

Disassembly of section .text._ZN17CEscapeSeqDecoderC2Ev:

00000000 <CEscapeSeqDecoder::CEscapeSeqDecoder()>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e1a07000 	mov	r7, r0
   8:	e24dd008 	sub	sp, sp, #8
   c:	e3a0003c 	mov	r0, #60	; 0x3c
  10:	ebfffffe 	bl	0 <operator new(unsigned int)>
  14:	e1a04000 	mov	r4, r0
  18:	e3a03000 	mov	r3, #0
  1c:	e1a06004 	mov	r6, r4
  20:	e3a0cc25 	mov	r12, #9472	; 0x2500
  24:	e3a02412 	mov	r2, #301989888	; 0x12000000
  28:	e3a0101e 	mov	r1, #30
  2c:	e4c6300c 	strb	r3, [r6], #12
  30:	e5843008 	str	r3, [r4, #8]
  34:	e5c4300c 	strb	r3, [r4, #12]
  38:	e5843020 	str	r3, [r4, #32]
  3c:	e5843024 	str	r3, [r4, #36]	; 0x24
  40:	e5843028 	str	r3, [r4, #40]	; 0x28
  44:	e5843030 	str	r3, [r4, #48]	; 0x30
  48:	e5c43036 	strb	r3, [r4, #54]	; 0x36
  4c:	e1c433b8 	strh	r3, [r4, #56]	; 0x38
  50:	e1d433b4 	ldrh	r3, [r4, #52]	; 0x34
  54:	e584202c 	str	r2, [r4, #44]	; 0x2c
  58:	e20330f0 	and	r3, r3, #240	; 0xf0
  5c:	e183300c 	orr	r3, r3, r12
  60:	e3a00014 	mov	r0, #20
  64:	e1c4c1bc 	strh	r12, [r4, #28]
  68:	e5c4101e 	strb	r1, [r4, #30]
  6c:	e5846004 	str	r6, [r4, #4]
  70:	e1c433b4 	strh	r3, [r4, #52]	; 0x34
  74:	ebfffffe 	bl	0 <operator new(unsigned int)>
  78:	e5948020 	ldr	r8, [r4, #32]
  7c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
  80:	e1a05000 	mov	r5, r0
  84:	e0422008 	sub	r2, r2, r8
  88:	e3520000 	cmp	r2, #0
  8c:	ca000031 	bgt	158 <CEscapeSeqDecoder::CEscapeSeqDecoder()+0x158>
  90:	e3580000 	cmp	r8, #0
  94:	1a00002a 	bne	144 <CEscapeSeqDecoder::CEscapeSeqDecoder()+0x144>
  98:	e2853014 	add	r3, r5, #20
  9c:	e5843028 	str	r3, [r4, #40]	; 0x28
  a0:	e3a03020 	mov	r3, #32
  a4:	e5942004 	ldr	r2, [r4, #4]
  a8:	e5845020 	str	r5, [r4, #32]
  ac:	e1560002 	cmp	r6, r2
  b0:	e5845024 	str	r5, [r4, #36]	; 0x24
  b4:	e58d3004 	str	r3, [sp, #4]
  b8:	0a000006 	beq	d8 <CEscapeSeqDecoder::CEscapeSeqDecoder()+0xd8>
  bc:	e594100c 	ldr	r1, [r4, #12]
  c0:	e351001f 	cmp	r1, #31
  c4:	9a000004 	bls	dc <CEscapeSeqDecoder::CEscapeSeqDecoder()+0xdc>
  c8:	e1a00007 	mov	r0, r7
  cc:	e5874000 	str	r4, [r7]
  d0:	e28dd008 	add	sp, sp, #8
  d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  d8:	e3a0100f 	mov	r1, #15
  dc:	e28d0004 	add	r0, sp, #4
  e0:	ebfffffe 	bl	0 <CEscapeSeqDecoder::CEscapeSeqDecoder()>
  e4:	e5942008 	ldr	r2, [r4, #8]
  e8:	e1a05000 	mov	r5, r0
  ec:	e3520000 	cmp	r2, #0
  f0:	e5948004 	ldr	r8, [r4, #4]
  f4:	e2822001 	add	r2, r2, #1
  f8:	0a00001b 	beq	16c <CEscapeSeqDecoder::CEscapeSeqDecoder()+0x16c>
  fc:	e3520000 	cmp	r2, #0
 100:	1a00000c 	bne	138 <CEscapeSeqDecoder::CEscapeSeqDecoder()+0x138>
 104:	e1560008 	cmp	r6, r8
 108:	0a000003 	beq	11c <CEscapeSeqDecoder::CEscapeSeqDecoder()+0x11c>
 10c:	e594100c 	ldr	r1, [r4, #12]
 110:	e1a00008 	mov	r0, r8
 114:	e2811001 	add	r1, r1, #1
 118:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 11c:	e1a00007 	mov	r0, r7
 120:	e59d3004 	ldr	r3, [sp, #4]
 124:	e5845004 	str	r5, [r4, #4]
 128:	e584300c 	str	r3, [r4, #12]
 12c:	e5874000 	str	r4, [r7]
 130:	e28dd008 	add	sp, sp, #8
 134:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 138:	e1a01008 	mov	r1, r8
 13c:	ebfffffe 	bl	0 <memcpy>
 140:	eaffffef 	b	104 <CEscapeSeqDecoder::CEscapeSeqDecoder()+0x104>
 144:	e5941028 	ldr	r1, [r4, #40]	; 0x28
 148:	e0411008 	sub	r1, r1, r8
 14c:	e1a00008 	mov	r0, r8
 150:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 154:	eaffffcf 	b	98 <CEscapeSeqDecoder::CEscapeSeqDecoder()+0x98>
 158:	e1a01008 	mov	r1, r8
 15c:	ebfffffe 	bl	0 <memmove>
 160:	e5941028 	ldr	r1, [r4, #40]	; 0x28
 164:	e0411008 	sub	r1, r1, r8
 168:	eafffff7 	b	14c <CEscapeSeqDecoder::CEscapeSeqDecoder()+0x14c>
 16c:	e5d83000 	ldrb	r3, [r8]
 170:	e5c03000 	strb	r3, [r0]
 174:	eaffffe2 	b	104 <CEscapeSeqDecoder::CEscapeSeqDecoder()+0x104>

Disassembly of section .text._ZN17CEscapeSeqDecoderD2Ev:

00000000 <CEscapeSeqDecoder::~CEscapeSeqDecoder()>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e5905000 	ldr	r5, [r0]
   8:	e1a04000 	mov	r4, r0
   c:	e3550000 	cmp	r5, #0
  10:	0a00000f 	beq	54 <CEscapeSeqDecoder::~CEscapeSeqDecoder()+0x54>
  14:	e5950020 	ldr	r0, [r5, #32]
  18:	e3500000 	cmp	r0, #0
  1c:	0a000002 	beq	2c <CEscapeSeqDecoder::~CEscapeSeqDecoder()+0x2c>
  20:	e5951028 	ldr	r1, [r5, #40]	; 0x28
  24:	e0411000 	sub	r1, r1, r0
  28:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  2c:	e5950004 	ldr	r0, [r5, #4]
  30:	e285300c 	add	r3, r5, #12
  34:	e1500003 	cmp	r0, r3
  38:	0a000002 	beq	48 <CEscapeSeqDecoder::~CEscapeSeqDecoder()+0x48>
  3c:	e595100c 	ldr	r1, [r5, #12]
  40:	e2811001 	add	r1, r1, #1
  44:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  48:	e3a0103c 	mov	r1, #60	; 0x3c
  4c:	e1a00005 	mov	r0, r5
  50:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  54:	e1a00004 	mov	r0, r4
  58:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._Z20EscClearEntireScreenP7__sFILE:

00000000 <EscClearEntireScreen(__sFILE*)>:
   0:	e3500000 	cmp	r0, #0
   4:	01a0f00e 	moveq	pc, lr
   8:	e59f1000 	ldr	r1, [pc]	; 10 <EscClearEntireScreen(__sFILE*)+0x10>
   c:	eafffffe 	b	0 <fprintf>
  10:	00000000 	.word	0x00000000

Disassembly of section .text._Z13EscMoveCursorP7__sFILEii:

00000000 <EscMoveCursor(__sFILE*, int, int)>:
   0:	e3500000 	cmp	r0, #0
   4:	e1a03001 	mov	r3, r1
   8:	01a0f00e 	moveq	pc, lr
   c:	e59f1000 	ldr	r1, [pc]	; 14 <EscMoveCursor(__sFILE*, int, int)+0x14>
  10:	eafffffe 	b	0 <fprintf>
  14:	00000000 	.word	0x00000000

Disassembly of section .text._ZNSt6vectorIiSaIiEE17_M_realloc_insertIJRKiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_:

00000000 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)>:
   0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e8900180 	ldm	r0, {r7, r8}
   8:	e0483007 	sub	r3, r8, r7
   c:	e1a03143 	asr	r3, r3, #2
  10:	e373021e 	cmn	r3, #-536870911	; 0xe0000001
  14:	0a000040 	beq	11c <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x11c>
  18:	e3530001 	cmp	r3, #1
  1c:	e1a09002 	mov	r9, r2
  20:	21a02003 	movcs	r2, r3
  24:	33a02001 	movcc	r2, #1
  28:	e0934002 	adds	r4, r3, r2
  2c:	e1a05000 	mov	r5, r0
  30:	e1a06001 	mov	r6, r1
  34:	2a000035 	bcs	110 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x110>
  38:	e3540000 	cmp	r4, #0
  3c:	01a0b004 	moveq	r11, r4
  40:	e041a007 	sub	r10, r1, r7
  44:	1a000028 	bne	ec <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0xec>
  48:	e5993000 	ldr	r3, [r9]
  4c:	e35a0000 	cmp	r10, #0
  50:	e78b300a 	str	r3, [r11, r10]
  54:	e0488006 	sub	r8, r8, r6
  58:	ca000017 	bgt	bc <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0xbc>
  5c:	e28aa004 	add	r10, r10, #4
  60:	e3580000 	cmp	r8, #0
  64:	e08ba00a 	add	r10, r11, r10
  68:	ca00000b 	bgt	9c <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x9c>
  6c:	e3570000 	cmp	r7, #0
  70:	e08aa008 	add	r10, r10, r8
  74:	1a000003 	bne	88 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x88>
  78:	e585b000 	str	r11, [r5]
  7c:	e585a004 	str	r10, [r5, #4]
  80:	e5854008 	str	r4, [r5, #8]
  84:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
  88:	e5951008 	ldr	r1, [r5, #8]
  8c:	e0411007 	sub	r1, r1, r7
  90:	e1a00007 	mov	r0, r7
  94:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  98:	eafffff6 	b	78 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x78>
  9c:	e1a0000a 	mov	r0, r10
  a0:	e1a01006 	mov	r1, r6
  a4:	e1a02008 	mov	r2, r8
  a8:	ebfffffe 	bl	0 <memcpy>
  ac:	e3570000 	cmp	r7, #0
  b0:	e08aa008 	add	r10, r10, r8
  b4:	0affffef 	beq	78 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x78>
  b8:	eafffff2 	b	88 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x88>
  bc:	e1a0200a 	mov	r2, r10
  c0:	e1a01007 	mov	r1, r7
  c4:	e1a0000b 	mov	r0, r11
  c8:	ebfffffe 	bl	0 <memmove>
  cc:	e28aa004 	add	r10, r10, #4
  d0:	e3580000 	cmp	r8, #0
  d4:	e08ba00a 	add	r10, r11, r10
  d8:	caffffef 	bgt	9c <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x9c>
  dc:	e5951008 	ldr	r1, [r5, #8]
  e0:	e08aa008 	add	r10, r10, r8
  e4:	e0411007 	sub	r1, r1, r7
  e8:	eaffffe8 	b	90 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x90>
  ec:	e3e0320e 	mvn	r3, #-536870912	; 0xe0000000
  f0:	e1540003 	cmp	r4, r3
  f4:	21a04003 	movcs	r4, r3
  f8:	e1a04104 	lsl	r4, r4, #2
  fc:	e1a00004 	mov	r0, r4
 100:	ebfffffe 	bl	0 <operator new(unsigned int)>
 104:	e1a0b000 	mov	r11, r0
 108:	e0804004 	add	r4, r0, r4
 10c:	eaffffcd 	b	48 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x48>
 110:	e3e0410e 	mvn	r4, #-2147483645	; 0x80000003
 114:	e041a007 	sub	r10, r1, r7
 118:	eafffff7 	b	fc <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0xfc>
 11c:	e59f0000 	ldr	r0, [pc]	; 124 <void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)+0x124>
 120:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 124:	00000000 	.word	0x00000000

Disassembly of section .text._ZN17CEscapeSeqDecoder6StreamEi:

00000000 <CEscapeSeqDecoder::Stream(int)>:
   0:	e3a03012 	mov	r3, #18
   4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   8:	e5904000 	ldr	r4, [r0]
   c:	e351001b 	cmp	r1, #27
  10:	e3a02000 	mov	r2, #0
  14:	e5c4302f 	strb	r3, [r4, #47]	; 0x2f
  18:	03a03001 	moveq	r3, #1
  1c:	e24dd008 	sub	sp, sp, #8
  20:	e1c422bc 	strh	r2, [r4, #44]	; 0x2c
  24:	e284702c 	add	r7, r4, #44	; 0x2c
  28:	05c43000 	strbeq	r3, [r4]
  2c:	0a00000f 	beq	70 <CEscapeSeqDecoder::Stream(int)+0x70>
  30:	e5d43000 	ldrb	r3, [r4]
  34:	e1a05000 	mov	r5, r0
  38:	e3530004 	cmp	r3, #4
  3c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  40:	ea00000a 	b	70 <CEscapeSeqDecoder::Stream(int)+0x70>
  44:	00000058 	.word	0x00000058
  48:	0000032c 	.word	0x0000032c
  4c:	000000cc 	.word	0x000000cc
  50:	00000070 	.word	0x00000070
  54:	0000007c 	.word	0x0000007c
  58:	e3a03000 	mov	r3, #0
  5c:	e5942004 	ldr	r2, [r4, #4]
  60:	e5843008 	str	r3, [r4, #8]
  64:	e5c23000 	strb	r3, [r2]
  68:	e1c412bc 	strh	r1, [r4, #44]	; 0x2c
  6c:	e5c4302f 	strb	r3, [r4, #47]	; 0x2f
  70:	e1a00007 	mov	r0, r7
  74:	e28dd008 	add	sp, sp, #8
  78:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  7c:	e351006d 	cmp	r1, #109	; 0x6d
  80:	0a000056 	beq	1e0 <CEscapeSeqDecoder::Stream(int)+0x1e0>
  84:	e5946004 	ldr	r6, [r4, #4]
  88:	e5949008 	ldr	r9, [r4, #8]
  8c:	e284a00c 	add	r10, r4, #12
  90:	e156000a 	cmp	r6, r10
  94:	e20150ff 	and	r5, r1, #255	; 0xff
  98:	e2898001 	add	r8, r9, #1
  9c:	0a00018f 	beq	6e0 <CEscapeSeqDecoder::Stream(int)+0x6e0>
  a0:	e594100c 	ldr	r1, [r4, #12]
  a4:	e1580001 	cmp	r8, r1
  a8:	8a000173 	bhi	67c <CEscapeSeqDecoder::Stream(int)+0x67c>
  ac:	e3a02000 	mov	r2, #0
  b0:	e1a00007 	mov	r0, r7
  b4:	e7c65009 	strb	r5, [r6, r9]
  b8:	e5943004 	ldr	r3, [r4, #4]
  bc:	e5848008 	str	r8, [r4, #8]
  c0:	e7c32008 	strb	r2, [r3, r8]
  c4:	e28dd008 	add	sp, sp, #8
  c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  cc:	e241303e 	sub	r3, r1, #62	; 0x3e
  d0:	e3530040 	cmp	r3, #64	; 0x40
  d4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  d8:	eaffffe9 	b	84 <CEscapeSeqDecoder::Stream(int)+0x84>
  dc:	00000618 	.word	0x00000618
  e0:	00000624 	.word	0x00000624
  e4:	00000084 	.word	0x00000084
  e8:	00000084 	.word	0x00000084
  ec:	00000084 	.word	0x00000084
  f0:	00000084 	.word	0x00000084
  f4:	00000084 	.word	0x00000084
  f8:	00000084 	.word	0x00000084
  fc:	00000084 	.word	0x00000084
 100:	00000084 	.word	0x00000084
 104:	000003f4 	.word	0x000003f4
 108:	00000084 	.word	0x00000084
 10c:	0000026c 	.word	0x0000026c
 110:	000005e4 	.word	0x000005e4
 114:	00000084 	.word	0x00000084
 118:	00000084 	.word	0x00000084
 11c:	00000084 	.word	0x00000084
 120:	00000084 	.word	0x00000084
 124:	00000084 	.word	0x00000084
 128:	00000084 	.word	0x00000084
 12c:	00000084 	.word	0x00000084
 130:	00000084 	.word	0x00000084
 134:	00000084 	.word	0x00000084
 138:	00000084 	.word	0x00000084
 13c:	00000084 	.word	0x00000084
 140:	00000084 	.word	0x00000084
 144:	00000084 	.word	0x00000084
 148:	00000084 	.word	0x00000084
 14c:	00000084 	.word	0x00000084
 150:	00000084 	.word	0x00000084
 154:	00000084 	.word	0x00000084
 158:	00000084 	.word	0x00000084
 15c:	00000084 	.word	0x00000084
 160:	00000084 	.word	0x00000084
 164:	00000084 	.word	0x00000084
 168:	00000084 	.word	0x00000084
 16c:	00000084 	.word	0x00000084
 170:	00000084 	.word	0x00000084
 174:	00000084 	.word	0x00000084
 178:	00000084 	.word	0x00000084
 17c:	00000084 	.word	0x00000084
 180:	00000084 	.word	0x00000084
 184:	00000084 	.word	0x00000084
 188:	00000084 	.word	0x00000084
 18c:	00000084 	.word	0x00000084
 190:	00000084 	.word	0x00000084
 194:	00000084 	.word	0x00000084
 198:	0000049c 	.word	0x0000049c
 19c:	00000084 	.word	0x00000084
 1a0:	00000084 	.word	0x00000084
 1a4:	00000084 	.word	0x00000084
 1a8:	00000640 	.word	0x00000640
 1ac:	0000029c 	.word	0x0000029c
 1b0:	00000084 	.word	0x00000084
 1b4:	00000084 	.word	0x00000084
 1b8:	00000084 	.word	0x00000084
 1bc:	00000084 	.word	0x00000084
 1c0:	00000084 	.word	0x00000084
 1c4:	00000084 	.word	0x00000084
 1c8:	00000084 	.word	0x00000084
 1cc:	00000528 	.word	0x00000528
 1d0:	00000084 	.word	0x00000084
 1d4:	00000084 	.word	0x00000084
 1d8:	00000084 	.word	0x00000084
 1dc:	000005c4 	.word	0x000005c4
 1e0:	e3a09000 	mov	r9, #0
 1e4:	e5941020 	ldr	r1, [r4, #32]
 1e8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
 1ec:	e5948004 	ldr	r8, [r4, #4]
 1f0:	e1510003 	cmp	r1, r3
 1f4:	15841024 	strne	r1, [r4, #36]	; 0x24
 1f8:	e58d9004 	str	r9, [sp, #4]
 1fc:	e5d86000 	ldrb	r6, [r8]
 200:	e284a020 	add	r10, r4, #32
 204:	e1560009 	cmp	r6, r9
 208:	1a00000b 	bne	23c <CEscapeSeqDecoder::Stream(int)+0x23c>
 20c:	ea00012a 	b	6bc <CEscapeSeqDecoder::Stream(int)+0x6bc>
 210:	e356002f 	cmp	r6, #47	; 0x2f
 214:	9a000004 	bls	22c <CEscapeSeqDecoder::Stream(int)+0x22c>
 218:	e59d3004 	ldr	r3, [sp, #4]
 21c:	e2462030 	sub	r2, r6, #48	; 0x30
 220:	e0833103 	add	r3, r3, r3, lsl #2
 224:	e0823083 	add	r3, r2, r3, lsl #1
 228:	e58d3004 	str	r3, [sp, #4]
 22c:	e5f83001 	ldrb	r3, [r8, #1]!
 230:	e3530000 	cmp	r3, #0
 234:	0a00001d 	beq	2b0 <CEscapeSeqDecoder::Stream(int)+0x2b0>
 238:	e1a06003 	mov	r6, r3
 23c:	e3560039 	cmp	r6, #57	; 0x39
 240:	9afffff2 	bls	210 <CEscapeSeqDecoder::Stream(int)+0x210>
 244:	e356003b 	cmp	r6, #59	; 0x3b
 248:	1afffff7 	bne	22c <CEscapeSeqDecoder::Stream(int)+0x22c>
 24c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
 250:	e1530001 	cmp	r3, r1
 254:	0a00011c 	beq	6cc <CEscapeSeqDecoder::Stream(int)+0x6cc>
 258:	e59d3004 	ldr	r3, [sp, #4]
 25c:	e4813004 	str	r3, [r1], #4
 260:	e5841024 	str	r1, [r4, #36]	; 0x24
 264:	e58d9004 	str	r9, [sp, #4]
 268:	eaffffef 	b	22c <CEscapeSeqDecoder::Stream(int)+0x22c>
 26c:	e5943008 	ldr	r3, [r4, #8]
 270:	e3530001 	cmp	r3, #1
 274:	1a000008 	bne	29c <CEscapeSeqDecoder::Stream(int)+0x29c>
 278:	e5943004 	ldr	r3, [r4, #4]
 27c:	e5d33000 	ldrb	r3, [r3]
 280:	e3530031 	cmp	r3, #49	; 0x31
 284:	0a000238 	beq	b6c <CEscapeSeqDecoder::Stream(int)+0xb6c>
 288:	e3530032 	cmp	r3, #50	; 0x32
 28c:	0a000233 	beq	b60 <CEscapeSeqDecoder::Stream(int)+0xb60>
 290:	e3530030 	cmp	r3, #48	; 0x30
 294:	03a03009 	moveq	r3, #9
 298:	05c4302f 	strbeq	r3, [r4, #47]	; 0x2f
 29c:	e3a03000 	mov	r3, #0
 2a0:	e1a00007 	mov	r0, r7
 2a4:	e5c43000 	strb	r3, [r4]
 2a8:	e28dd008 	add	sp, sp, #8
 2ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2b0:	e2460030 	sub	r0, r6, #48	; 0x30
 2b4:	e2706000 	rsbs	r6, r0, #0
 2b8:	e59d3004 	ldr	r3, [sp, #4]
 2bc:	e0a66000 	adc	r6, r6, r0
 2c0:	e3530000 	cmp	r3, #0
 2c4:	13866001 	orrne	r6, r6, #1
 2c8:	e3560000 	cmp	r6, #0
 2cc:	0a00003a 	beq	3bc <CEscapeSeqDecoder::Stream(int)+0x3bc>
 2d0:	e5942028 	ldr	r2, [r4, #40]	; 0x28
 2d4:	e1520001 	cmp	r2, r1
 2d8:	0a0001cc 	beq	a10 <CEscapeSeqDecoder::Stream(int)+0xa10>
 2dc:	e5952000 	ldr	r2, [r5]
 2e0:	e4813004 	str	r3, [r1], #4
 2e4:	e5943020 	ldr	r3, [r4, #32]
 2e8:	e5928004 	ldr	r8, [r2, #4]
 2ec:	e5841024 	str	r1, [r4, #36]	; 0x24
 2f0:	e1510003 	cmp	r1, r3
 2f4:	0a0000f1 	beq	6c0 <CEscapeSeqDecoder::Stream(int)+0x6c0>
 2f8:	e5933000 	ldr	r3, [r3]
 2fc:	e3530064 	cmp	r3, #100	; 0x64
 300:	0a0000ee 	beq	6c0 <CEscapeSeqDecoder::Stream(int)+0x6c0>
 304:	e3530065 	cmp	r3, #101	; 0x65
 308:	03a0300f 	moveq	r3, #15
 30c:	05c4302f 	strbeq	r3, [r4, #47]	; 0x2f
 310:	e3a03000 	mov	r3, #0
 314:	e1a00007 	mov	r0, r7
 318:	e5c23000 	strb	r3, [r2]
 31c:	e5823008 	str	r3, [r2, #8]
 320:	e5c83000 	strb	r3, [r8]
 324:	e28dd008 	add	sp, sp, #8
 328:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 32c:	e241103c 	sub	r1, r1, #60	; 0x3c
 330:	e351001f 	cmp	r1, #31
 334:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
 338:	eaffff4c 	b	70 <CEscapeSeqDecoder::Stream(int)+0x70>
 33c:	0000029c 	.word	0x0000029c
 340:	00000070 	.word	0x00000070
 344:	0000029c 	.word	0x0000029c
 348:	00000070 	.word	0x00000070
 34c:	00000070 	.word	0x00000070
 350:	00000070 	.word	0x00000070
 354:	00000070 	.word	0x00000070
 358:	00000070 	.word	0x00000070
 35c:	00000070 	.word	0x00000070
 360:	00000070 	.word	0x00000070
 364:	00000070 	.word	0x00000070
 368:	00000070 	.word	0x00000070
 36c:	0000029c 	.word	0x0000029c
 370:	00000070 	.word	0x00000070
 374:	00000070 	.word	0x00000070
 378:	00000070 	.word	0x00000070
 37c:	00000070 	.word	0x00000070
 380:	00000070 	.word	0x00000070
 384:	00000070 	.word	0x00000070
 388:	000003cc 	.word	0x000003cc
 38c:	00000070 	.word	0x00000070
 390:	0000029c 	.word	0x0000029c
 394:	0000029c 	.word	0x0000029c
 398:	00000070 	.word	0x00000070
 39c:	00000070 	.word	0x00000070
 3a0:	00000070 	.word	0x00000070
 3a4:	00000070 	.word	0x00000070
 3a8:	00000070 	.word	0x00000070
 3ac:	00000070 	.word	0x00000070
 3b0:	00000070 	.word	0x00000070
 3b4:	00000070 	.word	0x00000070
 3b8:	000003d8 	.word	0x000003d8
 3bc:	e5952000 	ldr	r2, [r5]
 3c0:	e5943020 	ldr	r3, [r4, #32]
 3c4:	e5928004 	ldr	r8, [r2, #4]
 3c8:	eaffffc8 	b	2f0 <CEscapeSeqDecoder::Stream(int)+0x2f0>
 3cc:	e3a03005 	mov	r3, #5
 3d0:	e5c43000 	strb	r3, [r4]
 3d4:	eaffff25 	b	70 <CEscapeSeqDecoder::Stream(int)+0x70>
 3d8:	e3a03000 	mov	r3, #0
 3dc:	e3a01002 	mov	r1, #2
 3e0:	e5942004 	ldr	r2, [r4, #4]
 3e4:	e5843008 	str	r3, [r4, #8]
 3e8:	e5c41000 	strb	r1, [r4]
 3ec:	e5c23000 	strb	r3, [r2]
 3f0:	eaffff1e 	b	70 <CEscapeSeqDecoder::Stream(int)+0x70>
 3f4:	e3a02000 	mov	r2, #0
 3f8:	e3a01006 	mov	r1, #6
 3fc:	e5943020 	ldr	r3, [r4, #32]
 400:	e5940024 	ldr	r0, [r4, #36]	; 0x24
 404:	e5c4102f 	strb	r1, [r4, #47]	; 0x2f
 408:	e1530000 	cmp	r3, r0
 40c:	01a01003 	moveq	r1, r3
 410:	e5948004 	ldr	r8, [r4, #4]
 414:	e284a020 	add	r10, r4, #32
 418:	e1c423b2 	strh	r2, [r4, #50]	; 0x32
 41c:	e1c423b0 	strh	r2, [r4, #48]	; 0x30
 420:	11a01003 	movne	r1, r3
 424:	15843024 	strne	r3, [r4, #36]	; 0x24
 428:	e3a09000 	mov	r9, #0
 42c:	e58d9004 	str	r9, [sp, #4]
 430:	e5d86000 	ldrb	r6, [r8]
 434:	e1560009 	cmp	r6, r9
 438:	1a00000b 	bne	46c <CEscapeSeqDecoder::Stream(int)+0x46c>
 43c:	ea0001ad 	b	af8 <CEscapeSeqDecoder::Stream(int)+0xaf8>
 440:	e356002f 	cmp	r6, #47	; 0x2f
 444:	9a000004 	bls	45c <CEscapeSeqDecoder::Stream(int)+0x45c>
 448:	e59d3004 	ldr	r3, [sp, #4]
 44c:	e2462030 	sub	r2, r6, #48	; 0x30
 450:	e0833103 	add	r3, r3, r3, lsl #2
 454:	e0823083 	add	r3, r2, r3, lsl #1
 458:	e58d3004 	str	r3, [sp, #4]
 45c:	e5f83001 	ldrb	r3, [r8, #1]!
 460:	e3530000 	cmp	r3, #0
 464:	0a0000a9 	beq	710 <CEscapeSeqDecoder::Stream(int)+0x710>
 468:	e1a06003 	mov	r6, r3
 46c:	e3560039 	cmp	r6, #57	; 0x39
 470:	9afffff2 	bls	440 <CEscapeSeqDecoder::Stream(int)+0x440>
 474:	e356003b 	cmp	r6, #59	; 0x3b
 478:	1afffff7 	bne	45c <CEscapeSeqDecoder::Stream(int)+0x45c>
 47c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
 480:	e1530001 	cmp	r3, r1
 484:	0a000152 	beq	9d4 <CEscapeSeqDecoder::Stream(int)+0x9d4>
 488:	e59d3004 	ldr	r3, [sp, #4]
 48c:	e4813004 	str	r3, [r1], #4
 490:	e5841024 	str	r1, [r4, #36]	; 0x24
 494:	e58d9004 	str	r9, [sp, #4]
 498:	eaffffef 	b	45c <CEscapeSeqDecoder::Stream(int)+0x45c>
 49c:	e3a09000 	mov	r9, #0
 4a0:	e5941020 	ldr	r1, [r4, #32]
 4a4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
 4a8:	e5948004 	ldr	r8, [r4, #4]
 4ac:	e1510003 	cmp	r1, r3
 4b0:	15841024 	strne	r1, [r4, #36]	; 0x24
 4b4:	e58d9004 	str	r9, [sp, #4]
 4b8:	e5d86000 	ldrb	r6, [r8]
 4bc:	e284a020 	add	r10, r4, #32
 4c0:	e1560009 	cmp	r6, r9
 4c4:	1a00000b 	bne	4f8 <CEscapeSeqDecoder::Stream(int)+0x4f8>
 4c8:	ea000182 	b	ad8 <CEscapeSeqDecoder::Stream(int)+0xad8>
 4cc:	e356002f 	cmp	r6, #47	; 0x2f
 4d0:	9a000004 	bls	4e8 <CEscapeSeqDecoder::Stream(int)+0x4e8>
 4d4:	e59d3004 	ldr	r3, [sp, #4]
 4d8:	e2462030 	sub	r2, r6, #48	; 0x30
 4dc:	e0833103 	add	r3, r3, r3, lsl #2
 4e0:	e0823083 	add	r3, r2, r3, lsl #1
 4e4:	e58d3004 	str	r3, [sp, #4]
 4e8:	e5f83001 	ldrb	r3, [r8, #1]!
 4ec:	e3530000 	cmp	r3, #0
 4f0:	0a00009d 	beq	76c <CEscapeSeqDecoder::Stream(int)+0x76c>
 4f4:	e1a06003 	mov	r6, r3
 4f8:	e3560039 	cmp	r6, #57	; 0x39
 4fc:	9afffff2 	bls	4cc <CEscapeSeqDecoder::Stream(int)+0x4cc>
 500:	e356003b 	cmp	r6, #59	; 0x3b
 504:	1afffff7 	bne	4e8 <CEscapeSeqDecoder::Stream(int)+0x4e8>
 508:	e5943028 	ldr	r3, [r4, #40]	; 0x28
 50c:	e1530001 	cmp	r3, r1
 510:	0a000139 	beq	9fc <CEscapeSeqDecoder::Stream(int)+0x9fc>
 514:	e59d3004 	ldr	r3, [sp, #4]
 518:	e4813004 	str	r3, [r1], #4
 51c:	e5841024 	str	r1, [r4, #36]	; 0x24
 520:	e58d9004 	str	r9, [sp, #4]
 524:	eaffffef 	b	4e8 <CEscapeSeqDecoder::Stream(int)+0x4e8>
 528:	e3a09000 	mov	r9, #0
 52c:	e3a02011 	mov	r2, #17
 530:	e3a03000 	mov	r3, #0
 534:	e5941020 	ldr	r1, [r4, #32]
 538:	e5940024 	ldr	r0, [r4, #36]	; 0x24
 53c:	e5948004 	ldr	r8, [r4, #4]
 540:	e1510000 	cmp	r1, r0
 544:	15841024 	strne	r1, [r4, #36]	; 0x24
 548:	e5c4202f 	strb	r2, [r4, #47]	; 0x2f
 54c:	e1c433b8 	strh	r3, [r4, #56]	; 0x38
 550:	e58d9004 	str	r9, [sp, #4]
 554:	e5d86000 	ldrb	r6, [r8]
 558:	e284a020 	add	r10, r4, #32
 55c:	e1560009 	cmp	r6, r9
 560:	1a00000b 	bne	594 <CEscapeSeqDecoder::Stream(int)+0x594>
 564:	ea000163 	b	af8 <CEscapeSeqDecoder::Stream(int)+0xaf8>
 568:	e356002f 	cmp	r6, #47	; 0x2f
 56c:	9a000004 	bls	584 <CEscapeSeqDecoder::Stream(int)+0x584>
 570:	e59d3004 	ldr	r3, [sp, #4]
 574:	e2462030 	sub	r2, r6, #48	; 0x30
 578:	e0833103 	add	r3, r3, r3, lsl #2
 57c:	e0823083 	add	r3, r2, r3, lsl #1
 580:	e58d3004 	str	r3, [sp, #4]
 584:	e5f83001 	ldrb	r3, [r8, #1]!
 588:	e3530000 	cmp	r3, #0
 58c:	0a0000f6 	beq	96c <CEscapeSeqDecoder::Stream(int)+0x96c>
 590:	e1a06003 	mov	r6, r3
 594:	e3560039 	cmp	r6, #57	; 0x39
 598:	9afffff2 	bls	568 <CEscapeSeqDecoder::Stream(int)+0x568>
 59c:	e356003b 	cmp	r6, #59	; 0x3b
 5a0:	1afffff7 	bne	584 <CEscapeSeqDecoder::Stream(int)+0x584>
 5a4:	e5943028 	ldr	r3, [r4, #40]	; 0x28
 5a8:	e1530001 	cmp	r3, r1
 5ac:	0a00010d 	beq	9e8 <CEscapeSeqDecoder::Stream(int)+0x9e8>
 5b0:	e59d3004 	ldr	r3, [sp, #4]
 5b4:	e4813004 	str	r3, [r1], #4
 5b8:	e5841024 	str	r1, [r4, #36]	; 0x24
 5bc:	e58d9004 	str	r9, [sp, #4]
 5c0:	eaffffef 	b	584 <CEscapeSeqDecoder::Stream(int)+0x584>
 5c4:	e3a03000 	mov	r3, #0
 5c8:	e3a02005 	mov	r2, #5
 5cc:	e5941004 	ldr	r1, [r4, #4]
 5d0:	e5c43000 	strb	r3, [r4]
 5d4:	e5843008 	str	r3, [r4, #8]
 5d8:	e5c13000 	strb	r3, [r1]
 5dc:	e5c4202f 	strb	r2, [r4, #47]	; 0x2f
 5e0:	eafffea2 	b	70 <CEscapeSeqDecoder::Stream(int)+0x70>
 5e4:	e5943008 	ldr	r3, [r4, #8]
 5e8:	e3530001 	cmp	r3, #1
 5ec:	1affff2a 	bne	29c <CEscapeSeqDecoder::Stream(int)+0x29c>
 5f0:	e5943004 	ldr	r3, [r4, #4]
 5f4:	e5d33000 	ldrb	r3, [r3]
 5f8:	e3530031 	cmp	r3, #49	; 0x31
 5fc:	0a000160 	beq	b84 <CEscapeSeqDecoder::Stream(int)+0xb84>
 600:	e3530032 	cmp	r3, #50	; 0x32
 604:	0a00015b 	beq	b78 <CEscapeSeqDecoder::Stream(int)+0xb78>
 608:	e3530030 	cmp	r3, #48	; 0x30
 60c:	03a0300c 	moveq	r3, #12
 610:	05c4302f 	strbeq	r3, [r4, #47]	; 0x2f
 614:	eaffff20 	b	29c <CEscapeSeqDecoder::Stream(int)+0x29c>
 618:	e3a03003 	mov	r3, #3
 61c:	e5c43000 	strb	r3, [r4]
 620:	eafffe92 	b	70 <CEscapeSeqDecoder::Stream(int)+0x70>
 624:	e3a03000 	mov	r3, #0
 628:	e3a01004 	mov	r1, #4
 62c:	e5942004 	ldr	r2, [r4, #4]
 630:	e5843008 	str	r3, [r4, #8]
 634:	e5c41000 	strb	r1, [r4]
 638:	e5c23000 	strb	r3, [r2]
 63c:	eafffe8b 	b	70 <CEscapeSeqDecoder::Stream(int)+0x70>
 640:	e3a02000 	mov	r2, #0
 644:	e5940004 	ldr	r0, [r4, #4]
 648:	e28d1004 	add	r1, sp, #4
 64c:	e1a0600e 	mov	r6, lr
 650:	ebfffffe 	bl	0 <strtol>
 654:	e3500003 	cmp	r0, #3
 658:	e1a08000 	mov	r8, r0
 65c:	8a0000f7 	bhi	a40 <CEscapeSeqDecoder::Stream(int)+0xa40>
 660:	e3a01007 	mov	r1, #7
 664:	e3a02000 	mov	r2, #0
 668:	e5953000 	ldr	r3, [r5]
 66c:	e5c4802e 	strb	r8, [r4, #46]	; 0x2e
 670:	e5c4102f 	strb	r1, [r4, #47]	; 0x2f
 674:	e5c32000 	strb	r2, [r3]
 678:	eafffe7c 	b	70 <CEscapeSeqDecoder::Stream(int)+0x70>
 67c:	e28d0004 	add	r0, sp, #4
 680:	e58d8004 	str	r8, [sp, #4]
 684:	ebfffffe 	bl	0 <CEscapeSeqDecoder::Stream(int)>
 688:	e3590000 	cmp	r9, #0
 68c:	e1a06000 	mov	r6, r0
 690:	1a0000c9 	bne	9bc <CEscapeSeqDecoder::Stream(int)+0x9bc>
 694:	e5940004 	ldr	r0, [r4, #4]
 698:	e15a0000 	cmp	r10, r0
 69c:	0a000002 	beq	6ac <CEscapeSeqDecoder::Stream(int)+0x6ac>
 6a0:	e594100c 	ldr	r1, [r4, #12]
 6a4:	e2811001 	add	r1, r1, #1
 6a8:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 6ac:	e59d3004 	ldr	r3, [sp, #4]
 6b0:	e5846004 	str	r6, [r4, #4]
 6b4:	e584300c 	str	r3, [r4, #12]
 6b8:	eafffe7b 	b	ac <CEscapeSeqDecoder::Stream(int)+0xac>
 6bc:	e1a02004 	mov	r2, r4
 6c0:	e3a03010 	mov	r3, #16
 6c4:	e5c4302f 	strb	r3, [r4, #47]	; 0x2f
 6c8:	eaffff10 	b	310 <CEscapeSeqDecoder::Stream(int)+0x310>
 6cc:	e1a0000a 	mov	r0, r10
 6d0:	e28d2004 	add	r2, sp, #4
 6d4:	ebfffffe 	bl	0 <CEscapeSeqDecoder::Stream(int)>
 6d8:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 6dc:	eafffee0 	b	264 <CEscapeSeqDecoder::Stream(int)+0x264>
 6e0:	e358000f 	cmp	r8, #15
 6e4:	9afffe70 	bls	ac <CEscapeSeqDecoder::Stream(int)+0xac>
 6e8:	e3a0100f 	mov	r1, #15
 6ec:	e28d0004 	add	r0, sp, #4
 6f0:	e58d8004 	str	r8, [sp, #4]
 6f4:	ebfffffe 	bl	0 <CEscapeSeqDecoder::Stream(int)>
 6f8:	e1a06000 	mov	r6, r0
 6fc:	e5941004 	ldr	r1, [r4, #4]
 700:	e1a02009 	mov	r2, r9
 704:	e1a00006 	mov	r0, r6
 708:	ebfffffe 	bl	0 <memcpy>
 70c:	eaffffe0 	b	694 <CEscapeSeqDecoder::Stream(int)+0x694>
 710:	e59d0004 	ldr	r0, [sp, #4]
 714:	e2503000 	subs	r3, r0, #0
 718:	13a03001 	movne	r3, #1
 71c:	e3560030 	cmp	r6, #48	; 0x30
 720:	03833001 	orreq	r3, r3, #1
 724:	e3530000 	cmp	r3, #0
 728:	0a0000e2 	beq	ab8 <CEscapeSeqDecoder::Stream(int)+0xab8>
 72c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
 730:	e1530001 	cmp	r3, r1
 734:	0a0000f9 	beq	b20 <CEscapeSeqDecoder::Stream(int)+0xb20>
 738:	e5952000 	ldr	r2, [r5]
 73c:	e5943020 	ldr	r3, [r4, #32]
 740:	e4810004 	str	r0, [r1], #4
 744:	e5928004 	ldr	r8, [r2, #4]
 748:	e5841024 	str	r1, [r4, #36]	; 0x24
 74c:	e1510003 	cmp	r1, r3
 750:	15930000 	ldrne	r0, [r3]
 754:	e0411003 	sub	r1, r1, r3
 758:	11c403b2 	strhne	r0, [r4, #50]	; 0x32
 75c:	e3510004 	cmp	r1, #4
 760:	85933004 	ldrhi	r3, [r3, #4]
 764:	81c433b0 	strhhi	r3, [r4, #48]	; 0x30
 768:	eafffee8 	b	310 <CEscapeSeqDecoder::Stream(int)+0x310>
 76c:	e2463030 	sub	r3, r6, #48	; 0x30
 770:	e2736000 	rsbs	r6, r3, #0
 774:	e0a66003 	adc	r6, r6, r3
 778:	e59d3004 	ldr	r3, [sp, #4]
 77c:	e3530000 	cmp	r3, #0
 780:	13866001 	orrne	r6, r6, #1
 784:	e3560000 	cmp	r6, #0
 788:	0a0000a8 	beq	a30 <CEscapeSeqDecoder::Stream(int)+0xa30>
 78c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
 790:	e1520001 	cmp	r2, r1
 794:	0a0000d9 	beq	b00 <CEscapeSeqDecoder::Stream(int)+0xb00>
 798:	e595e000 	ldr	lr, [r5]
 79c:	e5940020 	ldr	r0, [r4, #32]
 7a0:	e4813004 	str	r3, [r1], #4
 7a4:	e59e8004 	ldr	r8, [lr, #4]
 7a8:	e5841024 	str	r1, [r4, #36]	; 0x24
 7ac:	e1510000 	cmp	r1, r0
 7b0:	13a0c008 	movne	r12, #8
 7b4:	13a05025 	movne	r5, #37	; 0x25
 7b8:	0a0000c7 	beq	adc <CEscapeSeqDecoder::Stream(int)+0xadc>
 7bc:	e4903004 	ldr	r3, [r0], #4
 7c0:	e3530000 	cmp	r3, #0
 7c4:	e243201e 	sub	r2, r3, #30
 7c8:	0a000063 	beq	95c <CEscapeSeqDecoder::Stream(int)+0x95c>
 7cc:	e352004d 	cmp	r2, #77	; 0x4d
 7d0:	8a000052 	bhi	920 <CEscapeSeqDecoder::Stream(int)+0x920>
 7d4:	e352004d 	cmp	r2, #77	; 0x4d
 7d8:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
 7dc:	ea00004f 	b	920 <CEscapeSeqDecoder::Stream(int)+0x920>
 7e0:	00000918 	.word	0x00000918
 7e4:	00000918 	.word	0x00000918
 7e8:	00000918 	.word	0x00000918
 7ec:	00000918 	.word	0x00000918
 7f0:	00000918 	.word	0x00000918
 7f4:	00000918 	.word	0x00000918
 7f8:	00000918 	.word	0x00000918
 7fc:	00000918 	.word	0x00000918
 800:	00000920 	.word	0x00000920
 804:	00000920 	.word	0x00000920
 808:	0000094c 	.word	0x0000094c
 80c:	0000094c 	.word	0x0000094c
 810:	0000094c 	.word	0x0000094c
 814:	0000094c 	.word	0x0000094c
 818:	0000094c 	.word	0x0000094c
 81c:	0000094c 	.word	0x0000094c
 820:	0000094c 	.word	0x0000094c
 824:	0000094c 	.word	0x0000094c
 828:	00000920 	.word	0x00000920
 82c:	00000920 	.word	0x00000920
 830:	00000918 	.word	0x00000918
 834:	00000918 	.word	0x00000918
 838:	00000918 	.word	0x00000918
 83c:	00000918 	.word	0x00000918
 840:	00000918 	.word	0x00000918
 844:	00000918 	.word	0x00000918
 848:	00000918 	.word	0x00000918
 84c:	00000918 	.word	0x00000918
 850:	00000918 	.word	0x00000918
 854:	00000918 	.word	0x00000918
 858:	00000918 	.word	0x00000918
 85c:	00000918 	.word	0x00000918
 860:	00000918 	.word	0x00000918
 864:	00000918 	.word	0x00000918
 868:	00000918 	.word	0x00000918
 86c:	00000918 	.word	0x00000918
 870:	00000920 	.word	0x00000920
 874:	00000920 	.word	0x00000920
 878:	00000920 	.word	0x00000920
 87c:	00000920 	.word	0x00000920
 880:	0000093c 	.word	0x0000093c
 884:	0000093c 	.word	0x0000093c
 888:	0000093c 	.word	0x0000093c
 88c:	0000093c 	.word	0x0000093c
 890:	0000093c 	.word	0x0000093c
 894:	0000093c 	.word	0x0000093c
 898:	0000093c 	.word	0x0000093c
 89c:	0000093c 	.word	0x0000093c
 8a0:	0000093c 	.word	0x0000093c
 8a4:	0000093c 	.word	0x0000093c
 8a8:	0000093c 	.word	0x0000093c
 8ac:	0000093c 	.word	0x0000093c
 8b0:	0000093c 	.word	0x0000093c
 8b4:	0000093c 	.word	0x0000093c
 8b8:	0000093c 	.word	0x0000093c
 8bc:	0000093c 	.word	0x0000093c
 8c0:	00000920 	.word	0x00000920
 8c4:	00000920 	.word	0x00000920
 8c8:	00000920 	.word	0x00000920
 8cc:	00000920 	.word	0x00000920
 8d0:	00000918 	.word	0x00000918
 8d4:	00000918 	.word	0x00000918
 8d8:	00000918 	.word	0x00000918
 8dc:	00000918 	.word	0x00000918
 8e0:	00000918 	.word	0x00000918
 8e4:	00000918 	.word	0x00000918
 8e8:	00000918 	.word	0x00000918
 8ec:	00000918 	.word	0x00000918
 8f0:	00000920 	.word	0x00000920
 8f4:	00000920 	.word	0x00000920
 8f8:	0000094c 	.word	0x0000094c
 8fc:	0000094c 	.word	0x0000094c
 900:	0000094c 	.word	0x0000094c
 904:	0000094c 	.word	0x0000094c
 908:	0000094c 	.word	0x0000094c
 90c:	0000094c 	.word	0x0000094c
 910:	0000094c 	.word	0x0000094c
 914:	0000094c 	.word	0x0000094c
 918:	e5c4c02f 	strb	r12, [r4, #47]	; 0x2f
 91c:	e5c43035 	strb	r3, [r4, #53]	; 0x35
 920:	e1510000 	cmp	r1, r0
 924:	1affffa4 	bne	7bc <CEscapeSeqDecoder::Stream(int)+0x7bc>
 928:	e3a03000 	mov	r3, #0
 92c:	e5ce3000 	strb	r3, [lr]
 930:	e58e3008 	str	r3, [lr, #8]
 934:	e5c83000 	strb	r3, [r8]
 938:	eafffdcc 	b	70 <CEscapeSeqDecoder::Stream(int)+0x70>
 93c:	e2433014 	sub	r3, r3, #20
 940:	e5c4c02f 	strb	r12, [r4, #47]	; 0x2f
 944:	e5c43036 	strb	r3, [r4, #54]	; 0x36
 948:	eafffff4 	b	920 <CEscapeSeqDecoder::Stream(int)+0x920>
 94c:	e243300a 	sub	r3, r3, #10
 950:	e5c4c02f 	strb	r12, [r4, #47]	; 0x2f
 954:	e5c43036 	strb	r3, [r4, #54]	; 0x36
 958:	eafffff0 	b	920 <CEscapeSeqDecoder::Stream(int)+0x920>
 95c:	e5c4c02f 	strb	r12, [r4, #47]	; 0x2f
 960:	e5c45035 	strb	r5, [r4, #53]	; 0x35
 964:	e5c43036 	strb	r3, [r4, #54]	; 0x36
 968:	eaffffec 	b	920 <CEscapeSeqDecoder::Stream(int)+0x920>
 96c:	e2462030 	sub	r2, r6, #48	; 0x30
 970:	e2726000 	rsbs	r6, r2, #0
 974:	e59d3004 	ldr	r3, [sp, #4]
 978:	e0a66002 	adc	r6, r6, r2
 97c:	e3530000 	cmp	r3, #0
 980:	13866001 	orrne	r6, r6, #1
 984:	e3560000 	cmp	r6, #0
 988:	0a00004e 	beq	ac8 <CEscapeSeqDecoder::Stream(int)+0xac8>
 98c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
 990:	e1510002 	cmp	r1, r2
 994:	0a000069 	beq	b40 <CEscapeSeqDecoder::Stream(int)+0xb40>
 998:	e5952000 	ldr	r2, [r5]
 99c:	e4813004 	str	r3, [r1], #4
 9a0:	e5928004 	ldr	r8, [r2, #4]
 9a4:	e5943020 	ldr	r3, [r4, #32]
 9a8:	e5841024 	str	r1, [r4, #36]	; 0x24
 9ac:	e1510003 	cmp	r1, r3
 9b0:	15933000 	ldrne	r3, [r3]
 9b4:	11c433b8 	strhne	r3, [r4, #56]	; 0x38
 9b8:	eafffe54 	b	310 <CEscapeSeqDecoder::Stream(int)+0x310>
 9bc:	e3590001 	cmp	r9, #1
 9c0:	e5941004 	ldr	r1, [r4, #4]
 9c4:	1affff4d 	bne	700 <CEscapeSeqDecoder::Stream(int)+0x700>
 9c8:	e5d13000 	ldrb	r3, [r1]
 9cc:	e5c63000 	strb	r3, [r6]
 9d0:	eaffff2f 	b	694 <CEscapeSeqDecoder::Stream(int)+0x694>
 9d4:	e1a0000a 	mov	r0, r10
 9d8:	e28d2004 	add	r2, sp, #4
 9dc:	ebfffffe 	bl	0 <CEscapeSeqDecoder::Stream(int)>
 9e0:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 9e4:	eafffeaa 	b	494 <CEscapeSeqDecoder::Stream(int)+0x494>
 9e8:	e1a0000a 	mov	r0, r10
 9ec:	e28d2004 	add	r2, sp, #4
 9f0:	ebfffffe 	bl	0 <CEscapeSeqDecoder::Stream(int)>
 9f4:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 9f8:	eafffeef 	b	5bc <CEscapeSeqDecoder::Stream(int)+0x5bc>
 9fc:	e1a0000a 	mov	r0, r10
 a00:	e28d2004 	add	r2, sp, #4
 a04:	ebfffffe 	bl	0 <CEscapeSeqDecoder::Stream(int)>
 a08:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 a0c:	eafffec3 	b	520 <CEscapeSeqDecoder::Stream(int)+0x520>
 a10:	e28d2004 	add	r2, sp, #4
 a14:	e1a0000a 	mov	r0, r10
 a18:	ebfffffe 	bl	0 <CEscapeSeqDecoder::Stream(int)>
 a1c:	e5952000 	ldr	r2, [r5]
 a20:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 a24:	e5928004 	ldr	r8, [r2, #4]
 a28:	e5943020 	ldr	r3, [r4, #32]
 a2c:	eafffe2f 	b	2f0 <CEscapeSeqDecoder::Stream(int)+0x2f0>
 a30:	e595e000 	ldr	lr, [r5]
 a34:	e5940020 	ldr	r0, [r4, #32]
 a38:	e59e8004 	ldr	r8, [lr, #4]
 a3c:	eaffff5a 	b	7ac <CEscapeSeqDecoder::Stream(int)+0x7ac>
 a40:	e59f0148 	ldr	r0, [pc, #328]	; b90 <CEscapeSeqDecoder::Stream(int)+0xb90>
 a44:	ebfffffe 	bl	0 <b8SysPuts>
 a48:	e59f0144 	ldr	r0, [pc, #324]	; b94 <CEscapeSeqDecoder::Stream(int)+0xb94>
 a4c:	ebfffffe 	bl	0 <b8SysPuts>
 a50:	e59f0140 	ldr	r0, [pc, #320]	; b98 <CEscapeSeqDecoder::Stream(int)+0xb98>
 a54:	ebfffffe 	bl	0 <b8SysPuts>
 a58:	e3a00094 	mov	r0, #148	; 0x94
 a5c:	ebfffffe 	bl	0 <b8SysPutNum>
 a60:	e59f0134 	ldr	r0, [pc, #308]	; b9c <CEscapeSeqDecoder::Stream(int)+0xb9c>
 a64:	ebfffffe 	bl	0 <b8SysPuts>
 a68:	e59f0130 	ldr	r0, [pc, #304]	; ba0 <CEscapeSeqDecoder::Stream(int)+0xba0>
 a6c:	ebfffffe 	bl	0 <b8SysPuts>
 a70:	e59f012c 	ldr	r0, [pc, #300]	; ba4 <CEscapeSeqDecoder::Stream(int)+0xba4>
 a74:	ebfffffe 	bl	0 <b8SysPuts>
 a78:	e59f0128 	ldr	r0, [pc, #296]	; ba8 <CEscapeSeqDecoder::Stream(int)+0xba8>
 a7c:	ebfffffe 	bl	0 <b8SysPuts>
 a80:	e59f0124 	ldr	r0, [pc, #292]	; bac <CEscapeSeqDecoder::Stream(int)+0xbac>
 a84:	ebfffffe 	bl	0 <b8SysPuts>
 a88:	e59f0120 	ldr	r0, [pc, #288]	; bb0 <CEscapeSeqDecoder::Stream(int)+0xbb0>
 a8c:	ebfffffe 	bl	0 <b8SysPuts>
 a90:	e1a00006 	mov	r0, r6
 a94:	ebfffffe 	bl	0 <b8SysPutHex>
 a98:	e59f010c 	ldr	r0, [pc, #268]	; bac <CEscapeSeqDecoder::Stream(int)+0xbac>
 a9c:	ebfffffe 	bl	0 <b8SysPuts>
 aa0:	e59f010c 	ldr	r0, [pc, #268]	; bb4 <CEscapeSeqDecoder::Stream(int)+0xbb4>
 aa4:	ebfffffe 	bl	0 <b8SysPuts>
 aa8:	e59f0108 	ldr	r0, [pc, #264]	; bb8 <CEscapeSeqDecoder::Stream(int)+0xbb8>
 aac:	ebfffffe 	bl	0 <b8SysPuts>
 ab0:	e1000070 	hlt	0x0000
 ab4:	eafffee9 	b	660 <CEscapeSeqDecoder::Stream(int)+0x660>
 ab8:	e5952000 	ldr	r2, [r5]
 abc:	e5943020 	ldr	r3, [r4, #32]
 ac0:	e5928004 	ldr	r8, [r2, #4]
 ac4:	eaffff20 	b	74c <CEscapeSeqDecoder::Stream(int)+0x74c>
 ac8:	e5952000 	ldr	r2, [r5]
 acc:	e5943020 	ldr	r3, [r4, #32]
 ad0:	e5928004 	ldr	r8, [r2, #4]
 ad4:	eaffffb4 	b	9ac <CEscapeSeqDecoder::Stream(int)+0x9ac>
 ad8:	e1a0e004 	mov	lr, r4
 adc:	e3a03008 	mov	r3, #8
 ae0:	e3a02025 	mov	r2, #37	; 0x25
 ae4:	e5c4302f 	strb	r3, [r4, #47]	; 0x2f
 ae8:	e3a03000 	mov	r3, #0
 aec:	e5c42035 	strb	r2, [r4, #53]	; 0x35
 af0:	e5c43036 	strb	r3, [r4, #54]	; 0x36
 af4:	eaffff8b 	b	928 <CEscapeSeqDecoder::Stream(int)+0x928>
 af8:	e1a02004 	mov	r2, r4
 afc:	eafffe03 	b	310 <CEscapeSeqDecoder::Stream(int)+0x310>
 b00:	e1a0000a 	mov	r0, r10
 b04:	e28d2004 	add	r2, sp, #4
 b08:	ebfffffe 	bl	0 <CEscapeSeqDecoder::Stream(int)>
 b0c:	e595e000 	ldr	lr, [r5]
 b10:	e5940020 	ldr	r0, [r4, #32]
 b14:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 b18:	e59e8004 	ldr	r8, [lr, #4]
 b1c:	eaffff22 	b	7ac <CEscapeSeqDecoder::Stream(int)+0x7ac>
 b20:	e28d2004 	add	r2, sp, #4
 b24:	e1a0000a 	mov	r0, r10
 b28:	ebfffffe 	bl	0 <CEscapeSeqDecoder::Stream(int)>
 b2c:	e5952000 	ldr	r2, [r5]
 b30:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 b34:	e5943020 	ldr	r3, [r4, #32]
 b38:	e5928004 	ldr	r8, [r2, #4]
 b3c:	eaffff02 	b	74c <CEscapeSeqDecoder::Stream(int)+0x74c>
 b40:	e28d2004 	add	r2, sp, #4
 b44:	e1a0000a 	mov	r0, r10
 b48:	ebfffffe 	bl	0 <CEscapeSeqDecoder::Stream(int)>
 b4c:	e5952000 	ldr	r2, [r5]
 b50:	e5941024 	ldr	r1, [r4, #36]	; 0x24
 b54:	e5943020 	ldr	r3, [r4, #32]
 b58:	e5928004 	ldr	r8, [r2, #4]
 b5c:	eaffff92 	b	9ac <CEscapeSeqDecoder::Stream(int)+0x9ac>
 b60:	e3a0300b 	mov	r3, #11
 b64:	e5c4302f 	strb	r3, [r4, #47]	; 0x2f
 b68:	eafffdcb 	b	29c <CEscapeSeqDecoder::Stream(int)+0x29c>
 b6c:	e3a0300a 	mov	r3, #10
 b70:	e5c4302f 	strb	r3, [r4, #47]	; 0x2f
 b74:	eafffdc8 	b	29c <CEscapeSeqDecoder::Stream(int)+0x29c>
 b78:	e3a0300e 	mov	r3, #14
 b7c:	e5c4302f 	strb	r3, [r4, #47]	; 0x2f
 b80:	eafffdc5 	b	29c <CEscapeSeqDecoder::Stream(int)+0x29c>
 b84:	e3a0300d 	mov	r3, #13
 b88:	e5c4302f 	strb	r3, [r4, #47]	; 0x2f
 b8c:	eafffdc2 	b	29c <CEscapeSeqDecoder::Stream(int)+0x29c>
 b90:	00000000 	.word	0x00000000
 b94:	0000001c 	.word	0x0000001c
 b98:	0000002c 	.word	0x0000002c
 b9c:	00000030 	.word	0x00000030
 ba0:	00000034 	.word	0x00000034
 ba4:	0000003c 	.word	0x0000003c
 ba8:	00000040 	.word	0x00000040
 bac:	0000004c 	.word	0x0000004c
 bb0:	00000050 	.word	0x00000050
 bb4:	0000006c 	.word	0x0000006c
 bb8:	000000b4 	.word	0x000000b4

fcast.o:     file format elf32-littlearm


Disassembly of section .text._Z13ForceCast_u32Pv:

00000000 <ForceCast_u32(void*)>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._Z13ForceCast_pu8m:

00000000 <ForceCast_pu8(unsigned long)>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._Z13ForceCast_u32Ph:

00000000 <ForceCast_u32(unsigned char*)>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._Z13ForceCast_u32Pc:

00000000 <ForceCast_u32(char*)>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._Z13ForceCast_u32Pm:

00000000 <ForceCast_u32(unsigned long*)>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._Z13ForceCast_u32s:

00000000 <ForceCast_u32(short)>:
   0:	e1a00800 	lsl	r0, r0, #16
   4:	e1a00820 	lsr	r0, r0, #16
   8:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._Z13ForceCast_s16m:

00000000 <ForceCast_s16(unsigned long)>:
   0:	e1a00800 	lsl	r0, r0, #16
   4:	e1a00840 	asr	r0, r0, #16
   8:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._Z13ForceCast_s32m:

00000000 <ForceCast_s32(unsigned long)>:
   0:	e1a0f00e 	mov	pc, lr

fontdata.o:     file format elf32-littlearm


Disassembly of section .text._ZN8fontdata5gettcEv:

00000000 <fontdata::gettc()>:
   0:	e59f300c 	ldr	r3, [pc, #12]	; 14 <fontdata::gettc()+0x14>
   4:	e24dd008 	sub	sp, sp, #8
   8:	e1d300b0 	ldrh	r0, [r3]
   c:	e28dd008 	add	sp, sp, #8
  10:	e1a0f00e 	mov	pc, lr
  14:	00000000 	.word	0x00000000

Disassembly of section .text._ZN8fontdata8dstxtileEv:

00000000 <fontdata::dstxtile()>:
   0:	e59f3004 	ldr	r3, [pc, #4]	; c <fontdata::dstxtile()+0xc>
   4:	e5d30000 	ldrb	r0, [r3]
   8:	e1a0f00e 	mov	pc, lr
   c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN8fontdata8dstytileEv:

00000000 <fontdata::dstytile()>:
   0:	e59f3004 	ldr	r3, [pc, #4]	; c <fontdata::dstytile()+0xc>
   4:	e5d30000 	ldrb	r0, [r3]
   8:	e1a0f00e 	mov	pc, lr
   c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN8fontdata4loadEhh:

00000000 <fontdata::load(unsigned char, unsigned char)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e59f32c0 	ldr	r3, [pc, #704]	; 2cc <fontdata::load(unsigned char, unsigned char)+0x2cc>
   8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   c:	e5d34000 	ldrb	r4, [r3]
  10:	e3540000 	cmp	r4, #0
  14:	0a000001 	beq	20 <fontdata::load(unsigned char, unsigned char)+0x20>
  18:	e28dd03c 	add	sp, sp, #60	; 0x3c
  1c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  20:	e59f22a8 	ldr	r2, [pc, #680]	; 2d0 <fontdata::load(unsigned char, unsigned char)+0x2d0>
  24:	e200303f 	and	r3, r0, #63	; 0x3f
  28:	e5c20000 	strb	r0, [r2]
  2c:	e59f02a0 	ldr	r0, [pc, #672]	; 2d4 <fontdata::load(unsigned char, unsigned char)+0x2d4>
  30:	e201203f 	and	r2, r1, #63	; 0x3f
  34:	e1823303 	orr	r3, r2, r3, lsl #6
  38:	e1d020b0 	ldrh	r2, [r0]
  3c:	e1a0a004 	mov	r10, r4
  40:	e2022a0f 	and	r2, r2, #61440	; 0xf000
  44:	e1833002 	orr	r3, r3, r2
  48:	e1c030b0 	strh	r3, [r0]
  4c:	e59f3284 	ldr	r3, [pc, #644]	; 2d8 <fontdata::load(unsigned char, unsigned char)+0x2d8>
  50:	e3a00b01 	mov	r0, #1024	; 0x400
  54:	e5c31000 	strb	r1, [r3]
  58:	ebfffffe 	bl	0 <malloc>
  5c:	e1a03000 	mov	r3, r0
  60:	e3a02b01 	mov	r2, #1024	; 0x400
  64:	e1a01003 	mov	r1, r3
  68:	e28d0018 	add	r0, sp, #24
  6c:	e58d3014 	str	r3, [sp, #20]
  70:	ebfffffe 	bl	0 <b8PpuCmdSetBuff>
  74:	e3a00a02 	mov	r0, #8192	; 0x2000
  78:	ebfffffe 	bl	0 <mallocz(unsigned int)>
  7c:	e1a09000 	mov	r9, r0
  80:	e59f3254 	ldr	r3, [pc, #596]	; 2dc <fontdata::load(unsigned char, unsigned char)+0x2dc>
  84:	e58d4008 	str	r4, [sp, #8]
  88:	e58d3004 	str	r3, [sp, #4]
  8c:	e59d3008 	ldr	r3, [sp, #8]
  90:	e1a0000a 	mov	r0, r10
  94:	e1a02183 	lsl	r2, r3, #3
  98:	e1a030a3 	lsr	r3, r3, #1
  9c:	e2028078 	and	r8, r2, #120	; 0x78
  a0:	e2033078 	and	r3, r3, #120	; 0x78
  a4:	e58d300c 	str	r3, [sp, #12]
  a8:	e283e001 	add	lr, r3, #1
  ac:	e283b007 	add	r11, r3, #7
  b0:	e2883007 	add	r3, r8, #7
  b4:	e2884001 	add	r4, r8, #1
  b8:	e2887002 	add	r7, r8, #2
  bc:	e58d8010 	str	r8, [sp, #16]
  c0:	e1a08003 	mov	r8, r3
  c4:	e59d6004 	ldr	r6, [sp, #4]
  c8:	e1540008 	cmp	r4, r8
  cc:	83a02001 	movhi	r2, #1
  d0:	93a02007 	movls	r2, #7
  d4:	e2422001 	sub	r2, r2, #1
  d8:	e1a02802 	lsl	r2, r2, #16
  dc:	e1a02822 	lsr	r2, r2, #16
  e0:	e1a03004 	mov	r3, r4
  e4:	e1a0530e 	lsl	r5, lr, #6
  e8:	e0822007 	add	r2, r2, r7
  ec:	ea000002 	b	fc <fontdata::load(unsigned char, unsigned char)+0xfc>
  f0:	e2833001 	add	r3, r3, #1
  f4:	e1520003 	cmp	r2, r3
  f8:	0a000010 	beq	140 <fontdata::load(unsigned char, unsigned char)+0x140>
  fc:	e2631000 	rsb	r1, r3, #0
 100:	e2011007 	and	r1, r1, #7
 104:	e1a01150 	asr	r1, r0, r1
 108:	e3110001 	tst	r1, #1
 10c:	0afffff7 	beq	f0 <fontdata::load(unsigned char, unsigned char)+0xf0>
 110:	e1a01803 	lsl	r1, r3, #16
 114:	e3110801 	tst	r1, #65536	; 0x10000
 118:	e08518a1 	add	r1, r5, r1, lsr #17
 11c:	e7d9c001 	ldrb	r12, [r9, r1]
 120:	e2833001 	add	r3, r3, #1
 124:	13ccc00f 	bicne	r12, r12, #15
 128:	020cc00f 	andeq	r12, r12, #15
 12c:	138cc001 	orrne	r12, r12, #1
 130:	038cc010 	orreq	r12, r12, #16
 134:	e1520003 	cmp	r2, r3
 138:	e7c9c001 	strb	r12, [r9, r1]
 13c:	1affffee 	bne	fc <fontdata::load(unsigned char, unsigned char)+0xfc>
 140:	e15e000b 	cmp	lr, r11
 144:	0a000004 	beq	15c <fontdata::load(unsigned char, unsigned char)+0x15c>
 148:	e28ee001 	add	lr, lr, #1
 14c:	e1a0e80e 	lsl	lr, lr, #16
 150:	e5f60001 	ldrb	r0, [r6, #1]!
 154:	e1a0e82e 	lsr	lr, lr, #16
 158:	eaffffda 	b	c8 <fontdata::load(unsigned char, unsigned char)+0xc8>
 15c:	e59d300c 	ldr	r3, [sp, #12]
 160:	e59d8010 	ldr	r8, [sp, #16]
 164:	e2835008 	add	r5, r3, #8
 168:	e59d6004 	ldr	r6, [sp, #4]
 16c:	e1a0e303 	lsl	lr, r3, #6
 170:	e1a05305 	lsl	r5, r5, #6
 174:	e2887008 	add	r7, r8, #8
 178:	e1570004 	cmp	r7, r4
 17c:	33a00001 	movcc	r0, #1
 180:	23a00008 	movcs	r0, #8
 184:	e2400001 	sub	r0, r0, #1
 188:	e1a00800 	lsl	r0, r0, #16
 18c:	e1a00820 	lsr	r0, r0, #16
 190:	e1a02008 	mov	r2, r8
 194:	e0800004 	add	r0, r0, r4
 198:	ea000002 	b	1a8 <fontdata::load(unsigned char, unsigned char)+0x1a8>
 19c:	e2822001 	add	r2, r2, #1
 1a0:	e1520000 	cmp	r2, r0
 1a4:	0a000011 	beq	1f0 <fontdata::load(unsigned char, unsigned char)+0x1f0>
 1a8:	e1e03002 	mvn	r3, r2
 1ac:	e2033007 	and	r3, r3, #7
 1b0:	e1a0335a 	asr	r3, r10, r3
 1b4:	e1a01802 	lsl	r1, r2, #16
 1b8:	e3130001 	tst	r3, #1
 1bc:	e1a0c821 	lsr	r12, r1, #16
 1c0:	0afffff5 	beq	19c <fontdata::load(unsigned char, unsigned char)+0x19c>
 1c4:	e08e18a1 	add	r1, lr, r1, lsr #17
 1c8:	e7d93001 	ldrb	r3, [r9, r1]
 1cc:	e31c0001 	tst	r12, #1
 1d0:	13c3300f 	bicne	r3, r3, #15
 1d4:	0203300f 	andeq	r3, r3, #15
 1d8:	e2822001 	add	r2, r2, #1
 1dc:	13833007 	orrne	r3, r3, #7
 1e0:	03833070 	orreq	r3, r3, #112	; 0x70
 1e4:	e1520000 	cmp	r2, r0
 1e8:	e7c93001 	strb	r3, [r9, r1]
 1ec:	1affffed 	bne	1a8 <fontdata::load(unsigned char, unsigned char)+0x1a8>
 1f0:	e28ee040 	add	lr, lr, #64	; 0x40
 1f4:	e155000e 	cmp	r5, lr
 1f8:	15f6a001 	ldrbne	r10, [r6, #1]!
 1fc:	1affffdd 	bne	178 <fontdata::load(unsigned char, unsigned char)+0x178>
 200:	e59d3008 	ldr	r3, [sp, #8]
 204:	e2833001 	add	r3, r3, #1
 208:	e3530060 	cmp	r3, #96	; 0x60
 20c:	e58d3008 	str	r3, [sp, #8]
 210:	0a000003 	beq	224 <fontdata::load(unsigned char, unsigned char)+0x224>
 214:	e59d3004 	ldr	r3, [sp, #4]
 218:	e5f3a008 	ldrb	r10, [r3, #8]!
 21c:	e58d3004 	str	r3, [sp, #4]
 220:	eaffff99 	b	8c <fontdata::load(unsigned char, unsigned char)+0x8c>
 224:	e28d0018 	add	r0, sp, #24
 228:	ebfffffe 	bl	0 <b8PpuLoadimgAlloc>
 22c:	e1a03000 	mov	r3, r0
 230:	e59f20a0 	ldr	r2, [pc, #160]	; 2d8 <fontdata::load(unsigned char, unsigned char)+0x2d8>
 234:	e593e008 	ldr	lr, [r3, #8]
 238:	e5d20000 	ldrb	r0, [r2]
 23c:	e59f208c 	ldr	r2, [pc, #140]	; 2d0 <fontdata::load(unsigned char, unsigned char)+0x2d0>
 240:	e200003f 	and	r0, r0, #63	; 0x3f
 244:	e5d21000 	ldrb	r1, [r2]
 248:	e59f2090 	ldr	r2, [pc, #144]	; 2e0 <fontdata::load(unsigned char, unsigned char)+0x2e0>
 24c:	e201103f 	and	r1, r1, #63	; 0x3f
 250:	e1822800 	orr	r2, r2, r0, lsl #16
 254:	e1822c01 	orr	r2, r2, r1, lsl #24
 258:	e59f1084 	ldr	r1, [pc, #132]	; 2e4 <fontdata::load(unsigned char, unsigned char)+0x2e4>
 25c:	e59fc084 	ldr	r12, [pc, #132]	; 2e8 <fontdata::load(unsigned char, unsigned char)+0x2e8>
 260:	e001100e 	and	r1, r1, lr
 264:	e3811a01 	orr	r1, r1, #4096	; 0x1000
 268:	e5831008 	str	r1, [r3, #8]
 26c:	e593100c 	ldr	r1, [r3, #12]
 270:	e5839004 	str	r9, [r3, #4]
 274:	e00cc001 	and	r12, r12, r1
 278:	e182200c 	orr	r2, r2, r12
 27c:	e583200c 	str	r2, [r3, #12]
 280:	e28d0018 	add	r0, sp, #24
 284:	ebfffffe 	bl	0 <b8PpuFlushAlloc>
 288:	e1a03000 	mov	r3, r0
 28c:	e5d32000 	ldrb	r2, [r3]
 290:	e28d0018 	add	r0, sp, #24
 294:	e3822002 	orr	r2, r2, #2
 298:	e5c32000 	strb	r2, [r3]
 29c:	ebfffffe 	bl	0 <b8PpuHaltAlloc>
 2a0:	e28d0018 	add	r0, sp, #24
 2a4:	ebfffffe 	bl	0 <b8PpuExec>
 2a8:	e1a00009 	mov	r0, r9
 2ac:	ebfffffe 	bl	0 <free>
 2b0:	e59d0014 	ldr	r0, [sp, #20]
 2b4:	ebfffffe 	bl	0 <free>
 2b8:	e3a03001 	mov	r3, #1
 2bc:	e59f2008 	ldr	r2, [pc, #8]	; 2cc <fontdata::load(unsigned char, unsigned char)+0x2cc>
 2c0:	e5c23000 	strb	r3, [r2]
 2c4:	e28dd03c 	add	sp, sp, #60	; 0x3c
 2c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
	...
 2e0:	00001010 	.word	0x00001010
 2e4:	c0c0c0ff 	.word	0xc0c0c0ff
 2e8:	c0c0c0c0 	.word	0xc0c0c0c0

handle.o:     file format elf32-littlearm


Disassembly of section .text._Z12Handle_Resetv:

00000000 <Handle_Reset()>:
   0:	e3a0c001 	mov	r12, #1
   4:	e3a01000 	mov	r1, #0
   8:	e59f0018 	ldr	r0, [pc, #24]	; 28 <Handle_Reset()+0x28>
   c:	e59f3018 	ldr	r3, [pc, #24]	; 2c <Handle_Reset()+0x2c>
  10:	e580c000 	str	r12, [r0]
  14:	e2832801 	add	r2, r3, #65536	; 0x10000
  18:	e5a31004 	str	r1, [r3, #4]!
  1c:	e1530002 	cmp	r3, r2
  20:	1afffffc 	bne	18 <Handle_Reset()+0x18>
  24:	e1a0f00e 	mov	pc, lr
  28:	00000000 	.word	0x00000000
  2c:	fffffffc 	.word	0xfffffffc

Disassembly of section .text._Z11Handle_Dumpv:

00000000 <Handle_Dump()>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e59f506c 	ldr	r5, [pc, #108]	; 78 <Handle_Dump()+0x78>
   8:	e59f606c 	ldr	r6, [pc, #108]	; 7c <Handle_Dump()+0x7c>
   c:	e59f806c 	ldr	r8, [pc, #108]	; 80 <Handle_Dump()+0x80>
  10:	e2857801 	add	r7, r5, #65536	; 0x10000
  14:	e3a03000 	mov	r3, #0
  18:	e2454040 	sub	r4, r5, #64	; 0x40
  1c:	ea000002 	b	2c <Handle_Dump()+0x2c>
  20:	e2844008 	add	r4, r4, #8
  24:	e1540005 	cmp	r4, r5
  28:	0a000009 	beq	54 <Handle_Dump()+0x54>
  2c:	e5141008 	ldr	r1, [r4, #-8]
  30:	e3510000 	cmp	r1, #0
  34:	0afffff9 	beq	20 <Handle_Dump()+0x20>
  38:	e5142004 	ldr	r2, [r4, #-4]
  3c:	e1a00006 	mov	r0, r6
  40:	e2844008 	add	r4, r4, #8
  44:	ebfffffe 	bl	0 <printf>
  48:	e1540005 	cmp	r4, r5
  4c:	e3a03001 	mov	r3, #1
  50:	1afffff5 	bne	2c <Handle_Dump()+0x2c>
  54:	e3530000 	cmp	r3, #0
  58:	1a000003 	bne	6c <Handle_Dump()+0x6c>
  5c:	e2855040 	add	r5, r5, #64	; 0x40
  60:	e1550007 	cmp	r5, r7
  64:	1affffea 	bne	14 <Handle_Dump()+0x14>
  68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  6c:	e1a00008 	mov	r0, r8
  70:	ebfffffe 	bl	0 <printf>
  74:	eafffff8 	b	5c <Handle_Dump()+0x5c>
  78:	00000048 	.word	0x00000048
  7c:	00000000 	.word	0x00000000
  80:	00000014 	.word	0x00000014

Disassembly of section .text._Z12Handle_EntryPv:

00000000 <Handle_Entry(void*)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e1a0700e 	mov	r7, lr
   8:	e1a06000 	mov	r6, r0
   c:	e59f30b8 	ldr	r3, [pc, #184]	; cc <Handle_Entry(void*)+0xcc>
  10:	e59f40b8 	ldr	r4, [pc, #184]	; d0 <Handle_Entry(void*)+0xd0>
  14:	e5935000 	ldr	r5, [r3]
  18:	e2852001 	add	r2, r5, #1
  1c:	e5832000 	str	r2, [r3]
  20:	e1a02305 	lsl	r2, r5, #6
  24:	e59f30a8 	ldr	r3, [pc, #168]	; d4 <Handle_Entry(void*)+0xd4>
  28:	e0044002 	and	r4, r4, r2
  2c:	e0844003 	add	r4, r4, r3
  30:	e2842040 	add	r2, r4, #64	; 0x40
  34:	e5943000 	ldr	r3, [r4]
  38:	e3530000 	cmp	r3, #0
  3c:	0a00001f 	beq	c0 <Handle_Entry(void*)+0xc0>
  40:	e2844008 	add	r4, r4, #8
  44:	e1520004 	cmp	r2, r4
  48:	1afffff9 	bne	34 <Handle_Entry(void*)+0x34>
  4c:	e59f0084 	ldr	r0, [pc, #132]	; d8 <Handle_Entry(void*)+0xd8>
  50:	ebfffffe 	bl	0 <b8SysPuts>
  54:	e59f0080 	ldr	r0, [pc, #128]	; dc <Handle_Entry(void*)+0xdc>
  58:	ebfffffe 	bl	0 <b8SysPuts>
  5c:	e59f007c 	ldr	r0, [pc, #124]	; e0 <Handle_Entry(void*)+0xe0>
  60:	ebfffffe 	bl	0 <b8SysPuts>
  64:	e3a00030 	mov	r0, #48	; 0x30
  68:	ebfffffe 	bl	0 <b8SysPutNum>
  6c:	e59f0070 	ldr	r0, [pc, #112]	; e4 <Handle_Entry(void*)+0xe4>
  70:	ebfffffe 	bl	0 <b8SysPuts>
  74:	e59f006c 	ldr	r0, [pc, #108]	; e8 <Handle_Entry(void*)+0xe8>
  78:	ebfffffe 	bl	0 <b8SysPuts>
  7c:	e59f0068 	ldr	r0, [pc, #104]	; ec <Handle_Entry(void*)+0xec>
  80:	ebfffffe 	bl	0 <b8SysPuts>
  84:	e59f0064 	ldr	r0, [pc, #100]	; f0 <Handle_Entry(void*)+0xf0>
  88:	ebfffffe 	bl	0 <b8SysPuts>
  8c:	e59f0060 	ldr	r0, [pc, #96]	; f4 <Handle_Entry(void*)+0xf4>
  90:	ebfffffe 	bl	0 <b8SysPuts>
  94:	e59f005c 	ldr	r0, [pc, #92]	; f8 <Handle_Entry(void*)+0xf8>
  98:	ebfffffe 	bl	0 <b8SysPuts>
  9c:	e1a00007 	mov	r0, r7
  a0:	ebfffffe 	bl	0 <b8SysPutHex>
  a4:	e59f0048 	ldr	r0, [pc, #72]	; f4 <Handle_Entry(void*)+0xf4>
  a8:	ebfffffe 	bl	0 <b8SysPuts>
  ac:	e59f0048 	ldr	r0, [pc, #72]	; fc <Handle_Entry(void*)+0xfc>
  b0:	ebfffffe 	bl	0 <b8SysPuts>
  b4:	e59f0044 	ldr	r0, [pc, #68]	; 100 <Handle_Entry(void*)+0x100>
  b8:	ebfffffe 	bl	0 <b8SysPuts>
  bc:	e1000070 	hlt	0x0000
  c0:	e1a00005 	mov	r0, r5
  c4:	e8840060 	stm	r4, {r5, r6}
  c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  cc:	00000000 	.word	0x00000000
  d0:	0000ffc0 	.word	0x0000ffc0
	...
  dc:	0000001c 	.word	0x0000001c
  e0:	00000028 	.word	0x00000028
  e4:	0000002c 	.word	0x0000002c
  e8:	00000030 	.word	0x00000030
  ec:	00000040 	.word	0x00000040
  f0:	00000044 	.word	0x00000044
  f4:	00000014 	.word	0x00000014
  f8:	0000006c 	.word	0x0000006c
  fc:	00000088 	.word	0x00000088
 100:	000000d0 	.word	0x000000d0

Disassembly of section .text._Z17Handle_GetPointerm:

00000000 <Handle_GetPointer(unsigned long)>:
   0:	e3500000 	cmp	r0, #0
   4:	01a0f00e 	moveq	pc, lr
   8:	e59f3038 	ldr	r3, [pc, #56]	; 48 <Handle_GetPointer(unsigned long)+0x48>
   c:	e1a01300 	lsl	r1, r0, #6
  10:	e59f2034 	ldr	r2, [pc, #52]	; 4c <Handle_GetPointer(unsigned long)+0x4c>
  14:	e0033001 	and	r3, r3, r1
  18:	e0833002 	add	r3, r3, r2
  1c:	e2831040 	add	r1, r3, #64	; 0x40
  20:	e5932000 	ldr	r2, [r3]
  24:	e1520000 	cmp	r2, r0
  28:	0a000004 	beq	40 <Handle_GetPointer(unsigned long)+0x40>
  2c:	e2833008 	add	r3, r3, #8
  30:	e1530001 	cmp	r3, r1
  34:	1afffff9 	bne	20 <Handle_GetPointer(unsigned long)+0x20>
  38:	e3a00000 	mov	r0, #0
  3c:	e1a0f00e 	mov	pc, lr
  40:	e5930004 	ldr	r0, [r3, #4]
  44:	e1a0f00e 	mov	pc, lr
  48:	0000ffc0 	.word	0x0000ffc0
  4c:	00000000 	.word	0x00000000

Disassembly of section .text._Z14Handle_IsAlivem:

00000000 <Handle_IsAlive(unsigned long)>:
   0:	e3500000 	cmp	r0, #0
   4:	01a0f00e 	moveq	pc, lr
   8:	e59f3040 	ldr	r3, [pc, #64]	; 50 <Handle_IsAlive(unsigned long)+0x50>
   c:	e1a01300 	lsl	r1, r0, #6
  10:	e59f203c 	ldr	r2, [pc, #60]	; 54 <Handle_IsAlive(unsigned long)+0x54>
  14:	e0033001 	and	r3, r3, r1
  18:	e0833002 	add	r3, r3, r2
  1c:	e2831040 	add	r1, r3, #64	; 0x40
  20:	e5932000 	ldr	r2, [r3]
  24:	e1500002 	cmp	r0, r2
  28:	0a000004 	beq	40 <Handle_IsAlive(unsigned long)+0x40>
  2c:	e2833008 	add	r3, r3, #8
  30:	e1510003 	cmp	r1, r3
  34:	1afffff9 	bne	20 <Handle_IsAlive(unsigned long)+0x20>
  38:	e3a00000 	mov	r0, #0
  3c:	e1a0f00e 	mov	pc, lr
  40:	e5930004 	ldr	r0, [r3, #4]
  44:	e2500000 	subs	r0, r0, #0
  48:	13a00001 	movne	r0, #1
  4c:	e1a0f00e 	mov	pc, lr
  50:	0000ffc0 	.word	0x0000ffc0
  54:	00000000 	.word	0x00000000

Disassembly of section .text._Z13Handle_Removem:

00000000 <Handle_Remove(unsigned long)>:
   0:	e2502000 	subs	r2, r0, #0
   4:	01a0f00e 	moveq	pc, lr
   8:	e92d4010 	push	{r4, lr}
   c:	e1a0400e 	mov	r4, lr
  10:	e59f30b0 	ldr	r3, [pc, #176]	; c8 <Handle_Remove(unsigned long)+0xc8>
  14:	e59f10b0 	ldr	r1, [pc, #176]	; cc <Handle_Remove(unsigned long)+0xcc>
  18:	e1a00302 	lsl	r0, r2, #6
  1c:	e0033000 	and	r3, r3, r0
  20:	e0833001 	add	r3, r3, r1
  24:	e283c040 	add	r12, r3, #64	; 0x40
  28:	e5931000 	ldr	r1, [r3]
  2c:	e1510002 	cmp	r1, r2
  30:	0a000020 	beq	b8 <Handle_Remove(unsigned long)+0xb8>
  34:	e2833008 	add	r3, r3, #8
  38:	e153000c 	cmp	r3, r12
  3c:	1afffff9 	bne	28 <Handle_Remove(unsigned long)+0x28>
  40:	e59f0088 	ldr	r0, [pc, #136]	; d0 <Handle_Remove(unsigned long)+0xd0>
  44:	ebfffffe 	bl	0 <b8SysPuts>
  48:	e59f0084 	ldr	r0, [pc, #132]	; d4 <Handle_Remove(unsigned long)+0xd4>
  4c:	ebfffffe 	bl	0 <b8SysPuts>
  50:	e59f0080 	ldr	r0, [pc, #128]	; d8 <Handle_Remove(unsigned long)+0xd8>
  54:	ebfffffe 	bl	0 <b8SysPuts>
  58:	e3a00068 	mov	r0, #104	; 0x68
  5c:	ebfffffe 	bl	0 <b8SysPutNum>
  60:	e59f0074 	ldr	r0, [pc, #116]	; dc <Handle_Remove(unsigned long)+0xdc>
  64:	ebfffffe 	bl	0 <b8SysPuts>
  68:	e59f0070 	ldr	r0, [pc, #112]	; e0 <Handle_Remove(unsigned long)+0xe0>
  6c:	ebfffffe 	bl	0 <b8SysPuts>
  70:	e59f006c 	ldr	r0, [pc, #108]	; e4 <Handle_Remove(unsigned long)+0xe4>
  74:	ebfffffe 	bl	0 <b8SysPuts>
  78:	e59f0068 	ldr	r0, [pc, #104]	; e8 <Handle_Remove(unsigned long)+0xe8>
  7c:	ebfffffe 	bl	0 <b8SysPuts>
  80:	e59f0064 	ldr	r0, [pc, #100]	; ec <Handle_Remove(unsigned long)+0xec>
  84:	ebfffffe 	bl	0 <b8SysPuts>
  88:	e59f0060 	ldr	r0, [pc, #96]	; f0 <Handle_Remove(unsigned long)+0xf0>
  8c:	ebfffffe 	bl	0 <b8SysPuts>
  90:	e1a00004 	mov	r0, r4
  94:	ebfffffe 	bl	0 <b8SysPutHex>
  98:	e59f004c 	ldr	r0, [pc, #76]	; ec <Handle_Remove(unsigned long)+0xec>
  9c:	ebfffffe 	bl	0 <b8SysPuts>
  a0:	e59f004c 	ldr	r0, [pc, #76]	; f4 <Handle_Remove(unsigned long)+0xf4>
  a4:	ebfffffe 	bl	0 <b8SysPuts>
  a8:	e59f0048 	ldr	r0, [pc, #72]	; f8 <Handle_Remove(unsigned long)+0xf8>
  ac:	ebfffffe 	bl	0 <b8SysPuts>
  b0:	e1000070 	hlt	0x0000
  b4:	e8bd8010 	pop	{r4, pc}
  b8:	e3a02000 	mov	r2, #0
  bc:	e5832004 	str	r2, [r3, #4]
  c0:	e5832000 	str	r2, [r3]
  c4:	e8bd8010 	pop	{r4, pc}
  c8:	0000ffc0 	.word	0x0000ffc0
	...
  d4:	0000001c 	.word	0x0000001c
  d8:	00000028 	.word	0x00000028
  dc:	0000002c 	.word	0x0000002c
  e0:	00000000 	.word	0x00000000
  e4:	00000040 	.word	0x00000040
  e8:	00000010 	.word	0x00000010
  ec:	00000014 	.word	0x00000014
  f0:	0000006c 	.word	0x0000006c
  f4:	00000088 	.word	0x00000088
  f8:	000000d0 	.word	0x000000d0

hif_decoder.o:     file format elf32-littlearm


Disassembly of section .text._ZNSt8_Rb_treeIhSt4pairIKh11_b8HifEventESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E.isra.0:

00000000 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e2503000 	subs	r3, r0, #0
   8:	e24dd00c 	sub	sp, sp, #12
   c:	e58d3004 	str	r3, [sp, #4]
  10:	0a00005d 	beq	18c <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x18c>
  14:	e59d3004 	ldr	r3, [sp, #4]
  18:	e593900c 	ldr	r9, [r3, #12]
  1c:	e3590000 	cmp	r9, #0
  20:	0a000052 	beq	170 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x170>
  24:	e599a00c 	ldr	r10, [r9, #12]
  28:	e35a0000 	cmp	r10, #0
  2c:	0a000048 	beq	154 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x154>
  30:	e59ab00c 	ldr	r11, [r10, #12]
  34:	e35b0000 	cmp	r11, #0
  38:	0a00003e 	beq	138 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x138>
  3c:	e59b400c 	ldr	r4, [r11, #12]
  40:	e3540000 	cmp	r4, #0
  44:	0a00002b 	beq	f8 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0xf8>
  48:	e594500c 	ldr	r5, [r4, #12]
  4c:	e3550000 	cmp	r5, #0
  50:	0a000018 	beq	b8 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0xb8>
  54:	e595700c 	ldr	r7, [r5, #12]
  58:	e3570000 	cmp	r7, #0
  5c:	0a00001d 	beq	d8 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0xd8>
  60:	e597600c 	ldr	r6, [r7, #12]
  64:	e3560000 	cmp	r6, #0
  68:	0a00002a 	beq	118 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x118>
  6c:	e596800c 	ldr	r8, [r6, #12]
  70:	e3580000 	cmp	r8, #0
  74:	0a000007 	beq	98 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x98>
  78:	e598000c 	ldr	r0, [r8, #12]
  7c:	ebffffdf 	bl	0 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]>
  80:	e1a00008 	mov	r0, r8
  84:	e5988008 	ldr	r8, [r8, #8]
  88:	e3a0101c 	mov	r1, #28
  8c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  90:	e3580000 	cmp	r8, #0
  94:	1afffff7 	bne	78 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x78>
  98:	e5968008 	ldr	r8, [r6, #8]
  9c:	e3a0101c 	mov	r1, #28
  a0:	e1a00006 	mov	r0, r6
  a4:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  a8:	e3580000 	cmp	r8, #0
  ac:	0a000019 	beq	118 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x118>
  b0:	e1a06008 	mov	r6, r8
  b4:	eaffffec 	b	6c <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x6c>
  b8:	e5945008 	ldr	r5, [r4, #8]
  bc:	e3a0101c 	mov	r1, #28
  c0:	e1a00004 	mov	r0, r4
  c4:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  c8:	e3550000 	cmp	r5, #0
  cc:	0a000009 	beq	f8 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0xf8>
  d0:	e1a04005 	mov	r4, r5
  d4:	eaffffdb 	b	48 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x48>
  d8:	e5956008 	ldr	r6, [r5, #8]
  dc:	e3a0101c 	mov	r1, #28
  e0:	e1a00005 	mov	r0, r5
  e4:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  e8:	e3560000 	cmp	r6, #0
  ec:	0afffff1 	beq	b8 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0xb8>
  f0:	e1a05006 	mov	r5, r6
  f4:	eaffffd6 	b	54 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x54>
  f8:	e59b4008 	ldr	r4, [r11, #8]
  fc:	e3a0101c 	mov	r1, #28
 100:	e1a0000b 	mov	r0, r11
 104:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 108:	e3540000 	cmp	r4, #0
 10c:	0a000009 	beq	138 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x138>
 110:	e1a0b004 	mov	r11, r4
 114:	eaffffc8 	b	3c <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x3c>
 118:	e5976008 	ldr	r6, [r7, #8]
 11c:	e3a0101c 	mov	r1, #28
 120:	e1a00007 	mov	r0, r7
 124:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 128:	e3560000 	cmp	r6, #0
 12c:	0affffe9 	beq	d8 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0xd8>
 130:	e1a07006 	mov	r7, r6
 134:	eaffffc9 	b	60 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x60>
 138:	e59a4008 	ldr	r4, [r10, #8]
 13c:	e3a0101c 	mov	r1, #28
 140:	e1a0000a 	mov	r0, r10
 144:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 148:	e3540000 	cmp	r4, #0
 14c:	11a0a004 	movne	r10, r4
 150:	1affffb6 	bne	30 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x30>
 154:	e5994008 	ldr	r4, [r9, #8]
 158:	e3a0101c 	mov	r1, #28
 15c:	e1a00009 	mov	r0, r9
 160:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 164:	e3540000 	cmp	r4, #0
 168:	11a09004 	movne	r9, r4
 16c:	1affffac 	bne	24 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x24>
 170:	e59d0004 	ldr	r0, [sp, #4]
 174:	e3a0101c 	mov	r1, #28
 178:	e5904008 	ldr	r4, [r0, #8]
 17c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 180:	e3540000 	cmp	r4, #0
 184:	158d4004 	strne	r4, [sp, #4]
 188:	1affffa1 	bne	14 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, _b8HifEvent>, std::_Select1st<std::pair<unsigned char const, _b8HifEvent> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, _b8HifEvent> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, _b8HifEvent> >*) [clone .isra.0]+0x14>
 18c:	e28dd00c 	add	sp, sp, #12
 190:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

Disassembly of section .text._ZNSt8_Rb_treeIhSt4pairIKhP8HifPointESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E.isra.0:

00000000 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e2503000 	subs	r3, r0, #0
   8:	e24dd00c 	sub	sp, sp, #12
   c:	e58d3004 	str	r3, [sp, #4]
  10:	0a00005d 	beq	18c <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x18c>
  14:	e59d3004 	ldr	r3, [sp, #4]
  18:	e593900c 	ldr	r9, [r3, #12]
  1c:	e3590000 	cmp	r9, #0
  20:	0a000052 	beq	170 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x170>
  24:	e599a00c 	ldr	r10, [r9, #12]
  28:	e35a0000 	cmp	r10, #0
  2c:	0a000048 	beq	154 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x154>
  30:	e59ab00c 	ldr	r11, [r10, #12]
  34:	e35b0000 	cmp	r11, #0
  38:	0a00003e 	beq	138 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x138>
  3c:	e59b400c 	ldr	r4, [r11, #12]
  40:	e3540000 	cmp	r4, #0
  44:	0a00002b 	beq	f8 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0xf8>
  48:	e594500c 	ldr	r5, [r4, #12]
  4c:	e3550000 	cmp	r5, #0
  50:	0a000018 	beq	b8 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0xb8>
  54:	e595700c 	ldr	r7, [r5, #12]
  58:	e3570000 	cmp	r7, #0
  5c:	0a00001d 	beq	d8 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0xd8>
  60:	e597600c 	ldr	r6, [r7, #12]
  64:	e3560000 	cmp	r6, #0
  68:	0a00002a 	beq	118 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x118>
  6c:	e596800c 	ldr	r8, [r6, #12]
  70:	e3580000 	cmp	r8, #0
  74:	0a000007 	beq	98 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x98>
  78:	e598000c 	ldr	r0, [r8, #12]
  7c:	ebffffdf 	bl	0 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]>
  80:	e1a00008 	mov	r0, r8
  84:	e5988008 	ldr	r8, [r8, #8]
  88:	e3a01018 	mov	r1, #24
  8c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  90:	e3580000 	cmp	r8, #0
  94:	1afffff7 	bne	78 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x78>
  98:	e5968008 	ldr	r8, [r6, #8]
  9c:	e3a01018 	mov	r1, #24
  a0:	e1a00006 	mov	r0, r6
  a4:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  a8:	e3580000 	cmp	r8, #0
  ac:	0a000019 	beq	118 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x118>
  b0:	e1a06008 	mov	r6, r8
  b4:	eaffffec 	b	6c <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x6c>
  b8:	e5945008 	ldr	r5, [r4, #8]
  bc:	e3a01018 	mov	r1, #24
  c0:	e1a00004 	mov	r0, r4
  c4:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  c8:	e3550000 	cmp	r5, #0
  cc:	0a000009 	beq	f8 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0xf8>
  d0:	e1a04005 	mov	r4, r5
  d4:	eaffffdb 	b	48 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x48>
  d8:	e5956008 	ldr	r6, [r5, #8]
  dc:	e3a01018 	mov	r1, #24
  e0:	e1a00005 	mov	r0, r5
  e4:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  e8:	e3560000 	cmp	r6, #0
  ec:	0afffff1 	beq	b8 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0xb8>
  f0:	e1a05006 	mov	r5, r6
  f4:	eaffffd6 	b	54 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x54>
  f8:	e59b4008 	ldr	r4, [r11, #8]
  fc:	e3a01018 	mov	r1, #24
 100:	e1a0000b 	mov	r0, r11
 104:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 108:	e3540000 	cmp	r4, #0
 10c:	0a000009 	beq	138 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x138>
 110:	e1a0b004 	mov	r11, r4
 114:	eaffffc8 	b	3c <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x3c>
 118:	e5976008 	ldr	r6, [r7, #8]
 11c:	e3a01018 	mov	r1, #24
 120:	e1a00007 	mov	r0, r7
 124:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 128:	e3560000 	cmp	r6, #0
 12c:	0affffe9 	beq	d8 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0xd8>
 130:	e1a07006 	mov	r7, r6
 134:	eaffffc9 	b	60 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x60>
 138:	e59a4008 	ldr	r4, [r10, #8]
 13c:	e3a01018 	mov	r1, #24
 140:	e1a0000a 	mov	r0, r10
 144:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 148:	e3540000 	cmp	r4, #0
 14c:	11a0a004 	movne	r10, r4
 150:	1affffb6 	bne	30 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x30>
 154:	e5994008 	ldr	r4, [r9, #8]
 158:	e3a01018 	mov	r1, #24
 15c:	e1a00009 	mov	r0, r9
 160:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 164:	e3540000 	cmp	r4, #0
 168:	11a09004 	movne	r9, r4
 16c:	1affffac 	bne	24 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x24>
 170:	e59d0004 	ldr	r0, [sp, #4]
 174:	e3a01018 	mov	r1, #24
 178:	e5904008 	ldr	r4, [r0, #8]
 17c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 180:	e3540000 	cmp	r4, #0
 184:	158d4004 	strne	r4, [sp, #4]
 188:	1affffa1 	bne	14 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned char const, HifPoint*> >*) [clone .isra.0]+0x14>
 18c:	e28dd00c 	add	sp, sp, #12
 190:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

Disassembly of section .text._ZN11CHifDecoderC2Ev:

00000000 <CHifDecoder::CHifDecoder()>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e3a04000 	mov	r4, #0
   8:	e1a05000 	mov	r5, r0
   c:	e3a00034 	mov	r0, #52	; 0x34
  10:	e5854000 	str	r4, [r5]
  14:	ebfffffe 	bl	0 <operator new(unsigned int)>
  18:	e1a03000 	mov	r3, r0
  1c:	e3a01001 	mov	r1, #1
  20:	e2832004 	add	r2, r3, #4
  24:	e583200c 	str	r2, [r3, #12]
  28:	e5832010 	str	r2, [r3, #16]
  2c:	e2832020 	add	r2, r3, #32
  30:	e1a00005 	mov	r0, r5
  34:	e5831018 	str	r1, [r3, #24]
  38:	e5853000 	str	r3, [r5]
  3c:	e5c34004 	strb	r4, [r3, #4]
  40:	e5834008 	str	r4, [r3, #8]
  44:	e5834014 	str	r4, [r3, #20]
  48:	e5c34020 	strb	r4, [r3, #32]
  4c:	e5834024 	str	r4, [r3, #36]	; 0x24
  50:	e5832028 	str	r2, [r3, #40]	; 0x28
  54:	e583202c 	str	r2, [r3, #44]	; 0x2c
  58:	e5834030 	str	r4, [r3, #48]	; 0x30
  5c:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN11CHifDecoderD2Ev:

00000000 <CHifDecoder::~CHifDecoder()>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e5906000 	ldr	r6, [r0]
   8:	e1a05000 	mov	r5, r0
   c:	e3560000 	cmp	r6, #0
  10:	0a000018 	beq	78 <CHifDecoder::~CHifDecoder()+0x78>
  14:	e5964024 	ldr	r4, [r6, #36]	; 0x24
  18:	e3540000 	cmp	r4, #0
  1c:	0a000007 	beq	40 <CHifDecoder::~CHifDecoder()+0x40>
  20:	e594000c 	ldr	r0, [r4, #12]
  24:	ebfffffe 	bl	0 <CHifDecoder::~CHifDecoder()>
  28:	e1a00004 	mov	r0, r4
  2c:	e5944008 	ldr	r4, [r4, #8]
  30:	e3a01018 	mov	r1, #24
  34:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  38:	e3540000 	cmp	r4, #0
  3c:	1afffff7 	bne	20 <CHifDecoder::~CHifDecoder()+0x20>
  40:	e5964008 	ldr	r4, [r6, #8]
  44:	e3540000 	cmp	r4, #0
  48:	0a000007 	beq	6c <CHifDecoder::~CHifDecoder()+0x6c>
  4c:	e594000c 	ldr	r0, [r4, #12]
  50:	ebfffffe 	bl	0 <CHifDecoder::~CHifDecoder()>
  54:	e1a00004 	mov	r0, r4
  58:	e5944008 	ldr	r4, [r4, #8]
  5c:	e3a0101c 	mov	r1, #28
  60:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  64:	e3540000 	cmp	r4, #0
  68:	1afffff7 	bne	4c <CHifDecoder::~CHifDecoder()+0x4c>
  6c:	e3a01034 	mov	r1, #52	; 0x34
  70:	e1a00006 	mov	r0, r6
  74:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  78:	e1a00005 	mov	r0, r5
  7c:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN11CHifDecoder14GetMouseStatusEv:

00000000 <CHifDecoder::GetMouseStatus()>:
   0:	eafffffe 	b	0 <b8HifGetMouseStatus>

Disassembly of section .text._ZNSt8_Rb_treeIhSt4pairIKhP8HifPointESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_:

00000000 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_get_insert_unique_pos(unsigned char const&)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e5914008 	ldr	r4, [r1, #8]
   8:	e1a06000 	mov	r6, r0
   c:	e3540000 	cmp	r4, #0
  10:	e1a07002 	mov	r7, r2
  14:	02814004 	addeq	r4, r1, #4
  18:	0a000016 	beq	78 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_get_insert_unique_pos(unsigned char const&)+0x78>
  1c:	e5d25000 	ldrb	r5, [r2]
  20:	ea000000 	b	28 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_get_insert_unique_pos(unsigned char const&)+0x28>
  24:	e1a04003 	mov	r4, r3
  28:	e5d4c010 	ldrb	r12, [r4, #16]
  2c:	e594e00c 	ldr	lr, [r4, #12]
  30:	e155000c 	cmp	r5, r12
  34:	e5943008 	ldr	r3, [r4, #8]
  38:	21a0300e 	movcs	r3, lr
  3c:	33a0e001 	movcc	lr, #1
  40:	23a0e000 	movcs	lr, #0
  44:	e3530000 	cmp	r3, #0
  48:	1afffff5 	bne	24 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_get_insert_unique_pos(unsigned char const&)+0x24>
  4c:	e35e0000 	cmp	lr, #0
  50:	01a03004 	moveq	r3, r4
  54:	1a000007 	bne	78 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_get_insert_unique_pos(unsigned char const&)+0x78>
  58:	e15c0005 	cmp	r12, r5
  5c:	33a02000 	movcc	r2, #0
  60:	23a03000 	movcs	r3, #0
  64:	3886000c 	stmcc	r6, {r2, r3}
  68:	25864000 	strcs	r4, [r6]
  6c:	25863004 	strcs	r3, [r6, #4]
  70:	e1a00006 	mov	r0, r6
  74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  78:	e591300c 	ldr	r3, [r1, #12]
  7c:	e1530004 	cmp	r3, r4
  80:	03a03000 	moveq	r3, #0
  84:	08860018 	stmeq	r6, {r3, r4}
  88:	0afffff8 	beq	70 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_get_insert_unique_pos(unsigned char const&)+0x70>
  8c:	e1a00004 	mov	r0, r4
  90:	ebfffffe 	bl	0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)>
  94:	e1a03004 	mov	r3, r4
  98:	e5d75000 	ldrb	r5, [r7]
  9c:	e1a04000 	mov	r4, r0
  a0:	e5d0c010 	ldrb	r12, [r0, #16]
  a4:	eaffffeb 	b	58 <std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_get_insert_unique_pos(unsigned char const&)+0x58>

Disassembly of section .text._ZNSt8_Rb_treeIhSt4pairIKhP8HifPointESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_.isra.0:

00000000 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e1a07002 	mov	r7, r2
   8:	e1a05000 	mov	r5, r0
   c:	e1a06001 	mov	r6, r1
  10:	e3a00018 	mov	r0, #24
  14:	e24dd00c 	sub	sp, sp, #12
  18:	ebfffffe 	bl	0 <operator new(unsigned int)>
  1c:	e3a03000 	mov	r3, #0
  20:	e5972000 	ldr	r2, [r7]
  24:	e2859004 	add	r9, r5, #4
  28:	e5d28000 	ldrb	r8, [r2]
  2c:	e1560009 	cmp	r6, r9
  30:	e1a04000 	mov	r4, r0
  34:	e5c08010 	strb	r8, [r0, #16]
  38:	e5803014 	str	r3, [r0, #20]
  3c:	e280b010 	add	r11, r0, #16
  40:	0a00003e 	beq	140 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0x140>
  44:	e5d67010 	ldrb	r7, [r6, #16]
  48:	e1a0a006 	mov	r10, r6
  4c:	e1580007 	cmp	r8, r7
  50:	2a000020 	bcs	d8 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0xd8>
  54:	e595300c 	ldr	r3, [r5, #12]
  58:	e1560003 	cmp	r6, r3
  5c:	0a000045 	beq	178 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0x178>
  60:	e1a00006 	mov	r0, r6
  64:	ebfffffe 	bl	0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)>
  68:	e5d03010 	ldrb	r3, [r0, #16]
  6c:	e1a02000 	mov	r2, r0
  70:	e1530008 	cmp	r3, r8
  74:	3a00003a 	bcc	164 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0x164>
  78:	e1a0200b 	mov	r2, r11
  7c:	e1a01005 	mov	r1, r5
  80:	e1a0000d 	mov	r0, sp
  84:	ebfffffe 	bl	0 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]>
  88:	e59d2004 	ldr	r2, [sp, #4]
  8c:	e59da000 	ldr	r10, [sp]
  90:	e3520000 	cmp	r2, #0
  94:	0a000022 	beq	124 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0x124>
  98:	e25a0000 	subs	r0, r10, #0
  9c:	13a00001 	movne	r0, #1
  a0:	e1590002 	cmp	r9, r2
  a4:	03800001 	orreq	r0, r0, #1
  a8:	e3500000 	cmp	r0, #0
  ac:	05d27010 	ldrbeq	r7, [r2, #16]
  b0:	0a000017 	beq	114 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0x114>
  b4:	e1a03009 	mov	r3, r9
  b8:	e1a01004 	mov	r1, r4
  bc:	ebfffffe 	bl	0 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)>
  c0:	e1a00004 	mov	r0, r4
  c4:	e5953014 	ldr	r3, [r5, #20]
  c8:	e2833001 	add	r3, r3, #1
  cc:	e5853014 	str	r3, [r5, #20]
  d0:	e28dd00c 	add	sp, sp, #12
  d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  d8:	9a000011 	bls	124 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0x124>
  dc:	e5952010 	ldr	r2, [r5, #16]
  e0:	e1560002 	cmp	r6, r2
  e4:	0a000024 	beq	17c <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0x17c>
  e8:	e1a00006 	mov	r0, r6
  ec:	ebfffffe 	bl	0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)>
  f0:	e5d03010 	ldrb	r3, [r0, #16]
  f4:	e1a02000 	mov	r2, r0
  f8:	e1530008 	cmp	r3, r8
  fc:	9affffdd 	bls	78 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0x78>
 100:	e596300c 	ldr	r3, [r6, #12]
 104:	e3530000 	cmp	r3, #0
 108:	13a00001 	movne	r0, #1
 10c:	1affffe8 	bne	b4 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0xb4>
 110:	e1a02006 	mov	r2, r6
 114:	e1580007 	cmp	r8, r7
 118:	23a00000 	movcs	r0, #0
 11c:	33a00001 	movcc	r0, #1
 120:	eaffffe3 	b	b4 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0xb4>
 124:	e1a00004 	mov	r0, r4
 128:	e1a0400a 	mov	r4, r10
 12c:	e3a01018 	mov	r1, #24
 130:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 134:	e1a00004 	mov	r0, r4
 138:	e28dd00c 	add	sp, sp, #12
 13c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 140:	e5953014 	ldr	r3, [r5, #20]
 144:	e3530000 	cmp	r3, #0
 148:	0affffca 	beq	78 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0x78>
 14c:	e5952010 	ldr	r2, [r5, #16]
 150:	e5d23010 	ldrb	r3, [r2, #16]
 154:	e1530008 	cmp	r3, r8
 158:	2affffc6 	bcs	78 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0x78>
 15c:	e3a00000 	mov	r0, #0
 160:	eaffffce 	b	a0 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0xa0>
 164:	e590300c 	ldr	r3, [r0, #12]
 168:	e3530000 	cmp	r3, #0
 16c:	11a02006 	movne	r2, r6
 170:	1affffc8 	bne	98 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0x98>
 174:	eafffff8 	b	15c <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0x15c>
 178:	e1a02003 	mov	r2, r3
 17c:	e1a0a003 	mov	r10, r3
 180:	eaffffc4 	b	98 <std::_Rb_tree_iterator<std::pair<unsigned char const, HifPoint*> > std::_Rb_tree<unsigned char, std::pair<unsigned char const, HifPoint*>, std::_Select1st<std::pair<unsigned char const, HifPoint*> >, std::less<unsigned char>, std::allocator<std::pair<unsigned char const, HifPoint*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<unsigned char const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<unsigned char const, HifPoint*> >, std::piecewise_construct_t const&, std::tuple<unsigned char const&>&&, std::tuple<>&&) [clone .isra.0]+0x98>

Disassembly of section .text._ZN11CHifDecoder9GetStatusEv:

00000000 <CHifDecoder::GetStatus()>:
   0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   4:	e1a05000 	mov	r5, r0
   8:	e5906000 	ldr	r6, [r0]
   c:	e24ddf42 	sub	sp, sp, #264	; 0x108
  10:	e5964028 	ldr	r4, [r6, #40]	; 0x28
  14:	e2863020 	add	r3, r6, #32
  18:	e1540003 	cmp	r4, r3
  1c:	0a00000b 	beq	50 <CHifDecoder::GetStatus()+0x50>
  20:	e5940014 	ldr	r0, [r4, #20]
  24:	e5d03006 	ldrb	r3, [r0, #6]
  28:	e35300f3 	cmp	r3, #243	; 0xf3
  2c:	8a000057 	bhi	190 <CHifDecoder::GetStatus()+0x190>
  30:	e35300f1 	cmp	r3, #241	; 0xf1
  34:	8a000057 	bhi	198 <CHifDecoder::GetStatus()+0x198>
  38:	e1a00004 	mov	r0, r4
  3c:	ebfffffe 	bl	0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)>
  40:	e1a04000 	mov	r4, r0
  44:	e2863020 	add	r3, r6, #32
  48:	e1540003 	cmp	r4, r3
  4c:	1afffff3 	bne	20 <CHifDecoder::GetStatus()+0x20>
  50:	e28d0004 	add	r0, sp, #4
  54:	ebfffffe 	bl	0 <b8HifGetEvents>
  58:	e59d3004 	ldr	r3, [sp, #4]
  5c:	e3530000 	cmp	r3, #0
  60:	0a0000a6 	beq	300 <CHifDecoder::GetStatus()+0x300>
  64:	e3a08000 	mov	r8, #0
  68:	e3a07091 	mov	r7, #145	; 0x91
  6c:	e5956000 	ldr	r6, [r5]
  70:	e28d4010 	add	r4, sp, #16
  74:	ea000006 	b	94 <CHifDecoder::GetStatus()+0x94>
  78:	e35200f0 	cmp	r2, #240	; 0xf0
  7c:	8a000012 	bhi	cc <CHifDecoder::GetStatus()+0xcc>
  80:	e59d3004 	ldr	r3, [sp, #4]
  84:	e2888001 	add	r8, r8, #1
  88:	e1530008 	cmp	r3, r8
  8c:	e2844008 	add	r4, r4, #8
  90:	9a000097 	bls	2f4 <CHifDecoder::GetStatus()+0x2f4>
  94:	e5542008 	ldrb	r2, [r4, #-8]
  98:	e2823010 	add	r3, r2, #16
  9c:	e20330ff 	and	r3, r3, #255	; 0xff
  a0:	e3530007 	cmp	r3, #7
  a4:	8a000002 	bhi	b4 <CHifDecoder::GetStatus()+0xb4>
  a8:	e1a03337 	lsr	r3, r7, r3
  ac:	e3130001 	tst	r3, #1
  b0:	1a000049 	bne	1dc <CHifDecoder::GetStatus()+0x1dc>
  b4:	e35200f3 	cmp	r2, #243	; 0xf3
  b8:	9affffee 	bls	78 <CHifDecoder::GetStatus()+0x78>
  bc:	e282200b 	add	r2, r2, #11
  c0:	e20220ff 	and	r2, r2, #255	; 0xff
  c4:	e3520002 	cmp	r2, #2
  c8:	8affffec 	bhi	80 <CHifDecoder::GetStatus()+0x80>
  cc:	e5962024 	ldr	r2, [r6, #36]	; 0x24
  d0:	e2869020 	add	r9, r6, #32
  d4:	e3520000 	cmp	r2, #0
  d8:	0affffe8 	beq	80 <CHifDecoder::GetStatus()+0x80>
  dc:	e1a0e009 	mov	lr, r9
  e0:	e1a03002 	mov	r3, r2
  e4:	e554c002 	ldrb	r12, [r4, #-2]
  e8:	e5d31010 	ldrb	r1, [r3, #16]
  ec:	e5930008 	ldr	r0, [r3, #8]
  f0:	e151000c 	cmp	r1, r12
  f4:	e593100c 	ldr	r1, [r3, #12]
  f8:	21a0e003 	movcs	lr, r3
  fc:	31a03001 	movcc	r3, r1
 100:	21a03000 	movcs	r3, r0
 104:	e3530000 	cmp	r3, #0
 108:	1afffff6 	bne	e8 <CHifDecoder::GetStatus()+0xe8>
 10c:	e15e0009 	cmp	lr, r9
 110:	0affffda 	beq	80 <CHifDecoder::GetStatus()+0x80>
 114:	e5de3010 	ldrb	r3, [lr, #16]
 118:	e153000c 	cmp	r3, r12
 11c:	8affffd7 	bhi	80 <CHifDecoder::GetStatus()+0x80>
 120:	e1a01009 	mov	r1, r9
 124:	e5d23010 	ldrb	r3, [r2, #16]
 128:	e592e008 	ldr	lr, [r2, #8]
 12c:	e153000c 	cmp	r3, r12
 130:	e592300c 	ldr	r3, [r2, #12]
 134:	21a01002 	movcs	r1, r2
 138:	31a02003 	movcc	r2, r3
 13c:	21a0200e 	movcs	r2, lr
 140:	e3520000 	cmp	r2, #0
 144:	1afffff6 	bne	124 <CHifDecoder::GetStatus()+0x124>
 148:	e1590001 	cmp	r9, r1
 14c:	0a000002 	beq	15c <CHifDecoder::GetStatus()+0x15c>
 150:	e5d13010 	ldrb	r3, [r1, #16]
 154:	e153000c 	cmp	r3, r12
 158:	9a000006 	bls	178 <CHifDecoder::GetStatus()+0x178>
 15c:	e286001c 	add	r0, r6, #28
 160:	e2443002 	sub	r3, r4, #2
 164:	e1a0200d 	mov	r2, sp
 168:	e58d3000 	str	r3, [sp]
 16c:	ebfffffe 	bl	0 <CHifDecoder::GetStatus()>
 170:	e1a01000 	mov	r1, r0
 174:	e5956000 	ldr	r6, [r5]
 178:	e5910014 	ldr	r0, [r1, #20]
 17c:	e3a02008 	mov	r2, #8
 180:	e2441008 	sub	r1, r4, #8
 184:	e2800006 	add	r0, r0, #6
 188:	ebfffffe 	bl	0 <memcpy>
 18c:	eaffffbb 	b	80 <CHifDecoder::GetStatus()+0x80>
 190:	e35300f6 	cmp	r3, #246	; 0xf6
 194:	1affffa7 	bne	38 <CHifDecoder::GetStatus()+0x38>
 198:	e3a01010 	mov	r1, #16
 19c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 1a0:	e1a00004 	mov	r0, r4
 1a4:	ebfffffe 	bl	0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)>
 1a8:	e1a03000 	mov	r3, r0
 1ac:	e5957000 	ldr	r7, [r5]
 1b0:	e1a00004 	mov	r0, r4
 1b4:	e2871020 	add	r1, r7, #32
 1b8:	e1a04003 	mov	r4, r3
 1bc:	ebfffffe 	bl	0 <std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)>
 1c0:	e3a01018 	mov	r1, #24
 1c4:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 1c8:	e5973030 	ldr	r3, [r7, #48]	; 0x30
 1cc:	e5956000 	ldr	r6, [r5]
 1d0:	e2433001 	sub	r3, r3, #1
 1d4:	e5873030 	str	r3, [r7, #48]	; 0x30
 1d8:	eaffff8d 	b	14 <CHifDecoder::GetStatus()+0x14>
 1dc:	e5963024 	ldr	r3, [r6, #36]	; 0x24
 1e0:	e2869020 	add	r9, r6, #32
 1e4:	e3530000 	cmp	r3, #0
 1e8:	0a00000f 	beq	22c <CHifDecoder::GetStatus()+0x22c>
 1ec:	e1a0e009 	mov	lr, r9
 1f0:	e554c002 	ldrb	r12, [r4, #-2]
 1f4:	e5d31010 	ldrb	r1, [r3, #16]
 1f8:	e5930008 	ldr	r0, [r3, #8]
 1fc:	e151000c 	cmp	r1, r12
 200:	e593100c 	ldr	r1, [r3, #12]
 204:	21a0e003 	movcs	lr, r3
 208:	31a03001 	movcc	r3, r1
 20c:	21a03000 	movcs	r3, r0
 210:	e3530000 	cmp	r3, #0
 214:	1afffff6 	bne	1f4 <CHifDecoder::GetStatus()+0x1f4>
 218:	e15e0009 	cmp	lr, r9
 21c:	0a000002 	beq	22c <CHifDecoder::GetStatus()+0x22c>
 220:	e5de3010 	ldrb	r3, [lr, #16]
 224:	e153000c 	cmp	r3, r12
 228:	9affffa1 	bls	b4 <CHifDecoder::GetStatus()+0xb4>
 22c:	e3a00010 	mov	r0, #16
 230:	ebfffffe 	bl	0 <operator new(unsigned int)>
 234:	e1a09000 	mov	r9, r0
 238:	e3a02008 	mov	r2, #8
 23c:	e2441008 	sub	r1, r4, #8
 240:	e2800006 	add	r0, r0, #6
 244:	ebfffffe 	bl	0 <memcpy>
 248:	e5956000 	ldr	r6, [r5]
 24c:	e5542008 	ldrb	r2, [r4, #-8]
 250:	e5963018 	ldr	r3, [r6, #24]
 254:	e35200f0 	cmp	r2, #240	; 0xf0
 258:	e2831001 	add	r1, r3, #1
 25c:	e5861018 	str	r1, [r6, #24]
 260:	e5893000 	str	r3, [r9]
 264:	03a03002 	moveq	r3, #2
 268:	0a000002 	beq	278 <CHifDecoder::GetStatus()+0x278>
 26c:	e24210f4 	sub	r1, r2, #244	; 0xf4
 270:	e2713000 	rsbs	r3, r1, #0
 274:	e0a33001 	adc	r3, r3, r1
 278:	e5c93004 	strb	r3, [r9, #4]
 27c:	e5963024 	ldr	r3, [r6, #36]	; 0x24
 280:	e286a020 	add	r10, r6, #32
 284:	e3530000 	cmp	r3, #0
 288:	e1a0100a 	mov	r1, r10
 28c:	0a00000e 	beq	2cc <CHifDecoder::GetStatus()+0x2cc>
 290:	e5540002 	ldrb	r0, [r4, #-2]
 294:	e5d3c010 	ldrb	r12, [r3, #16]
 298:	e593e008 	ldr	lr, [r3, #8]
 29c:	e15c0000 	cmp	r12, r0
 2a0:	e593c00c 	ldr	r12, [r3, #12]
 2a4:	21a01003 	movcs	r1, r3
 2a8:	31a0300c 	movcc	r3, r12
 2ac:	21a0300e 	movcs	r3, lr
 2b0:	e3530000 	cmp	r3, #0
 2b4:	1afffff6 	bne	294 <CHifDecoder::GetStatus()+0x294>
 2b8:	e151000a 	cmp	r1, r10
 2bc:	0a000002 	beq	2cc <CHifDecoder::GetStatus()+0x2cc>
 2c0:	e5d13010 	ldrb	r3, [r1, #16]
 2c4:	e1530000 	cmp	r3, r0
 2c8:	9a000007 	bls	2ec <CHifDecoder::GetStatus()+0x2ec>
 2cc:	e1a0200d 	mov	r2, sp
 2d0:	e286001c 	add	r0, r6, #28
 2d4:	e2443002 	sub	r3, r4, #2
 2d8:	e58d3000 	str	r3, [sp]
 2dc:	ebfffffe 	bl	0 <CHifDecoder::GetStatus()>
 2e0:	e1a01000 	mov	r1, r0
 2e4:	e5542008 	ldrb	r2, [r4, #-8]
 2e8:	e5956000 	ldr	r6, [r5]
 2ec:	e5819014 	str	r9, [r1, #20]
 2f0:	eaffff6f 	b	b4 <CHifDecoder::GetStatus()+0xb4>
 2f4:	e286001c 	add	r0, r6, #28
 2f8:	e28ddf42 	add	sp, sp, #264	; 0x108
 2fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 300:	e5950000 	ldr	r0, [r5]
 304:	e280001c 	add	r0, r0, #28
 308:	e28ddf42 	add	sp, sp, #264	; 0x108
 30c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

huffman.o:     file format elf32-littlearm


Disassembly of section .text._ZN4Pipe14CMemBufferPipe6vOnPopERh:

00000000 <Pipe::CMemBufferPipe::vOnPop(unsigned char&)>:
   0:	e590c00c 	ldr	r12, [r0, #12]
   4:	e5903010 	ldr	r3, [r0, #16]
   8:	e5902008 	ldr	r2, [r0, #8]
   c:	e043300c 	sub	r3, r3, r12
  10:	e1520003 	cmp	r2, r3
  14:	37dc3002 	ldrbcc	r3, [r12, r2]
  18:	33a00001 	movcc	r0, #1
  1c:	35c13000 	strbcc	r3, [r1]
  20:	23a00000 	movcs	r0, #0
  24:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZL14compare_branchP6BranchS0_:

00000000 <compare_branch(Branch*, Branch*)>:
   0:	e5900004 	ldr	r0, [r0, #4]
   4:	e5913004 	ldr	r3, [r1, #4]
   8:	e1500003 	cmp	r0, r3
   c:	23a00000 	movcs	r0, #0
  10:	33a00001 	movcc	r0, #1
  14:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe14CMemBufferPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED2Ev:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::~_Sp_counted_ptr_inplace()>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe14CMemBufferPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::_M_dispose()>:
   0:	e590300c 	ldr	r3, [r0, #12]
   4:	e280000c 	add	r0, r0, #12
   8:	e5933008 	ldr	r3, [r3, #8]
   c:	e1a0f003 	mov	pc, r3

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe9CNullPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED2Ev:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::~_Sp_counted_ptr_inplace()>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe9CNullPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::_M_dispose()>:
   0:	e590300c 	ldr	r3, [r0, #12]
   4:	e280000c 	add	r0, r0, #12
   8:	e5933008 	ldr	r3, [r3, #8]
   c:	e1a0f003 	mov	pc, r3

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe9CNullPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::~_Sp_counted_ptr_inplace()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e3a01018 	mov	r1, #24
   c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  10:	e1a00004 	mov	r0, r4
  14:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe14CMemBufferPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::~_Sp_counted_ptr_inplace()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e3a01024 	mov	r1, #36	; 0x24
   c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  10:	e1a00004 	mov	r0, r4
  14:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe9CNullPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)>:
   0:	e59f3028 	ldr	r3, [pc, #40]	; 30 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x30>
   4:	e92d4010 	push	{r4, lr}
   8:	e1510003 	cmp	r1, r3
   c:	e280400c 	add	r4, r0, #12
  10:	0a000004 	beq	28 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x28>
  14:	e1a00001 	mov	r0, r1
  18:	e59f1014 	ldr	r1, [pc, #20]	; 34 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x34>
  1c:	ebfffffe 	bl	0 <std::type_info::operator==(std::type_info const&) const>
  20:	e3500000 	cmp	r0, #0
  24:	03a04000 	moveq	r4, #0
  28:	e1a00004 	mov	r0, r4
  2c:	e8bd8010 	pop	{r4, pc}
	...

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe14CMemBufferPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)>:
   0:	e59f3028 	ldr	r3, [pc, #40]	; 30 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x30>
   4:	e92d4010 	push	{r4, lr}
   8:	e1510003 	cmp	r1, r3
   c:	e280400c 	add	r4, r0, #12
  10:	0a000004 	beq	28 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x28>
  14:	e1a00001 	mov	r0, r1
  18:	e59f1014 	ldr	r1, [pc, #20]	; 34 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x34>
  1c:	ebfffffe 	bl	0 <std::type_info::operator==(std::type_info const&) const>
  20:	e3500000 	cmp	r0, #0
  24:	03a04000 	moveq	r4, #0
  28:	e1a00004 	mov	r0, r4
  2c:	e8bd8010 	pop	{r4, pc}
	...

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe14CMemBufferPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::_M_destroy()>:
   0:	e3a01024 	mov	r1, #36	; 0x24
   4:	eafffffe 	b	0 <operator delete(void*, unsigned int)>

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe9CNullPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::_M_destroy()>:
   0:	e3a01018 	mov	r1, #24
   4:	eafffffe 	b	0 <operator delete(void*, unsigned int)>

Disassembly of section .text._ZN4Pipe14CMemBufferPipeD2Ev:

00000000 <Pipe::CMemBufferPipe::~CMemBufferPipe()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e590000c 	ldr	r0, [r0, #12]
   c:	e59f301c 	ldr	r3, [pc, #28]	; 30 <Pipe::CMemBufferPipe::~CMemBufferPipe()+0x30>
  10:	e3500000 	cmp	r0, #0
  14:	e5843000 	str	r3, [r4]
  18:	0a000002 	beq	28 <Pipe::CMemBufferPipe::~CMemBufferPipe()+0x28>
  1c:	e5941014 	ldr	r1, [r4, #20]
  20:	e0411000 	sub	r1, r1, r0
  24:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  28:	e1a00004 	mov	r0, r4
  2c:	e8bd8010 	pop	{r4, pc}
  30:	00000008 	.word	0x00000008

Disassembly of section .text._ZN4Pipe14CMemBufferPipeD0Ev:

00000000 <Pipe::CMemBufferPipe::~CMemBufferPipe()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e590000c 	ldr	r0, [r0, #12]
   c:	e59f3028 	ldr	r3, [pc, #40]	; 3c <Pipe::CMemBufferPipe::~CMemBufferPipe()+0x3c>
  10:	e3500000 	cmp	r0, #0
  14:	e5843000 	str	r3, [r4]
  18:	0a000002 	beq	28 <Pipe::CMemBufferPipe::~CMemBufferPipe()+0x28>
  1c:	e5941014 	ldr	r1, [r4, #20]
  20:	e0411000 	sub	r1, r1, r0
  24:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  28:	e1a00004 	mov	r0, r4
  2c:	e3a01018 	mov	r1, #24
  30:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  34:	e1a00004 	mov	r0, r4
  38:	e8bd8010 	pop	{r4, pc}
  3c:	00000008 	.word	0x00000008

Disassembly of section .text._ZN11SerialBytes5SetInESt10shared_ptrIN4Pipe5CPipeEE:

00000000 <SerialBytes::SetIn(std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e8910048 	ldm	r1, {r3, r6}
   8:	e5905004 	ldr	r5, [r0, #4]
   c:	e5803000 	str	r3, [r0]
  10:	e1560005 	cmp	r6, r5
  14:	0a00001b 	beq	88 <SerialBytes::SetIn(std::shared_ptr<Pipe::CPipe>)+0x88>
  18:	e3560000 	cmp	r6, #0
  1c:	15963004 	ldrne	r3, [r6, #4]
  20:	e1a04000 	mov	r4, r0
  24:	12833001 	addne	r3, r3, #1
  28:	15863004 	strne	r3, [r6, #4]
  2c:	e3550000 	cmp	r5, #0
  30:	0a000013 	beq	84 <SerialBytes::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  34:	e5953004 	ldr	r3, [r5, #4]
  38:	e2433001 	sub	r3, r3, #1
  3c:	e3530000 	cmp	r3, #0
  40:	e5853004 	str	r3, [r5, #4]
  44:	1a00000e 	bne	84 <SerialBytes::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  48:	e5953000 	ldr	r3, [r5]
  4c:	e1a00005 	mov	r0, r5
  50:	e5933008 	ldr	r3, [r3, #8]
  54:	e1a0e00f 	mov	lr, pc
  58:	e1a0f003 	mov	pc, r3
  5c:	e5953008 	ldr	r3, [r5, #8]
  60:	e2433001 	sub	r3, r3, #1
  64:	e3530000 	cmp	r3, #0
  68:	e5853008 	str	r3, [r5, #8]
  6c:	1a000004 	bne	84 <SerialBytes::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  70:	e5953000 	ldr	r3, [r5]
  74:	e1a00005 	mov	r0, r5
  78:	e593300c 	ldr	r3, [r3, #12]
  7c:	e1a0e00f 	mov	lr, pc
  80:	e1a0f003 	mov	pc, r3
  84:	e5846004 	str	r6, [r4, #4]
  88:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN11SerialBytes6SetOutESt10shared_ptrIN4Pipe5CPipeEE:

00000000 <SerialBytes::SetOut(std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e8910048 	ldm	r1, {r3, r6}
   8:	e590500c 	ldr	r5, [r0, #12]
   c:	e5803008 	str	r3, [r0, #8]
  10:	e1560005 	cmp	r6, r5
  14:	0a00001b 	beq	88 <SerialBytes::SetOut(std::shared_ptr<Pipe::CPipe>)+0x88>
  18:	e3560000 	cmp	r6, #0
  1c:	15963004 	ldrne	r3, [r6, #4]
  20:	e1a04000 	mov	r4, r0
  24:	12833001 	addne	r3, r3, #1
  28:	15863004 	strne	r3, [r6, #4]
  2c:	e3550000 	cmp	r5, #0
  30:	0a000013 	beq	84 <SerialBytes::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  34:	e5953004 	ldr	r3, [r5, #4]
  38:	e2433001 	sub	r3, r3, #1
  3c:	e3530000 	cmp	r3, #0
  40:	e5853004 	str	r3, [r5, #4]
  44:	1a00000e 	bne	84 <SerialBytes::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  48:	e5953000 	ldr	r3, [r5]
  4c:	e1a00005 	mov	r0, r5
  50:	e5933008 	ldr	r3, [r3, #8]
  54:	e1a0e00f 	mov	lr, pc
  58:	e1a0f003 	mov	pc, r3
  5c:	e5953008 	ldr	r3, [r5, #8]
  60:	e2433001 	sub	r3, r3, #1
  64:	e3530000 	cmp	r3, #0
  68:	e5853008 	str	r3, [r5, #8]
  6c:	1a000004 	bne	84 <SerialBytes::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  70:	e5953000 	ldr	r3, [r5]
  74:	e1a00005 	mov	r0, r5
  78:	e593300c 	ldr	r3, [r3, #12]
  7c:	e1a0e00f 	mov	lr, pc
  80:	e1a0f003 	mov	pc, r3
  84:	e584600c 	str	r6, [r4, #12]
  88:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN11SerialBytes8PopBitsNEh:

00000000 <SerialBytes::PopBitsN(unsigned char)>:
   0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   4:	e2518000 	subs	r8, r1, #0
   8:	0a000021 	beq	94 <SerialBytes::PopBitsN(unsigned char)+0x94>
   c:	e3a04000 	mov	r4, #0
  10:	e1a05000 	mov	r5, r0
  14:	e1a06004 	mov	r6, r4
  18:	e5903014 	ldr	r3, [r0, #20]
  1c:	e2809024 	add	r9, r0, #36	; 0x24
  20:	e3130007 	tst	r3, #7
  24:	e1a06086 	lsl	r6, r6, #1
  28:	1a00000d 	bne	64 <SerialBytes::PopBitsN(unsigned char)+0x64>
  2c:	e5957000 	ldr	r7, [r5]
  30:	e3570000 	cmp	r7, #0
  34:	0a00000a 	beq	64 <SerialBytes::PopBitsN(unsigned char)+0x64>
  38:	e5973000 	ldr	r3, [r7]
  3c:	e1a01009 	mov	r1, r9
  40:	e5933004 	ldr	r3, [r3, #4]
  44:	e1a00007 	mov	r0, r7
  48:	e1a0e00f 	mov	lr, pc
  4c:	e1a0f003 	mov	pc, r3
  50:	e3500000 	cmp	r0, #0
  54:	15973008 	ldrne	r3, [r7, #8]
  58:	12833001 	addne	r3, r3, #1
  5c:	15873008 	strne	r3, [r7, #8]
  60:	e5953014 	ldr	r3, [r5, #20]
  64:	e5d52024 	ldrb	r2, [r5, #36]	; 0x24
  68:	e2844001 	add	r4, r4, #1
  6c:	e20440ff 	and	r4, r4, #255	; 0xff
  70:	e2833001 	add	r3, r3, #1
  74:	e1a0c082 	lsl	r12, r2, #1
  78:	e1580004 	cmp	r8, r4
  7c:	e5853014 	str	r3, [r5, #20]
  80:	e5c5c024 	strb	r12, [r5, #36]	; 0x24
  84:	e18663a2 	orr	r6, r6, r2, lsr #7
  88:	1affffe4 	bne	20 <SerialBytes::PopBitsN(unsigned char)+0x20>
  8c:	e1a00006 	mov	r0, r6
  90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  94:	e1a06008 	mov	r6, r8
  98:	e1a00006 	mov	r0, r6
  9c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

Disassembly of section .text._ZN11SerialBytes9PopBitsU8Ev:

00000000 <SerialBytes::PopBitsU8()>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e3a04008 	mov	r4, #8
   8:	e3a06000 	mov	r6, #0
   c:	e1a05000 	mov	r5, r0
  10:	e5903014 	ldr	r3, [r0, #20]
  14:	e2808024 	add	r8, r0, #36	; 0x24
  18:	e3130007 	tst	r3, #7
  1c:	e1a06086 	lsl	r6, r6, #1
  20:	1a00000d 	bne	5c <SerialBytes::PopBitsU8()+0x5c>
  24:	e5957000 	ldr	r7, [r5]
  28:	e3570000 	cmp	r7, #0
  2c:	0a00000a 	beq	5c <SerialBytes::PopBitsU8()+0x5c>
  30:	e5973000 	ldr	r3, [r7]
  34:	e1a01008 	mov	r1, r8
  38:	e5933004 	ldr	r3, [r3, #4]
  3c:	e1a00007 	mov	r0, r7
  40:	e1a0e00f 	mov	lr, pc
  44:	e1a0f003 	mov	pc, r3
  48:	e3500000 	cmp	r0, #0
  4c:	15973008 	ldrne	r3, [r7, #8]
  50:	12833001 	addne	r3, r3, #1
  54:	15873008 	strne	r3, [r7, #8]
  58:	e5953014 	ldr	r3, [r5, #20]
  5c:	e5d5c024 	ldrb	r12, [r5, #36]	; 0x24
  60:	e244e001 	sub	lr, r4, #1
  64:	e2833001 	add	r3, r3, #1
  68:	e1a0208c 	lsl	r2, r12, #1
  6c:	e21e40ff 	ands	r4, lr, #255	; 0xff
  70:	e5853014 	str	r3, [r5, #20]
  74:	e5c52024 	strb	r2, [r5, #36]	; 0x24
  78:	e18663ac 	orr	r6, r6, r12, lsr #7
  7c:	1affffe5 	bne	18 <SerialBytes::PopBitsU8()+0x18>
  80:	e20600ff 	and	r0, r6, #255	; 0xff
  84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

Disassembly of section .text._ZN11SerialBytesC2Ev:

00000000 <SerialBytes::SerialBytes()>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e3a00018 	mov	r0, #24
   c:	ebfffffe 	bl	0 <operator new(unsigned int)>
  10:	e3a06001 	mov	r6, #1
  14:	e1a08000 	mov	r8, r0
  18:	e1a05000 	mov	r5, r0
  1c:	e59f70c8 	ldr	r7, [pc, #200]	; ec <SerialBytes::SerialBytes()+0xec>
  20:	e5806004 	str	r6, [r0, #4]
  24:	e5806008 	str	r6, [r0, #8]
  28:	e488700c 	str	r7, [r8], #12
  2c:	e1a00008 	mov	r0, r8
  30:	ebfffffe 	bl	0 <Pipe::CNullPipe::CNullPipe()>
  34:	e5845004 	str	r5, [r4, #4]
  38:	e3a00018 	mov	r0, #24
  3c:	e5848000 	str	r8, [r4]
  40:	ebfffffe 	bl	0 <operator new(unsigned int)>
  44:	e5806004 	str	r6, [r0, #4]
  48:	e5806008 	str	r6, [r0, #8]
  4c:	e1a06000 	mov	r6, r0
  50:	e486700c 	str	r7, [r6], #12
  54:	e1a05000 	mov	r5, r0
  58:	e1a00006 	mov	r0, r6
  5c:	ebfffffe 	bl	0 <Pipe::CNullPipe::CNullPipe()>
  60:	e3a03000 	mov	r3, #0
  64:	e5846008 	str	r6, [r4, #8]
  68:	e584500c 	str	r5, [r4, #12]
  6c:	e3a00c02 	mov	r0, #512	; 0x200
  70:	e1c431b0 	strh	r3, [r4, #16]
  74:	e5843014 	str	r3, [r4, #20]
  78:	e5843018 	str	r3, [r4, #24]
  7c:	e584301c 	str	r3, [r4, #28]
  80:	e5843020 	str	r3, [r4, #32]
  84:	e5c43024 	strb	r3, [r4, #36]	; 0x24
  88:	ebfffffe 	bl	0 <operator new(unsigned int)>
  8c:	e5946018 	ldr	r6, [r4, #24]
  90:	e594201c 	ldr	r2, [r4, #28]
  94:	e1a05000 	mov	r5, r0
  98:	e0422006 	sub	r2, r2, r6
  9c:	e3520000 	cmp	r2, #0
  a0:	ca000007 	bgt	c4 <SerialBytes::SerialBytes()+0xc4>
  a4:	e3560000 	cmp	r6, #0
  a8:	1a00000c 	bne	e0 <SerialBytes::SerialBytes()+0xe0>
  ac:	e2853c02 	add	r3, r5, #512	; 0x200
  b0:	e1a00004 	mov	r0, r4
  b4:	e5845018 	str	r5, [r4, #24]
  b8:	e584501c 	str	r5, [r4, #28]
  bc:	e5843020 	str	r3, [r4, #32]
  c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  c4:	e1a01006 	mov	r1, r6
  c8:	ebfffffe 	bl	0 <memmove>
  cc:	e5941020 	ldr	r1, [r4, #32]
  d0:	e0411006 	sub	r1, r1, r6
  d4:	e1a00006 	mov	r0, r6
  d8:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  dc:	eafffff2 	b	ac <SerialBytes::SerialBytes()+0xac>
  e0:	e5941020 	ldr	r1, [r4, #32]
  e4:	e0411006 	sub	r1, r1, r6
  e8:	eafffff9 	b	d4 <SerialBytes::SerialBytes()+0xd4>
  ec:	00000008 	.word	0x00000008

Disassembly of section .text._ZN7WorkEncD2Ev:

00000000 <WorkEnc::~WorkEnc()>:
   0:	e3a02000 	mov	r2, #0
   4:	e92d4070 	push	{r4, r5, r6, lr}
   8:	e2805901 	add	r5, r0, #16384	; 0x4000
   c:	e595440c 	ldr	r4, [r5, #1036]	; 0x40c
  10:	e59f3068 	ldr	r3, [pc, #104]	; 80 <WorkEnc::~WorkEnc()+0x80>
  14:	e1540002 	cmp	r4, r2
  18:	e1a06000 	mov	r6, r0
  1c:	e5832000 	str	r2, [r3]
  20:	0a000005 	beq	3c <WorkEnc::~WorkEnc()+0x3c>
  24:	e1a00004 	mov	r0, r4
  28:	e5944000 	ldr	r4, [r4]
  2c:	e3a01014 	mov	r1, #20
  30:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  34:	e3540000 	cmp	r4, #0
  38:	1afffff9 	bne	24 <WorkEnc::~WorkEnc()+0x24>
  3c:	e5952408 	ldr	r2, [r5, #1032]	; 0x408
  40:	e3a01000 	mov	r1, #0
  44:	e1a02102 	lsl	r2, r2, #2
  48:	e5950404 	ldr	r0, [r5, #1028]	; 0x404
  4c:	ebfffffe 	bl	0 <memset>
  50:	e3a02000 	mov	r2, #0
  54:	e5950404 	ldr	r0, [r5, #1028]	; 0x404
  58:	e2863b11 	add	r3, r6, #17408	; 0x4400
  5c:	e283301c 	add	r3, r3, #28
  60:	e1500003 	cmp	r0, r3
  64:	e5951408 	ldr	r1, [r5, #1032]	; 0x408
  68:	e5852410 	str	r2, [r5, #1040]	; 0x410
  6c:	e585240c 	str	r2, [r5, #1036]	; 0x40c
  70:	11a01101 	lslne	r1, r1, #2
  74:	1bfffffe 	blne	0 <operator delete(void*, unsigned int)>
  78:	e1a00006 	mov	r0, r6
  7c:	e8bd8070 	pop	{r4, r5, r6, pc}
  80:	00000000 	.word	0x00000000

Disassembly of section .text._ZNK11HuffmanCode3GetEv:

00000000 <HuffmanCode::Get() const>:
   0:	e3e01000 	mvn	r1, #0
   4:	e5d02000 	ldrb	r2, [r0]
   8:	e5900004 	ldr	r0, [r0, #4]
   c:	e1c00211 	bic	r0, r0, r1, lsl r2
  10:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN11HuffmanCode8PushLeftEv:

00000000 <HuffmanCode::PushLeft()>:
   0:	e5902004 	ldr	r2, [r0, #4]
   4:	e5d03000 	ldrb	r3, [r0]
   8:	e1a02082 	lsl	r2, r2, #1
   c:	e2833001 	add	r3, r3, #1
  10:	e5802004 	str	r2, [r0, #4]
  14:	e5c03000 	strb	r3, [r0]
  18:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN11HuffmanCode9PushRightEv:

00000000 <HuffmanCode::PushRight()>:
   0:	e5903004 	ldr	r3, [r0, #4]
   4:	e5d02000 	ldrb	r2, [r0]
   8:	e1a03083 	lsl	r3, r3, #1
   c:	e3833001 	orr	r3, r3, #1
  10:	e2822001 	add	r2, r2, #1
  14:	e5803004 	str	r3, [r0, #4]
  18:	e5c02000 	strb	r2, [r0]
  1c:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZNK11HuffmanCode5ToStrEv:

00000000 <HuffmanCode::ToStr() const>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e3a06000 	mov	r6, #0
   8:	e5d17000 	ldrb	r7, [r1]
   c:	e1a05000 	mov	r5, r0
  10:	e1570006 	cmp	r7, r6
  14:	e5c06000 	strb	r6, [r0]
  18:	0a00000e 	beq	58 <HuffmanCode::ToStr() const+0x58>
  1c:	e1a08001 	mov	r8, r1
  20:	e2477001 	sub	r7, r7, #1
  24:	e1a00005 	mov	r0, r5
  28:	e5984004 	ldr	r4, [r8, #4]
  2c:	ebfffffe 	bl	0 <cstr_strlen(char const*)>
  30:	e1a04734 	lsr	r4, r4, r7
  34:	e2044001 	and	r4, r4, #1
  38:	e350001e 	cmp	r0, #30
  3c:	e2844030 	add	r4, r4, #48	; 0x30
  40:	e2477001 	sub	r7, r7, #1
  44:	97c54000 	strbls	r4, [r5, r0]
  48:	92800001 	addls	r0, r0, #1
  4c:	e3770001 	cmn	r7, #1
  50:	e7c56000 	strb	r6, [r5, r0]
  54:	1afffff2 	bne	24 <HuffmanCode::ToStr() const+0x24>
  58:	e1a00005 	mov	r0, r5
  5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

Disassembly of section .text._ZN7Huffman15CHuffmanEncoder5SetInESt10shared_ptrIN4Pipe5CPipeEE:

00000000 <Huffman::CHuffmanEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e8910048 	ldm	r1, {r3, r6}
   8:	e5905004 	ldr	r5, [r0, #4]
   c:	e5803000 	str	r3, [r0]
  10:	e1560005 	cmp	r6, r5
  14:	0a00001b 	beq	88 <Huffman::CHuffmanEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x88>
  18:	e3560000 	cmp	r6, #0
  1c:	15963004 	ldrne	r3, [r6, #4]
  20:	e1a04000 	mov	r4, r0
  24:	12833001 	addne	r3, r3, #1
  28:	15863004 	strne	r3, [r6, #4]
  2c:	e3550000 	cmp	r5, #0
  30:	0a000013 	beq	84 <Huffman::CHuffmanEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  34:	e5953004 	ldr	r3, [r5, #4]
  38:	e2433001 	sub	r3, r3, #1
  3c:	e3530000 	cmp	r3, #0
  40:	e5853004 	str	r3, [r5, #4]
  44:	1a00000e 	bne	84 <Huffman::CHuffmanEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  48:	e5953000 	ldr	r3, [r5]
  4c:	e1a00005 	mov	r0, r5
  50:	e5933008 	ldr	r3, [r3, #8]
  54:	e1a0e00f 	mov	lr, pc
  58:	e1a0f003 	mov	pc, r3
  5c:	e5953008 	ldr	r3, [r5, #8]
  60:	e2433001 	sub	r3, r3, #1
  64:	e3530000 	cmp	r3, #0
  68:	e5853008 	str	r3, [r5, #8]
  6c:	1a000004 	bne	84 <Huffman::CHuffmanEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  70:	e5953000 	ldr	r3, [r5]
  74:	e1a00005 	mov	r0, r5
  78:	e593300c 	ldr	r3, [r3, #12]
  7c:	e1a0e00f 	mov	lr, pc
  80:	e1a0f003 	mov	pc, r3
  84:	e5846004 	str	r6, [r4, #4]
  88:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN7Huffman15CHuffmanEncoder6SetOutESt10shared_ptrIN4Pipe5CPipeEE:

00000000 <Huffman::CHuffmanEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e8910048 	ldm	r1, {r3, r6}
   8:	e590500c 	ldr	r5, [r0, #12]
   c:	e5803008 	str	r3, [r0, #8]
  10:	e1560005 	cmp	r6, r5
  14:	0a00001b 	beq	88 <Huffman::CHuffmanEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x88>
  18:	e3560000 	cmp	r6, #0
  1c:	15963004 	ldrne	r3, [r6, #4]
  20:	e1a04000 	mov	r4, r0
  24:	12833001 	addne	r3, r3, #1
  28:	15863004 	strne	r3, [r6, #4]
  2c:	e3550000 	cmp	r5, #0
  30:	0a000013 	beq	84 <Huffman::CHuffmanEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  34:	e5953004 	ldr	r3, [r5, #4]
  38:	e2433001 	sub	r3, r3, #1
  3c:	e3530000 	cmp	r3, #0
  40:	e5853004 	str	r3, [r5, #4]
  44:	1a00000e 	bne	84 <Huffman::CHuffmanEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  48:	e5953000 	ldr	r3, [r5]
  4c:	e1a00005 	mov	r0, r5
  50:	e5933008 	ldr	r3, [r3, #8]
  54:	e1a0e00f 	mov	lr, pc
  58:	e1a0f003 	mov	pc, r3
  5c:	e5953008 	ldr	r3, [r5, #8]
  60:	e2433001 	sub	r3, r3, #1
  64:	e3530000 	cmp	r3, #0
  68:	e5853008 	str	r3, [r5, #8]
  6c:	1a000004 	bne	84 <Huffman::CHuffmanEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  70:	e5953000 	ldr	r3, [r5]
  74:	e1a00005 	mov	r0, r5
  78:	e593300c 	ldr	r3, [r3, #12]
  7c:	e1a0e00f 	mov	lr, pc
  80:	e1a0f003 	mov	pc, r3
  84:	e584600c 	str	r6, [r4, #12]
  88:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN7Huffman15CHuffmanEncoder7_OutputESt10shared_ptrIN4Pipe5CPipeEE:

00000000 <Huffman::CHuffmanEncoder::_Output(std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   4:	e1a07000 	mov	r7, r0
   8:	e1a06001 	mov	r6, r1
   c:	e24dd00c 	sub	sp, sp, #12
  10:	e5964000 	ldr	r4, [r6]
  14:	e28d1007 	add	r1, sp, #7
  18:	e5943000 	ldr	r3, [r4]
  1c:	e1a00004 	mov	r0, r4
  20:	e5933004 	ldr	r3, [r3, #4]
  24:	e1a0e00f 	mov	lr, pc
  28:	e1a0f003 	mov	pc, r3
  2c:	e3500000 	cmp	r0, #0
  30:	1a000001 	bne	3c <Huffman::CHuffmanEncoder::_Output(std::shared_ptr<Pipe::CPipe>)+0x3c>
  34:	e28dd00c 	add	sp, sp, #12
  38:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  3c:	e5975008 	ldr	r5, [r7, #8]
  40:	e5943008 	ldr	r3, [r4, #8]
  44:	e5952000 	ldr	r2, [r5]
  48:	e2833001 	add	r3, r3, #1
  4c:	e5922000 	ldr	r2, [r2]
  50:	e1a00005 	mov	r0, r5
  54:	e5dd1007 	ldrb	r1, [sp, #7]
  58:	e5843008 	str	r3, [r4, #8]
  5c:	e1a0e00f 	mov	lr, pc
  60:	e1a0f002 	mov	pc, r2
  64:	e3500000 	cmp	r0, #0
  68:	0affffe8 	beq	10 <Huffman::CHuffmanEncoder::_Output(std::shared_ptr<Pipe::CPipe>)+0x10>
  6c:	e5953004 	ldr	r3, [r5, #4]
  70:	e2833001 	add	r3, r3, #1
  74:	e5853004 	str	r3, [r5, #4]
  78:	eaffffe4 	b	10 <Huffman::CHuffmanEncoder::_Output(std::shared_ptr<Pipe::CPipe>)+0x10>

Disassembly of section .text._ZN7Huffman15CHuffmanDecoder13_DoDecodeFlatEv:

00000000 <Huffman::CHuffmanDecoder::_DoDecodeFlat()>:
   0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e3a02000 	mov	r2, #0
   c:	e5943000 	ldr	r3, [r4]
  10:	e24dd028 	sub	sp, sp, #40	; 0x28
  14:	e5832008 	str	r2, [r3, #8]
  18:	e1a0000d 	mov	r0, sp
  1c:	ebfffffe 	bl	0 <Huffman::CHuffmanDecoder::_DoDecodeFlat()>
  20:	e8940024 	ldm	r4, {r2, r5}
  24:	e3550000 	cmp	r5, #0
  28:	e59d6004 	ldr	r6, [sp, #4]
  2c:	0a000078 	beq	214 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x214>
  30:	e1550006 	cmp	r5, r6
  34:	e5953004 	ldr	r3, [r5, #4]
  38:	e58d2000 	str	r2, [sp]
  3c:	0a000006 	beq	5c <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x5c>
  40:	e2833002 	add	r3, r3, #2
  44:	e3560000 	cmp	r6, #0
  48:	e5853004 	str	r3, [r5, #4]
  4c:	058d5004 	streq	r5, [sp, #4]
  50:	1a000072 	bne	220 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x220>
  54:	e5953004 	ldr	r3, [r5, #4]
  58:	e2433001 	sub	r3, r3, #1
  5c:	e3530000 	cmp	r3, #0
  60:	e5853004 	str	r3, [r5, #4]
  64:	0a00004a 	beq	194 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x194>
  68:	e3a05008 	mov	r5, #8
  6c:	e3a02000 	mov	r2, #0
  70:	e59d3014 	ldr	r3, [sp, #20]
  74:	e3130007 	tst	r3, #7
  78:	e1a06082 	lsl	r6, r2, #1
  7c:	1a00000e 	bne	bc <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0xbc>
  80:	e59d7000 	ldr	r7, [sp]
  84:	e3570000 	cmp	r7, #0
  88:	0a00000b 	beq	bc <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0xbc>
  8c:	e5973000 	ldr	r3, [r7]
  90:	e1a00007 	mov	r0, r7
  94:	e5933004 	ldr	r3, [r3, #4]
  98:	e28d1024 	add	r1, sp, #36	; 0x24
  9c:	e1a0e00f 	mov	lr, pc
  a0:	e1a0f003 	mov	pc, r3
  a4:	e3500000 	cmp	r0, #0
  a8:	15972008 	ldrne	r2, [r7, #8]
  ac:	059d3014 	ldreq	r3, [sp, #20]
  b0:	12822001 	addne	r2, r2, #1
  b4:	159d3014 	ldrne	r3, [sp, #20]
  b8:	15872008 	strne	r2, [r7, #8]
  bc:	e5dd0024 	ldrb	r0, [sp, #36]	; 0x24
  c0:	e245c001 	sub	r12, r5, #1
  c4:	e1a01080 	lsl	r1, r0, #1
  c8:	e2833001 	add	r3, r3, #1
  cc:	e20110ff 	and	r1, r1, #255	; 0xff
  d0:	e21c50ff 	ands	r5, r12, #255	; 0xff
  d4:	e58d3014 	str	r3, [sp, #20]
  d8:	e5cd1024 	strb	r1, [sp, #36]	; 0x24
  dc:	e18623a0 	orr	r2, r6, r0, lsr #7
  e0:	1affffe3 	bne	74 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x74>
  e4:	e20220ff 	and	r2, r2, #255	; 0xff
  e8:	e3520077 	cmp	r2, #119	; 0x77
  ec:	13a05001 	movne	r5, #1
  f0:	0a000062 	beq	280 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x280>
  f4:	e59d0018 	ldr	r0, [sp, #24]
  f8:	e3500000 	cmp	r0, #0
  fc:	0a000002 	beq	10c <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x10c>
 100:	e59d1020 	ldr	r1, [sp, #32]
 104:	e0411000 	sub	r1, r1, r0
 108:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 10c:	e59d400c 	ldr	r4, [sp, #12]
 110:	e3540000 	cmp	r4, #0
 114:	0a000004 	beq	12c <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x12c>
 118:	e5943004 	ldr	r3, [r4, #4]
 11c:	e2433001 	sub	r3, r3, #1
 120:	e3530000 	cmp	r3, #0
 124:	e5843004 	str	r3, [r4, #4]
 128:	0a000029 	beq	1d4 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x1d4>
 12c:	e59d4004 	ldr	r4, [sp, #4]
 130:	e3540000 	cmp	r4, #0
 134:	0a000013 	beq	188 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x188>
 138:	e5943004 	ldr	r3, [r4, #4]
 13c:	e2433001 	sub	r3, r3, #1
 140:	e3530000 	cmp	r3, #0
 144:	e5843004 	str	r3, [r4, #4]
 148:	1a00000e 	bne	188 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x188>
 14c:	e5943000 	ldr	r3, [r4]
 150:	e1a00004 	mov	r0, r4
 154:	e5933008 	ldr	r3, [r3, #8]
 158:	e1a0e00f 	mov	lr, pc
 15c:	e1a0f003 	mov	pc, r3
 160:	e5943008 	ldr	r3, [r4, #8]
 164:	e2433001 	sub	r3, r3, #1
 168:	e3530000 	cmp	r3, #0
 16c:	e5843008 	str	r3, [r4, #8]
 170:	1a000004 	bne	188 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x188>
 174:	e5943000 	ldr	r3, [r4]
 178:	e1a00004 	mov	r0, r4
 17c:	e593300c 	ldr	r3, [r3, #12]
 180:	e1a0e00f 	mov	lr, pc
 184:	e1a0f003 	mov	pc, r3
 188:	e1a00005 	mov	r0, r5
 18c:	e28dd028 	add	sp, sp, #40	; 0x28
 190:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 194:	e5953000 	ldr	r3, [r5]
 198:	e1a00005 	mov	r0, r5
 19c:	e5933008 	ldr	r3, [r3, #8]
 1a0:	e1a0e00f 	mov	lr, pc
 1a4:	e1a0f003 	mov	pc, r3
 1a8:	e5953008 	ldr	r3, [r5, #8]
 1ac:	e2433001 	sub	r3, r3, #1
 1b0:	e3530000 	cmp	r3, #0
 1b4:	e5853008 	str	r3, [r5, #8]
 1b8:	1affffaa 	bne	68 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x68>
 1bc:	e5953000 	ldr	r3, [r5]
 1c0:	e1a00005 	mov	r0, r5
 1c4:	e593300c 	ldr	r3, [r3, #12]
 1c8:	e1a0e00f 	mov	lr, pc
 1cc:	e1a0f003 	mov	pc, r3
 1d0:	eaffffa4 	b	68 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x68>
 1d4:	e5943000 	ldr	r3, [r4]
 1d8:	e1a00004 	mov	r0, r4
 1dc:	e5933008 	ldr	r3, [r3, #8]
 1e0:	e1a0e00f 	mov	lr, pc
 1e4:	e1a0f003 	mov	pc, r3
 1e8:	e5943008 	ldr	r3, [r4, #8]
 1ec:	e2433001 	sub	r3, r3, #1
 1f0:	e3530000 	cmp	r3, #0
 1f4:	e5843008 	str	r3, [r4, #8]
 1f8:	1affffcb 	bne	12c <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x12c>
 1fc:	e5943000 	ldr	r3, [r4]
 200:	e1a00004 	mov	r0, r4
 204:	e593300c 	ldr	r3, [r3, #12]
 208:	e1a0e00f 	mov	lr, pc
 20c:	e1a0f003 	mov	pc, r3
 210:	eaffffc5 	b	12c <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x12c>
 214:	e3560000 	cmp	r6, #0
 218:	e58d2000 	str	r2, [sp]
 21c:	0affff91 	beq	68 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x68>
 220:	e5963004 	ldr	r3, [r6, #4]
 224:	e2433001 	sub	r3, r3, #1
 228:	e3530000 	cmp	r3, #0
 22c:	e5863004 	str	r3, [r6, #4]
 230:	1a00000e 	bne	270 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x270>
 234:	e5963000 	ldr	r3, [r6]
 238:	e1a00006 	mov	r0, r6
 23c:	e5933008 	ldr	r3, [r3, #8]
 240:	e1a0e00f 	mov	lr, pc
 244:	e1a0f003 	mov	pc, r3
 248:	e5963008 	ldr	r3, [r6, #8]
 24c:	e2433001 	sub	r3, r3, #1
 250:	e3530000 	cmp	r3, #0
 254:	e5863008 	str	r3, [r6, #8]
 258:	1a000004 	bne	270 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x270>
 25c:	e5963000 	ldr	r3, [r6]
 260:	e1a00006 	mov	r0, r6
 264:	e593300c 	ldr	r3, [r3, #12]
 268:	e1a0e00f 	mov	lr, pc
 26c:	e1a0f003 	mov	pc, r3
 270:	e3550000 	cmp	r5, #0
 274:	e58d5004 	str	r5, [sp, #4]
 278:	0affff7a 	beq	68 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x68>
 27c:	eaffff74 	b	54 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x54>
 280:	e3130007 	tst	r3, #7
 284:	0a00006c 	beq	43c <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x43c>
 288:	e1a02081 	lsl	r2, r1, #1
 28c:	e2833001 	add	r3, r3, #1
 290:	e1b013a1 	lsrs	r1, r1, #7
 294:	03a05002 	moveq	r5, #2
 298:	e58d3014 	str	r3, [sp, #20]
 29c:	e5cd2024 	strb	r2, [sp, #36]	; 0x24
 2a0:	0affff93 	beq	f4 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0xf4>
 2a4:	e3a05014 	mov	r5, #20
 2a8:	e3a06000 	mov	r6, #0
 2ac:	e3130007 	tst	r3, #7
 2b0:	e1a06086 	lsl	r6, r6, #1
 2b4:	1a00000d 	bne	2f0 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x2f0>
 2b8:	e59d7000 	ldr	r7, [sp]
 2bc:	e3570000 	cmp	r7, #0
 2c0:	0a00000a 	beq	2f0 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x2f0>
 2c4:	e5973000 	ldr	r3, [r7]
 2c8:	e1a00007 	mov	r0, r7
 2cc:	e5933004 	ldr	r3, [r3, #4]
 2d0:	e28d1024 	add	r1, sp, #36	; 0x24
 2d4:	e1a0e00f 	mov	lr, pc
 2d8:	e1a0f003 	mov	pc, r3
 2dc:	e3500000 	cmp	r0, #0
 2e0:	15973008 	ldrne	r3, [r7, #8]
 2e4:	12833001 	addne	r3, r3, #1
 2e8:	15873008 	strne	r3, [r7, #8]
 2ec:	e59d3014 	ldr	r3, [sp, #20]
 2f0:	e5dd2024 	ldrb	r2, [sp, #36]	; 0x24
 2f4:	e2451001 	sub	r1, r5, #1
 2f8:	e2833001 	add	r3, r3, #1
 2fc:	e1a00082 	lsl	r0, r2, #1
 300:	e21150ff 	ands	r5, r1, #255	; 0xff
 304:	e58d3014 	str	r3, [sp, #20]
 308:	e5cd0024 	strb	r0, [sp, #36]	; 0x24
 30c:	e18663a2 	orr	r6, r6, r2, lsr #7
 310:	1affffe5 	bne	2ac <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x2ac>
 314:	e3a05003 	mov	r5, #3
 318:	e3130007 	tst	r3, #7
 31c:	1a00000e 	bne	35c <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x35c>
 320:	e59d7000 	ldr	r7, [sp]
 324:	e3570000 	cmp	r7, #0
 328:	0a00000b 	beq	35c <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x35c>
 32c:	e5973000 	ldr	r3, [r7]
 330:	e1a00007 	mov	r0, r7
 334:	e5933004 	ldr	r3, [r3, #4]
 338:	e28d1024 	add	r1, sp, #36	; 0x24
 33c:	e1a0e00f 	mov	lr, pc
 340:	e1a0f003 	mov	pc, r3
 344:	e3500000 	cmp	r0, #0
 348:	15972008 	ldrne	r2, [r7, #8]
 34c:	059d3014 	ldreq	r3, [sp, #20]
 350:	12822001 	addne	r2, r2, #1
 354:	159d3014 	ldrne	r3, [sp, #20]
 358:	15872008 	strne	r2, [r7, #8]
 35c:	e5dd2024 	ldrb	r2, [sp, #36]	; 0x24
 360:	e2455001 	sub	r5, r5, #1
 364:	e2833001 	add	r3, r3, #1
 368:	e1a02082 	lsl	r2, r2, #1
 36c:	e21550ff 	ands	r5, r5, #255	; 0xff
 370:	e58d3014 	str	r3, [sp, #20]
 374:	e5cd2024 	strb	r2, [sp, #36]	; 0x24
 378:	1affffe6 	bne	318 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x318>
 37c:	e3560000 	cmp	r6, #0
 380:	0affff5b 	beq	f4 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0xf4>
 384:	e1a07005 	mov	r7, r5
 388:	e3a08008 	mov	r8, #8
 38c:	e3a09000 	mov	r9, #0
 390:	e3130007 	tst	r3, #7
 394:	e1a09089 	lsl	r9, r9, #1
 398:	1a00000e 	bne	3d8 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x3d8>
 39c:	e59da000 	ldr	r10, [sp]
 3a0:	e35a0000 	cmp	r10, #0
 3a4:	0a00000b 	beq	3d8 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x3d8>
 3a8:	e59a3000 	ldr	r3, [r10]
 3ac:	e1a0000a 	mov	r0, r10
 3b0:	e5933004 	ldr	r3, [r3, #4]
 3b4:	e28d1024 	add	r1, sp, #36	; 0x24
 3b8:	e1a0e00f 	mov	lr, pc
 3bc:	e1a0f003 	mov	pc, r3
 3c0:	e3500000 	cmp	r0, #0
 3c4:	159a2008 	ldrne	r2, [r10, #8]
 3c8:	059d3014 	ldreq	r3, [sp, #20]
 3cc:	12822001 	addne	r2, r2, #1
 3d0:	159d3014 	ldrne	r3, [sp, #20]
 3d4:	158a2008 	strne	r2, [r10, #8]
 3d8:	e5dd2024 	ldrb	r2, [sp, #36]	; 0x24
 3dc:	e2481001 	sub	r1, r8, #1
 3e0:	e2833001 	add	r3, r3, #1
 3e4:	e1a00082 	lsl	r0, r2, #1
 3e8:	e21180ff 	ands	r8, r1, #255	; 0xff
 3ec:	e58d3014 	str	r3, [sp, #20]
 3f0:	e5cd0024 	strb	r0, [sp, #36]	; 0x24
 3f4:	e18993a2 	orr	r9, r9, r2, lsr #7
 3f8:	1affffe4 	bne	390 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x390>
 3fc:	e5948008 	ldr	r8, [r4, #8]
 400:	e20910ff 	and	r1, r9, #255	; 0xff
 404:	e5983000 	ldr	r3, [r8]
 408:	e1a00008 	mov	r0, r8
 40c:	e5933000 	ldr	r3, [r3]
 410:	e1a0e00f 	mov	lr, pc
 414:	e1a0f003 	mov	pc, r3
 418:	e3500000 	cmp	r0, #0
 41c:	15983004 	ldrne	r3, [r8, #4]
 420:	e2877001 	add	r7, r7, #1
 424:	12833001 	addne	r3, r3, #1
 428:	15883004 	strne	r3, [r8, #4]
 42c:	e1570006 	cmp	r7, r6
 430:	0affff2f 	beq	f4 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0xf4>
 434:	e59d3014 	ldr	r3, [sp, #20]
 438:	eaffffd2 	b	388 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x388>
 43c:	e59d5000 	ldr	r5, [sp]
 440:	e3550000 	cmp	r5, #0
 444:	0affff8f 	beq	288 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x288>
 448:	e5953000 	ldr	r3, [r5]
 44c:	e28d1024 	add	r1, sp, #36	; 0x24
 450:	e5933004 	ldr	r3, [r3, #4]
 454:	e1a00005 	mov	r0, r5
 458:	e1a0e00f 	mov	lr, pc
 45c:	e1a0f003 	mov	pc, r3
 460:	e3500000 	cmp	r0, #0
 464:	15952008 	ldrne	r2, [r5, #8]
 468:	159d3014 	ldrne	r3, [sp, #20]
 46c:	12822001 	addne	r2, r2, #1
 470:	15852008 	strne	r2, [r5, #8]
 474:	059d3014 	ldreq	r3, [sp, #20]
 478:	e5dd1024 	ldrb	r1, [sp, #36]	; 0x24
 47c:	eaffff81 	b	288 <Huffman::CHuffmanDecoder::_DoDecodeFlat()+0x288>

Disassembly of section .text._ZN7Huffman15CHuffmanDecoder6DecodeEv:

00000000 <Huffman::CHuffmanDecoder::Decode()>:
   0:	e1a03000 	mov	r3, r0
   4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   8:	e1a04003 	mov	r4, r3
   c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  10:	e28d0010 	add	r0, sp, #16
  14:	e58d300c 	str	r3, [sp, #12]
  18:	ebfffffe 	bl	0 <Huffman::CHuffmanDecoder::Decode()>
  1c:	e1a03004 	mov	r3, r4
  20:	e5944004 	ldr	r4, [r4, #4]
  24:	e5932000 	ldr	r2, [r3]
  28:	e3540000 	cmp	r4, #0
  2c:	0a000079 	beq	218 <Huffman::CHuffmanDecoder::Decode()+0x218>
  30:	e59d5014 	ldr	r5, [sp, #20]
  34:	e5943004 	ldr	r3, [r4, #4]
  38:	e1540005 	cmp	r4, r5
  3c:	e58d2010 	str	r2, [sp, #16]
  40:	0a000006 	beq	60 <Huffman::CHuffmanDecoder::Decode()+0x60>
  44:	e2833002 	add	r3, r3, #2
  48:	e3550000 	cmp	r5, #0
  4c:	e5843004 	str	r3, [r4, #4]
  50:	058d4014 	streq	r4, [sp, #20]
  54:	1a000073 	bne	228 <Huffman::CHuffmanDecoder::Decode()+0x228>
  58:	e5943004 	ldr	r3, [r4, #4]
  5c:	e2433001 	sub	r3, r3, #1
  60:	e3530000 	cmp	r3, #0
  64:	e5843004 	str	r3, [r4, #4]
  68:	0a00004a 	beq	198 <Huffman::CHuffmanDecoder::Decode()+0x198>
  6c:	e3a04008 	mov	r4, #8
  70:	e3a02000 	mov	r2, #0
  74:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  78:	e3130007 	tst	r3, #7
  7c:	e1a05082 	lsl	r5, r2, #1
  80:	1a00000e 	bne	c0 <Huffman::CHuffmanDecoder::Decode()+0xc0>
  84:	e59d6010 	ldr	r6, [sp, #16]
  88:	e3560000 	cmp	r6, #0
  8c:	0a00000b 	beq	c0 <Huffman::CHuffmanDecoder::Decode()+0xc0>
  90:	e5963000 	ldr	r3, [r6]
  94:	e1a00006 	mov	r0, r6
  98:	e5933004 	ldr	r3, [r3, #4]
  9c:	e28d1034 	add	r1, sp, #52	; 0x34
  a0:	e1a0e00f 	mov	lr, pc
  a4:	e1a0f003 	mov	pc, r3
  a8:	e3500000 	cmp	r0, #0
  ac:	15962008 	ldrne	r2, [r6, #8]
  b0:	059d3024 	ldreq	r3, [sp, #36]	; 0x24
  b4:	12822001 	addne	r2, r2, #1
  b8:	159d3024 	ldrne	r3, [sp, #36]	; 0x24
  bc:	15862008 	strne	r2, [r6, #8]
  c0:	e5dd0034 	ldrb	r0, [sp, #52]	; 0x34
  c4:	e2444001 	sub	r4, r4, #1
  c8:	e1a01080 	lsl	r1, r0, #1
  cc:	e2833001 	add	r3, r3, #1
  d0:	e20110ff 	and	r1, r1, #255	; 0xff
  d4:	e21440ff 	ands	r4, r4, #255	; 0xff
  d8:	e58d3024 	str	r3, [sp, #36]	; 0x24
  dc:	e5cd1034 	strb	r1, [sp, #52]	; 0x34
  e0:	e18523a0 	orr	r2, r5, r0, lsr #7
  e4:	1affffe3 	bne	78 <Huffman::CHuffmanDecoder::Decode()+0x78>
  e8:	e20220ff 	and	r2, r2, #255	; 0xff
  ec:	e3520077 	cmp	r2, #119	; 0x77
  f0:	13a04001 	movne	r4, #1
  f4:	0a000063 	beq	288 <Huffman::CHuffmanDecoder::Decode()+0x288>
  f8:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
  fc:	e3500000 	cmp	r0, #0
 100:	0a000002 	beq	110 <Huffman::CHuffmanDecoder::Decode()+0x110>
 104:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
 108:	e0411000 	sub	r1, r1, r0
 10c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 110:	e59d501c 	ldr	r5, [sp, #28]
 114:	e3550000 	cmp	r5, #0
 118:	0a000004 	beq	130 <Huffman::CHuffmanDecoder::Decode()+0x130>
 11c:	e5953004 	ldr	r3, [r5, #4]
 120:	e2433001 	sub	r3, r3, #1
 124:	e3530000 	cmp	r3, #0
 128:	e5853004 	str	r3, [r5, #4]
 12c:	0a000029 	beq	1d8 <Huffman::CHuffmanDecoder::Decode()+0x1d8>
 130:	e59d5014 	ldr	r5, [sp, #20]
 134:	e3550000 	cmp	r5, #0
 138:	0a000013 	beq	18c <Huffman::CHuffmanDecoder::Decode()+0x18c>
 13c:	e5953004 	ldr	r3, [r5, #4]
 140:	e2433001 	sub	r3, r3, #1
 144:	e3530000 	cmp	r3, #0
 148:	e5853004 	str	r3, [r5, #4]
 14c:	1a00000e 	bne	18c <Huffman::CHuffmanDecoder::Decode()+0x18c>
 150:	e5953000 	ldr	r3, [r5]
 154:	e1a00005 	mov	r0, r5
 158:	e5933008 	ldr	r3, [r3, #8]
 15c:	e1a0e00f 	mov	lr, pc
 160:	e1a0f003 	mov	pc, r3
 164:	e5953008 	ldr	r3, [r5, #8]
 168:	e2433001 	sub	r3, r3, #1
 16c:	e3530000 	cmp	r3, #0
 170:	e5853008 	str	r3, [r5, #8]
 174:	1a000004 	bne	18c <Huffman::CHuffmanDecoder::Decode()+0x18c>
 178:	e5953000 	ldr	r3, [r5]
 17c:	e1a00005 	mov	r0, r5
 180:	e593300c 	ldr	r3, [r3, #12]
 184:	e1a0e00f 	mov	lr, pc
 188:	e1a0f003 	mov	pc, r3
 18c:	e1a00004 	mov	r0, r4
 190:	e28dd03c 	add	sp, sp, #60	; 0x3c
 194:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 198:	e5943000 	ldr	r3, [r4]
 19c:	e1a00004 	mov	r0, r4
 1a0:	e5933008 	ldr	r3, [r3, #8]
 1a4:	e1a0e00f 	mov	lr, pc
 1a8:	e1a0f003 	mov	pc, r3
 1ac:	e5943008 	ldr	r3, [r4, #8]
 1b0:	e2433001 	sub	r3, r3, #1
 1b4:	e3530000 	cmp	r3, #0
 1b8:	e5843008 	str	r3, [r4, #8]
 1bc:	1affffaa 	bne	6c <Huffman::CHuffmanDecoder::Decode()+0x6c>
 1c0:	e5943000 	ldr	r3, [r4]
 1c4:	e1a00004 	mov	r0, r4
 1c8:	e593300c 	ldr	r3, [r3, #12]
 1cc:	e1a0e00f 	mov	lr, pc
 1d0:	e1a0f003 	mov	pc, r3
 1d4:	eaffffa4 	b	6c <Huffman::CHuffmanDecoder::Decode()+0x6c>
 1d8:	e5953000 	ldr	r3, [r5]
 1dc:	e1a00005 	mov	r0, r5
 1e0:	e5933008 	ldr	r3, [r3, #8]
 1e4:	e1a0e00f 	mov	lr, pc
 1e8:	e1a0f003 	mov	pc, r3
 1ec:	e5953008 	ldr	r3, [r5, #8]
 1f0:	e2433001 	sub	r3, r3, #1
 1f4:	e3530000 	cmp	r3, #0
 1f8:	e5853008 	str	r3, [r5, #8]
 1fc:	1affffcb 	bne	130 <Huffman::CHuffmanDecoder::Decode()+0x130>
 200:	e5953000 	ldr	r3, [r5]
 204:	e1a00005 	mov	r0, r5
 208:	e593300c 	ldr	r3, [r3, #12]
 20c:	e1a0e00f 	mov	lr, pc
 210:	e1a0f003 	mov	pc, r3
 214:	eaffffc5 	b	130 <Huffman::CHuffmanDecoder::Decode()+0x130>
 218:	e59d5014 	ldr	r5, [sp, #20]
 21c:	e58d2010 	str	r2, [sp, #16]
 220:	e3550000 	cmp	r5, #0
 224:	0affff90 	beq	6c <Huffman::CHuffmanDecoder::Decode()+0x6c>
 228:	e5953004 	ldr	r3, [r5, #4]
 22c:	e2433001 	sub	r3, r3, #1
 230:	e3530000 	cmp	r3, #0
 234:	e5853004 	str	r3, [r5, #4]
 238:	1a00000e 	bne	278 <Huffman::CHuffmanDecoder::Decode()+0x278>
 23c:	e5953000 	ldr	r3, [r5]
 240:	e1a00005 	mov	r0, r5
 244:	e5933008 	ldr	r3, [r3, #8]
 248:	e1a0e00f 	mov	lr, pc
 24c:	e1a0f003 	mov	pc, r3
 250:	e5953008 	ldr	r3, [r5, #8]
 254:	e2433001 	sub	r3, r3, #1
 258:	e3530000 	cmp	r3, #0
 25c:	e5853008 	str	r3, [r5, #8]
 260:	1a000004 	bne	278 <Huffman::CHuffmanDecoder::Decode()+0x278>
 264:	e5953000 	ldr	r3, [r5]
 268:	e1a00005 	mov	r0, r5
 26c:	e593300c 	ldr	r3, [r3, #12]
 270:	e1a0e00f 	mov	lr, pc
 274:	e1a0f003 	mov	pc, r3
 278:	e3540000 	cmp	r4, #0
 27c:	e58d4014 	str	r4, [sp, #20]
 280:	0affff79 	beq	6c <Huffman::CHuffmanDecoder::Decode()+0x6c>
 284:	eaffff73 	b	58 <Huffman::CHuffmanDecoder::Decode()+0x58>
 288:	e3130007 	tst	r3, #7
 28c:	1a00000f 	bne	2d0 <Huffman::CHuffmanDecoder::Decode()+0x2d0>
 290:	e59d4010 	ldr	r4, [sp, #16]
 294:	e3540000 	cmp	r4, #0
 298:	0a00000c 	beq	2d0 <Huffman::CHuffmanDecoder::Decode()+0x2d0>
 29c:	e5943000 	ldr	r3, [r4]
 2a0:	e28d1034 	add	r1, sp, #52	; 0x34
 2a4:	e5933004 	ldr	r3, [r3, #4]
 2a8:	e1a00004 	mov	r0, r4
 2ac:	e1a0e00f 	mov	lr, pc
 2b0:	e1a0f003 	mov	pc, r3
 2b4:	e3500000 	cmp	r0, #0
 2b8:	15942008 	ldrne	r2, [r4, #8]
 2bc:	159d3024 	ldrne	r3, [sp, #36]	; 0x24
 2c0:	12822001 	addne	r2, r2, #1
 2c4:	15842008 	strne	r2, [r4, #8]
 2c8:	059d3024 	ldreq	r3, [sp, #36]	; 0x24
 2cc:	e5dd1034 	ldrb	r1, [sp, #52]	; 0x34
 2d0:	e2833001 	add	r3, r3, #1
 2d4:	e1a02081 	lsl	r2, r1, #1
 2d8:	e1b043a1 	lsrs	r4, r1, #7
 2dc:	e58d3024 	str	r3, [sp, #36]	; 0x24
 2e0:	e5cd2034 	strb	r2, [sp, #52]	; 0x34
 2e4:	1a0000f0 	bne	6ac <Huffman::CHuffmanDecoder::Decode()+0x6ac>
 2e8:	e59f03d4 	ldr	r0, [pc, #980]	; 6c4 <Huffman::CHuffmanDecoder::Decode()+0x6c4>
 2ec:	ebfffffe 	bl	0 <operator new(unsigned int)>
 2f0:	e3e02000 	mvn	r2, #0
 2f4:	e3a01001 	mov	r1, #1
 2f8:	e2807b01 	add	r7, r0, #1024	; 0x400
 2fc:	e1c010b0 	strh	r1, [r0]
 300:	e3a05009 	mov	r5, #9
 304:	e1c720b2 	strh	r2, [r7, #2]
 308:	e1a09000 	mov	r9, r0
 30c:	e1c020b2 	strh	r2, [r0, #2]
 310:	e1a02004 	mov	r2, r4
 314:	e2801b02 	add	r1, r0, #2048	; 0x800
 318:	e2811002 	add	r1, r1, #2
 31c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
 320:	e5c04802 	strb	r4, [r0, #2050]	; 0x802
 324:	e2877002 	add	r7, r7, #2
 328:	e58d1008 	str	r1, [sp, #8]
 32c:	e2808002 	add	r8, r0, #2
 330:	e3130007 	tst	r3, #7
 334:	e1a04082 	lsl	r4, r2, #1
 338:	1a00000d 	bne	374 <Huffman::CHuffmanDecoder::Decode()+0x374>
 33c:	e59d6010 	ldr	r6, [sp, #16]
 340:	e3560000 	cmp	r6, #0
 344:	0a00000a 	beq	374 <Huffman::CHuffmanDecoder::Decode()+0x374>
 348:	e5963000 	ldr	r3, [r6]
 34c:	e1a00006 	mov	r0, r6
 350:	e5933004 	ldr	r3, [r3, #4]
 354:	e28d1034 	add	r1, sp, #52	; 0x34
 358:	e1a0e00f 	mov	lr, pc
 35c:	e1a0f003 	mov	pc, r3
 360:	e3500000 	cmp	r0, #0
 364:	15963008 	ldrne	r3, [r6, #8]
 368:	12833001 	addne	r3, r3, #1
 36c:	15863008 	strne	r3, [r6, #8]
 370:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
 374:	e5dd1034 	ldrb	r1, [sp, #52]	; 0x34
 378:	e2455001 	sub	r5, r5, #1
 37c:	e1a02081 	lsl	r2, r1, #1
 380:	e2833001 	add	r3, r3, #1
 384:	e21550ff 	ands	r5, r5, #255	; 0xff
 388:	e5cd2034 	strb	r2, [sp, #52]	; 0x34
 38c:	e58d3024 	str	r3, [sp, #36]	; 0x24
 390:	e18423a1 	orr	r2, r4, r1, lsr #7
 394:	1affffe5 	bne	330 <Huffman::CHuffmanDecoder::Decode()+0x330>
 398:	e3520000 	cmp	r2, #0
 39c:	e58d2004 	str	r2, [sp, #4]
 3a0:	da000064 	ble	538 <Huffman::CHuffmanDecoder::Decode()+0x538>
 3a4:	e58d5000 	str	r5, [sp]
 3a8:	e3a04005 	mov	r4, #5
 3ac:	e3a05000 	mov	r5, #0
 3b0:	e3130007 	tst	r3, #7
 3b4:	e1a05085 	lsl	r5, r5, #1
 3b8:	1a00000e 	bne	3f8 <Huffman::CHuffmanDecoder::Decode()+0x3f8>
 3bc:	e59d6010 	ldr	r6, [sp, #16]
 3c0:	e3560000 	cmp	r6, #0
 3c4:	0a00000b 	beq	3f8 <Huffman::CHuffmanDecoder::Decode()+0x3f8>
 3c8:	e5963000 	ldr	r3, [r6]
 3cc:	e1a00006 	mov	r0, r6
 3d0:	e5933004 	ldr	r3, [r3, #4]
 3d4:	e28d1034 	add	r1, sp, #52	; 0x34
 3d8:	e1a0e00f 	mov	lr, pc
 3dc:	e1a0f003 	mov	pc, r3
 3e0:	e3500000 	cmp	r0, #0
 3e4:	15962008 	ldrne	r2, [r6, #8]
 3e8:	059d3024 	ldreq	r3, [sp, #36]	; 0x24
 3ec:	12822001 	addne	r2, r2, #1
 3f0:	159d3024 	ldrne	r3, [sp, #36]	; 0x24
 3f4:	15862008 	strne	r2, [r6, #8]
 3f8:	e5dd2034 	ldrb	r2, [sp, #52]	; 0x34
 3fc:	e2444001 	sub	r4, r4, #1
 400:	e2833001 	add	r3, r3, #1
 404:	e1a01082 	lsl	r1, r2, #1
 408:	e21440ff 	ands	r4, r4, #255	; 0xff
 40c:	e58d3024 	str	r3, [sp, #36]	; 0x24
 410:	e5cd1034 	strb	r1, [sp, #52]	; 0x34
 414:	e18553a2 	orr	r5, r5, r2, lsr #7
 418:	1affffe4 	bne	3b0 <Huffman::CHuffmanDecoder::Decode()+0x3b0>
 41c:	e20550ff 	and	r5, r5, #255	; 0xff
 420:	e1a01005 	mov	r1, r5
 424:	e28d0010 	add	r0, sp, #16
 428:	ebfffffe 	bl	0 <Huffman::CHuffmanDecoder::Decode()>
 42c:	e3a0b008 	mov	r11, #8
 430:	e1a0a000 	mov	r10, r0
 434:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
 438:	e3130007 	tst	r3, #7
 43c:	e1a04084 	lsl	r4, r4, #1
 440:	1a00000e 	bne	480 <Huffman::CHuffmanDecoder::Decode()+0x480>
 444:	e59d6010 	ldr	r6, [sp, #16]
 448:	e3560000 	cmp	r6, #0
 44c:	0a00000b 	beq	480 <Huffman::CHuffmanDecoder::Decode()+0x480>
 450:	e5963000 	ldr	r3, [r6]
 454:	e1a00006 	mov	r0, r6
 458:	e5933004 	ldr	r3, [r3, #4]
 45c:	e28d1034 	add	r1, sp, #52	; 0x34
 460:	e1a0e00f 	mov	lr, pc
 464:	e1a0f003 	mov	pc, r3
 468:	e3500000 	cmp	r0, #0
 46c:	15962008 	ldrne	r2, [r6, #8]
 470:	059d3024 	ldreq	r3, [sp, #36]	; 0x24
 474:	12822001 	addne	r2, r2, #1
 478:	159d3024 	ldrne	r3, [sp, #36]	; 0x24
 47c:	15862008 	strne	r2, [r6, #8]
 480:	e5dd2034 	ldrb	r2, [sp, #52]	; 0x34
 484:	e24bb001 	sub	r11, r11, #1
 488:	e2833001 	add	r3, r3, #1
 48c:	e1a01082 	lsl	r1, r2, #1
 490:	e21bb0ff 	ands	r11, r11, #255	; 0xff
 494:	e58d3024 	str	r3, [sp, #36]	; 0x24
 498:	e5cd1034 	strb	r1, [sp, #52]	; 0x34
 49c:	e18443a2 	orr	r4, r4, r2, lsr #7
 4a0:	1affffe4 	bne	438 <Huffman::CHuffmanDecoder::Decode()+0x438>
 4a4:	e3550000 	cmp	r5, #0
 4a8:	e20440ff 	and	r4, r4, #255	; 0xff
 4ac:	e2455001 	sub	r5, r5, #1
 4b0:	0a000081 	beq	6bc <Huffman::CHuffmanDecoder::Decode()+0x6bc>
 4b4:	e1a0200b 	mov	r2, r11
 4b8:	e3e0e000 	mvn	lr, #0
 4bc:	e59f0204 	ldr	r0, [pc, #516]	; 6c8 <Huffman::CHuffmanDecoder::Decode()+0x6c8>
 4c0:	e1a0153a 	lsr	r1, r10, r5
 4c4:	e3110001 	tst	r1, #1
 4c8:	00881082 	addeq	r1, r8, r2, lsl #1
 4cc:	10871082 	addne	r1, r7, r2, lsl #1
 4d0:	e1d120b0 	ldrh	r2, [r1]
 4d4:	e2455001 	sub	r5, r5, #1
 4d8:	e1520000 	cmp	r2, r0
 4dc:	1a00000a 	bne	50c <Huffman::CHuffmanDecoder::Decode()+0x50c>
 4e0:	e1d920b0 	ldrh	r2, [r9]
 4e4:	e089c082 	add	r12, r9, r2, lsl #1
 4e8:	e2826001 	add	r6, r2, #1
 4ec:	e1c960b0 	strh	r6, [r9]
 4f0:	e28c6b01 	add	r6, r12, #1024	; 0x400
 4f4:	e1c6e0b2 	strh	lr, [r6, #2]
 4f8:	e1cce0b2 	strh	lr, [r12, #2]
 4fc:	e3a0c000 	mov	r12, #0
 500:	e0896002 	add	r6, r9, r2
 504:	e5c6c802 	strb	r12, [r6, #2050]	; 0x802
 508:	e1c120b0 	strh	r2, [r1]
 50c:	e3750001 	cmn	r5, #1
 510:	1affffea 	bne	4c0 <Huffman::CHuffmanDecoder::Decode()+0x4c0>
 514:	e59d1008 	ldr	r1, [sp, #8]
 518:	e0812002 	add	r2, r1, r2
 51c:	e5c24000 	strb	r4, [r2]
 520:	e59d2000 	ldr	r2, [sp]
 524:	e59d1004 	ldr	r1, [sp, #4]
 528:	e2822001 	add	r2, r2, #1
 52c:	e1510002 	cmp	r1, r2
 530:	e58d2000 	str	r2, [sp]
 534:	1affff9b 	bne	3a8 <Huffman::CHuffmanDecoder::Decode()+0x3a8>
 538:	e3a04014 	mov	r4, #20
 53c:	e3a05000 	mov	r5, #0
 540:	e3130007 	tst	r3, #7
 544:	e1a05085 	lsl	r5, r5, #1
 548:	1a00000d 	bne	584 <Huffman::CHuffmanDecoder::Decode()+0x584>
 54c:	e59d6010 	ldr	r6, [sp, #16]
 550:	e3560000 	cmp	r6, #0
 554:	0a00000a 	beq	584 <Huffman::CHuffmanDecoder::Decode()+0x584>
 558:	e5963000 	ldr	r3, [r6]
 55c:	e1a00006 	mov	r0, r6
 560:	e5933004 	ldr	r3, [r3, #4]
 564:	e28d1034 	add	r1, sp, #52	; 0x34
 568:	e1a0e00f 	mov	lr, pc
 56c:	e1a0f003 	mov	pc, r3
 570:	e3500000 	cmp	r0, #0
 574:	15963008 	ldrne	r3, [r6, #8]
 578:	12833001 	addne	r3, r3, #1
 57c:	15863008 	strne	r3, [r6, #8]
 580:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
 584:	e5dd2034 	ldrb	r2, [sp, #52]	; 0x34
 588:	e2444001 	sub	r4, r4, #1
 58c:	e2833001 	add	r3, r3, #1
 590:	e1a01082 	lsl	r1, r2, #1
 594:	e21440ff 	ands	r4, r4, #255	; 0xff
 598:	e58d3024 	str	r3, [sp, #36]	; 0x24
 59c:	e5cd1034 	strb	r1, [sp, #52]	; 0x34
 5a0:	e18553a2 	orr	r5, r5, r2, lsr #7
 5a4:	1affffe5 	bne	540 <Huffman::CHuffmanDecoder::Decode()+0x540>
 5a8:	e3550000 	cmp	r5, #0
 5ac:	11a0a004 	movne	r10, r4
 5b0:	11a06004 	movne	r6, r4
 5b4:	159f810c 	ldrne	r8, [pc, #268]	; 6c8 <Huffman::CHuffmanDecoder::Decode()+0x6c8>
 5b8:	1a00001b 	bne	62c <Huffman::CHuffmanDecoder::Decode()+0x62c>
 5bc:	ea000036 	b	69c <Huffman::CHuffmanDecoder::Decode()+0x69c>
 5c0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
 5c4:	e3130007 	tst	r3, #7
 5c8:	1a00000d 	bne	604 <Huffman::CHuffmanDecoder::Decode()+0x604>
 5cc:	e59db010 	ldr	r11, [sp, #16]
 5d0:	e35b0000 	cmp	r11, #0
 5d4:	0a00000a 	beq	604 <Huffman::CHuffmanDecoder::Decode()+0x604>
 5d8:	e59b3000 	ldr	r3, [r11]
 5dc:	e1a0000b 	mov	r0, r11
 5e0:	e5933004 	ldr	r3, [r3, #4]
 5e4:	e28d1034 	add	r1, sp, #52	; 0x34
 5e8:	e1a0e00f 	mov	lr, pc
 5ec:	e1a0f003 	mov	pc, r3
 5f0:	e3500000 	cmp	r0, #0
 5f4:	159b3008 	ldrne	r3, [r11, #8]
 5f8:	12833001 	addne	r3, r3, #1
 5fc:	158b3008 	strne	r3, [r11, #8]
 600:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
 604:	e2833001 	add	r3, r3, #1
 608:	e58d3024 	str	r3, [sp, #36]	; 0x24
 60c:	e5dd3034 	ldrb	r3, [sp, #52]	; 0x34
 610:	e1b023a3 	lsrs	r2, r3, #7
 614:	12877b01 	addne	r7, r7, #1024	; 0x400
 618:	11d760b2 	ldrhne	r6, [r7, #2]
 61c:	e1a03083 	lsl	r3, r3, #1
 620:	e15a0005 	cmp	r10, r5
 624:	e5cd3034 	strb	r3, [sp, #52]	; 0x34
 628:	2a00001b 	bcs	69c <Huffman::CHuffmanDecoder::Decode()+0x69c>
 62c:	e0897086 	add	r7, r9, r6, lsl #1
 630:	e1a03006 	mov	r3, r6
 634:	e1d760b2 	ldrh	r6, [r7, #2]
 638:	e1560008 	cmp	r6, r8
 63c:	1affffdf 	bne	5c0 <Huffman::CHuffmanDecoder::Decode()+0x5c0>
 640:	e2872b01 	add	r2, r7, #1024	; 0x400
 644:	e1d220b2 	ldrh	r2, [r2, #2]
 648:	e1520008 	cmp	r2, r8
 64c:	1affffdb 	bne	5c0 <Huffman::CHuffmanDecoder::Decode()+0x5c0>
 650:	e59d200c 	ldr	r2, [sp, #12]
 654:	e5926008 	ldr	r6, [r2, #8]
 658:	e3560000 	cmp	r6, #0
 65c:	0a00000a 	beq	68c <Huffman::CHuffmanDecoder::Decode()+0x68c>
 660:	e0893003 	add	r3, r9, r3
 664:	e5d31802 	ldrb	r1, [r3, #2050]	; 0x802
 668:	e5963000 	ldr	r3, [r6]
 66c:	e1a00006 	mov	r0, r6
 670:	e5933000 	ldr	r3, [r3]
 674:	e1a0e00f 	mov	lr, pc
 678:	e1a0f003 	mov	pc, r3
 67c:	e3500000 	cmp	r0, #0
 680:	15963004 	ldrne	r3, [r6, #4]
 684:	12833001 	addne	r3, r3, #1
 688:	15863004 	strne	r3, [r6, #4]
 68c:	e28aa001 	add	r10, r10, #1
 690:	e15a0005 	cmp	r10, r5
 694:	e3a06000 	mov	r6, #0
 698:	3affffe3 	bcc	62c <Huffman::CHuffmanDecoder::Decode()+0x62c>
 69c:	e1a00009 	mov	r0, r9
 6a0:	e59f101c 	ldr	r1, [pc, #28]	; 6c4 <Huffman::CHuffmanDecoder::Decode()+0x6c4>
 6a4:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 6a8:	eafffe92 	b	f8 <Huffman::CHuffmanDecoder::Decode()+0xf8>
 6ac:	e59d000c 	ldr	r0, [sp, #12]
 6b0:	ebfffffe 	bl	0 <Huffman::CHuffmanDecoder::Decode()>
 6b4:	e1a04000 	mov	r4, r0
 6b8:	eafffe8e 	b	f8 <Huffman::CHuffmanDecoder::Decode()+0xf8>
 6bc:	e59d2008 	ldr	r2, [sp, #8]
 6c0:	eaffff95 	b	51c <Huffman::CHuffmanDecoder::Decode()+0x51c>
 6c4:	00000a02 	.word	0x00000a02
 6c8:	0000ffff 	.word	0x0000ffff

Disassembly of section .text._ZN7Huffman15CHuffmanDecoder5SetInESt10shared_ptrIN4Pipe5CPipeEE:

00000000 <Huffman::CHuffmanDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e8910048 	ldm	r1, {r3, r6}
   8:	e5905004 	ldr	r5, [r0, #4]
   c:	e5803000 	str	r3, [r0]
  10:	e1560005 	cmp	r6, r5
  14:	0a00001b 	beq	88 <Huffman::CHuffmanDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x88>
  18:	e3560000 	cmp	r6, #0
  1c:	15963004 	ldrne	r3, [r6, #4]
  20:	e1a04000 	mov	r4, r0
  24:	12833001 	addne	r3, r3, #1
  28:	15863004 	strne	r3, [r6, #4]
  2c:	e3550000 	cmp	r5, #0
  30:	0a000013 	beq	84 <Huffman::CHuffmanDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  34:	e5953004 	ldr	r3, [r5, #4]
  38:	e2433001 	sub	r3, r3, #1
  3c:	e3530000 	cmp	r3, #0
  40:	e5853004 	str	r3, [r5, #4]
  44:	1a00000e 	bne	84 <Huffman::CHuffmanDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  48:	e5953000 	ldr	r3, [r5]
  4c:	e1a00005 	mov	r0, r5
  50:	e5933008 	ldr	r3, [r3, #8]
  54:	e1a0e00f 	mov	lr, pc
  58:	e1a0f003 	mov	pc, r3
  5c:	e5953008 	ldr	r3, [r5, #8]
  60:	e2433001 	sub	r3, r3, #1
  64:	e3530000 	cmp	r3, #0
  68:	e5853008 	str	r3, [r5, #8]
  6c:	1a000004 	bne	84 <Huffman::CHuffmanDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  70:	e5953000 	ldr	r3, [r5]
  74:	e1a00005 	mov	r0, r5
  78:	e593300c 	ldr	r3, [r3, #12]
  7c:	e1a0e00f 	mov	lr, pc
  80:	e1a0f003 	mov	pc, r3
  84:	e5846004 	str	r6, [r4, #4]
  88:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN7Huffman15CHuffmanDecoder6SetOutESt10shared_ptrIN4Pipe5CPipeEE:

00000000 <Huffman::CHuffmanDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e8910048 	ldm	r1, {r3, r6}
   8:	e590500c 	ldr	r5, [r0, #12]
   c:	e5803008 	str	r3, [r0, #8]
  10:	e1560005 	cmp	r6, r5
  14:	0a00001b 	beq	88 <Huffman::CHuffmanDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x88>
  18:	e3560000 	cmp	r6, #0
  1c:	15963004 	ldrne	r3, [r6, #4]
  20:	e1a04000 	mov	r4, r0
  24:	12833001 	addne	r3, r3, #1
  28:	15863004 	strne	r3, [r6, #4]
  2c:	e3550000 	cmp	r5, #0
  30:	0a000013 	beq	84 <Huffman::CHuffmanDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  34:	e5953004 	ldr	r3, [r5, #4]
  38:	e2433001 	sub	r3, r3, #1
  3c:	e3530000 	cmp	r3, #0
  40:	e5853004 	str	r3, [r5, #4]
  44:	1a00000e 	bne	84 <Huffman::CHuffmanDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  48:	e5953000 	ldr	r3, [r5]
  4c:	e1a00005 	mov	r0, r5
  50:	e5933008 	ldr	r3, [r3, #8]
  54:	e1a0e00f 	mov	lr, pc
  58:	e1a0f003 	mov	pc, r3
  5c:	e5953008 	ldr	r3, [r5, #8]
  60:	e2433001 	sub	r3, r3, #1
  64:	e3530000 	cmp	r3, #0
  68:	e5853008 	str	r3, [r5, #8]
  6c:	1a000004 	bne	84 <Huffman::CHuffmanDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  70:	e5953000 	ldr	r3, [r5]
  74:	e1a00005 	mov	r0, r5
  78:	e593300c 	ldr	r3, [r3, #12]
  7c:	e1a0e00f 	mov	lr, pc
  80:	e1a0f003 	mov	pc, r3
  84:	e584600c 	str	r6, [r4, #12]
  88:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_:

00000000 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)>:
   0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e8900480 	ldm	r0, {r7, r10}
   8:	e04a3007 	sub	r3, r10, r7
   c:	e3730106 	cmn	r3, #-2147483647	; 0x80000001
  10:	0a00003f 	beq	114 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x114>
  14:	e3530001 	cmp	r3, #1
  18:	e1a0b002 	mov	r11, r2
  1c:	21a02003 	movcs	r2, r3
  20:	33a02001 	movcc	r2, #1
  24:	e0934002 	adds	r4, r3, r2
  28:	e1a06000 	mov	r6, r0
  2c:	e1a08001 	mov	r8, r1
  30:	2a000034 	bcs	108 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x108>
  34:	e3540000 	cmp	r4, #0
  38:	01a09004 	moveq	r9, r4
  3c:	e0415007 	sub	r5, r1, r7
  40:	1a000028 	bne	e8 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0xe8>
  44:	e5db3000 	ldrb	r3, [r11]
  48:	e3550000 	cmp	r5, #0
  4c:	e7c93005 	strb	r3, [r9, r5]
  50:	e04aa008 	sub	r10, r10, r8
  54:	ca000017 	bgt	b8 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0xb8>
  58:	e2855001 	add	r5, r5, #1
  5c:	e35a0000 	cmp	r10, #0
  60:	e0895005 	add	r5, r9, r5
  64:	ca00000b 	bgt	98 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x98>
  68:	e3570000 	cmp	r7, #0
  6c:	e085500a 	add	r5, r5, r10
  70:	1a000003 	bne	84 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x84>
  74:	e5869000 	str	r9, [r6]
  78:	e5865004 	str	r5, [r6, #4]
  7c:	e5864008 	str	r4, [r6, #8]
  80:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
  84:	e5961008 	ldr	r1, [r6, #8]
  88:	e0411007 	sub	r1, r1, r7
  8c:	e1a00007 	mov	r0, r7
  90:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  94:	eafffff6 	b	74 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x74>
  98:	e1a00005 	mov	r0, r5
  9c:	e1a01008 	mov	r1, r8
  a0:	e1a0200a 	mov	r2, r10
  a4:	ebfffffe 	bl	0 <memcpy>
  a8:	e3570000 	cmp	r7, #0
  ac:	e085500a 	add	r5, r5, r10
  b0:	0affffef 	beq	74 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x74>
  b4:	eafffff2 	b	84 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x84>
  b8:	e1a02005 	mov	r2, r5
  bc:	e1a01007 	mov	r1, r7
  c0:	e1a00009 	mov	r0, r9
  c4:	ebfffffe 	bl	0 <memmove>
  c8:	e2855001 	add	r5, r5, #1
  cc:	e35a0000 	cmp	r10, #0
  d0:	e0895005 	add	r5, r9, r5
  d4:	caffffef 	bgt	98 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x98>
  d8:	e5961008 	ldr	r1, [r6, #8]
  dc:	e085500a 	add	r5, r5, r10
  e0:	e0411007 	sub	r1, r1, r7
  e4:	eaffffe8 	b	8c <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x8c>
  e8:	e3e03102 	mvn	r3, #-2147483648	; 0x80000000
  ec:	e1540003 	cmp	r4, r3
  f0:	21a04003 	movcs	r4, r3
  f4:	e1a00004 	mov	r0, r4
  f8:	ebfffffe 	bl	0 <operator new(unsigned int)>
  fc:	e1a09000 	mov	r9, r0
 100:	e0804004 	add	r4, r0, r4
 104:	eaffffce 	b	44 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x44>
 108:	e3e04102 	mvn	r4, #-2147483648	; 0x80000000
 10c:	e0415007 	sub	r5, r1, r7
 110:	eafffff7 	b	f4 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0xf4>
 114:	e59f0000 	ldr	r0, [pc]	; 11c <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x11c>
 118:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 11c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN11SerialBytes8PushBitsEb:

00000000 <SerialBytes::PushBits(bool)>:
   0:	e5d03010 	ldrb	r3, [r0, #16]
   4:	e5d02011 	ldrb	r2, [r0, #17]
   8:	e2833001 	add	r3, r3, #1
   c:	e20330ff 	and	r3, r3, #255	; 0xff
  10:	e1811082 	orr	r1, r1, r2, lsl #1
  14:	e20110ff 	and	r1, r1, #255	; 0xff
  18:	e3530007 	cmp	r3, #7
  1c:	e5c01011 	strb	r1, [r0, #17]
  20:	e5c03010 	strb	r3, [r0, #16]
  24:	91a0f00e 	movls	pc, lr
  28:	e92d4070 	push	{r4, r5, r6, lr}
  2c:	e5905008 	ldr	r5, [r0, #8]
  30:	e1a04000 	mov	r4, r0
  34:	e3550000 	cmp	r5, #0
  38:	0a000008 	beq	60 <SerialBytes::PushBits(bool)+0x60>
  3c:	e5953000 	ldr	r3, [r5]
  40:	e1a00005 	mov	r0, r5
  44:	e5933000 	ldr	r3, [r3]
  48:	e1a0e00f 	mov	lr, pc
  4c:	e1a0f003 	mov	pc, r3
  50:	e3500000 	cmp	r0, #0
  54:	15953004 	ldrne	r3, [r5, #4]
  58:	12833001 	addne	r3, r3, #1
  5c:	15853004 	strne	r3, [r5, #4]
  60:	e594101c 	ldr	r1, [r4, #28]
  64:	e5943020 	ldr	r3, [r4, #32]
  68:	e1510003 	cmp	r1, r3
  6c:	0a000007 	beq	90 <SerialBytes::PushBits(bool)+0x90>
  70:	e5d43011 	ldrb	r3, [r4, #17]
  74:	e5c13000 	strb	r3, [r1]
  78:	e594301c 	ldr	r3, [r4, #28]
  7c:	e2833001 	add	r3, r3, #1
  80:	e584301c 	str	r3, [r4, #28]
  84:	e3a03000 	mov	r3, #0
  88:	e1c431b0 	strh	r3, [r4, #16]
  8c:	e8bd8070 	pop	{r4, r5, r6, pc}
  90:	e2842011 	add	r2, r4, #17
  94:	e2840018 	add	r0, r4, #24
  98:	ebfffffe 	bl	0 <SerialBytes::PushBits(bool)>
  9c:	eafffff8 	b	84 <SerialBytes::PushBits(bool)+0x84>

Disassembly of section .text._ZN11SerialBytes9PushBitsNEhm:

00000000 <SerialBytes::PushBitsN(unsigned char, unsigned long)>:
   0:	e3510000 	cmp	r1, #0
   4:	01a0f00e 	moveq	pc, lr
   8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   c:	e1a05000 	mov	r5, r0
  10:	e1a06002 	mov	r6, r2
  14:	e3a07001 	mov	r7, #1
  18:	e2414001 	sub	r4, r1, #1
  1c:	e0163417 	ands	r3, r6, r7, lsl r4
  20:	13a01001 	movne	r1, #1
  24:	03a01000 	moveq	r1, #0
  28:	e1a00005 	mov	r0, r5
  2c:	e2444001 	sub	r4, r4, #1
  30:	ebfffffe 	bl	0 <SerialBytes::PushBitsN(unsigned char, unsigned long)>
  34:	e3740001 	cmn	r4, #1
  38:	1afffff7 	bne	1c <SerialBytes::PushBitsN(unsigned char, unsigned long)+0x1c>
  3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

Disassembly of section .text._ZN11SerialBytes5FlushEv:

00000000 <SerialBytes::Flush()>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e5d04010 	ldrb	r4, [r0, #16]
   8:	e2443001 	sub	r3, r4, #1
   c:	e3530006 	cmp	r3, #6
  10:	8a000007 	bhi	34 <SerialBytes::Flush()+0x34>
  14:	e1a05000 	mov	r5, r0
  18:	e2844001 	add	r4, r4, #1
  1c:	e3a01000 	mov	r1, #0
  20:	e1a00005 	mov	r0, r5
  24:	e20440ff 	and	r4, r4, #255	; 0xff
  28:	ebfffffe 	bl	0 <SerialBytes::Flush()>
  2c:	e3540008 	cmp	r4, #8
  30:	1afffff8 	bne	18 <SerialBytes::Flush()+0x18>
  34:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZNK11HuffmanCode4SendER11SerialBytes:

00000000 <HuffmanCode::Send(SerialBytes&) const>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e3a07005 	mov	r7, #5
   8:	e1a05000 	mov	r5, r0
   c:	e1a06001 	mov	r6, r1
  10:	e5d04000 	ldrb	r4, [r0]
  14:	e1a04184 	lsl	r4, r4, #3
  18:	e20440ff 	and	r4, r4, #255	; 0xff
  1c:	e1a013a4 	lsr	r1, r4, #7
  20:	e1a00006 	mov	r0, r6
  24:	ebfffffe 	bl	0 <HuffmanCode::Send(SerialBytes&) const>
  28:	e1a04084 	lsl	r4, r4, #1
  2c:	e2577001 	subs	r7, r7, #1
  30:	e20440ff 	and	r4, r4, #255	; 0xff
  34:	1afffff8 	bne	1c <HuffmanCode::Send(SerialBytes&) const+0x1c>
  38:	e5d54000 	ldrb	r4, [r5]
  3c:	e3540000 	cmp	r4, #0
  40:	e2444001 	sub	r4, r4, #1
  44:	0a000009 	beq	70 <HuffmanCode::Send(SerialBytes&) const+0x70>
  48:	e3a07001 	mov	r7, #1
  4c:	e5953004 	ldr	r3, [r5, #4]
  50:	e1a00006 	mov	r0, r6
  54:	e0133417 	ands	r3, r3, r7, lsl r4
  58:	13a01001 	movne	r1, #1
  5c:	03a01000 	moveq	r1, #0
  60:	e2444001 	sub	r4, r4, #1
  64:	ebfffffe 	bl	0 <HuffmanCode::Send(SerialBytes&) const>
  68:	e3740001 	cmn	r4, #1
  6c:	1afffff6 	bne	4c <HuffmanCode::Send(SerialBytes&) const+0x4c>
  70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

Disassembly of section .text._ZN7WorkEnc6ExportESt10shared_ptrIN4Pipe5CPipeEER11SerialBytesj:

00000000 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e1a0a003 	mov	r10, r3
   8:	e3a0b008 	mov	r11, #8
   c:	e3a06001 	mov	r6, #1
  10:	e1a08000 	mov	r8, r0
  14:	e1a09001 	mov	r9, r1
  18:	e1a05002 	mov	r5, r2
  1c:	e2807901 	add	r7, r0, #16384	; 0x4000
  20:	e24dd014 	sub	sp, sp, #20
  24:	e5974410 	ldr	r4, [r7, #1040]	; 0x410
  28:	e58de004 	str	lr, [sp, #4]
  2c:	e0142b16 	ands	r2, r4, r6, lsl r11
  30:	13a01001 	movne	r1, #1
  34:	03a01000 	moveq	r1, #0
  38:	e1a00005 	mov	r0, r5
  3c:	e24bb001 	sub	r11, r11, #1
  40:	ebfffffe 	bl	0 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)>
  44:	e37b0001 	cmn	r11, #1
  48:	1afffff7 	bne	2c <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x2c>
  4c:	e597740c 	ldr	r7, [r7, #1036]	; 0x40c
  50:	e3570000 	cmp	r7, #0
  54:	0a000010 	beq	9c <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x9c>
  58:	e3a06001 	mov	r6, #1
  5c:	e3a0b007 	mov	r11, #7
  60:	e1a01005 	mov	r1, r5
  64:	e2870004 	add	r0, r7, #4
  68:	ebfffffe 	bl	0 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)>
  6c:	e5d7400c 	ldrb	r4, [r7, #12]
  70:	e0142b16 	ands	r2, r4, r6, lsl r11
  74:	13a01001 	movne	r1, #1
  78:	03a01000 	moveq	r1, #0
  7c:	e1a00005 	mov	r0, r5
  80:	e24bb001 	sub	r11, r11, #1
  84:	ebfffffe 	bl	0 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)>
  88:	e37b0001 	cmn	r11, #1
  8c:	1afffff7 	bne	70 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x70>
  90:	e5977000 	ldr	r7, [r7]
  94:	e3570000 	cmp	r7, #0
  98:	1affffef 	bne	5c <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x5c>
  9c:	e35a0601 	cmp	r10, #1048576	; 0x100000
  a0:	2a00002b 	bcs	154 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x154>
  a4:	e3a04013 	mov	r4, #19
  a8:	e3a06001 	mov	r6, #1
  ac:	e01a3416 	ands	r3, r10, r6, lsl r4
  b0:	13a01001 	movne	r1, #1
  b4:	03a01000 	moveq	r1, #0
  b8:	e1a00005 	mov	r0, r5
  bc:	e2444001 	sub	r4, r4, #1
  c0:	ebfffffe 	bl	0 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)>
  c4:	e3740001 	cmn	r4, #1
  c8:	1afffff7 	bne	ac <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0xac>
  cc:	e3a03000 	mov	r3, #0
  d0:	e3a07001 	mov	r7, #1
  d4:	e5cd300f 	strb	r3, [sp, #15]
  d8:	e599a000 	ldr	r10, [r9]
  dc:	e28d100f 	add	r1, sp, #15
  e0:	e59a3000 	ldr	r3, [r10]
  e4:	e1a0000a 	mov	r0, r10
  e8:	e5933004 	ldr	r3, [r3, #4]
  ec:	e1a0e00f 	mov	lr, pc
  f0:	e1a0f003 	mov	pc, r3
  f4:	e3500000 	cmp	r0, #0
  f8:	1a000001 	bne	104 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x104>
  fc:	e28dd014 	add	sp, sp, #20
 100:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 104:	e5dd300f 	ldrb	r3, [sp, #15]
 108:	e59a2008 	ldr	r2, [r10, #8]
 10c:	e0883183 	add	r3, r8, r3, lsl #3
 110:	e2833901 	add	r3, r3, #16384	; 0x4000
 114:	e5d34420 	ldrb	r4, [r3, #1056]	; 0x420
 118:	e2822001 	add	r2, r2, #1
 11c:	e3540000 	cmp	r4, #0
 120:	e5936424 	ldr	r6, [r3, #1060]	; 0x424
 124:	e2444001 	sub	r4, r4, #1
 128:	e58a2008 	str	r2, [r10, #8]
 12c:	0affffe9 	beq	d8 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0xd8>
 130:	e0163417 	ands	r3, r6, r7, lsl r4
 134:	13a01001 	movne	r1, #1
 138:	03a01000 	moveq	r1, #0
 13c:	e1a00005 	mov	r0, r5
 140:	e2444001 	sub	r4, r4, #1
 144:	ebfffffe 	bl	0 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)>
 148:	e3740001 	cmn	r4, #1
 14c:	1afffff7 	bne	130 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x130>
 150:	eaffffe0 	b	d8 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0xd8>
 154:	e59f0070 	ldr	r0, [pc, #112]	; 1cc <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x1cc>
 158:	ebfffffe 	bl	0 <b8SysPuts>
 15c:	e59f006c 	ldr	r0, [pc, #108]	; 1d0 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x1d0>
 160:	ebfffffe 	bl	0 <b8SysPuts>
 164:	e59f0068 	ldr	r0, [pc, #104]	; 1d4 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x1d4>
 168:	ebfffffe 	bl	0 <b8SysPuts>
 16c:	e59f0064 	ldr	r0, [pc, #100]	; 1d8 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x1d8>
 170:	ebfffffe 	bl	0 <b8SysPutNum>
 174:	e59f0060 	ldr	r0, [pc, #96]	; 1dc <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x1dc>
 178:	ebfffffe 	bl	0 <b8SysPuts>
 17c:	e59f005c 	ldr	r0, [pc, #92]	; 1e0 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x1e0>
 180:	ebfffffe 	bl	0 <b8SysPuts>
 184:	e59f0058 	ldr	r0, [pc, #88]	; 1e4 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x1e4>
 188:	ebfffffe 	bl	0 <b8SysPuts>
 18c:	e59f0054 	ldr	r0, [pc, #84]	; 1e8 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x1e8>
 190:	ebfffffe 	bl	0 <b8SysPuts>
 194:	e59f0050 	ldr	r0, [pc, #80]	; 1ec <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x1ec>
 198:	ebfffffe 	bl	0 <b8SysPuts>
 19c:	e59f004c 	ldr	r0, [pc, #76]	; 1f0 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x1f0>
 1a0:	ebfffffe 	bl	0 <b8SysPuts>
 1a4:	e59d0004 	ldr	r0, [sp, #4]
 1a8:	ebfffffe 	bl	0 <b8SysPutHex>
 1ac:	e59f0038 	ldr	r0, [pc, #56]	; 1ec <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x1ec>
 1b0:	ebfffffe 	bl	0 <b8SysPuts>
 1b4:	e59f0038 	ldr	r0, [pc, #56]	; 1f4 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x1f4>
 1b8:	ebfffffe 	bl	0 <b8SysPuts>
 1bc:	e59f0034 	ldr	r0, [pc, #52]	; 1f8 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0x1f8>
 1c0:	ebfffffe 	bl	0 <b8SysPuts>
 1c4:	e1000070 	hlt	0x0000
 1c8:	eaffffb5 	b	a4 <WorkEnc::Export(std::shared_ptr<Pipe::CPipe>, SerialBytes&, unsigned int)+0xa4>
 1cc:	00000000 	.word	0x00000000
 1d0:	0000001c 	.word	0x0000001c
 1d4:	00000028 	.word	0x00000028
 1d8:	00000115 	.word	0x00000115
 1dc:	0000002c 	.word	0x0000002c
 1e0:	00000030 	.word	0x00000030
 1e4:	00000038 	.word	0x00000038
 1e8:	0000003c 	.word	0x0000003c
 1ec:	0000004c 	.word	0x0000004c
 1f0:	00000050 	.word	0x00000050
 1f4:	0000006c 	.word	0x0000006c
 1f8:	000000b4 	.word	0x000000b4

Disassembly of section .text._ZN4Pipe14CMemBufferPipe7vOnPushEh:

00000000 <Pipe::CMemBufferPipe::vOnPush(unsigned char)>:
   0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4:	e24dd00c 	sub	sp, sp, #12
   8:	e5903014 	ldr	r3, [r0, #20]
   c:	e5cd1007 	strb	r1, [sp, #7]
  10:	e5901010 	ldr	r1, [r0, #16]
  14:	e1510003 	cmp	r1, r3
  18:	0a000007 	beq	3c <Pipe::CMemBufferPipe::vOnPush(unsigned char)+0x3c>
  1c:	e5dd3007 	ldrb	r3, [sp, #7]
  20:	e5c13000 	strb	r3, [r1]
  24:	e5903010 	ldr	r3, [r0, #16]
  28:	e2833001 	add	r3, r3, #1
  2c:	e5803010 	str	r3, [r0, #16]
  30:	e3a00001 	mov	r0, #1
  34:	e28dd00c 	add	sp, sp, #12
  38:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  3c:	e28d2007 	add	r2, sp, #7
  40:	e280000c 	add	r0, r0, #12
  44:	ebfffffe 	bl	0 <Pipe::CMemBufferPipe::vOnPush(unsigned char)>
  48:	e3a00001 	mov	r0, #1
  4c:	e28dd00c 	add	sp, sp, #12
  50:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .text._ZNSt8__detail9_Map_baseI11HuffmanCodeSt4pairIKS1_hESaIS4_ENS_10_Select1stE8KeyEqual7KeyHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb0ELb1EEELb1EEixERS3_:

00000000 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e591a004 	ldr	r10, [r1, #4]
   8:	e5908004 	ldr	r8, [r0, #4]
   c:	e24dd01c 	sub	sp, sp, #28
  10:	e1a04000 	mov	r4, r0
  14:	e1a0740a 	lsl	r7, r10, #8
  18:	e58d100c 	str	r1, [sp, #12]
  1c:	e1a00007 	mov	r0, r7
  20:	e1a01008 	mov	r1, r8
  24:	ebfffffe 	bl	0 <__aeabi_uidivmod>
  28:	e5943000 	ldr	r3, [r4]
  2c:	e7936101 	ldr	r6, [r3, r1, lsl #2]
  30:	e1a03101 	lsl	r3, r1, #2
  34:	e3560000 	cmp	r6, #0
  38:	e58d3008 	str	r3, [sp, #8]
  3c:	0a000019 	beq	a8 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0xa8>
  40:	e596c000 	ldr	r12, [r6]
  44:	e1a05001 	mov	r5, r1
  48:	e59cb010 	ldr	r11, [r12, #16]
  4c:	ea00000a 	b	7c <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0x7c>
  50:	e59c9000 	ldr	r9, [r12]
  54:	e3590000 	cmp	r9, #0
  58:	0a000012 	beq	a8 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0xa8>
  5c:	e599b010 	ldr	r11, [r9, #16]
  60:	e1a01008 	mov	r1, r8
  64:	e1a0000b 	mov	r0, r11
  68:	e1a0600c 	mov	r6, r12
  6c:	ebfffffe 	bl	0 <__aeabi_uidivmod>
  70:	e1550001 	cmp	r5, r1
  74:	1a00000b 	bne	a8 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0xa8>
  78:	e1a0c009 	mov	r12, r9
  7c:	e157000b 	cmp	r7, r11
  80:	1afffff2 	bne	50 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0x50>
  84:	e59c3008 	ldr	r3, [r12, #8]
  88:	e15a0003 	cmp	r10, r3
  8c:	1affffef 	bne	50 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0x50>
  90:	e5960000 	ldr	r0, [r6]
  94:	e3500000 	cmp	r0, #0
  98:	1280000c 	addne	r0, r0, #12
  9c:	0a000001 	beq	a8 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0xa8>
  a0:	e28dd01c 	add	sp, sp, #28
  a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  a8:	e3a00014 	mov	r0, #20
  ac:	ebfffffe 	bl	0 <operator new(unsigned int)>
  b0:	e1a05000 	mov	r5, r0
  b4:	e3a03001 	mov	r3, #1
  b8:	e3a06000 	mov	r6, #0
  bc:	e1a0c005 	mov	r12, r5
  c0:	e58d3000 	str	r3, [sp]
  c4:	e59d300c 	ldr	r3, [sp, #12]
  c8:	e48c6004 	str	r6, [r12], #4
  cc:	e8930003 	ldm	r3, {r0, r1}
  d0:	e5942004 	ldr	r2, [r4, #4]
  d4:	e88c0003 	stm	r12, {r0, r1}
  d8:	e594300c 	ldr	r3, [r4, #12]
  dc:	e5c5600c 	strb	r6, [r5, #12]
  e0:	e2841010 	add	r1, r4, #16
  e4:	e28d0010 	add	r0, sp, #16
  e8:	ebfffffe 	bl	0 <std::__detail::_Prime_rehash_policy::_M_need_rehash(unsigned int, unsigned int, unsigned int) const>
  ec:	e5dd3010 	ldrb	r3, [sp, #16]
  f0:	e1530006 	cmp	r3, r6
  f4:	1a000010 	bne	13c <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0x13c>
  f8:	e5948000 	ldr	r8, [r4]
  fc:	e59d2008 	ldr	r2, [sp, #8]
 100:	e5857010 	str	r7, [r5, #16]
 104:	e7983002 	ldr	r3, [r8, r2]
 108:	e0886002 	add	r6, r8, r2
 10c:	e3530000 	cmp	r3, #0
 110:	0a00004b 	beq	244 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0x244>
 114:	e5933000 	ldr	r3, [r3]
 118:	e5853000 	str	r3, [r5]
 11c:	e7983002 	ldr	r3, [r8, r2]
 120:	e5835000 	str	r5, [r3]
 124:	e594300c 	ldr	r3, [r4, #12]
 128:	e285000c 	add	r0, r5, #12
 12c:	e2833001 	add	r3, r3, #1
 130:	e584300c 	str	r3, [r4, #12]
 134:	e28dd01c 	add	sp, sp, #28
 138:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 13c:	e59db014 	ldr	r11, [sp, #20]
 140:	e35b0001 	cmp	r11, #1
 144:	01a08004 	moveq	r8, r4
 148:	05a86018 	streq	r6, [r8, #24]!
 14c:	058d800c 	streq	r8, [sp, #12]
 150:	0a00000a 	beq	180 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0x180>
 154:	e37b021e 	cmn	r11, #-536870911	; 0xe0000001
 158:	8a000045 	bhi	274 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0x274>
 15c:	e1a0910b 	lsl	r9, r11, #2
 160:	e1a00009 	mov	r0, r9
 164:	ebfffffe 	bl	0 <operator new(unsigned int)>
 168:	e2843018 	add	r3, r4, #24
 16c:	e1a02009 	mov	r2, r9
 170:	e1a01006 	mov	r1, r6
 174:	e1a08000 	mov	r8, r0
 178:	e58d300c 	str	r3, [sp, #12]
 17c:	ebfffffe 	bl	0 <memset>
 180:	e3a09000 	mov	r9, #0
 184:	e594a008 	ldr	r10, [r4, #8]
 188:	e5849008 	str	r9, [r4, #8]
 18c:	e15a0009 	cmp	r10, r9
 190:	12843008 	addne	r3, r4, #8
 194:	158d3008 	strne	r3, [sp, #8]
 198:	1a000006 	bne	1b8 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0x1b8>
 19c:	ea00001a 	b	20c <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0x20c>
 1a0:	e5900000 	ldr	r0, [r0]
 1a4:	e5860000 	str	r0, [r6]
 1a8:	e7981101 	ldr	r1, [r8, r1, lsl #2]
 1ac:	e5816000 	str	r6, [r1]
 1b0:	e35a0000 	cmp	r10, #0
 1b4:	0a000014 	beq	20c <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0x20c>
 1b8:	e1a0600a 	mov	r6, r10
 1bc:	e1a0100b 	mov	r1, r11
 1c0:	e5960010 	ldr	r0, [r6, #16]
 1c4:	ebfffffe 	bl	0 <__aeabi_uidivmod>
 1c8:	e7980101 	ldr	r0, [r8, r1, lsl #2]
 1cc:	e59aa000 	ldr	r10, [r10]
 1d0:	e3500000 	cmp	r0, #0
 1d4:	1afffff1 	bne	1a0 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0x1a0>
 1d8:	e5940008 	ldr	r0, [r4, #8]
 1dc:	e59d3008 	ldr	r3, [sp, #8]
 1e0:	e5860000 	str	r0, [r6]
 1e4:	e5846008 	str	r6, [r4, #8]
 1e8:	e7883101 	str	r3, [r8, r1, lsl #2]
 1ec:	e5960000 	ldr	r0, [r6]
 1f0:	e3500000 	cmp	r0, #0
 1f4:	01a09001 	moveq	r9, r1
 1f8:	0affffec 	beq	1b0 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0x1b0>
 1fc:	e35a0000 	cmp	r10, #0
 200:	e7886109 	str	r6, [r8, r9, lsl #2]
 204:	e1a09001 	mov	r9, r1
 208:	1affffea 	bne	1b8 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0x1b8>
 20c:	e5940000 	ldr	r0, [r4]
 210:	e59d300c 	ldr	r3, [sp, #12]
 214:	e5941004 	ldr	r1, [r4, #4]
 218:	e1530000 	cmp	r3, r0
 21c:	11a01101 	lslne	r1, r1, #2
 220:	1bfffffe 	blne	0 <operator delete(void*, unsigned int)>
 224:	e1a0100b 	mov	r1, r11
 228:	e1a00007 	mov	r0, r7
 22c:	e584b004 	str	r11, [r4, #4]
 230:	e5848000 	str	r8, [r4]
 234:	ebfffffe 	bl	0 <__aeabi_uidivmod>
 238:	e1a03101 	lsl	r3, r1, #2
 23c:	e58d3008 	str	r3, [sp, #8]
 240:	eaffffad 	b	fc <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0xfc>
 244:	e5943008 	ldr	r3, [r4, #8]
 248:	e5845008 	str	r5, [r4, #8]
 24c:	e3530000 	cmp	r3, #0
 250:	e5853000 	str	r3, [r5]
 254:	0a000003 	beq	268 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0x268>
 258:	e5930010 	ldr	r0, [r3, #16]
 25c:	e5941004 	ldr	r1, [r4, #4]
 260:	ebfffffe 	bl	0 <__aeabi_uidivmod>
 264:	e7885101 	str	r5, [r8, r1, lsl #2]
 268:	e2843008 	add	r3, r4, #8
 26c:	e5863000 	str	r3, [r6]
 270:	eaffffab 	b	124 <std::__detail::_Map_base<HuffmanCode, std::pair<HuffmanCode const, unsigned char>, std::allocator<std::pair<HuffmanCode const, unsigned char> >, std::__detail::_Select1st, KeyEqual, KeyHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true>, true>::operator[](HuffmanCode const&)+0x124>
 274:	e37b0107 	cmn	r11, #-1073741823	; 0xc0000001
 278:	8bfffffe 	blhi	0 <std::__throw_bad_array_new_length()>
 27c:	ebfffffe 	bl	0 <std::__throw_bad_alloc()>

Disassembly of section .text._ZN7WorkEnc12RegisterCodeE11HuffmanCodeh:

00000000 <WorkEnc::RegisterCode(HuffmanCode, unsigned char)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e24dd008 	sub	sp, sp, #8
   8:	e1a0500d 	mov	r5, sp
   c:	e1a06003 	mov	r6, r3
  10:	e1a04000 	mov	r4, r0
  14:	e2800b11 	add	r0, r0, #17408	; 0x4400
  18:	e8850006 	stm	r5, {r1, r2}
  1c:	e2800004 	add	r0, r0, #4
  20:	e1a01005 	mov	r1, r5
  24:	ebfffffe 	bl	0 <WorkEnc::RegisterCode(HuffmanCode, unsigned char)>
  28:	e2863d22 	add	r3, r6, #2176	; 0x880
  2c:	e2833004 	add	r3, r3, #4
  30:	e5c06000 	strb	r6, [r0]
  34:	e0844183 	add	r4, r4, r3, lsl #3
  38:	e8950003 	ldm	r5, {r0, r1}
  3c:	e8840003 	stm	r4, {r0, r1}
  40:	e28dd008 	add	sp, sp, #8
  44:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN6Branch14VisitRecursiveE11HuffmanCode:

00000000 <Branch::VisitRecursive(HuffmanCode)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   8:	e28d3018 	add	r3, sp, #24
   c:	e8830006 	stm	r3, {r1, r2}
  10:	e5908010 	ldr	r8, [r0, #16]
  14:	e1a04000 	mov	r4, r0
  18:	e3580000 	cmp	r8, #0
  1c:	e5dd5018 	ldrb	r5, [sp, #24]
  20:	0a00002e 	beq	e0 <Branch::VisitRecursive(HuffmanCode)+0xe0>
  24:	e598b010 	ldr	r11, [r8, #16]
  28:	e2859001 	add	r9, r5, #1
  2c:	e35b0000 	cmp	r11, #0
  30:	e1a07082 	lsl	r7, r2, #1
  34:	e20990ff 	and	r9, r9, #255	; 0xff
  38:	0a000048 	beq	160 <Branch::VisitRecursive(HuffmanCode)+0x160>
  3c:	e59ba010 	ldr	r10, [r11, #16]
  40:	e2853002 	add	r3, r5, #2
  44:	e20330ff 	and	r3, r3, #255	; 0xff
  48:	e58d3004 	str	r3, [sp, #4]
  4c:	e35a0000 	cmp	r10, #0
  50:	e1a03102 	lsl	r3, r2, #2
  54:	e58d3000 	str	r3, [sp]
  58:	0a000081 	beq	264 <Branch::VisitRecursive(HuffmanCode)+0x264>
  5c:	e59a0010 	ldr	r0, [r10, #16]
  60:	e2853003 	add	r3, r5, #3
  64:	e20330ff 	and	r3, r3, #255	; 0xff
  68:	e58d300c 	str	r3, [sp, #12]
  6c:	e3500000 	cmp	r0, #0
  70:	e1a03182 	lsl	r3, r2, #3
  74:	e58d3008 	str	r3, [sp, #8]
  78:	0a0000df 	beq	3fc <Branch::VisitRecursive(HuffmanCode)+0x3fc>
  7c:	e1a03202 	lsl	r3, r2, #4
  80:	e2852004 	add	r2, r5, #4
  84:	e58d3024 	str	r3, [sp, #36]	; 0x24
  88:	e58d3014 	str	r3, [sp, #20]
  8c:	e20230ff 	and	r3, r2, #255	; 0xff
  90:	e5cd3020 	strb	r3, [sp, #32]
  94:	e28d6020 	add	r6, sp, #32
  98:	e8960006 	ldm	r6, {r1, r2}
  9c:	e58d3010 	str	r3, [sp, #16]
  a0:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
  a4:	e59a0014 	ldr	r0, [r10, #20]
  a8:	e59d3014 	ldr	r3, [sp, #20]
  ac:	e3500000 	cmp	r0, #0
  b0:	1a0000d9 	bne	41c <Branch::VisitRecursive(HuffmanCode)+0x41c>
  b4:	e59ba014 	ldr	r10, [r11, #20]
  b8:	e35a0000 	cmp	r10, #0
  bc:	1a000071 	bne	288 <Branch::VisitRecursive(HuffmanCode)+0x288>
  c0:	e598a014 	ldr	r10, [r8, #20]
  c4:	e35a0000 	cmp	r10, #0
  c8:	1a00002d 	bne	184 <Branch::VisitRecursive(HuffmanCode)+0x184>
  cc:	e5948014 	ldr	r8, [r4, #20]
  d0:	e3580000 	cmp	r8, #0
  d4:	1a000008 	bne	fc <Branch::VisitRecursive(HuffmanCode)+0xfc>
  d8:	e28dd02c 	add	sp, sp, #44	; 0x2c
  dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  e0:	e5908014 	ldr	r8, [r0, #20]
  e4:	e3580000 	cmp	r8, #0
  e8:	12859001 	addne	r9, r5, #1
  ec:	11a07082 	lslne	r7, r2, #1
  f0:	120990ff 	andne	r9, r9, #255	; 0xff
  f4:	128d6020 	addne	r6, sp, #32
  f8:	0a0000e6 	beq	498 <Branch::VisitRecursive(HuffmanCode)+0x498>
  fc:	e598a010 	ldr	r10, [r8, #16]
 100:	e3877001 	orr	r7, r7, #1
 104:	e35a0000 	cmp	r10, #0
 108:	0a000075 	beq	2e4 <Branch::VisitRecursive(HuffmanCode)+0x2e4>
 10c:	e59a0010 	ldr	r0, [r10, #16]
 110:	e2859002 	add	r9, r5, #2
 114:	e3500000 	cmp	r0, #0
 118:	e20990ff 	and	r9, r9, #255	; 0xff
 11c:	e1a04087 	lsl	r4, r7, #1
 120:	0a00002c 	beq	1d8 <Branch::VisitRecursive(HuffmanCode)+0x1d8>
 124:	e285b003 	add	r11, r5, #3
 128:	e1a07107 	lsl	r7, r7, #2
 12c:	e20bb0ff 	and	r11, r11, #255	; 0xff
 130:	e58d7024 	str	r7, [sp, #36]	; 0x24
 134:	e5cdb020 	strb	r11, [sp, #32]
 138:	e8960006 	ldm	r6, {r1, r2}
 13c:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 140:	e59a0014 	ldr	r0, [r10, #20]
 144:	e3500000 	cmp	r0, #0
 148:	1a000028 	bne	1f0 <Branch::VisitRecursive(HuffmanCode)+0x1f0>
 14c:	e598a014 	ldr	r10, [r8, #20]
 150:	e35a0000 	cmp	r10, #0
 154:	1a00002d 	bne	210 <Branch::VisitRecursive(HuffmanCode)+0x210>
 158:	e28dd02c 	add	sp, sp, #44	; 0x2c
 15c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 160:	e598a014 	ldr	r10, [r8, #20]
 164:	e35a0000 	cmp	r10, #0
 168:	0a0000dc 	beq	4e0 <Branch::VisitRecursive(HuffmanCode)+0x4e0>
 16c:	e1a03102 	lsl	r3, r2, #2
 170:	e58d3000 	str	r3, [sp]
 174:	e2853002 	add	r3, r5, #2
 178:	e20330ff 	and	r3, r3, #255	; 0xff
 17c:	e58d3004 	str	r3, [sp, #4]
 180:	e28d6020 	add	r6, sp, #32
 184:	e59a0010 	ldr	r0, [r10, #16]
 188:	e59d3000 	ldr	r3, [sp]
 18c:	e3500000 	cmp	r0, #0
 190:	e3838001 	orr	r8, r3, #1
 194:	0a000069 	beq	340 <Branch::VisitRecursive(HuffmanCode)+0x340>
 198:	e285b003 	add	r11, r5, #3
 19c:	e1a08088 	lsl	r8, r8, #1
 1a0:	e20bb0ff 	and	r11, r11, #255	; 0xff
 1a4:	e58d8024 	str	r8, [sp, #36]	; 0x24
 1a8:	e5cdb020 	strb	r11, [sp, #32]
 1ac:	e8960006 	ldm	r6, {r1, r2}
 1b0:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 1b4:	e59a0014 	ldr	r0, [r10, #20]
 1b8:	e3500000 	cmp	r0, #0
 1bc:	0affffc2 	beq	cc <Branch::VisitRecursive(HuffmanCode)+0xcc>
 1c0:	e3888001 	orr	r8, r8, #1
 1c4:	e5cdb020 	strb	r11, [sp, #32]
 1c8:	e58d8024 	str	r8, [sp, #36]	; 0x24
 1cc:	e8960006 	ldm	r6, {r1, r2}
 1d0:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 1d4:	eaffffbc 	b	cc <Branch::VisitRecursive(HuffmanCode)+0xcc>
 1d8:	e59a0014 	ldr	r0, [r10, #20]
 1dc:	e3500000 	cmp	r0, #0
 1e0:	1285b003 	addne	r11, r5, #3
 1e4:	11a07107 	lslne	r7, r7, #2
 1e8:	120bb0ff 	andne	r11, r11, #255	; 0xff
 1ec:	0a0000cd 	beq	528 <Branch::VisitRecursive(HuffmanCode)+0x528>
 1f0:	e3877001 	orr	r7, r7, #1
 1f4:	e5cdb020 	strb	r11, [sp, #32]
 1f8:	e58d7024 	str	r7, [sp, #36]	; 0x24
 1fc:	e8960006 	ldm	r6, {r1, r2}
 200:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 204:	e598a014 	ldr	r10, [r8, #20]
 208:	e35a0000 	cmp	r10, #0
 20c:	0affffd1 	beq	158 <Branch::VisitRecursive(HuffmanCode)+0x158>
 210:	e59a0010 	ldr	r0, [r10, #16]
 214:	e3844001 	orr	r4, r4, #1
 218:	e3500000 	cmp	r0, #0
 21c:	0a00005f 	beq	3a0 <Branch::VisitRecursive(HuffmanCode)+0x3a0>
 220:	e2855003 	add	r5, r5, #3
 224:	e1a04084 	lsl	r4, r4, #1
 228:	e20550ff 	and	r5, r5, #255	; 0xff
 22c:	e5cd5020 	strb	r5, [sp, #32]
 230:	e58d4024 	str	r4, [sp, #36]	; 0x24
 234:	e8960006 	ldm	r6, {r1, r2}
 238:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 23c:	e59a0014 	ldr	r0, [r10, #20]
 240:	e3500000 	cmp	r0, #0
 244:	0affffc3 	beq	158 <Branch::VisitRecursive(HuffmanCode)+0x158>
 248:	e3844001 	orr	r4, r4, #1
 24c:	e5cd5020 	strb	r5, [sp, #32]
 250:	e58d4024 	str	r4, [sp, #36]	; 0x24
 254:	e8960006 	ldm	r6, {r1, r2}
 258:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 25c:	e28dd02c 	add	sp, sp, #44	; 0x2c
 260:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 264:	e59ba014 	ldr	r10, [r11, #20]
 268:	e35a0000 	cmp	r10, #0
 26c:	0a0000be 	beq	56c <Branch::VisitRecursive(HuffmanCode)+0x56c>
 270:	e1a03182 	lsl	r3, r2, #3
 274:	e58d3008 	str	r3, [sp, #8]
 278:	e2853003 	add	r3, r5, #3
 27c:	e20330ff 	and	r3, r3, #255	; 0xff
 280:	e58d300c 	str	r3, [sp, #12]
 284:	e28d6020 	add	r6, sp, #32
 288:	e59a0010 	ldr	r0, [r10, #16]
 28c:	e59d3008 	ldr	r3, [sp, #8]
 290:	e3500000 	cmp	r0, #0
 294:	e3833001 	orr	r3, r3, #1
 298:	0a000066 	beq	438 <Branch::VisitRecursive(HuffmanCode)+0x438>
 29c:	e1a0b083 	lsl	r11, r3, #1
 2a0:	e2853004 	add	r3, r5, #4
 2a4:	e20330ff 	and	r3, r3, #255	; 0xff
 2a8:	e5cd3020 	strb	r3, [sp, #32]
 2ac:	e58db024 	str	r11, [sp, #36]	; 0x24
 2b0:	e8960006 	ldm	r6, {r1, r2}
 2b4:	e58d3008 	str	r3, [sp, #8]
 2b8:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 2bc:	e59a0014 	ldr	r0, [r10, #20]
 2c0:	e59d3008 	ldr	r3, [sp, #8]
 2c4:	e3500000 	cmp	r0, #0
 2c8:	0affff7c 	beq	c0 <Branch::VisitRecursive(HuffmanCode)+0xc0>
 2cc:	e38bb001 	orr	r11, r11, #1
 2d0:	e5cd3020 	strb	r3, [sp, #32]
 2d4:	e58db024 	str	r11, [sp, #36]	; 0x24
 2d8:	e8960006 	ldm	r6, {r1, r2}
 2dc:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 2e0:	eaffff76 	b	c0 <Branch::VisitRecursive(HuffmanCode)+0xc0>
 2e4:	e598a014 	ldr	r10, [r8, #20]
 2e8:	e35a0000 	cmp	r10, #0
 2ec:	12859002 	addne	r9, r5, #2
 2f0:	120990ff 	andne	r9, r9, #255	; 0xff
 2f4:	11a04087 	lslne	r4, r7, #1
 2f8:	1affffc4 	bne	210 <Branch::VisitRecursive(HuffmanCode)+0x210>
 2fc:	e5984018 	ldr	r4, [r8, #24]
 300:	e5c89008 	strb	r9, [r8, #8]
 304:	e2840b11 	add	r0, r4, #17408	; 0x4400
 308:	e588700c 	str	r7, [r8, #12]
 30c:	e1a01006 	mov	r1, r6
 310:	e2800004 	add	r0, r0, #4
 314:	e5d85000 	ldrb	r5, [r8]
 318:	e5cd9020 	strb	r9, [sp, #32]
 31c:	e58d7024 	str	r7, [sp, #36]	; 0x24
 320:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 324:	e2853d22 	add	r3, r5, #2176	; 0x880
 328:	e2833004 	add	r3, r3, #4
 32c:	e5c05000 	strb	r5, [r0]
 330:	e0844183 	add	r4, r4, r3, lsl #3
 334:	e8960003 	ldm	r6, {r0, r1}
 338:	e8840003 	stm	r4, {r0, r1}
 33c:	eaffff85 	b	158 <Branch::VisitRecursive(HuffmanCode)+0x158>
 340:	e59a0014 	ldr	r0, [r10, #20]
 344:	e3500000 	cmp	r0, #0
 348:	1285b003 	addne	r11, r5, #3
 34c:	11a08088 	lslne	r8, r8, #1
 350:	120bb0ff 	andne	r11, r11, #255	; 0xff
 354:	1affff99 	bne	1c0 <Branch::VisitRecursive(HuffmanCode)+0x1c0>
 358:	e59ab018 	ldr	r11, [r10, #24]
 35c:	e59d3004 	ldr	r3, [sp, #4]
 360:	e28b0b11 	add	r0, r11, #17408	; 0x4400
 364:	e5ca3008 	strb	r3, [r10, #8]
 368:	e58a800c 	str	r8, [r10, #12]
 36c:	e1a01006 	mov	r1, r6
 370:	e2800004 	add	r0, r0, #4
 374:	e5daa000 	ldrb	r10, [r10]
 378:	e5cd3020 	strb	r3, [sp, #32]
 37c:	e58d8024 	str	r8, [sp, #36]	; 0x24
 380:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 384:	e28a3d22 	add	r3, r10, #2176	; 0x880
 388:	e2833004 	add	r3, r3, #4
 38c:	e5c0a000 	strb	r10, [r0]
 390:	e08bb183 	add	r11, r11, r3, lsl #3
 394:	e8960003 	ldm	r6, {r0, r1}
 398:	e88b0003 	stm	r11, {r0, r1}
 39c:	eaffff4a 	b	cc <Branch::VisitRecursive(HuffmanCode)+0xcc>
 3a0:	e59a0014 	ldr	r0, [r10, #20]
 3a4:	e3500000 	cmp	r0, #0
 3a8:	12855003 	addne	r5, r5, #3
 3ac:	120550ff 	andne	r5, r5, #255	; 0xff
 3b0:	11a04084 	lslne	r4, r4, #1
 3b4:	1affffa3 	bne	248 <Branch::VisitRecursive(HuffmanCode)+0x248>
 3b8:	e59a5018 	ldr	r5, [r10, #24]
 3bc:	e5ca9008 	strb	r9, [r10, #8]
 3c0:	e2850b11 	add	r0, r5, #17408	; 0x4400
 3c4:	e58a400c 	str	r4, [r10, #12]
 3c8:	e1a01006 	mov	r1, r6
 3cc:	e2800004 	add	r0, r0, #4
 3d0:	e5da7000 	ldrb	r7, [r10]
 3d4:	e5cd9020 	strb	r9, [sp, #32]
 3d8:	e58d4024 	str	r4, [sp, #36]	; 0x24
 3dc:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 3e0:	e2873d22 	add	r3, r7, #2176	; 0x880
 3e4:	e2833004 	add	r3, r3, #4
 3e8:	e5c07000 	strb	r7, [r0]
 3ec:	e0855183 	add	r5, r5, r3, lsl #3
 3f0:	e8960003 	ldm	r6, {r0, r1}
 3f4:	e8850003 	stm	r5, {r0, r1}
 3f8:	eaffff56 	b	158 <Branch::VisitRecursive(HuffmanCode)+0x158>
 3fc:	e59a0014 	ldr	r0, [r10, #20]
 400:	e3500000 	cmp	r0, #0
 404:	0a00006c 	beq	5bc <Branch::VisitRecursive(HuffmanCode)+0x5bc>
 408:	e1a03202 	lsl	r3, r2, #4
 40c:	e2852004 	add	r2, r5, #4
 410:	e20220ff 	and	r2, r2, #255	; 0xff
 414:	e58d2010 	str	r2, [sp, #16]
 418:	e28d6020 	add	r6, sp, #32
 41c:	e59d2010 	ldr	r2, [sp, #16]
 420:	e3833001 	orr	r3, r3, #1
 424:	e5cd2020 	strb	r2, [sp, #32]
 428:	e58d3024 	str	r3, [sp, #36]	; 0x24
 42c:	e8960006 	ldm	r6, {r1, r2}
 430:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 434:	eaffff1e 	b	b4 <Branch::VisitRecursive(HuffmanCode)+0xb4>
 438:	e59a0014 	ldr	r0, [r10, #20]
 43c:	e3500000 	cmp	r0, #0
 440:	11a0b083 	lslne	r11, r3, #1
 444:	12853004 	addne	r3, r5, #4
 448:	120330ff 	andne	r3, r3, #255	; 0xff
 44c:	1affff9e 	bne	2cc <Branch::VisitRecursive(HuffmanCode)+0x2cc>
 450:	e59ab018 	ldr	r11, [r10, #24]
 454:	e59d200c 	ldr	r2, [sp, #12]
 458:	e28b0b11 	add	r0, r11, #17408	; 0x4400
 45c:	e5ca2008 	strb	r2, [r10, #8]
 460:	e58a300c 	str	r3, [r10, #12]
 464:	e1a01006 	mov	r1, r6
 468:	e2800004 	add	r0, r0, #4
 46c:	e5daa000 	ldrb	r10, [r10]
 470:	e5cd2020 	strb	r2, [sp, #32]
 474:	e58d3024 	str	r3, [sp, #36]	; 0x24
 478:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 47c:	e5c0a000 	strb	r10, [r0]
 480:	e28aad22 	add	r10, r10, #2176	; 0x880
 484:	e28aa004 	add	r10, r10, #4
 488:	e08bb18a 	add	r11, r11, r10, lsl #3
 48c:	e8960003 	ldm	r6, {r0, r1}
 490:	e88b0003 	stm	r11, {r0, r1}
 494:	eaffff09 	b	c0 <Branch::VisitRecursive(HuffmanCode)+0xc0>
 498:	e280c008 	add	r12, r0, #8
 49c:	e8930003 	ldm	r3, {r0, r1}
 4a0:	e88c0005 	stm	r12, {r0, r2}
 4a4:	e5945018 	ldr	r5, [r4, #24]
 4a8:	e5d46000 	ldrb	r6, [r4]
 4ac:	e28d4020 	add	r4, sp, #32
 4b0:	e8840005 	stm	r4, {r0, r2}
 4b4:	e2850b11 	add	r0, r5, #17408	; 0x4400
 4b8:	e1a01004 	mov	r1, r4
 4bc:	e2800004 	add	r0, r0, #4
 4c0:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 4c4:	e2863d22 	add	r3, r6, #2176	; 0x880
 4c8:	e2833004 	add	r3, r3, #4
 4cc:	e5c06000 	strb	r6, [r0]
 4d0:	e0855183 	add	r5, r5, r3, lsl #3
 4d4:	e8940003 	ldm	r4, {r0, r1}
 4d8:	e8850003 	stm	r5, {r0, r1}
 4dc:	eaffff1d 	b	158 <Branch::VisitRecursive(HuffmanCode)+0x158>
 4e0:	e598a018 	ldr	r10, [r8, #24]
 4e4:	e28d6020 	add	r6, sp, #32
 4e8:	e28a0b11 	add	r0, r10, #17408	; 0x4400
 4ec:	e5c89008 	strb	r9, [r8, #8]
 4f0:	e588700c 	str	r7, [r8, #12]
 4f4:	e1a01006 	mov	r1, r6
 4f8:	e2800004 	add	r0, r0, #4
 4fc:	e5d88000 	ldrb	r8, [r8]
 500:	e5cd9020 	strb	r9, [sp, #32]
 504:	e58d7024 	str	r7, [sp, #36]	; 0x24
 508:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 50c:	e2883d22 	add	r3, r8, #2176	; 0x880
 510:	e2833004 	add	r3, r3, #4
 514:	e5c08000 	strb	r8, [r0]
 518:	e08aa183 	add	r10, r10, r3, lsl #3
 51c:	e8960003 	ldm	r6, {r0, r1}
 520:	e88a0003 	stm	r10, {r0, r1}
 524:	eafffee8 	b	cc <Branch::VisitRecursive(HuffmanCode)+0xcc>
 528:	e59ab018 	ldr	r11, [r10, #24]
 52c:	e5ca9008 	strb	r9, [r10, #8]
 530:	e28b0b11 	add	r0, r11, #17408	; 0x4400
 534:	e58a400c 	str	r4, [r10, #12]
 538:	e1a01006 	mov	r1, r6
 53c:	e2800004 	add	r0, r0, #4
 540:	e5da7000 	ldrb	r7, [r10]
 544:	e5cd9020 	strb	r9, [sp, #32]
 548:	e58d4024 	str	r4, [sp, #36]	; 0x24
 54c:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 550:	e2873d22 	add	r3, r7, #2176	; 0x880
 554:	e2833004 	add	r3, r3, #4
 558:	e5c07000 	strb	r7, [r0]
 55c:	e08bb183 	add	r11, r11, r3, lsl #3
 560:	e8960003 	ldm	r6, {r0, r1}
 564:	e88b0003 	stm	r11, {r0, r1}
 568:	eafffef7 	b	14c <Branch::VisitRecursive(HuffmanCode)+0x14c>
 56c:	e59ba018 	ldr	r10, [r11, #24]
 570:	e59d3004 	ldr	r3, [sp, #4]
 574:	e59d2000 	ldr	r2, [sp]
 578:	e28d6020 	add	r6, sp, #32
 57c:	e28a0b11 	add	r0, r10, #17408	; 0x4400
 580:	e5cb3008 	strb	r3, [r11, #8]
 584:	e58b200c 	str	r2, [r11, #12]
 588:	e1a01006 	mov	r1, r6
 58c:	e2800004 	add	r0, r0, #4
 590:	e5dbb000 	ldrb	r11, [r11]
 594:	e5cd3020 	strb	r3, [sp, #32]
 598:	e58d2024 	str	r2, [sp, #36]	; 0x24
 59c:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 5a0:	e28b3d22 	add	r3, r11, #2176	; 0x880
 5a4:	e2833004 	add	r3, r3, #4
 5a8:	e5c0b000 	strb	r11, [r0]
 5ac:	e08aa183 	add	r10, r10, r3, lsl #3
 5b0:	e8960003 	ldm	r6, {r0, r1}
 5b4:	e88a0003 	stm	r10, {r0, r1}
 5b8:	eafffec0 	b	c0 <Branch::VisitRecursive(HuffmanCode)+0xc0>
 5bc:	e1a01003 	mov	r1, r3
 5c0:	e58a300c 	str	r3, [r10, #12]
 5c4:	e59a3018 	ldr	r3, [r10, #24]
 5c8:	e59d200c 	ldr	r2, [sp, #12]
 5cc:	e2830b11 	add	r0, r3, #17408	; 0x4400
 5d0:	e28d6020 	add	r6, sp, #32
 5d4:	e5ca2008 	strb	r2, [r10, #8]
 5d8:	e2800004 	add	r0, r0, #4
 5dc:	e5daa000 	ldrb	r10, [r10]
 5e0:	e58d1024 	str	r1, [sp, #36]	; 0x24
 5e4:	e1a01006 	mov	r1, r6
 5e8:	e58d3010 	str	r3, [sp, #16]
 5ec:	e5cd2020 	strb	r2, [sp, #32]
 5f0:	ebfffffe 	bl	0 <Branch::VisitRecursive(HuffmanCode)>
 5f4:	e59d3010 	ldr	r3, [sp, #16]
 5f8:	e5c0a000 	strb	r10, [r0]
 5fc:	e28aad22 	add	r10, r10, #2176	; 0x880
 600:	e28aa004 	add	r10, r10, #4
 604:	e083318a 	add	r3, r3, r10, lsl #3
 608:	e8960003 	ldm	r6, {r0, r1}
 60c:	e8830003 	stm	r3, {r0, r1}
 610:	eafffea7 	b	b4 <Branch::VisitRecursive(HuffmanCode)+0xb4>

Disassembly of section .text._ZNSt7__cxx114listIP6BranchSaIS2_EE5mergeIPFbS2_S2_EEEvOS4_T_:

00000000 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::merge<bool (*)(Branch*, Branch*)>(std::__cxx11::list<Branch*, std::allocator<Branch*> >&&, bool (*)(Branch*, Branch*))>:
   0:	e1510000 	cmp	r1, r0
   4:	01a0f00e 	moveq	pc, lr
   8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   c:	e5904000 	ldr	r4, [r0]
  10:	e1a07000 	mov	r7, r0
  14:	e1500004 	cmp	r0, r4
  18:	e1a06001 	mov	r6, r1
  1c:	e1a08002 	mov	r8, r2
  20:	e5915000 	ldr	r5, [r1]
  24:	1a000002 	bne	34 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::merge<bool (*)(Branch*, Branch*)>(std::__cxx11::list<Branch*, std::allocator<Branch*> >&&, bool (*)(Branch*, Branch*))+0x34>
  28:	ea000012 	b	78 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::merge<bool (*)(Branch*, Branch*)>(std::__cxx11::list<Branch*, std::allocator<Branch*> >&&, bool (*)(Branch*, Branch*))+0x78>
  2c:	e1570004 	cmp	r7, r4
  30:	0a000010 	beq	78 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::merge<bool (*)(Branch*, Branch*)>(std::__cxx11::list<Branch*, std::allocator<Branch*> >&&, bool (*)(Branch*, Branch*))+0x78>
  34:	e1560005 	cmp	r6, r5
  38:	0a000014 	beq	90 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::merge<bool (*)(Branch*, Branch*)>(std::__cxx11::list<Branch*, std::allocator<Branch*> >&&, bool (*)(Branch*, Branch*))+0x90>
  3c:	e5941008 	ldr	r1, [r4, #8]
  40:	e5950008 	ldr	r0, [r5, #8]
  44:	e1a0e00f 	mov	lr, pc
  48:	e1a0f008 	mov	pc, r8
  4c:	e3500000 	cmp	r0, #0
  50:	05944000 	ldreq	r4, [r4]
  54:	0afffff4 	beq	2c <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::merge<bool (*)(Branch*, Branch*)>(std::__cxx11::list<Branch*, std::allocator<Branch*> >&&, bool (*)(Branch*, Branch*))+0x2c>
  58:	e5959000 	ldr	r9, [r5]
  5c:	e1a01005 	mov	r1, r5
  60:	e1a02009 	mov	r2, r9
  64:	e1a00004 	mov	r0, r4
  68:	ebfffffe 	bl	0 <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
  6c:	e1570004 	cmp	r7, r4
  70:	e1a05009 	mov	r5, r9
  74:	1affffee 	bne	34 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::merge<bool (*)(Branch*, Branch*)>(std::__cxx11::list<Branch*, std::allocator<Branch*> >&&, bool (*)(Branch*, Branch*))+0x34>
  78:	e1560005 	cmp	r6, r5
  7c:	0a000003 	beq	90 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::merge<bool (*)(Branch*, Branch*)>(std::__cxx11::list<Branch*, std::allocator<Branch*> >&&, bool (*)(Branch*, Branch*))+0x90>
  80:	e1a02006 	mov	r2, r6
  84:	e1a01005 	mov	r1, r5
  88:	e1a00007 	mov	r0, r7
  8c:	ebfffffe 	bl	0 <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
  90:	e3a02000 	mov	r2, #0
  94:	e5973008 	ldr	r3, [r7, #8]
  98:	e5961008 	ldr	r1, [r6, #8]
  9c:	e0833001 	add	r3, r3, r1
  a0:	e5873008 	str	r3, [r7, #8]
  a4:	e5862008 	str	r2, [r6, #8]
  a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

Disassembly of section .text._ZNSt7__cxx114listIP6BranchSaIS2_EE4sortIPFbS2_S2_EEEvT_:

00000000 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))>:
   0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   4:	e5904000 	ldr	r4, [r0]
   8:	e24dde31 	sub	sp, sp, #784	; 0x310
   c:	e1540000 	cmp	r4, r0
  10:	0a000068 	beq	1b8 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x1b8>
  14:	e5943000 	ldr	r3, [r4]
  18:	e1a08000 	mov	r8, r0
  1c:	e1500003 	cmp	r0, r3
  20:	0a000064 	beq	1b8 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x1b8>
  24:	e3a02000 	mov	r2, #0
  28:	e28d7010 	add	r7, sp, #16
  2c:	e1a03007 	mov	r3, r7
  30:	e28d6004 	add	r6, sp, #4
  34:	e1a05001 	mov	r5, r1
  38:	e58d6008 	str	r6, [sp, #8]
  3c:	e58d6004 	str	r6, [sp, #4]
  40:	e28d1e31 	add	r1, sp, #784	; 0x310
  44:	e58d200c 	str	r2, [sp, #12]
  48:	e5832008 	str	r2, [r3, #8]
  4c:	e5833004 	str	r3, [r3, #4]
  50:	e5833000 	str	r3, [r3]
  54:	e283300c 	add	r3, r3, #12
  58:	e1530001 	cmp	r3, r1
  5c:	1afffff9 	bne	48 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x48>
  60:	e1a00006 	mov	r0, r6
  64:	e1a09007 	mov	r9, r7
  68:	e5942000 	ldr	r2, [r4]
  6c:	e1520000 	cmp	r2, r0
  70:	11540000 	cmpne	r4, r0
  74:	0a000007 	beq	98 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x98>
  78:	e1a01004 	mov	r1, r4
  7c:	ebfffffe 	bl	0 <std::__detail::_List_node_base::_M_transfer(std::__detail::_List_node_base*, std::__detail::_List_node_base*)>
  80:	e59d200c 	ldr	r2, [sp, #12]
  84:	e5983008 	ldr	r3, [r8, #8]
  88:	e2822001 	add	r2, r2, #1
  8c:	e2433001 	sub	r3, r3, #1
  90:	e58d200c 	str	r2, [sp, #12]
  94:	e5883008 	str	r3, [r8, #8]
  98:	e1590007 	cmp	r9, r7
  9c:	0a000047 	beq	1c0 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x1c0>
  a0:	e1a04007 	mov	r4, r7
  a4:	ea00000d 	b	e0 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0xe0>
  a8:	e1a02005 	mov	r2, r5
  ac:	e1a00004 	mov	r0, r4
  b0:	e1a01006 	mov	r1, r6
  b4:	ebfffffe 	bl	0 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))>
  b8:	e1a01004 	mov	r1, r4
  bc:	e1a00006 	mov	r0, r6
  c0:	ebfffffe 	bl	0 <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)>
  c4:	e59d200c 	ldr	r2, [sp, #12]
  c8:	e5943008 	ldr	r3, [r4, #8]
  cc:	e5842008 	str	r2, [r4, #8]
  d0:	e284400c 	add	r4, r4, #12
  d4:	e1590004 	cmp	r9, r4
  d8:	e58d300c 	str	r3, [sp, #12]
  dc:	0a000038 	beq	1c4 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x1c4>
  e0:	e5943000 	ldr	r3, [r4]
  e4:	e1530004 	cmp	r3, r4
  e8:	1affffee 	bne	a8 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0xa8>
  ec:	e1a01004 	mov	r1, r4
  f0:	e1a00006 	mov	r0, r6
  f4:	ebfffffe 	bl	0 <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)>
  f8:	e5943008 	ldr	r3, [r4, #8]
  fc:	e59d200c 	ldr	r2, [sp, #12]
 100:	e1590004 	cmp	r9, r4
 104:	e5842008 	str	r2, [r4, #8]
 108:	e58d300c 	str	r3, [sp, #12]
 10c:	0a000033 	beq	1e0 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x1e0>
 110:	e5984000 	ldr	r4, [r8]
 114:	e1580004 	cmp	r8, r4
 118:	159d0004 	ldrne	r0, [sp, #4]
 11c:	1affffd1 	bne	68 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x68>
 120:	e28da01c 	add	r10, sp, #28
 124:	e159000a 	cmp	r9, r10
 128:	0a000006 	beq	148 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x148>
 12c:	e1a0000a 	mov	r0, r10
 130:	e24a100c 	sub	r1, r10, #12
 134:	e1a02005 	mov	r2, r5
 138:	e28aa00c 	add	r10, r10, #12
 13c:	ebfffffe 	bl	0 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))>
 140:	e159000a 	cmp	r9, r10
 144:	1afffff8 	bne	12c <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x12c>
 148:	e1a00004 	mov	r0, r4
 14c:	e249100c 	sub	r1, r9, #12
 150:	ebfffffe 	bl	0 <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)>
 154:	e5192004 	ldr	r2, [r9, #-4]
 158:	e5983008 	ldr	r3, [r8, #8]
 15c:	e28d5e31 	add	r5, sp, #784	; 0x310
 160:	e5882008 	str	r2, [r8, #8]
 164:	e5093004 	str	r3, [r9, #-4]
 168:	e535400c 	ldr	r4, [r5, #-12]!
 16c:	e1550004 	cmp	r5, r4
 170:	0a000005 	beq	18c <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x18c>
 174:	e1a00004 	mov	r0, r4
 178:	e5944000 	ldr	r4, [r4]
 17c:	e3a0100c 	mov	r1, #12
 180:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 184:	e1550004 	cmp	r5, r4
 188:	1afffff9 	bne	174 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x174>
 18c:	e1550007 	cmp	r5, r7
 190:	1afffff4 	bne	168 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x168>
 194:	e59d4004 	ldr	r4, [sp, #4]
 198:	e1540006 	cmp	r4, r6
 19c:	0a000005 	beq	1b8 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x1b8>
 1a0:	e1a00004 	mov	r0, r4
 1a4:	e5944000 	ldr	r4, [r4]
 1a8:	e3a0100c 	mov	r1, #12
 1ac:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 1b0:	e1540006 	cmp	r4, r6
 1b4:	1afffff9 	bne	1a0 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x1a0>
 1b8:	e28dde31 	add	sp, sp, #784	; 0x310
 1bc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1c0:	e1a04009 	mov	r4, r9
 1c4:	e1a01004 	mov	r1, r4
 1c8:	e1a00006 	mov	r0, r6
 1cc:	ebfffffe 	bl	0 <std::__detail::_List_node_base::swap(std::__detail::_List_node_base&, std::__detail::_List_node_base&)>
 1d0:	e5942008 	ldr	r2, [r4, #8]
 1d4:	e59d300c 	ldr	r3, [sp, #12]
 1d8:	e58d200c 	str	r2, [sp, #12]
 1dc:	e5843008 	str	r3, [r4, #8]
 1e0:	e289900c 	add	r9, r9, #12
 1e4:	eaffffc9 	b	110 <void std::__cxx11::list<Branch*, std::allocator<Branch*> >::sort<bool (*)(Branch*, Branch*)>(bool (*)(Branch*, Branch*))+0x110>

Disassembly of section .text._ZN7Huffman15CHuffmanEncoder6EncodeEv:

00000000 <Huffman::CHuffmanEncoder::Encode()>:
       0:	e1a03000 	mov	r3, r0
       4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
       8:	e3a00024 	mov	r0, #36	; 0x24
       c:	e24dd084 	sub	sp, sp, #132	; 0x84
      10:	e98d4008 	stmib	sp, {r3, lr}
      14:	ebfffffe 	bl	0 <operator new(unsigned int)>
      18:	e3a02001 	mov	r2, #1
      1c:	e1a0a000 	mov	r10, r0
      20:	e58a2004 	str	r2, [r10, #4]
      24:	e58a2008 	str	r2, [r10, #8]
      28:	e1a0200a 	mov	r2, r10
      2c:	e59fcf44 	ldr	r12, [pc, #3908]	; f78 <Huffman::CHuffmanEncoder::Encode()+0xf78>
      30:	e3a03000 	mov	r3, #0
      34:	e482c00c 	str	r12, [r2], #12
      38:	e1a04002 	mov	r4, r2
      3c:	e59f1f38 	ldr	r1, [pc, #3896]	; f7c <Huffman::CHuffmanEncoder::Encode()+0xf7c>
      40:	e5823004 	str	r3, [r2, #4]
      44:	e5823008 	str	r3, [r2, #8]
      48:	e28d0030 	add	r0, sp, #48	; 0x30
      4c:	e58a3018 	str	r3, [r10, #24]
      50:	e58a301c 	str	r3, [r10, #28]
      54:	e58a3020 	str	r3, [r10, #32]
      58:	e58a100c 	str	r1, [r10, #12]
      5c:	e58d200c 	str	r2, [sp, #12]
      60:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
      64:	e58d4038 	str	r4, [sp, #56]	; 0x38
      68:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
      6c:	e59a3004 	ldr	r3, [r10, #4]
      70:	e15a0004 	cmp	r10, r4
      74:	1a0000e2 	bne	404 <Huffman::CHuffmanEncoder::Encode()+0x404>
      78:	e3530000 	cmp	r3, #0
      7c:	e58a3004 	str	r3, [r10, #4]
      80:	0a0000ff 	beq	484 <Huffman::CHuffmanEncoder::Encode()+0x484>
      84:	e3a05007 	mov	r5, #7
      88:	e3a04001 	mov	r4, #1
      8c:	e1a03514 	lsl	r3, r4, r5
      90:	e3130077 	tst	r3, #119	; 0x77
      94:	13a01001 	movne	r1, #1
      98:	03a01000 	moveq	r1, #0
      9c:	e28d0030 	add	r0, sp, #48	; 0x30
      a0:	e2455001 	sub	r5, r5, #1
      a4:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
      a8:	e3750001 	cmn	r5, #1
      ac:	1afffff6 	bne	8c <Huffman::CHuffmanEncoder::Encode()+0x8c>
      b0:	e3a01000 	mov	r1, #0
      b4:	e28d0030 	add	r0, sp, #48	; 0x30
      b8:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
      bc:	e59f0ebc 	ldr	r0, [pc, #3772]	; f80 <Huffman::CHuffmanEncoder::Encode()+0xf80>
      c0:	ebfffffe 	bl	0 <operator new(unsigned int)>
      c4:	e3a07000 	mov	r7, #0
      c8:	e3a035fe 	mov	r3, #1065353216	; 0x3f800000
      cc:	e1a05000 	mov	r5, r0
      d0:	e1a0b007 	mov	r11, r7
      d4:	e2806901 	add	r6, r0, #16384	; 0x4000
      d8:	e5807400 	str	r7, [r0, #1024]	; 0x400
      dc:	e5863414 	str	r3, [r6, #1044]	; 0x414
      e0:	e2803b11 	add	r3, r0, #17408	; 0x4400
      e4:	e283301c 	add	r3, r3, #28
      e8:	e5863404 	str	r3, [r6, #1028]	; 0x404
      ec:	e5864408 	str	r4, [r6, #1032]	; 0x408
      f0:	e586740c 	str	r7, [r6, #1036]	; 0x40c
      f4:	e5867410 	str	r7, [r6, #1040]	; 0x410
      f8:	e5867418 	str	r7, [r6, #1048]	; 0x418
      fc:	e586741c 	str	r7, [r6, #1052]	; 0x41c
     100:	e3a02b02 	mov	r2, #2048	; 0x800
     104:	e1a01007 	mov	r1, r7
     108:	e2860e42 	add	r0, r6, #1056	; 0x420
     10c:	e59f8e70 	ldr	r8, [pc, #3696]	; f84 <Huffman::CHuffmanEncoder::Encode()+0xf84>
     110:	e2866ec2 	add	r6, r6, #3104	; 0xc20
     114:	ebfffffe 	bl	0 <memset>
     118:	e1c670b0 	strh	r7, [r6]
     11c:	e3a02b01 	mov	r2, #1024	; 0x400
     120:	e1a01007 	mov	r1, r7
     124:	e1a00005 	mov	r0, r5
     128:	e5885000 	str	r5, [r8]
     12c:	ebfffffe 	bl	0 <memset>
     130:	e59d6004 	ldr	r6, [sp, #4]
     134:	e5cd7022 	strb	r7, [sp, #34]	; 0x22
     138:	e5964000 	ldr	r4, [r6]
     13c:	e28d1022 	add	r1, sp, #34	; 0x22
     140:	e5943000 	ldr	r3, [r4]
     144:	e1a00004 	mov	r0, r4
     148:	e5933004 	ldr	r3, [r3, #4]
     14c:	e1a0e00f 	mov	lr, pc
     150:	e1a0f003 	mov	pc, r3
     154:	e3500000 	cmp	r0, #0
     158:	1a000081 	bne	364 <Huffman::CHuffmanEncoder::Encode()+0x364>
     15c:	e35b0000 	cmp	r11, #0
     160:	0a0000d7 	beq	4c4 <Huffman::CHuffmanEncoder::Encode()+0x4c4>
     164:	e59d3004 	ldr	r3, [sp, #4]
     168:	e28d6024 	add	r6, sp, #36	; 0x24
     16c:	e5932000 	ldr	r2, [r3]
     170:	e2457004 	sub	r7, r5, #4
     174:	e5820008 	str	r0, [r2, #8]
     178:	e58d5010 	str	r5, [sp, #16]
     17c:	e58da014 	str	r10, [sp, #20]
     180:	e1a05000 	mov	r5, r0
     184:	e1a0a007 	mov	r10, r7
     188:	e59d9008 	ldr	r9, [sp, #8]
     18c:	e58d002c 	str	r0, [sp, #44]	; 0x2c
     190:	e58d6028 	str	r6, [sp, #40]	; 0x28
     194:	e58d6024 	str	r6, [sp, #36]	; 0x24
     198:	ea00001a 	b	208 <Huffman::CHuffmanEncoder::Encode()+0x208>
     19c:	e3a01000 	mov	r1, #0
     1a0:	e280cb01 	add	r12, r0, #1024	; 0x400
     1a4:	e28cc004 	add	r12, r12, #4
     1a8:	e087400c 	add	r4, r7, r12
     1ac:	e280001c 	add	r0, r0, #28
     1b0:	e5870400 	str	r0, [r7, #1024]	; 0x400
     1b4:	e7c7100c 	strb	r1, [r7, r12]
     1b8:	e5841004 	str	r1, [r4, #4]
     1bc:	e5c41008 	strb	r1, [r4, #8]
     1c0:	e584100c 	str	r1, [r4, #12]
     1c4:	e5841010 	str	r1, [r4, #16]
     1c8:	e5841014 	str	r1, [r4, #20]
     1cc:	e5c45000 	strb	r5, [r4]
     1d0:	e59a1000 	ldr	r1, [r10]
     1d4:	e3a0000c 	mov	r0, #12
     1d8:	e5841004 	str	r1, [r4, #4]
     1dc:	e5847018 	str	r7, [r4, #24]
     1e0:	ebfffffe 	bl	0 <operator new(unsigned int)>
     1e4:	e1a01006 	mov	r1, r6
     1e8:	e5804008 	str	r4, [r0, #8]
     1ec:	ebfffffe 	bl	0 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
     1f0:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
     1f4:	e2811001 	add	r1, r1, #1
     1f8:	e58d102c 	str	r1, [sp, #44]	; 0x2c
     1fc:	e2855001 	add	r5, r5, #1
     200:	e3550c01 	cmp	r5, #256	; 0x100
     204:	0a000110 	beq	64c <Huffman::CHuffmanEncoder::Encode()+0x64c>
     208:	e5ba1004 	ldr	r1, [r10, #4]!
     20c:	e3510000 	cmp	r1, #0
     210:	0afffff9 	beq	1fc <Huffman::CHuffmanEncoder::Encode()+0x1fc>
     214:	e5987000 	ldr	r7, [r8]
     218:	e3570000 	cmp	r7, #0
     21c:	0a000059 	beq	388 <Huffman::CHuffmanEncoder::Encode()+0x388>
     220:	e5970400 	ldr	r0, [r7, #1024]	; 0x400
     224:	e59f1d5c 	ldr	r1, [pc, #3420]	; f88 <Huffman::CHuffmanEncoder::Encode()+0xf88>
     228:	e1500001 	cmp	r0, r1
     22c:	9affffda 	bls	19c <Huffman::CHuffmanEncoder::Encode()+0x19c>
     230:	e59f0d54 	ldr	r0, [pc, #3412]	; f8c <Huffman::CHuffmanEncoder::Encode()+0xf8c>
     234:	ebfffffe 	bl	0 <b8SysPuts>
     238:	e59f0d50 	ldr	r0, [pc, #3408]	; f90 <Huffman::CHuffmanEncoder::Encode()+0xf90>
     23c:	ebfffffe 	bl	0 <b8SysPuts>
     240:	e59f0d4c 	ldr	r0, [pc, #3404]	; f94 <Huffman::CHuffmanEncoder::Encode()+0xf94>
     244:	ebfffffe 	bl	0 <b8SysPuts>
     248:	e3a000f4 	mov	r0, #244	; 0xf4
     24c:	ebfffffe 	bl	0 <b8SysPutNum>
     250:	e59f0d40 	ldr	r0, [pc, #3392]	; f98 <Huffman::CHuffmanEncoder::Encode()+0xf98>
     254:	ebfffffe 	bl	0 <b8SysPuts>
     258:	e59f0d3c 	ldr	r0, [pc, #3388]	; f9c <Huffman::CHuffmanEncoder::Encode()+0xf9c>
     25c:	ebfffffe 	bl	0 <b8SysPuts>
     260:	e59f0d38 	ldr	r0, [pc, #3384]	; fa0 <Huffman::CHuffmanEncoder::Encode()+0xfa0>
     264:	ebfffffe 	bl	0 <b8SysPuts>
     268:	e59f0d34 	ldr	r0, [pc, #3380]	; fa4 <Huffman::CHuffmanEncoder::Encode()+0xfa4>
     26c:	ebfffffe 	bl	0 <b8SysPuts>
     270:	e59f0d30 	ldr	r0, [pc, #3376]	; fa8 <Huffman::CHuffmanEncoder::Encode()+0xfa8>
     274:	ebfffffe 	bl	0 <b8SysPuts>
     278:	e59f0d2c 	ldr	r0, [pc, #3372]	; fac <Huffman::CHuffmanEncoder::Encode()+0xfac>
     27c:	ebfffffe 	bl	0 <b8SysPuts>
     280:	e1a00009 	mov	r0, r9
     284:	ebfffffe 	bl	0 <b8SysPutHex>
     288:	e59f0d18 	ldr	r0, [pc, #3352]	; fa8 <Huffman::CHuffmanEncoder::Encode()+0xfa8>
     28c:	ebfffffe 	bl	0 <b8SysPuts>
     290:	e59f0d18 	ldr	r0, [pc, #3352]	; fb0 <Huffman::CHuffmanEncoder::Encode()+0xfb0>
     294:	ebfffffe 	bl	0 <b8SysPuts>
     298:	e59f0d14 	ldr	r0, [pc, #3348]	; fb4 <Huffman::CHuffmanEncoder::Encode()+0xfb4>
     29c:	ebfffffe 	bl	0 <b8SysPuts>
     2a0:	e1000070 	hlt	0x0000
     2a4:	e3a01000 	mov	r1, #0
     2a8:	e597c400 	ldr	r12, [r7, #1024]	; 0x400
     2ac:	e598e000 	ldr	lr, [r8]
     2b0:	e28c0b01 	add	r0, r12, #1024	; 0x400
     2b4:	e2800004 	add	r0, r0, #4
     2b8:	e0874000 	add	r4, r7, r0
     2bc:	e15e0001 	cmp	lr, r1
     2c0:	e28cc01c 	add	r12, r12, #28
     2c4:	e587c400 	str	r12, [r7, #1024]	; 0x400
     2c8:	e7c71000 	strb	r1, [r7, r0]
     2cc:	11a0700e 	movne	r7, lr
     2d0:	e5841004 	str	r1, [r4, #4]
     2d4:	e5c41008 	strb	r1, [r4, #8]
     2d8:	e584100c 	str	r1, [r4, #12]
     2dc:	e5841010 	str	r1, [r4, #16]
     2e0:	e5841014 	str	r1, [r4, #20]
     2e4:	1affffb8 	bne	1cc <Huffman::CHuffmanEncoder::Encode()+0x1cc>
     2e8:	e59f0c9c 	ldr	r0, [pc, #3228]	; f8c <Huffman::CHuffmanEncoder::Encode()+0xf8c>
     2ec:	ebfffffe 	bl	0 <b8SysPuts>
     2f0:	e59f0c98 	ldr	r0, [pc, #3224]	; f90 <Huffman::CHuffmanEncoder::Encode()+0xf90>
     2f4:	ebfffffe 	bl	0 <b8SysPuts>
     2f8:	e59f0c94 	ldr	r0, [pc, #3220]	; f94 <Huffman::CHuffmanEncoder::Encode()+0xf94>
     2fc:	ebfffffe 	bl	0 <b8SysPuts>
     300:	e3a000a8 	mov	r0, #168	; 0xa8
     304:	ebfffffe 	bl	0 <b8SysPutNum>
     308:	e59f0c88 	ldr	r0, [pc, #3208]	; f98 <Huffman::CHuffmanEncoder::Encode()+0xf98>
     30c:	ebfffffe 	bl	0 <b8SysPuts>
     310:	e59f0ca0 	ldr	r0, [pc, #3232]	; fb8 <Huffman::CHuffmanEncoder::Encode()+0xfb8>
     314:	ebfffffe 	bl	0 <b8SysPuts>
     318:	e59f0c80 	ldr	r0, [pc, #3200]	; fa0 <Huffman::CHuffmanEncoder::Encode()+0xfa0>
     31c:	ebfffffe 	bl	0 <b8SysPuts>
     320:	e59f0c94 	ldr	r0, [pc, #3220]	; fbc <Huffman::CHuffmanEncoder::Encode()+0xfbc>
     324:	ebfffffe 	bl	0 <b8SysPuts>
     328:	e59f0c78 	ldr	r0, [pc, #3192]	; fa8 <Huffman::CHuffmanEncoder::Encode()+0xfa8>
     32c:	ebfffffe 	bl	0 <b8SysPuts>
     330:	e59f0c74 	ldr	r0, [pc, #3188]	; fac <Huffman::CHuffmanEncoder::Encode()+0xfac>
     334:	ebfffffe 	bl	0 <b8SysPuts>
     338:	e1a00009 	mov	r0, r9
     33c:	ebfffffe 	bl	0 <b8SysPutHex>
     340:	e59f0c60 	ldr	r0, [pc, #3168]	; fa8 <Huffman::CHuffmanEncoder::Encode()+0xfa8>
     344:	ebfffffe 	bl	0 <b8SysPuts>
     348:	e59f0c60 	ldr	r0, [pc, #3168]	; fb0 <Huffman::CHuffmanEncoder::Encode()+0xfb0>
     34c:	ebfffffe 	bl	0 <b8SysPuts>
     350:	e59f0c5c 	ldr	r0, [pc, #3164]	; fb4 <Huffman::CHuffmanEncoder::Encode()+0xfb4>
     354:	ebfffffe 	bl	0 <b8SysPuts>
     358:	e1000070 	hlt	0x0000
     35c:	e5987000 	ldr	r7, [r8]
     360:	eaffff99 	b	1cc <Huffman::CHuffmanEncoder::Encode()+0x1cc>
     364:	e5dd1022 	ldrb	r1, [sp, #34]	; 0x22
     368:	e5942008 	ldr	r2, [r4, #8]
     36c:	e7953101 	ldr	r3, [r5, r1, lsl #2]
     370:	e2822001 	add	r2, r2, #1
     374:	e2833001 	add	r3, r3, #1
     378:	e5842008 	str	r2, [r4, #8]
     37c:	e28bb001 	add	r11, r11, #1
     380:	e7853101 	str	r3, [r5, r1, lsl #2]
     384:	eaffff6b 	b	138 <Huffman::CHuffmanEncoder::Encode()+0x138>
     388:	e59f0bfc 	ldr	r0, [pc, #3068]	; f8c <Huffman::CHuffmanEncoder::Encode()+0xf8c>
     38c:	ebfffffe 	bl	0 <b8SysPuts>
     390:	e59f0bf8 	ldr	r0, [pc, #3064]	; f90 <Huffman::CHuffmanEncoder::Encode()+0xf90>
     394:	ebfffffe 	bl	0 <b8SysPuts>
     398:	e59f0bf4 	ldr	r0, [pc, #3060]	; f94 <Huffman::CHuffmanEncoder::Encode()+0xf94>
     39c:	ebfffffe 	bl	0 <b8SysPuts>
     3a0:	e3a000a8 	mov	r0, #168	; 0xa8
     3a4:	ebfffffe 	bl	0 <b8SysPutNum>
     3a8:	e59f0be8 	ldr	r0, [pc, #3048]	; f98 <Huffman::CHuffmanEncoder::Encode()+0xf98>
     3ac:	ebfffffe 	bl	0 <b8SysPuts>
     3b0:	e59f0c00 	ldr	r0, [pc, #3072]	; fb8 <Huffman::CHuffmanEncoder::Encode()+0xfb8>
     3b4:	ebfffffe 	bl	0 <b8SysPuts>
     3b8:	e59f0be0 	ldr	r0, [pc, #3040]	; fa0 <Huffman::CHuffmanEncoder::Encode()+0xfa0>
     3bc:	ebfffffe 	bl	0 <b8SysPuts>
     3c0:	e59f0bf4 	ldr	r0, [pc, #3060]	; fbc <Huffman::CHuffmanEncoder::Encode()+0xfbc>
     3c4:	ebfffffe 	bl	0 <b8SysPuts>
     3c8:	e59f0bd8 	ldr	r0, [pc, #3032]	; fa8 <Huffman::CHuffmanEncoder::Encode()+0xfa8>
     3cc:	ebfffffe 	bl	0 <b8SysPuts>
     3d0:	e59f0bd4 	ldr	r0, [pc, #3028]	; fac <Huffman::CHuffmanEncoder::Encode()+0xfac>
     3d4:	ebfffffe 	bl	0 <b8SysPuts>
     3d8:	e1a00009 	mov	r0, r9
     3dc:	ebfffffe 	bl	0 <b8SysPutHex>
     3e0:	e59f0bc0 	ldr	r0, [pc, #3008]	; fa8 <Huffman::CHuffmanEncoder::Encode()+0xfa8>
     3e4:	ebfffffe 	bl	0 <b8SysPuts>
     3e8:	e59f0bc0 	ldr	r0, [pc, #3008]	; fb0 <Huffman::CHuffmanEncoder::Encode()+0xfb0>
     3ec:	ebfffffe 	bl	0 <b8SysPuts>
     3f0:	e59f0bbc 	ldr	r0, [pc, #3004]	; fb4 <Huffman::CHuffmanEncoder::Encode()+0xfb4>
     3f4:	ebfffffe 	bl	0 <b8SysPuts>
     3f8:	e1000070 	hlt	0x0000
     3fc:	e5987000 	ldr	r7, [r8]
     400:	eaffff86 	b	220 <Huffman::CHuffmanEncoder::Encode()+0x220>
     404:	e2832001 	add	r2, r3, #1
     408:	e3540000 	cmp	r4, #0
     40c:	e2833002 	add	r3, r3, #2
     410:	e58a3004 	str	r3, [r10, #4]
     414:	01a03002 	moveq	r3, r2
     418:	0a000015 	beq	474 <Huffman::CHuffmanEncoder::Encode()+0x474>
     41c:	e5943004 	ldr	r3, [r4, #4]
     420:	e2433001 	sub	r3, r3, #1
     424:	e3530000 	cmp	r3, #0
     428:	e5843004 	str	r3, [r4, #4]
     42c:	1a00000e 	bne	46c <Huffman::CHuffmanEncoder::Encode()+0x46c>
     430:	e5943000 	ldr	r3, [r4]
     434:	e1a00004 	mov	r0, r4
     438:	e5933008 	ldr	r3, [r3, #8]
     43c:	e1a0e00f 	mov	lr, pc
     440:	e1a0f003 	mov	pc, r3
     444:	e5943008 	ldr	r3, [r4, #8]
     448:	e2433001 	sub	r3, r3, #1
     44c:	e3530000 	cmp	r3, #0
     450:	e5843008 	str	r3, [r4, #8]
     454:	1a000004 	bne	46c <Huffman::CHuffmanEncoder::Encode()+0x46c>
     458:	e5943000 	ldr	r3, [r4]
     45c:	e1a00004 	mov	r0, r4
     460:	e593300c 	ldr	r3, [r3, #12]
     464:	e1a0e00f 	mov	lr, pc
     468:	e1a0f003 	mov	pc, r3
     46c:	e59a3004 	ldr	r3, [r10, #4]
     470:	e2433001 	sub	r3, r3, #1
     474:	e3530000 	cmp	r3, #0
     478:	e58da03c 	str	r10, [sp, #60]	; 0x3c
     47c:	e58a3004 	str	r3, [r10, #4]
     480:	1afffeff 	bne	84 <Huffman::CHuffmanEncoder::Encode()+0x84>
     484:	e59a3000 	ldr	r3, [r10]
     488:	e1a0000a 	mov	r0, r10
     48c:	e5933008 	ldr	r3, [r3, #8]
     490:	e1a0e00f 	mov	lr, pc
     494:	e1a0f003 	mov	pc, r3
     498:	e59a3008 	ldr	r3, [r10, #8]
     49c:	e2433001 	sub	r3, r3, #1
     4a0:	e3530000 	cmp	r3, #0
     4a4:	e58a3008 	str	r3, [r10, #8]
     4a8:	1afffef5 	bne	84 <Huffman::CHuffmanEncoder::Encode()+0x84>
     4ac:	e59a3000 	ldr	r3, [r10]
     4b0:	e1a0000a 	mov	r0, r10
     4b4:	e593300c 	ldr	r3, [r3, #12]
     4b8:	e1a0e00f 	mov	lr, pc
     4bc:	e1a0f003 	mov	pc, r3
     4c0:	eafffeef 	b	84 <Huffman::CHuffmanEncoder::Encode()+0x84>
     4c4:	e5dd4040 	ldrb	r4, [sp, #64]	; 0x40
     4c8:	e2443001 	sub	r3, r4, #1
     4cc:	e3530006 	cmp	r3, #6
     4d0:	9a000055 	bls	62c <Huffman::CHuffmanEncoder::Encode()+0x62c>
     4d4:	e59a3004 	ldr	r3, [r10, #4]
     4d8:	e59d200c 	ldr	r2, [sp, #12]
     4dc:	e2833001 	add	r3, r3, #1
     4e0:	e59d0004 	ldr	r0, [sp, #4]
     4e4:	e58a3004 	str	r3, [r10, #4]
     4e8:	e28d1058 	add	r1, sp, #88	; 0x58
     4ec:	e58d2058 	str	r2, [sp, #88]	; 0x58
     4f0:	e58da05c 	str	r10, [sp, #92]	; 0x5c
     4f4:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     4f8:	e59d405c 	ldr	r4, [sp, #92]	; 0x5c
     4fc:	e3540000 	cmp	r4, #0
     500:	0a000004 	beq	518 <Huffman::CHuffmanEncoder::Encode()+0x518>
     504:	e5943004 	ldr	r3, [r4, #4]
     508:	e2433001 	sub	r3, r3, #1
     50c:	e3530000 	cmp	r3, #0
     510:	e5843004 	str	r3, [r4, #4]
     514:	0a0001fb 	beq	d08 <Huffman::CHuffmanEncoder::Encode()+0xd08>
     518:	e1a00005 	mov	r0, r5
     51c:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     520:	e1a00005 	mov	r0, r5
     524:	e59f1a54 	ldr	r1, [pc, #2644]	; f80 <Huffman::CHuffmanEncoder::Encode()+0xf80>
     528:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
     52c:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
     530:	e3500000 	cmp	r0, #0
     534:	0a000002 	beq	544 <Huffman::CHuffmanEncoder::Encode()+0x544>
     538:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
     53c:	e0411000 	sub	r1, r1, r0
     540:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
     544:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
     548:	e3540000 	cmp	r4, #0
     54c:	0a00000e 	beq	58c <Huffman::CHuffmanEncoder::Encode()+0x58c>
     550:	e5943004 	ldr	r3, [r4, #4]
     554:	e2433001 	sub	r3, r3, #1
     558:	e3530000 	cmp	r3, #0
     55c:	e5843004 	str	r3, [r4, #4]
     560:	1a000009 	bne	58c <Huffman::CHuffmanEncoder::Encode()+0x58c>
     564:	e5943000 	ldr	r3, [r4]
     568:	e1a00004 	mov	r0, r4
     56c:	e5933008 	ldr	r3, [r3, #8]
     570:	e1a0e00f 	mov	lr, pc
     574:	e1a0f003 	mov	pc, r3
     578:	e5943008 	ldr	r3, [r4, #8]
     57c:	e2433001 	sub	r3, r3, #1
     580:	e3530000 	cmp	r3, #0
     584:	e5843008 	str	r3, [r4, #8]
     588:	0a0001fc 	beq	d80 <Huffman::CHuffmanEncoder::Encode()+0xd80>
     58c:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
     590:	e3540000 	cmp	r4, #0
     594:	0a00000e 	beq	5d4 <Huffman::CHuffmanEncoder::Encode()+0x5d4>
     598:	e5943004 	ldr	r3, [r4, #4]
     59c:	e2433001 	sub	r3, r3, #1
     5a0:	e3530000 	cmp	r3, #0
     5a4:	e5843004 	str	r3, [r4, #4]
     5a8:	1a000009 	bne	5d4 <Huffman::CHuffmanEncoder::Encode()+0x5d4>
     5ac:	e5943000 	ldr	r3, [r4]
     5b0:	e1a00004 	mov	r0, r4
     5b4:	e5933008 	ldr	r3, [r3, #8]
     5b8:	e1a0e00f 	mov	lr, pc
     5bc:	e1a0f003 	mov	pc, r3
     5c0:	e5943008 	ldr	r3, [r4, #8]
     5c4:	e2433001 	sub	r3, r3, #1
     5c8:	e3530000 	cmp	r3, #0
     5cc:	e5843008 	str	r3, [r4, #8]
     5d0:	0a0001e4 	beq	d68 <Huffman::CHuffmanEncoder::Encode()+0xd68>
     5d4:	e59a3004 	ldr	r3, [r10, #4]
     5d8:	e2433001 	sub	r3, r3, #1
     5dc:	e3530000 	cmp	r3, #0
     5e0:	e58a3004 	str	r3, [r10, #4]
     5e4:	1a00000e 	bne	624 <Huffman::CHuffmanEncoder::Encode()+0x624>
     5e8:	e59a3000 	ldr	r3, [r10]
     5ec:	e1a0000a 	mov	r0, r10
     5f0:	e5933008 	ldr	r3, [r3, #8]
     5f4:	e1a0e00f 	mov	lr, pc
     5f8:	e1a0f003 	mov	pc, r3
     5fc:	e59a3008 	ldr	r3, [r10, #8]
     600:	e2433001 	sub	r3, r3, #1
     604:	e3530000 	cmp	r3, #0
     608:	e58a3008 	str	r3, [r10, #8]
     60c:	1a000004 	bne	624 <Huffman::CHuffmanEncoder::Encode()+0x624>
     610:	e59a3000 	ldr	r3, [r10]
     614:	e1a0000a 	mov	r0, r10
     618:	e593300c 	ldr	r3, [r3, #12]
     61c:	e1a0e00f 	mov	lr, pc
     620:	e1a0f003 	mov	pc, r3
     624:	e28dd084 	add	sp, sp, #132	; 0x84
     628:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
     62c:	e2844001 	add	r4, r4, #1
     630:	e3a01000 	mov	r1, #0
     634:	e28d0030 	add	r0, sp, #48	; 0x30
     638:	e20440ff 	and	r4, r4, #255	; 0xff
     63c:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     640:	e3540008 	cmp	r4, #8
     644:	1afffff8 	bne	62c <Huffman::CHuffmanEncoder::Encode()+0x62c>
     648:	eaffffa1 	b	4d4 <Huffman::CHuffmanEncoder::Encode()+0x4d4>
     64c:	e1a00006 	mov	r0, r6
     650:	e59f1968 	ldr	r1, [pc, #2408]	; fc0 <Huffman::CHuffmanEncoder::Encode()+0xfc0>
     654:	e59d5010 	ldr	r5, [sp, #16]
     658:	e59da014 	ldr	r10, [sp, #20]
     65c:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     660:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
     664:	e2533001 	subs	r3, r3, #1
     668:	e58d3010 	str	r3, [sp, #16]
     66c:	0a000050 	beq	7b4 <Huffman::CHuffmanEncoder::Encode()+0x7b4>
     670:	e3a07000 	mov	r7, #0
     674:	e59d9008 	ldr	r9, [sp, #8]
     678:	e58db014 	str	r11, [sp, #20]
     67c:	e58d5018 	str	r5, [sp, #24]
     680:	e58da01c 	str	r10, [sp, #28]
     684:	e598a000 	ldr	r10, [r8]
     688:	e59db024 	ldr	r11, [sp, #36]	; 0x24
     68c:	e35a0000 	cmp	r10, #0
     690:	e59b5000 	ldr	r5, [r11]
     694:	0a00017c 	beq	c8c <Huffman::CHuffmanEncoder::Encode()+0xc8c>
     698:	e59ac400 	ldr	r12, [r10, #1024]	; 0x400
     69c:	e59f08e4 	ldr	r0, [pc, #2276]	; f88 <Huffman::CHuffmanEncoder::Encode()+0xf88>
     6a0:	e15c0000 	cmp	r12, r0
     6a4:	8a000122 	bhi	b34 <Huffman::CHuffmanEncoder::Encode()+0xb34>
     6a8:	e3a00000 	mov	r0, #0
     6ac:	e28ceb01 	add	lr, r12, #1024	; 0x400
     6b0:	e28ee004 	add	lr, lr, #4
     6b4:	e08a400e 	add	r4, r10, lr
     6b8:	e28cc01c 	add	r12, r12, #28
     6bc:	e58ac400 	str	r12, [r10, #1024]	; 0x400
     6c0:	e7ca000e 	strb	r0, [r10, lr]
     6c4:	e5840004 	str	r0, [r4, #4]
     6c8:	e5c40008 	strb	r0, [r4, #8]
     6cc:	e584000c 	str	r0, [r4, #12]
     6d0:	e5840010 	str	r0, [r4, #16]
     6d4:	e5840014 	str	r0, [r4, #20]
     6d8:	e59b2008 	ldr	r2, [r11, #8]
     6dc:	e5953008 	ldr	r3, [r5, #8]
     6e0:	e5920004 	ldr	r0, [r2, #4]
     6e4:	e5933004 	ldr	r3, [r3, #4]
     6e8:	e5842010 	str	r2, [r4, #16]
     6ec:	e0833000 	add	r3, r3, r0
     6f0:	e5843004 	str	r3, [r4, #4]
     6f4:	e5953008 	ldr	r3, [r5, #8]
     6f8:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
     6fc:	e5843014 	str	r3, [r4, #20]
     700:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
     704:	e1a00005 	mov	r0, r5
     708:	e2433001 	sub	r3, r3, #1
     70c:	e584a018 	str	r10, [r4, #24]
     710:	e58d302c 	str	r3, [sp, #44]	; 0x2c
     714:	ebfffffe 	bl	0 <std::__detail::_List_node_base::_M_unhook()>
     718:	e1a00005 	mov	r0, r5
     71c:	e3a0100c 	mov	r1, #12
     720:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
     724:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
     728:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
     72c:	e1a00005 	mov	r0, r5
     730:	e2433001 	sub	r3, r3, #1
     734:	e58d302c 	str	r3, [sp, #44]	; 0x2c
     738:	ebfffffe 	bl	0 <std::__detail::_List_node_base::_M_unhook()>
     73c:	e1a00005 	mov	r0, r5
     740:	e3a0100c 	mov	r1, #12
     744:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
     748:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
     74c:	e1550006 	cmp	r5, r6
     750:	0a000144 	beq	c68 <Huffman::CHuffmanEncoder::Encode()+0xc68>
     754:	e5942004 	ldr	r2, [r4, #4]
     758:	ea000002 	b	768 <Huffman::CHuffmanEncoder::Encode()+0x768>
     75c:	e5955000 	ldr	r5, [r5]
     760:	e1550006 	cmp	r5, r6
     764:	0a00013f 	beq	c68 <Huffman::CHuffmanEncoder::Encode()+0xc68>
     768:	e5953008 	ldr	r3, [r5, #8]
     76c:	e5933004 	ldr	r3, [r3, #4]
     770:	e1520003 	cmp	r2, r3
     774:	8afffff8 	bhi	75c <Huffman::CHuffmanEncoder::Encode()+0x75c>
     778:	e3a0000c 	mov	r0, #12
     77c:	ebfffffe 	bl	0 <operator new(unsigned int)>
     780:	e1a01005 	mov	r1, r5
     784:	e5804008 	str	r4, [r0, #8]
     788:	ebfffffe 	bl	0 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
     78c:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
     790:	e2833001 	add	r3, r3, #1
     794:	e58d302c 	str	r3, [sp, #44]	; 0x2c
     798:	e59d3010 	ldr	r3, [sp, #16]
     79c:	e2877001 	add	r7, r7, #1
     7a0:	e1530007 	cmp	r3, r7
     7a4:	1affffb6 	bne	684 <Huffman::CHuffmanEncoder::Encode()+0x684>
     7a8:	e59db014 	ldr	r11, [sp, #20]
     7ac:	e59d5018 	ldr	r5, [sp, #24]
     7b0:	e59da01c 	ldr	r10, [sp, #28]
     7b4:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
     7b8:	e5938008 	ldr	r8, [r3, #8]
     7bc:	e5987010 	ldr	r7, [r8, #16]
     7c0:	e3570000 	cmp	r7, #0
     7c4:	0a00017b 	beq	db8 <Huffman::CHuffmanEncoder::Encode()+0xdb8>
     7c8:	e5970010 	ldr	r0, [r7, #16]
     7cc:	e3500000 	cmp	r0, #0
     7d0:	0a0001ab 	beq	e84 <Huffman::CHuffmanEncoder::Encode()+0xe84>
     7d4:	e3a03002 	mov	r3, #2
     7d8:	e5cd3058 	strb	r3, [sp, #88]	; 0x58
     7dc:	e3a03004 	mov	r3, #4
     7e0:	e28d4058 	add	r4, sp, #88	; 0x58
     7e4:	e58d305c 	str	r3, [sp, #92]	; 0x5c
     7e8:	e8940006 	ldm	r4, {r1, r2}
     7ec:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     7f0:	e5970014 	ldr	r0, [r7, #20]
     7f4:	e3500000 	cmp	r0, #0
     7f8:	1a0001a5 	bne	e94 <Huffman::CHuffmanEncoder::Encode()+0xe94>
     7fc:	e5987014 	ldr	r7, [r8, #20]
     800:	e3570000 	cmp	r7, #0
     804:	1a00016f 	bne	dc8 <Huffman::CHuffmanEncoder::Encode()+0xdc8>
     808:	e59d2004 	ldr	r2, [sp, #4]
     80c:	e1a01004 	mov	r1, r4
     810:	e5923004 	ldr	r3, [r2, #4]
     814:	e5922000 	ldr	r2, [r2]
     818:	e3530000 	cmp	r3, #0
     81c:	e58d2058 	str	r2, [sp, #88]	; 0x58
     820:	15932004 	ldrne	r2, [r3, #4]
     824:	e58d305c 	str	r3, [sp, #92]	; 0x5c
     828:	12822001 	addne	r2, r2, #1
     82c:	15832004 	strne	r2, [r3, #4]
     830:	e1a00005 	mov	r0, r5
     834:	e1a0300b 	mov	r3, r11
     838:	e28d2030 	add	r2, sp, #48	; 0x30
     83c:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     840:	e59d705c 	ldr	r7, [sp, #92]	; 0x5c
     844:	e3570000 	cmp	r7, #0
     848:	0a000013 	beq	89c <Huffman::CHuffmanEncoder::Encode()+0x89c>
     84c:	e5973004 	ldr	r3, [r7, #4]
     850:	e2433001 	sub	r3, r3, #1
     854:	e3530000 	cmp	r3, #0
     858:	e5873004 	str	r3, [r7, #4]
     85c:	1a00000e 	bne	89c <Huffman::CHuffmanEncoder::Encode()+0x89c>
     860:	e5973000 	ldr	r3, [r7]
     864:	e1a00007 	mov	r0, r7
     868:	e5933008 	ldr	r3, [r3, #8]
     86c:	e1a0e00f 	mov	lr, pc
     870:	e1a0f003 	mov	pc, r3
     874:	e5973008 	ldr	r3, [r7, #8]
     878:	e2433001 	sub	r3, r3, #1
     87c:	e3530000 	cmp	r3, #0
     880:	e5873008 	str	r3, [r7, #8]
     884:	1a000004 	bne	89c <Huffman::CHuffmanEncoder::Encode()+0x89c>
     888:	e5973000 	ldr	r3, [r7]
     88c:	e1a00007 	mov	r0, r7
     890:	e593300c 	ldr	r3, [r3, #12]
     894:	e1a0e00f 	mov	lr, pc
     898:	e1a0f003 	mov	pc, r3
     89c:	e5dd7040 	ldrb	r7, [sp, #64]	; 0x40
     8a0:	e2473001 	sub	r3, r7, #1
     8a4:	e3530006 	cmp	r3, #6
     8a8:	9a000126 	bls	d48 <Huffman::CHuffmanEncoder::Encode()+0xd48>
     8ac:	e59a301c 	ldr	r3, [r10, #28]
     8b0:	e59a2018 	ldr	r2, [r10, #24]
     8b4:	e0433002 	sub	r3, r3, r2
     8b8:	e15b0003 	cmp	r11, r3
     8bc:	8a000163 	bhi	e50 <Huffman::CHuffmanEncoder::Encode()+0xe50>
     8c0:	e1a00004 	mov	r0, r4
     8c4:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     8c8:	e59d3004 	ldr	r3, [sp, #4]
     8cc:	e593700c 	ldr	r7, [r3, #12]
     8d0:	e5932008 	ldr	r2, [r3, #8]
     8d4:	e3570000 	cmp	r7, #0
     8d8:	0a00018a 	beq	f08 <Huffman::CHuffmanEncoder::Encode()+0xf08>
     8dc:	e59d8064 	ldr	r8, [sp, #100]	; 0x64
     8e0:	e5973004 	ldr	r3, [r7, #4]
     8e4:	e1570008 	cmp	r7, r8
     8e8:	e58d2060 	str	r2, [sp, #96]	; 0x60
     8ec:	0a000006 	beq	90c <Huffman::CHuffmanEncoder::Encode()+0x90c>
     8f0:	e2833002 	add	r3, r3, #2
     8f4:	e3580000 	cmp	r8, #0
     8f8:	e5873004 	str	r3, [r7, #4]
     8fc:	058d7064 	streq	r7, [sp, #100]	; 0x64
     900:	1a000184 	bne	f18 <Huffman::CHuffmanEncoder::Encode()+0xf18>
     904:	e5973004 	ldr	r3, [r7, #4]
     908:	e2433001 	sub	r3, r3, #1
     90c:	e3530000 	cmp	r3, #0
     910:	e5873004 	str	r3, [r7, #4]
     914:	1a00000e 	bne	954 <Huffman::CHuffmanEncoder::Encode()+0x954>
     918:	e5973000 	ldr	r3, [r7]
     91c:	e1a00007 	mov	r0, r7
     920:	e5933008 	ldr	r3, [r3, #8]
     924:	e1a0e00f 	mov	lr, pc
     928:	e1a0f003 	mov	pc, r3
     92c:	e5973008 	ldr	r3, [r7, #8]
     930:	e2433001 	sub	r3, r3, #1
     934:	e3530000 	cmp	r3, #0
     938:	e5873008 	str	r3, [r7, #8]
     93c:	1a000004 	bne	954 <Huffman::CHuffmanEncoder::Encode()+0x954>
     940:	e5973000 	ldr	r3, [r7]
     944:	e1a00007 	mov	r0, r7
     948:	e593300c 	ldr	r3, [r3, #12]
     94c:	e1a0e00f 	mov	lr, pc
     950:	e1a0f003 	mov	pc, r3
     954:	e3a07007 	mov	r7, #7
     958:	e3a08001 	mov	r8, #1
     95c:	e1a03718 	lsl	r3, r8, r7
     960:	e3130077 	tst	r3, #119	; 0x77
     964:	13a01001 	movne	r1, #1
     968:	03a01000 	moveq	r1, #0
     96c:	e1a00004 	mov	r0, r4
     970:	e2477001 	sub	r7, r7, #1
     974:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     978:	e3770001 	cmn	r7, #1
     97c:	1afffff6 	bne	95c <Huffman::CHuffmanEncoder::Encode()+0x95c>
     980:	e3a01001 	mov	r1, #1
     984:	e1a00004 	mov	r0, r4
     988:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     98c:	e3a07013 	mov	r7, #19
     990:	e3a08001 	mov	r8, #1
     994:	e01b3718 	ands	r3, r11, r8, lsl r7
     998:	13a01001 	movne	r1, #1
     99c:	03a01000 	moveq	r1, #0
     9a0:	e1a00004 	mov	r0, r4
     9a4:	e2477001 	sub	r7, r7, #1
     9a8:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     9ac:	e3770001 	cmn	r7, #1
     9b0:	1afffff7 	bne	994 <Huffman::CHuffmanEncoder::Encode()+0x994>
     9b4:	e3a01000 	mov	r1, #0
     9b8:	e1a00004 	mov	r0, r4
     9bc:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     9c0:	e3a01000 	mov	r1, #0
     9c4:	e1a00004 	mov	r0, r4
     9c8:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     9cc:	e3a01000 	mov	r1, #0
     9d0:	e1a00004 	mov	r0, r4
     9d4:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     9d8:	e3a03000 	mov	r3, #0
     9dc:	e3a09001 	mov	r9, #1
     9e0:	e59db004 	ldr	r11, [sp, #4]
     9e4:	e59b7000 	ldr	r7, [r11]
     9e8:	e5873008 	str	r3, [r7, #8]
     9ec:	e5973000 	ldr	r3, [r7]
     9f0:	e1a00007 	mov	r0, r7
     9f4:	e5933004 	ldr	r3, [r3, #4]
     9f8:	e28d1023 	add	r1, sp, #35	; 0x23
     9fc:	e1a0e00f 	mov	lr, pc
     a00:	e1a0f003 	mov	pc, r3
     a04:	e3500000 	cmp	r0, #0
     a08:	1a000101 	bne	e14 <Huffman::CHuffmanEncoder::Encode()+0xe14>
     a0c:	e5dd7068 	ldrb	r7, [sp, #104]	; 0x68
     a10:	e2473001 	sub	r3, r7, #1
     a14:	e3530006 	cmp	r3, #6
     a18:	9a0000de 	bls	d98 <Huffman::CHuffmanEncoder::Encode()+0xd98>
     a1c:	e59d0070 	ldr	r0, [sp, #112]	; 0x70
     a20:	e3500000 	cmp	r0, #0
     a24:	0a000002 	beq	a34 <Huffman::CHuffmanEncoder::Encode()+0xa34>
     a28:	e59d1078 	ldr	r1, [sp, #120]	; 0x78
     a2c:	e0411000 	sub	r1, r1, r0
     a30:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
     a34:	e59d4064 	ldr	r4, [sp, #100]	; 0x64
     a38:	e3540000 	cmp	r4, #0
     a3c:	0a000013 	beq	a90 <Huffman::CHuffmanEncoder::Encode()+0xa90>
     a40:	e5943004 	ldr	r3, [r4, #4]
     a44:	e2433001 	sub	r3, r3, #1
     a48:	e3530000 	cmp	r3, #0
     a4c:	e5843004 	str	r3, [r4, #4]
     a50:	1a00000e 	bne	a90 <Huffman::CHuffmanEncoder::Encode()+0xa90>
     a54:	e5943000 	ldr	r3, [r4]
     a58:	e1a00004 	mov	r0, r4
     a5c:	e5933008 	ldr	r3, [r3, #8]
     a60:	e1a0e00f 	mov	lr, pc
     a64:	e1a0f003 	mov	pc, r3
     a68:	e5943008 	ldr	r3, [r4, #8]
     a6c:	e2433001 	sub	r3, r3, #1
     a70:	e3530000 	cmp	r3, #0
     a74:	e5843008 	str	r3, [r4, #8]
     a78:	1a000004 	bne	a90 <Huffman::CHuffmanEncoder::Encode()+0xa90>
     a7c:	e5943000 	ldr	r3, [r4]
     a80:	e1a00004 	mov	r0, r4
     a84:	e593300c 	ldr	r3, [r3, #12]
     a88:	e1a0e00f 	mov	lr, pc
     a8c:	e1a0f003 	mov	pc, r3
     a90:	e59d405c 	ldr	r4, [sp, #92]	; 0x5c
     a94:	e3540000 	cmp	r4, #0
     a98:	0a000013 	beq	aec <Huffman::CHuffmanEncoder::Encode()+0xaec>
     a9c:	e5943004 	ldr	r3, [r4, #4]
     aa0:	e2433001 	sub	r3, r3, #1
     aa4:	e3530000 	cmp	r3, #0
     aa8:	e5843004 	str	r3, [r4, #4]
     aac:	1a00000e 	bne	aec <Huffman::CHuffmanEncoder::Encode()+0xaec>
     ab0:	e5943000 	ldr	r3, [r4]
     ab4:	e1a00004 	mov	r0, r4
     ab8:	e5933008 	ldr	r3, [r3, #8]
     abc:	e1a0e00f 	mov	lr, pc
     ac0:	e1a0f003 	mov	pc, r3
     ac4:	e5943008 	ldr	r3, [r4, #8]
     ac8:	e2433001 	sub	r3, r3, #1
     acc:	e3530000 	cmp	r3, #0
     ad0:	e5843008 	str	r3, [r4, #8]
     ad4:	1a000004 	bne	aec <Huffman::CHuffmanEncoder::Encode()+0xaec>
     ad8:	e5943000 	ldr	r3, [r4]
     adc:	e1a00004 	mov	r0, r4
     ae0:	e593300c 	ldr	r3, [r3, #12]
     ae4:	e1a0e00f 	mov	lr, pc
     ae8:	e1a0f003 	mov	pc, r3
     aec:	e1a00005 	mov	r0, r5
     af0:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     af4:	e1a00005 	mov	r0, r5
     af8:	e59f1480 	ldr	r1, [pc, #1152]	; f80 <Huffman::CHuffmanEncoder::Encode()+0xf80>
     afc:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
     b00:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
     b04:	e1540006 	cmp	r4, r6
     b08:	0a000005 	beq	b24 <Huffman::CHuffmanEncoder::Encode()+0xb24>
     b0c:	e1a00004 	mov	r0, r4
     b10:	e5944000 	ldr	r4, [r4]
     b14:	e3a0100c 	mov	r1, #12
     b18:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
     b1c:	e1540006 	cmp	r4, r6
     b20:	1afffff9 	bne	b0c <Huffman::CHuffmanEncoder::Encode()+0xb0c>
     b24:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
     b28:	e3500000 	cmp	r0, #0
     b2c:	1afffe81 	bne	538 <Huffman::CHuffmanEncoder::Encode()+0x538>
     b30:	eafffe83 	b	544 <Huffman::CHuffmanEncoder::Encode()+0x544>
     b34:	e59f0450 	ldr	r0, [pc, #1104]	; f8c <Huffman::CHuffmanEncoder::Encode()+0xf8c>
     b38:	ebfffffe 	bl	0 <b8SysPuts>
     b3c:	e59f044c 	ldr	r0, [pc, #1100]	; f90 <Huffman::CHuffmanEncoder::Encode()+0xf90>
     b40:	ebfffffe 	bl	0 <b8SysPuts>
     b44:	e59f0448 	ldr	r0, [pc, #1096]	; f94 <Huffman::CHuffmanEncoder::Encode()+0xf94>
     b48:	ebfffffe 	bl	0 <b8SysPuts>
     b4c:	e3a000f4 	mov	r0, #244	; 0xf4
     b50:	ebfffffe 	bl	0 <b8SysPutNum>
     b54:	e59f043c 	ldr	r0, [pc, #1084]	; f98 <Huffman::CHuffmanEncoder::Encode()+0xf98>
     b58:	ebfffffe 	bl	0 <b8SysPuts>
     b5c:	e59f0438 	ldr	r0, [pc, #1080]	; f9c <Huffman::CHuffmanEncoder::Encode()+0xf9c>
     b60:	ebfffffe 	bl	0 <b8SysPuts>
     b64:	e59f0434 	ldr	r0, [pc, #1076]	; fa0 <Huffman::CHuffmanEncoder::Encode()+0xfa0>
     b68:	ebfffffe 	bl	0 <b8SysPuts>
     b6c:	e59f0430 	ldr	r0, [pc, #1072]	; fa4 <Huffman::CHuffmanEncoder::Encode()+0xfa4>
     b70:	ebfffffe 	bl	0 <b8SysPuts>
     b74:	e59f042c 	ldr	r0, [pc, #1068]	; fa8 <Huffman::CHuffmanEncoder::Encode()+0xfa8>
     b78:	ebfffffe 	bl	0 <b8SysPuts>
     b7c:	e59f0428 	ldr	r0, [pc, #1064]	; fac <Huffman::CHuffmanEncoder::Encode()+0xfac>
     b80:	ebfffffe 	bl	0 <b8SysPuts>
     b84:	e1a00009 	mov	r0, r9
     b88:	ebfffffe 	bl	0 <b8SysPutHex>
     b8c:	e59f0414 	ldr	r0, [pc, #1044]	; fa8 <Huffman::CHuffmanEncoder::Encode()+0xfa8>
     b90:	ebfffffe 	bl	0 <b8SysPuts>
     b94:	e59f0414 	ldr	r0, [pc, #1044]	; fb0 <Huffman::CHuffmanEncoder::Encode()+0xfb0>
     b98:	ebfffffe 	bl	0 <b8SysPuts>
     b9c:	e59f0410 	ldr	r0, [pc, #1040]	; fb4 <Huffman::CHuffmanEncoder::Encode()+0xfb4>
     ba0:	ebfffffe 	bl	0 <b8SysPuts>
     ba4:	e1000070 	hlt	0x0000
     ba8:	e3a00000 	mov	r0, #0
     bac:	e59a4400 	ldr	r4, [r10, #1024]	; 0x400
     bb0:	e598e000 	ldr	lr, [r8]
     bb4:	e284cb01 	add	r12, r4, #1024	; 0x400
     bb8:	e28cc004 	add	r12, r12, #4
     bbc:	e284401c 	add	r4, r4, #28
     bc0:	e58a4400 	str	r4, [r10, #1024]	; 0x400
     bc4:	e15e0000 	cmp	lr, r0
     bc8:	e08a400c 	add	r4, r10, r12
     bcc:	e7ca000c 	strb	r0, [r10, r12]
     bd0:	11a0a00e 	movne	r10, lr
     bd4:	e5840004 	str	r0, [r4, #4]
     bd8:	e5c40008 	strb	r0, [r4, #8]
     bdc:	e584000c 	str	r0, [r4, #12]
     be0:	e5840010 	str	r0, [r4, #16]
     be4:	e5840014 	str	r0, [r4, #20]
     be8:	1afffeba 	bne	6d8 <Huffman::CHuffmanEncoder::Encode()+0x6d8>
     bec:	e59f0398 	ldr	r0, [pc, #920]	; f8c <Huffman::CHuffmanEncoder::Encode()+0xf8c>
     bf0:	ebfffffe 	bl	0 <b8SysPuts>
     bf4:	e59f0394 	ldr	r0, [pc, #916]	; f90 <Huffman::CHuffmanEncoder::Encode()+0xf90>
     bf8:	ebfffffe 	bl	0 <b8SysPuts>
     bfc:	e59f0390 	ldr	r0, [pc, #912]	; f94 <Huffman::CHuffmanEncoder::Encode()+0xf94>
     c00:	ebfffffe 	bl	0 <b8SysPuts>
     c04:	e3a000a8 	mov	r0, #168	; 0xa8
     c08:	ebfffffe 	bl	0 <b8SysPutNum>
     c0c:	e59f0384 	ldr	r0, [pc, #900]	; f98 <Huffman::CHuffmanEncoder::Encode()+0xf98>
     c10:	ebfffffe 	bl	0 <b8SysPuts>
     c14:	e59f039c 	ldr	r0, [pc, #924]	; fb8 <Huffman::CHuffmanEncoder::Encode()+0xfb8>
     c18:	ebfffffe 	bl	0 <b8SysPuts>
     c1c:	e59f037c 	ldr	r0, [pc, #892]	; fa0 <Huffman::CHuffmanEncoder::Encode()+0xfa0>
     c20:	ebfffffe 	bl	0 <b8SysPuts>
     c24:	e59f0390 	ldr	r0, [pc, #912]	; fbc <Huffman::CHuffmanEncoder::Encode()+0xfbc>
     c28:	ebfffffe 	bl	0 <b8SysPuts>
     c2c:	e59f0374 	ldr	r0, [pc, #884]	; fa8 <Huffman::CHuffmanEncoder::Encode()+0xfa8>
     c30:	ebfffffe 	bl	0 <b8SysPuts>
     c34:	e59f0370 	ldr	r0, [pc, #880]	; fac <Huffman::CHuffmanEncoder::Encode()+0xfac>
     c38:	ebfffffe 	bl	0 <b8SysPuts>
     c3c:	e1a00009 	mov	r0, r9
     c40:	ebfffffe 	bl	0 <b8SysPutHex>
     c44:	e59f035c 	ldr	r0, [pc, #860]	; fa8 <Huffman::CHuffmanEncoder::Encode()+0xfa8>
     c48:	ebfffffe 	bl	0 <b8SysPuts>
     c4c:	e59f035c 	ldr	r0, [pc, #860]	; fb0 <Huffman::CHuffmanEncoder::Encode()+0xfb0>
     c50:	ebfffffe 	bl	0 <b8SysPuts>
     c54:	e59f0358 	ldr	r0, [pc, #856]	; fb4 <Huffman::CHuffmanEncoder::Encode()+0xfb4>
     c58:	ebfffffe 	bl	0 <b8SysPuts>
     c5c:	e1000070 	hlt	0x0000
     c60:	e598a000 	ldr	r10, [r8]
     c64:	eafffe9b 	b	6d8 <Huffman::CHuffmanEncoder::Encode()+0x6d8>
     c68:	e3a0000c 	mov	r0, #12
     c6c:	ebfffffe 	bl	0 <operator new(unsigned int)>
     c70:	e1a01006 	mov	r1, r6
     c74:	e5804008 	str	r4, [r0, #8]
     c78:	ebfffffe 	bl	0 <std::__detail::_List_node_base::_M_hook(std::__detail::_List_node_base*)>
     c7c:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
     c80:	e2833001 	add	r3, r3, #1
     c84:	e58d302c 	str	r3, [sp, #44]	; 0x2c
     c88:	eafffec2 	b	798 <Huffman::CHuffmanEncoder::Encode()+0x798>
     c8c:	e59f02f8 	ldr	r0, [pc, #760]	; f8c <Huffman::CHuffmanEncoder::Encode()+0xf8c>
     c90:	ebfffffe 	bl	0 <b8SysPuts>
     c94:	e59f02f4 	ldr	r0, [pc, #756]	; f90 <Huffman::CHuffmanEncoder::Encode()+0xf90>
     c98:	ebfffffe 	bl	0 <b8SysPuts>
     c9c:	e59f02f0 	ldr	r0, [pc, #752]	; f94 <Huffman::CHuffmanEncoder::Encode()+0xf94>
     ca0:	ebfffffe 	bl	0 <b8SysPuts>
     ca4:	e3a000a8 	mov	r0, #168	; 0xa8
     ca8:	ebfffffe 	bl	0 <b8SysPutNum>
     cac:	e59f02e4 	ldr	r0, [pc, #740]	; f98 <Huffman::CHuffmanEncoder::Encode()+0xf98>
     cb0:	ebfffffe 	bl	0 <b8SysPuts>
     cb4:	e59f02fc 	ldr	r0, [pc, #764]	; fb8 <Huffman::CHuffmanEncoder::Encode()+0xfb8>
     cb8:	ebfffffe 	bl	0 <b8SysPuts>
     cbc:	e59f02dc 	ldr	r0, [pc, #732]	; fa0 <Huffman::CHuffmanEncoder::Encode()+0xfa0>
     cc0:	ebfffffe 	bl	0 <b8SysPuts>
     cc4:	e59f02f0 	ldr	r0, [pc, #752]	; fbc <Huffman::CHuffmanEncoder::Encode()+0xfbc>
     cc8:	ebfffffe 	bl	0 <b8SysPuts>
     ccc:	e59f02d4 	ldr	r0, [pc, #724]	; fa8 <Huffman::CHuffmanEncoder::Encode()+0xfa8>
     cd0:	ebfffffe 	bl	0 <b8SysPuts>
     cd4:	e59f02d0 	ldr	r0, [pc, #720]	; fac <Huffman::CHuffmanEncoder::Encode()+0xfac>
     cd8:	ebfffffe 	bl	0 <b8SysPuts>
     cdc:	e1a00009 	mov	r0, r9
     ce0:	ebfffffe 	bl	0 <b8SysPutHex>
     ce4:	e59f02bc 	ldr	r0, [pc, #700]	; fa8 <Huffman::CHuffmanEncoder::Encode()+0xfa8>
     ce8:	ebfffffe 	bl	0 <b8SysPuts>
     cec:	e59f02bc 	ldr	r0, [pc, #700]	; fb0 <Huffman::CHuffmanEncoder::Encode()+0xfb0>
     cf0:	ebfffffe 	bl	0 <b8SysPuts>
     cf4:	e59f02b8 	ldr	r0, [pc, #696]	; fb4 <Huffman::CHuffmanEncoder::Encode()+0xfb4>
     cf8:	ebfffffe 	bl	0 <b8SysPuts>
     cfc:	e1000070 	hlt	0x0000
     d00:	e598a000 	ldr	r10, [r8]
     d04:	eafffe63 	b	698 <Huffman::CHuffmanEncoder::Encode()+0x698>
     d08:	e5943000 	ldr	r3, [r4]
     d0c:	e1a00004 	mov	r0, r4
     d10:	e5933008 	ldr	r3, [r3, #8]
     d14:	e1a0e00f 	mov	lr, pc
     d18:	e1a0f003 	mov	pc, r3
     d1c:	e5943008 	ldr	r3, [r4, #8]
     d20:	e2433001 	sub	r3, r3, #1
     d24:	e3530000 	cmp	r3, #0
     d28:	e5843008 	str	r3, [r4, #8]
     d2c:	1afffdf9 	bne	518 <Huffman::CHuffmanEncoder::Encode()+0x518>
     d30:	e5943000 	ldr	r3, [r4]
     d34:	e1a00004 	mov	r0, r4
     d38:	e593300c 	ldr	r3, [r3, #12]
     d3c:	e1a0e00f 	mov	lr, pc
     d40:	e1a0f003 	mov	pc, r3
     d44:	eafffdf3 	b	518 <Huffman::CHuffmanEncoder::Encode()+0x518>
     d48:	e2877001 	add	r7, r7, #1
     d4c:	e3a01000 	mov	r1, #0
     d50:	e28d0030 	add	r0, sp, #48	; 0x30
     d54:	e20770ff 	and	r7, r7, #255	; 0xff
     d58:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     d5c:	e3570008 	cmp	r7, #8
     d60:	1afffff8 	bne	d48 <Huffman::CHuffmanEncoder::Encode()+0xd48>
     d64:	eafffed0 	b	8ac <Huffman::CHuffmanEncoder::Encode()+0x8ac>
     d68:	e5943000 	ldr	r3, [r4]
     d6c:	e1a00004 	mov	r0, r4
     d70:	e593300c 	ldr	r3, [r3, #12]
     d74:	e1a0e00f 	mov	lr, pc
     d78:	e1a0f003 	mov	pc, r3
     d7c:	eafffe14 	b	5d4 <Huffman::CHuffmanEncoder::Encode()+0x5d4>
     d80:	e5943000 	ldr	r3, [r4]
     d84:	e1a00004 	mov	r0, r4
     d88:	e593300c 	ldr	r3, [r3, #12]
     d8c:	e1a0e00f 	mov	lr, pc
     d90:	e1a0f003 	mov	pc, r3
     d94:	eafffdfc 	b	58c <Huffman::CHuffmanEncoder::Encode()+0x58c>
     d98:	e2877001 	add	r7, r7, #1
     d9c:	e3a01000 	mov	r1, #0
     da0:	e1a00004 	mov	r0, r4
     da4:	e20770ff 	and	r7, r7, #255	; 0xff
     da8:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     dac:	e3570008 	cmp	r7, #8
     db0:	1afffff8 	bne	d98 <Huffman::CHuffmanEncoder::Encode()+0xd98>
     db4:	eaffff18 	b	a1c <Huffman::CHuffmanEncoder::Encode()+0xa1c>
     db8:	e5987014 	ldr	r7, [r8, #20]
     dbc:	e3570000 	cmp	r7, #0
     dc0:	0a00007f 	beq	fc4 <Huffman::CHuffmanEncoder::Encode()+0xfc4>
     dc4:	e28d4058 	add	r4, sp, #88	; 0x58
     dc8:	e5970010 	ldr	r0, [r7, #16]
     dcc:	e3500000 	cmp	r0, #0
     dd0:	0a000036 	beq	eb0 <Huffman::CHuffmanEncoder::Encode()+0xeb0>
     dd4:	e3a03002 	mov	r3, #2
     dd8:	e5cd3058 	strb	r3, [sp, #88]	; 0x58
     ddc:	e3a03006 	mov	r3, #6
     de0:	e58d305c 	str	r3, [sp, #92]	; 0x5c
     de4:	e8940006 	ldm	r4, {r1, r2}
     de8:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     dec:	e5970014 	ldr	r0, [r7, #20]
     df0:	e3500000 	cmp	r0, #0
     df4:	0afffe83 	beq	808 <Huffman::CHuffmanEncoder::Encode()+0x808>
     df8:	e3a03002 	mov	r3, #2
     dfc:	e5cd3058 	strb	r3, [sp, #88]	; 0x58
     e00:	e3a03007 	mov	r3, #7
     e04:	e58d305c 	str	r3, [sp, #92]	; 0x5c
     e08:	e8940006 	ldm	r4, {r1, r2}
     e0c:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     e10:	eafffe7c 	b	808 <Huffman::CHuffmanEncoder::Encode()+0x808>
     e14:	e5973008 	ldr	r3, [r7, #8]
     e18:	e5dd8023 	ldrb	r8, [sp, #35]	; 0x23
     e1c:	e2833001 	add	r3, r3, #1
     e20:	e5873008 	str	r3, [r7, #8]
     e24:	e3a07007 	mov	r7, #7
     e28:	e0183719 	ands	r3, r8, r9, lsl r7
     e2c:	13a01001 	movne	r1, #1
     e30:	03a01000 	moveq	r1, #0
     e34:	e1a00004 	mov	r0, r4
     e38:	e2477001 	sub	r7, r7, #1
     e3c:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     e40:	e3770001 	cmn	r7, #1
     e44:	1afffff7 	bne	e28 <Huffman::CHuffmanEncoder::Encode()+0xe28>
     e48:	e59b7000 	ldr	r7, [r11]
     e4c:	eafffee6 	b	9ec <Huffman::CHuffmanEncoder::Encode()+0x9ec>
     e50:	e59d300c 	ldr	r3, [sp, #12]
     e54:	e1a01004 	mov	r1, r4
     e58:	e58d3058 	str	r3, [sp, #88]	; 0x58
     e5c:	e59a3004 	ldr	r3, [r10, #4]
     e60:	e59d0004 	ldr	r0, [sp, #4]
     e64:	e2833001 	add	r3, r3, #1
     e68:	e58a3004 	str	r3, [r10, #4]
     e6c:	e58da05c 	str	r10, [sp, #92]	; 0x5c
     e70:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     e74:	e59d405c 	ldr	r4, [sp, #92]	; 0x5c
     e78:	e3540000 	cmp	r4, #0
     e7c:	1affff06 	bne	a9c <Huffman::CHuffmanEncoder::Encode()+0xa9c>
     e80:	eaffff19 	b	aec <Huffman::CHuffmanEncoder::Encode()+0xaec>
     e84:	e5970014 	ldr	r0, [r7, #20]
     e88:	e3500000 	cmp	r0, #0
     e8c:	0a000061 	beq	1018 <Huffman::CHuffmanEncoder::Encode()+0x1018>
     e90:	e28d4058 	add	r4, sp, #88	; 0x58
     e94:	e3a03002 	mov	r3, #2
     e98:	e5cd3058 	strb	r3, [sp, #88]	; 0x58
     e9c:	e3a03005 	mov	r3, #5
     ea0:	e58d305c 	str	r3, [sp, #92]	; 0x5c
     ea4:	e8940006 	ldm	r4, {r1, r2}
     ea8:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     eac:	eafffe52 	b	7fc <Huffman::CHuffmanEncoder::Encode()+0x7fc>
     eb0:	e5970014 	ldr	r0, [r7, #20]
     eb4:	e3500000 	cmp	r0, #0
     eb8:	1affffce 	bne	df8 <Huffman::CHuffmanEncoder::Encode()+0xdf8>
     ebc:	e3a03003 	mov	r3, #3
     ec0:	e3a02001 	mov	r2, #1
     ec4:	e5978018 	ldr	r8, [r7, #24]
     ec8:	e587300c 	str	r3, [r7, #12]
     ecc:	e2880b11 	add	r0, r8, #17408	; 0x4400
     ed0:	e5c72008 	strb	r2, [r7, #8]
     ed4:	e1a01004 	mov	r1, r4
     ed8:	e2800004 	add	r0, r0, #4
     edc:	e5d79000 	ldrb	r9, [r7]
     ee0:	e58d305c 	str	r3, [sp, #92]	; 0x5c
     ee4:	e5cd2058 	strb	r2, [sp, #88]	; 0x58
     ee8:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     eec:	e2893d22 	add	r3, r9, #2176	; 0x880
     ef0:	e2833004 	add	r3, r3, #4
     ef4:	e5c09000 	strb	r9, [r0]
     ef8:	e0888183 	add	r8, r8, r3, lsl #3
     efc:	e8940003 	ldm	r4, {r0, r1}
     f00:	e8880003 	stm	r8, {r0, r1}
     f04:	eafffe3f 	b	808 <Huffman::CHuffmanEncoder::Encode()+0x808>
     f08:	e59d8064 	ldr	r8, [sp, #100]	; 0x64
     f0c:	e58d2060 	str	r2, [sp, #96]	; 0x60
     f10:	e3580000 	cmp	r8, #0
     f14:	0afffe8e 	beq	954 <Huffman::CHuffmanEncoder::Encode()+0x954>
     f18:	e5983004 	ldr	r3, [r8, #4]
     f1c:	e2433001 	sub	r3, r3, #1
     f20:	e3530000 	cmp	r3, #0
     f24:	e5883004 	str	r3, [r8, #4]
     f28:	1a00000e 	bne	f68 <Huffman::CHuffmanEncoder::Encode()+0xf68>
     f2c:	e5983000 	ldr	r3, [r8]
     f30:	e1a00008 	mov	r0, r8
     f34:	e5933008 	ldr	r3, [r3, #8]
     f38:	e1a0e00f 	mov	lr, pc
     f3c:	e1a0f003 	mov	pc, r3
     f40:	e5983008 	ldr	r3, [r8, #8]
     f44:	e2433001 	sub	r3, r3, #1
     f48:	e3530000 	cmp	r3, #0
     f4c:	e5883008 	str	r3, [r8, #8]
     f50:	1a000004 	bne	f68 <Huffman::CHuffmanEncoder::Encode()+0xf68>
     f54:	e5983000 	ldr	r3, [r8]
     f58:	e1a00008 	mov	r0, r8
     f5c:	e593300c 	ldr	r3, [r3, #12]
     f60:	e1a0e00f 	mov	lr, pc
     f64:	e1a0f003 	mov	pc, r3
     f68:	e3570000 	cmp	r7, #0
     f6c:	e58d7064 	str	r7, [sp, #100]	; 0x64
     f70:	0afffe77 	beq	954 <Huffman::CHuffmanEncoder::Encode()+0x954>
     f74:	eafffe62 	b	904 <Huffman::CHuffmanEncoder::Encode()+0x904>
     f78:	00000008 	.word	0x00000008
     f7c:	00000008 	.word	0x00000008
     f80:	00004c24 	.word	0x00004c24
     f84:	00000000 	.word	0x00000000
     f88:	00003fe4 	.word	0x00003fe4
     f8c:	00000000 	.word	0x00000000
     f90:	0000001c 	.word	0x0000001c
     f94:	00000028 	.word	0x00000028
     f98:	0000002c 	.word	0x0000002c
     f9c:	00000028 	.word	0x00000028
     fa0:	00000038 	.word	0x00000038
     fa4:	00000038 	.word	0x00000038
     fa8:	0000004c 	.word	0x0000004c
     fac:	00000050 	.word	0x00000050
     fb0:	0000006c 	.word	0x0000006c
     fb4:	000000b4 	.word	0x000000b4
     fb8:	00000000 	.word	0x00000000
     fbc:	00000014 	.word	0x00000014
     fc0:	00000000 	.word	0x00000000
     fc4:	e3a03001 	mov	r3, #1
     fc8:	e5982018 	ldr	r2, [r8, #24]
     fcc:	e28d4058 	add	r4, sp, #88	; 0x58
     fd0:	e2820b11 	add	r0, r2, #17408	; 0x4400
     fd4:	e588300c 	str	r3, [r8, #12]
     fd8:	e5c87008 	strb	r7, [r8, #8]
     fdc:	e1a01004 	mov	r1, r4
     fe0:	e2800004 	add	r0, r0, #4
     fe4:	e5d89000 	ldrb	r9, [r8]
     fe8:	e58d2008 	str	r2, [sp, #8]
     fec:	e58d305c 	str	r3, [sp, #92]	; 0x5c
     ff0:	e5cd7058 	strb	r7, [sp, #88]	; 0x58
     ff4:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
     ff8:	e59d2008 	ldr	r2, [sp, #8]
     ffc:	e5c09000 	strb	r9, [r0]
    1000:	e2899d22 	add	r9, r9, #2176	; 0x880
    1004:	e2899004 	add	r9, r9, #4
    1008:	e0823189 	add	r3, r2, r9, lsl #3
    100c:	e8940003 	ldm	r4, {r0, r1}
    1010:	e8830003 	stm	r3, {r0, r1}
    1014:	eafffdfb 	b	808 <Huffman::CHuffmanEncoder::Encode()+0x808>
    1018:	e3a03002 	mov	r3, #2
    101c:	e3a02001 	mov	r2, #1
    1020:	e5971018 	ldr	r1, [r7, #24]
    1024:	e28d4058 	add	r4, sp, #88	; 0x58
    1028:	e2810b11 	add	r0, r1, #17408	; 0x4400
    102c:	e587300c 	str	r3, [r7, #12]
    1030:	e5c72008 	strb	r2, [r7, #8]
    1034:	e58d1008 	str	r1, [sp, #8]
    1038:	e2800004 	add	r0, r0, #4
    103c:	e1a01004 	mov	r1, r4
    1040:	e5d79000 	ldrb	r9, [r7]
    1044:	e58d305c 	str	r3, [sp, #92]	; 0x5c
    1048:	e5cd2058 	strb	r2, [sp, #88]	; 0x58
    104c:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
    1050:	e59d1008 	ldr	r1, [sp, #8]
    1054:	e5c09000 	strb	r9, [r0]
    1058:	e2899d22 	add	r9, r9, #2176	; 0x880
    105c:	e2899004 	add	r9, r9, #4
    1060:	e0813189 	add	r3, r1, r9, lsl #3
    1064:	e8940003 	ldm	r4, {r0, r1}
    1068:	e8830003 	stm	r3, {r0, r1}
    106c:	eafffde2 	b	7fc <Huffman::CHuffmanEncoder::Encode()+0x7fc>

nesctrl.o:     file format elf32-littlearm


Disassembly of section .text._ZN8CNesCtrl5ResetEv:

00000000 <CNesCtrl::Reset()>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e5904000 	ldr	r4, [r0]
   8:	e1a05000 	mov	r5, r0
   c:	e3540000 	cmp	r4, #0
  10:	e24dd008 	sub	sp, sp, #8
  14:	0a000004 	beq	2c <CNesCtrl::Reset()+0x2c>
  18:	e2840048 	add	r0, r4, #72	; 0x48
  1c:	ebfffffe 	bl	0 <CHifDecoder::~CHifDecoder()>
  20:	e3a0104c 	mov	r1, #76	; 0x4c
  24:	e1a00004 	mov	r0, r4
  28:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  2c:	e3a0004c 	mov	r0, #76	; 0x4c
  30:	ebfffffe 	bl	0 <operator new(unsigned int)>
  34:	e3a03000 	mov	r3, #0
  38:	e1a04000 	mov	r4, r0
  3c:	e5803000 	str	r3, [r0]
  40:	e5803004 	str	r3, [r0, #4]
  44:	e5803008 	str	r3, [r0, #8]
  48:	e580300c 	str	r3, [r0, #12]
  4c:	e5803010 	str	r3, [r0, #16]
  50:	e5803014 	str	r3, [r0, #20]
  54:	e5803018 	str	r3, [r0, #24]
  58:	e580301c 	str	r3, [r0, #28]
  5c:	e5803020 	str	r3, [r0, #32]
  60:	e5803024 	str	r3, [r0, #36]	; 0x24
  64:	e5803028 	str	r3, [r0, #40]	; 0x28
  68:	e580302c 	str	r3, [r0, #44]	; 0x2c
  6c:	e5803030 	str	r3, [r0, #48]	; 0x30
  70:	e5803034 	str	r3, [r0, #52]	; 0x34
  74:	e5803038 	str	r3, [r0, #56]	; 0x38
  78:	e580303c 	str	r3, [r0, #60]	; 0x3c
  7c:	e5803040 	str	r3, [r0, #64]	; 0x40
  80:	e5803044 	str	r3, [r0, #68]	; 0x44
  84:	e2800048 	add	r0, r0, #72	; 0x48
  88:	ebfffffe 	bl	0 <CHifDecoder::CHifDecoder()>
  8c:	e3a02080 	mov	r2, #128	; 0x80
  90:	e59f10b0 	ldr	r1, [pc, #176]	; 148 <CNesCtrl::Reset()+0x148>
  94:	e5854000 	str	r4, [r5]
  98:	e59f00ac 	ldr	r0, [pc, #172]	; 14c <CNesCtrl::Reset()+0x14c>
  9c:	ebfffffe 	bl	0 <b8PpuCmdSetBuff>
  a0:	e59f00a4 	ldr	r0, [pc, #164]	; 14c <CNesCtrl::Reset()+0x14c>
  a4:	ebfffffe 	bl	0 <b8PpuLoadimgAlloc>
  a8:	e28d1006 	add	r1, sp, #6
  ac:	e1a04000 	mov	r4, r0
  b0:	e28d0004 	add	r0, sp, #4
  b4:	ebfffffe 	bl	0 <b8_image_helper_nes_ctrl_get>
  b8:	e1a0e000 	mov	lr, r0
  bc:	e1dd20b4 	ldrh	r2, [sp, #4]
  c0:	e584e004 	str	lr, [r4, #4]
  c4:	e1dd30b6 	ldrh	r3, [sp, #6]
  c8:	e5d5600b 	ldrb	r6, [r5, #11]
  cc:	e1a02282 	lsl	r2, r2, #5
  d0:	e5d5e00a 	ldrb	lr, [r5, #10]
  d4:	e2022c3f 	and	r2, r2, #16128	; 0x3f00
  d8:	e1a03b83 	lsl	r3, r3, #23
  dc:	e1823d23 	orr	r3, r2, r3, lsr #26
  e0:	e206503f 	and	r5, r6, #63	; 0x3f
  e4:	e1833805 	orr	r3, r3, r5, lsl #16
  e8:	e20ee03f 	and	lr, lr, #63	; 0x3f
  ec:	e1833c0e 	orr	r3, r3, lr, lsl #24
  f0:	e59fc058 	ldr	r12, [pc, #88]	; 150 <CNesCtrl::Reset()+0x150>
  f4:	e594e008 	ldr	lr, [r4, #8]
  f8:	e59f1054 	ldr	r1, [pc, #84]	; 154 <CNesCtrl::Reset()+0x154>
  fc:	e00cc00e 	and	r12, r12, lr
 100:	e182200c 	orr	r2, r2, r12
 104:	e5842008 	str	r2, [r4, #8]
 108:	e594200c 	ldr	r2, [r4, #12]
 10c:	e59f0038 	ldr	r0, [pc, #56]	; 14c <CNesCtrl::Reset()+0x14c>
 110:	e0011002 	and	r1, r1, r2
 114:	e1833001 	orr	r3, r3, r1
 118:	e584300c 	str	r3, [r4, #12]
 11c:	ebfffffe 	bl	0 <b8PpuFlushAlloc>
 120:	e1a03000 	mov	r3, r0
 124:	e5d32000 	ldrb	r2, [r3]
 128:	e59f001c 	ldr	r0, [pc, #28]	; 14c <CNesCtrl::Reset()+0x14c>
 12c:	e3822002 	orr	r2, r2, #2
 130:	e5c32000 	strb	r2, [r3]
 134:	ebfffffe 	bl	0 <b8PpuHaltAlloc>
 138:	e59f000c 	ldr	r0, [pc, #12]	; 14c <CNesCtrl::Reset()+0x14c>
 13c:	e28dd008 	add	sp, sp, #8
 140:	e8bd4070 	pop	{r4, r5, r6, lr}
 144:	eafffffe 	b	0 <b8PpuExec>
	...
 150:	c0c0c0ff 	.word	0xc0c0c0ff
 154:	c0c0c0c0 	.word	0xc0c0c0c0

Disassembly of section .text._ZN8CNesCtrl4StepEv:

00000000 <CNesCtrl::Step()>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e1a05000 	mov	r5, r0
   8:	e24dd014 	sub	sp, sp, #20
   c:	e3a02006 	mov	r2, #6
  10:	e3a01000 	mov	r1, #0
  14:	e28d0008 	add	r0, sp, #8
  18:	ebfffffe 	bl	0 <memset>
  1c:	e5950000 	ldr	r0, [r5]
  20:	e2800048 	add	r0, r0, #72	; 0x48
  24:	ebfffffe 	bl	0 <CHifDecoder::GetStatus()>
  28:	e1a03000 	mov	r3, r0
  2c:	e590000c 	ldr	r0, [r0, #12]
  30:	e2833004 	add	r3, r3, #4
  34:	e1500003 	cmp	r0, r3
  38:	e58d3004 	str	r3, [sp, #4]
  3c:	1a000006 	bne	5c <CNesCtrl::Step()+0x5c>
  40:	ea000043 	b	154 <CNesCtrl::Step()+0x154>
  44:	e35300ef 	cmp	r3, #239	; 0xef
  48:	8a00000b 	bhi	7c <CNesCtrl::Step()+0x7c>
  4c:	ebfffffe 	bl	0 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>
  50:	e59d3004 	ldr	r3, [sp, #4]
  54:	e1530000 	cmp	r3, r0
  58:	0a00003d 	beq	154 <CNesCtrl::Step()+0x154>
  5c:	e5902014 	ldr	r2, [r0, #20]
  60:	e5d23006 	ldrb	r3, [r2, #6]
  64:	e35300f1 	cmp	r3, #241	; 0xf1
  68:	9afffff5 	bls	44 <CNesCtrl::Step()+0x44>
  6c:	e283300c 	add	r3, r3, #12
  70:	e20330ff 	and	r3, r3, #255	; 0xff
  74:	e3530001 	cmp	r3, #1
  78:	8afffff3 	bhi	4c <CNesCtrl::Step()+0x4c>
  7c:	e1d530f8 	ldrsh	r3, [r5, #8]
  80:	e1d260f8 	ldrsh	r6, [r2, #8]
  84:	e1d240fa 	ldrsh	r4, [r2, #10]
  88:	e046b203 	sub	r11, r6, r3, lsl #4
  8c:	e044a203 	sub	r10, r4, r3, lsl #4
  90:	e3a01002 	mov	r1, #2
  94:	e0866203 	add	r6, r6, r3, lsl #4
  98:	e0844203 	add	r4, r4, r3, lsl #4
  9c:	e3a03000 	mov	r3, #0
  a0:	e59f2114 	ldr	r2, [pc, #276]	; 1bc <CNesCtrl::Step()+0x1bc>
  a4:	e1a0c001 	mov	r12, r1
  a8:	e1a0e003 	mov	lr, r3
  ac:	e1d590f4 	ldrsh	r9, [r5, #4]
  b0:	e1d580f6 	ldrsh	r8, [r5, #6]
  b4:	e2827036 	add	r7, r2, #54	; 0x36
  b8:	ea000006 	b	d8 <CNesCtrl::Step()+0xd8>
  bc:	e1570002 	cmp	r7, r2
  c0:	0affffe1 	beq	4c <CNesCtrl::Step()+0x4c>
  c4:	e5d2e007 	ldrb	lr, [r2, #7]
  c8:	e5d23006 	ldrb	r3, [r2, #6]
  cc:	e5d2c00a 	ldrb	r12, [r2, #10]
  d0:	e5d2100b 	ldrb	r1, [r2, #11]
  d4:	e2822006 	add	r2, r2, #6
  d8:	e0893183 	add	r3, r9, r3, lsl #3
  dc:	e1a0c38c 	lsl	r12, r12, #7
  e0:	e08cc203 	add	r12, r12, r3, lsl #4
  e4:	e1a03203 	lsl	r3, r3, #4
  e8:	e1530006 	cmp	r3, r6
  ec:	d15b000c 	cmple	r11, r12
  f0:	c3a03001 	movgt	r3, #1
  f4:	d3a03000 	movle	r3, #0
  f8:	e088e18e 	add	lr, r8, lr, lsl #3
  fc:	e1a01381 	lsl	r1, r1, #7
 100:	e081120e 	add	r1, r1, lr, lsl #4
 104:	e15a0001 	cmp	r10, r1
 108:	c3833001 	orrgt	r3, r3, #1
 10c:	e154020e 	cmp	r4, lr, lsl #4
 110:	b3833001 	orrlt	r3, r3, #1
 114:	e3530000 	cmp	r3, #0
 118:	1affffe7 	bne	bc <CNesCtrl::Step()+0xbc>
 11c:	e5d23002 	ldrb	r3, [r2, #2]
 120:	e3530006 	cmp	r3, #6
 124:	e2833010 	add	r3, r3, #16
 128:	e08d3003 	add	r3, sp, r3
 12c:	0affffe2 	beq	bc <CNesCtrl::Step()+0xbc>
 130:	e3a0c001 	mov	r12, #1
 134:	e5d21003 	ldrb	r1, [r2, #3]
 138:	e543c008 	strb	r12, [r3, #-8]
 13c:	e3510006 	cmp	r1, #6
 140:	0affffdd 	beq	bc <CNesCtrl::Step()+0xbc>
 144:	e2813010 	add	r3, r1, #16
 148:	e08d1003 	add	r1, sp, r3
 14c:	e541c008 	strb	r12, [r1, #-8]
 150:	eaffffd9 	b	bc <CNesCtrl::Step()+0xbc>
 154:	e3a03000 	mov	r3, #0
 158:	e595e000 	ldr	lr, [r5]
 15c:	e1a04003 	mov	r4, r3
 160:	e28dc007 	add	r12, sp, #7
 164:	ea000006 	b	184 <CNesCtrl::Step()+0x184>
 168:	e5902018 	ldr	r2, [r0, #24]
 16c:	e2833001 	add	r3, r3, #1
 170:	e2822001 	add	r2, r2, #1
 174:	e3530006 	cmp	r3, #6
 178:	e5804030 	str	r4, [r0, #48]	; 0x30
 17c:	e5802018 	str	r2, [r0, #24]
 180:	0a00000b 	beq	1b4 <CNesCtrl::Step()+0x1b4>
 184:	e5fc1001 	ldrb	r1, [r12, #1]!
 188:	e08e0103 	add	r0, lr, r3, lsl #2
 18c:	e3510000 	cmp	r1, #0
 190:	e1a02000 	mov	r2, r0
 194:	1afffff3 	bne	168 <CNesCtrl::Step()+0x168>
 198:	e5900030 	ldr	r0, [r0, #48]	; 0x30
 19c:	e2833001 	add	r3, r3, #1
 1a0:	e5821018 	str	r1, [r2, #24]
 1a4:	e3530006 	cmp	r3, #6
 1a8:	e2801001 	add	r1, r0, #1
 1ac:	e5821030 	str	r1, [r2, #48]	; 0x30
 1b0:	1afffff3 	bne	184 <CNesCtrl::Step()+0x184>
 1b4:	e28dd014 	add	sp, sp, #20
 1b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 1bc:	00000000 	.word	0x00000000

Disassembly of section .text._ZN8CNesCtrl4DrawEP9_b8PpuCmdm:

00000000 <CNesCtrl::Draw(_b8PpuCmd*, unsigned long)>:
   0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   4:	e1a06002 	mov	r6, r2
   8:	e1a05001 	mov	r5, r1
   c:	e24dd00c 	sub	sp, sp, #12
  10:	e28d1004 	add	r1, sp, #4
  14:	e1a09000 	mov	r9, r0
  18:	e1a0000d 	mov	r0, sp
  1c:	ebfffffe 	bl	0 <b8PpuGetResolution>
  20:	e1a01006 	mov	r1, r6
  24:	e1a00005 	mov	r0, r5
  28:	ebfffffe 	bl	0 <b8PpuScissorAllocZ>
  2c:	e3a01000 	mov	r1, #0
  30:	e59f4224 	ldr	r4, [pc, #548]	; 25c <CNesCtrl::Draw(_b8PpuCmd*, unsigned long)+0x25c>
  34:	e1dd20b0 	ldrh	r2, [sp]
  38:	e1dd30b4 	ldrh	r3, [sp, #4]
  3c:	e59f821c 	ldr	r8, [pc, #540]	; 260 <CNesCtrl::Draw(_b8PpuCmd*, unsigned long)+0x260>
  40:	e2847031 	add	r7, r4, #49	; 0x31
  44:	e5801004 	str	r1, [r0, #4]
  48:	e1c020ba 	strh	r2, [r0, #10]
  4c:	e1c030b8 	strh	r3, [r0, #8]
  50:	e1a01006 	mov	r1, r6
  54:	e1a00005 	mov	r0, r5
  58:	ebfffffe 	bl	0 <b8PpuSpriteAllocZ>
  5c:	e5d41004 	ldrb	r1, [r4, #4]
  60:	e5d9300c 	ldrb	r3, [r9, #12]
  64:	e5d0c000 	ldrb	r12, [r0]
  68:	e2812006 	add	r2, r1, #6
  6c:	e3510006 	cmp	r1, #6
  70:	e1d010b4 	ldrh	r1, [r0, #4]
  74:	e3ccc00f 	bic	r12, r12, #15
  78:	e203300f 	and	r3, r3, #15
  7c:	e183300c 	orr	r3, r3, r12
  80:	e0011008 	and	r1, r1, r8
  84:	e1c010b4 	strh	r1, [r0, #4]
  88:	e5c03000 	strb	r3, [r0]
  8c:	e5d9c00a 	ldrb	r12, [r9, #10]
  90:	e5d43002 	ldrb	r3, [r4, #2]
  94:	e5d01007 	ldrb	r1, [r0, #7]
  98:	e083300c 	add	r3, r3, r12
  9c:	e3c1103f 	bic	r1, r1, #63	; 0x3f
  a0:	e203303f 	and	r3, r3, #63	; 0x3f
  a4:	e1833001 	orr	r3, r3, r1
  a8:	e5c03007 	strb	r3, [r0, #7]
  ac:	e5d43003 	ldrb	r3, [r4, #3]
  b0:	e5d9c00b 	ldrb	r12, [r9, #11]
  b4:	e5d01006 	ldrb	r1, [r0, #6]
  b8:	e083300c 	add	r3, r3, r12
  bc:	e203303f 	and	r3, r3, #63	; 0x3f
  c0:	e3c1103f 	bic	r1, r1, #63	; 0x3f
  c4:	e1831001 	orr	r1, r3, r1
  c8:	e5c01006 	strb	r1, [r0, #6]
  cc:	0a000009 	beq	f8 <CNesCtrl::Draw(_b8PpuCmd*, unsigned long)+0xf8>
  d0:	e5991000 	ldr	r1, [r9]
  d4:	e2833008 	add	r3, r3, #8
  d8:	e7912102 	ldr	r2, [r1, r2, lsl #2]
  dc:	e203303f 	and	r3, r3, #63	; 0x3f
  e0:	e3520000 	cmp	r2, #0
  e4:	0a000003 	beq	f8 <CNesCtrl::Draw(_b8PpuCmd*, unsigned long)+0xf8>
  e8:	e5d02006 	ldrb	r2, [r0, #6]
  ec:	e3c2203f 	bic	r2, r2, #63	; 0x3f
  f0:	e1833002 	orr	r3, r3, r2
  f4:	e5c03006 	strb	r3, [r0, #6]
  f8:	e5d43005 	ldrb	r3, [r4, #5]
  fc:	e5d02005 	ldrb	r2, [r0, #5]
 100:	e203301f 	and	r3, r3, #31
 104:	e3c2201f 	bic	r2, r2, #31
 108:	e1833002 	orr	r3, r3, r2
 10c:	e5c03005 	strb	r3, [r0, #5]
 110:	e5d43006 	ldrb	r3, [r4, #6]
 114:	e5d02004 	ldrb	r2, [r0, #4]
 118:	e203301f 	and	r3, r3, #31
 11c:	e3c2201f 	bic	r2, r2, #31
 120:	e1833002 	orr	r3, r3, r2
 124:	e5c03004 	strb	r3, [r0, #4]
 128:	e5d41000 	ldrb	r1, [r4]
 12c:	e1d920b4 	ldrh	r2, [r9, #4]
 130:	e1d930b6 	ldrh	r3, [r9, #6]
 134:	e0822181 	add	r2, r2, r1, lsl #3
 138:	e1c020ba 	strh	r2, [r0, #10]
 13c:	e5d42001 	ldrb	r2, [r4, #1]
 140:	e2844007 	add	r4, r4, #7
 144:	e0833182 	add	r3, r3, r2, lsl #3
 148:	e1540007 	cmp	r4, r7
 14c:	e1c030b8 	strh	r3, [r0, #8]
 150:	1affffbe 	bne	50 <CNesCtrl::Draw(_b8PpuCmd*, unsigned long)+0x50>
 154:	e5d9300e 	ldrb	r3, [r9, #14]
 158:	e3530000 	cmp	r3, #0
 15c:	1a00001c 	bne	1d4 <CNesCtrl::Draw(_b8PpuCmd*, unsigned long)+0x1d4>
 160:	e1a01006 	mov	r1, r6
 164:	e1a00005 	mov	r0, r5
 168:	ebfffffe 	bl	0 <b8PpuRectAllocZ>
 16c:	e1a03000 	mov	r3, r0
 170:	e3a0e07f 	mov	lr, #127	; 0x7f
 174:	e59dc004 	ldr	r12, [sp, #4]
 178:	e5d9200d 	ldrb	r2, [r9, #13]
 17c:	e24cc080 	sub	r12, r12, #128	; 0x80
 180:	e1c3c0b8 	strh	r12, [r3, #8]
 184:	e5d3c000 	ldrb	r12, [r3]
 188:	e1dd40b0 	ldrh	r4, [sp]
 18c:	e3ccc00f 	bic	r12, r12, #15
 190:	e202200f 	and	r2, r2, #15
 194:	e182200c 	orr	r2, r2, r12
 198:	e1a01006 	mov	r1, r6
 19c:	e1c340ba 	strh	r4, [r3, #10]
 1a0:	e583e004 	str	lr, [r3, #4]
 1a4:	e5c32000 	strb	r2, [r3]
 1a8:	e1a00005 	mov	r0, r5
 1ac:	ebfffffe 	bl	0 <b8PpuScissorAllocZ>
 1b0:	e3a01080 	mov	r1, #128	; 0x80
 1b4:	e59d3004 	ldr	r3, [sp, #4]
 1b8:	e1dd20b0 	ldrh	r2, [sp]
 1bc:	e2433080 	sub	r3, r3, #128	; 0x80
 1c0:	e5801004 	str	r1, [r0, #4]
 1c4:	e1c020ba 	strh	r2, [r0, #10]
 1c8:	e1c030b8 	strh	r3, [r0, #8]
 1cc:	e28dd00c 	add	sp, sp, #12
 1d0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
 1d4:	e5990000 	ldr	r0, [r9]
 1d8:	e2800048 	add	r0, r0, #72	; 0x48
 1dc:	ebfffffe 	bl	0 <CHifDecoder::GetStatus()>
 1e0:	e590400c 	ldr	r4, [r0, #12]
 1e4:	e2807004 	add	r7, r0, #4
 1e8:	e1570004 	cmp	r7, r4
 1ec:	0affffdb 	beq	160 <CNesCtrl::Draw(_b8PpuCmd*, unsigned long)+0x160>
 1f0:	e59f806c 	ldr	r8, [pc, #108]	; 264 <CNesCtrl::Draw(_b8PpuCmd*, unsigned long)+0x264>
 1f4:	e3a01001 	mov	r1, #1
 1f8:	e1a00005 	mov	r0, r5
 1fc:	ebfffffe 	bl	0 <b8PpuRectAllocZ>
 200:	e1a03000 	mov	r3, r0
 204:	e5942014 	ldr	r2, [r4, #20]
 208:	e5d3e000 	ldrb	lr, [r3]
 20c:	e1d2c0f8 	ldrsh	r12, [r2, #8]
 210:	e5921000 	ldr	r1, [r2]
 214:	e1a0c24c 	asr	r12, r12, #4
 218:	e1d220fa 	ldrsh	r2, [r2, #10]
 21c:	e24cc010 	sub	r12, r12, #16
 220:	e1c3c0b6 	strh	r12, [r3, #6]
 224:	e201100f 	and	r1, r1, #15
 228:	e3cec00f 	bic	r12, lr, #15
 22c:	e1a02242 	asr	r2, r2, #4
 230:	e2422010 	sub	r2, r2, #16
 234:	e181100c 	orr	r1, r1, r12
 238:	e1a00004 	mov	r0, r4
 23c:	e5c31000 	strb	r1, [r3]
 240:	e1c320b4 	strh	r2, [r3, #4]
 244:	e5838008 	str	r8, [r3, #8]
 248:	ebfffffe 	bl	0 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>
 24c:	e1570000 	cmp	r7, r0
 250:	e1a04000 	mov	r4, r0
 254:	1affffe6 	bne	1f4 <CNesCtrl::Draw(_b8PpuCmd*, unsigned long)+0x1f4>
 258:	eaffffc0 	b	160 <CNesCtrl::Draw(_b8PpuCmd*, unsigned long)+0x160>
 25c:	00000000 	.word	0x00000000
 260:	ffffdfdf 	.word	0xffffdfdf
 264:	00200020 	.word	0x00200020

Disassembly of section .text._ZN8CNesCtrl10GetCntHoldE8ENesCtrl:

00000000 <CNesCtrl::GetCntHold(ENesCtrl)>:
   0:	e5900000 	ldr	r0, [r0]
   4:	e3500000 	cmp	r0, #0
   8:	12811006 	addne	r1, r1, #6
   c:	17900101 	ldrne	r0, [r0, r1, lsl #2]
  10:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN8CNesCtrl13GetCntReleaseE8ENesCtrl:

00000000 <CNesCtrl::GetCntRelease(ENesCtrl)>:
   0:	e5900000 	ldr	r0, [r0]
   4:	e3500000 	cmp	r0, #0
   8:	1281100c 	addne	r1, r1, #12
   c:	17900101 	ldrne	r0, [r0, r1, lsl #2]
  10:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN8CNesCtrlC2ERK10CfgNesCtrl:

00000000 <CNesCtrl::CNesCtrl(CfgNesCtrl const&)>:
   0:	e92d4010 	push	{r4, lr}
   4:	e3a0200c 	mov	r2, #12
   8:	e1a04000 	mov	r4, r0
   c:	e2800004 	add	r0, r0, #4
  10:	ebfffffe 	bl	0 <memcpy>
  14:	e3a03000 	mov	r3, #0
  18:	e1a00004 	mov	r0, r4
  1c:	e5843000 	str	r3, [r4]
  20:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZN8CNesCtrlD2Ev:

00000000 <CNesCtrl::~CNesCtrl()>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e5905000 	ldr	r5, [r0]
   8:	e1a04000 	mov	r4, r0
   c:	e3550000 	cmp	r5, #0
  10:	0a000004 	beq	28 <CNesCtrl::~CNesCtrl()+0x28>
  14:	e2850048 	add	r0, r5, #72	; 0x48
  18:	ebfffffe 	bl	0 <CHifDecoder::~CHifDecoder()>
  1c:	e3a0104c 	mov	r1, #76	; 0x4c
  20:	e1a00005 	mov	r0, r5
  24:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  28:	e1a00004 	mov	r0, r4
  2c:	e8bd8070 	pop	{r4, r5, r6, pc}

pad.o:     file format elf32-littlearm


Disassembly of section .text._ZN4CObj8vOnTouchEv:

00000000 <CObj::vOnTouch()>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN7CPadObj7vOnStepEv:

00000000 <CPadObj::vOnStep()>:
   0:	e590201c 	ldr	r2, [r0, #28]
   4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   8:	e1a06000 	mov	r6, r0
   c:	e5920000 	ldr	r0, [r2]
  10:	e3500000 	cmp	r0, #0
  14:	0a000001 	beq	20 <CPadObj::vOnStep()+0x20>
  18:	ebfffffe 	bl	0 <CNesCtrl::Step()>
  1c:	e596201c 	ldr	r2, [r6, #28]
  20:	e3a04000 	mov	r4, #0
  24:	e3a09001 	mov	r9, #1
  28:	e5963020 	ldr	r3, [r6, #32]
  2c:	e1a07004 	mov	r7, r4
  30:	e2833101 	add	r3, r3, #1073741824	; 0x40000000
  34:	e2433b06 	sub	r3, r3, #6144	; 0x1800
  38:	e1a03103 	lsl	r3, r3, #2
  3c:	e5938000 	ldr	r8, [r3]
  40:	e2865040 	add	r5, r6, #64	; 0x40
  44:	e0183419 	ands	r3, r8, r9, lsl r4
  48:	e20430ff 	and	r3, r4, #255	; 0xff
  4c:	1a00001b 	bne	c0 <CPadObj::vOnStep()+0xc0>
  50:	e5920000 	ldr	r0, [r2]
  54:	e3500000 	cmp	r0, #0
  58:	0a00000d 	beq	94 <CPadObj::vOnStep()+0x94>
  5c:	e2433002 	sub	r3, r3, #2
  60:	e3530005 	cmp	r3, #5
  64:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  68:	ea000009 	b	94 <CPadObj::vOnStep()+0x94>
  6c:	000000e4 	.word	0x000000e4
  70:	00000084 	.word	0x00000084
  74:	00000104 	.word	0x00000104
  78:	000000fc 	.word	0x000000fc
  7c:	000000f4 	.word	0x000000f4
  80:	000000ec 	.word	0x000000ec
  84:	e3a01001 	mov	r1, #1
  88:	ebfffffe 	bl	0 <CNesCtrl::GetCntHold(ENesCtrl)>
  8c:	e3500000 	cmp	r0, #0
  90:	1a00000a 	bne	c0 <CPadObj::vOnStep()+0xc0>
  94:	e5953004 	ldr	r3, [r5, #4]
  98:	e2844001 	add	r4, r4, #1
  9c:	e2833001 	add	r3, r3, #1
  a0:	e3540008 	cmp	r4, #8
  a4:	e505701c 	str	r7, [r5, #-28]	; 0xffffffe4
  a8:	e5a53004 	str	r3, [r5, #4]!
  ac:	0a00000b 	beq	e0 <CPadObj::vOnStep()+0xe0>
  b0:	e0183419 	ands	r3, r8, r9, lsl r4
  b4:	e596201c 	ldr	r2, [r6, #28]
  b8:	e20430ff 	and	r3, r4, #255	; 0xff
  bc:	0affffe3 	beq	50 <CPadObj::vOnStep()+0x50>
  c0:	e3a03000 	mov	r3, #0
  c4:	e515201c 	ldr	r2, [r5, #-28]	; 0xffffffe4
  c8:	e2844001 	add	r4, r4, #1
  cc:	e2822001 	add	r2, r2, #1
  d0:	e3540008 	cmp	r4, #8
  d4:	e505201c 	str	r2, [r5, #-28]	; 0xffffffe4
  d8:	e5a53004 	str	r3, [r5, #4]!
  dc:	1afffff3 	bne	b0 <CPadObj::vOnStep()+0xb0>
  e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  e4:	e3a01000 	mov	r1, #0
  e8:	eaffffe6 	b	88 <CPadObj::vOnStep()+0x88>
  ec:	e3a01005 	mov	r1, #5
  f0:	eaffffe4 	b	88 <CPadObj::vOnStep()+0x88>
  f4:	e3a01004 	mov	r1, #4
  f8:	eaffffe2 	b	88 <CPadObj::vOnStep()+0x88>
  fc:	e3a01003 	mov	r1, #3
 100:	eaffffe0 	b	88 <CPadObj::vOnStep()+0x88>
 104:	e3a01002 	mov	r1, #2
 108:	eaffffde 	b	88 <CPadObj::vOnStep()+0x88>

Disassembly of section .text._ZN7CPadObj7vOnDrawEP9_b8PpuCmd:

00000000 <CPadObj::vOnDraw(_b8PpuCmd*)>:
   0:	e590301c 	ldr	r3, [r0, #28]
   4:	e5930000 	ldr	r0, [r3]
   8:	e3500000 	cmp	r0, #0
   c:	01a0f00e 	moveq	pc, lr
  10:	e3a02006 	mov	r2, #6
  14:	eafffffe 	b	0 <CNesCtrl::Draw(_b8PpuCmd*, unsigned long)>

Disassembly of section .text._ZN7CPadObjD2Ev:

00000000 <CPadObj::~CPadObj()>:
   0:	e3a01000 	mov	r1, #0
   4:	e92d4070 	push	{r4, r5, r6, lr}
   8:	e590501c 	ldr	r5, [r0, #28]
   c:	e59fc054 	ldr	r12, [pc, #84]	; 68 <CPadObj::~CPadObj()+0x68>
  10:	e59f3054 	ldr	r3, [pc, #84]	; 6c <CPadObj::~CPadObj()+0x6c>
  14:	e5902020 	ldr	r2, [r0, #32]
  18:	e1550001 	cmp	r5, r1
  1c:	e1a04000 	mov	r4, r0
  20:	e580c000 	str	r12, [r0]
  24:	e7831102 	str	r1, [r3, r2, lsl #2]
  28:	0a00000a 	beq	58 <CPadObj::~CPadObj()+0x58>
  2c:	e5956000 	ldr	r6, [r5]
  30:	e1560001 	cmp	r6, r1
  34:	0a000004 	beq	4c <CPadObj::~CPadObj()+0x4c>
  38:	e1a00006 	mov	r0, r6
  3c:	ebfffffe 	bl	0 <CNesCtrl::~CNesCtrl()>
  40:	e3a01010 	mov	r1, #16
  44:	e1a00006 	mov	r0, r6
  48:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  4c:	e3a01004 	mov	r1, #4
  50:	e1a00005 	mov	r0, r5
  54:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  58:	e1a00004 	mov	r0, r4
  5c:	ebfffffe 	bl	0 <CObj::~CObj()>
  60:	e1a00004 	mov	r0, r4
  64:	e8bd8070 	pop	{r4, r5, r6, pc}
  68:	00000008 	.word	0x00000008
  6c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN7CPadObjD0Ev:

00000000 <CPadObj::~CPadObj()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	ebfffffe 	bl	0 <CPadObj::~CPadObj()>
   c:	e1a00004 	mov	r0, r4
  10:	e3a01064 	mov	r1, #100	; 0x64
  14:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  18:	e1a00004 	mov	r0, r4
  1c:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZN7CPadObjC2EmPK10CfgNesCtrl:

00000000 <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e1a05001 	mov	r5, r1
   c:	e1a0700e 	mov	r7, lr
  10:	e1a06002 	mov	r6, r2
  14:	ebfffffe 	bl	0 <CObj::CObj()>
  18:	e59f30f8 	ldr	r3, [pc, #248]	; 118 <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x118>
  1c:	e3a02020 	mov	r2, #32
  20:	e3a01000 	mov	r1, #0
  24:	e5843000 	str	r3, [r4]
  28:	e5845020 	str	r5, [r4, #32]
  2c:	e2840024 	add	r0, r4, #36	; 0x24
  30:	ebfffffe 	bl	0 <memset>
  34:	e3a02020 	mov	r2, #32
  38:	e3a01000 	mov	r1, #0
  3c:	e2840044 	add	r0, r4, #68	; 0x44
  40:	ebfffffe 	bl	0 <memset>
  44:	e3550003 	cmp	r5, #3
  48:	8a000014 	bhi	a0 <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0xa0>
  4c:	e3a00004 	mov	r0, #4
  50:	ebfffffe 	bl	0 <operator new(unsigned int)>
  54:	e3a03000 	mov	r3, #0
  58:	e1560003 	cmp	r6, r3
  5c:	e5803000 	str	r3, [r0]
  60:	e584001c 	str	r0, [r4, #28]
  64:	0a000008 	beq	8c <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x8c>
  68:	e3a00010 	mov	r0, #16
  6c:	ebfffffe 	bl	0 <operator new(unsigned int)>
  70:	e1a05000 	mov	r5, r0
  74:	e1a01006 	mov	r1, r6
  78:	ebfffffe 	bl	0 <CNesCtrl::CNesCtrl(CfgNesCtrl const&)>
  7c:	e594301c 	ldr	r3, [r4, #28]
  80:	e1a00005 	mov	r0, r5
  84:	e5835000 	str	r5, [r3]
  88:	ebfffffe 	bl	0 <CNesCtrl::Reset()>
  8c:	e59f3088 	ldr	r3, [pc, #136]	; 11c <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x11c>
  90:	e5942020 	ldr	r2, [r4, #32]
  94:	e1a00004 	mov	r0, r4
  98:	e7834102 	str	r4, [r3, r2, lsl #2]
  9c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  a0:	e59f0078 	ldr	r0, [pc, #120]	; 120 <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x120>
  a4:	ebfffffe 	bl	0 <b8SysPuts>
  a8:	e59f0074 	ldr	r0, [pc, #116]	; 124 <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x124>
  ac:	ebfffffe 	bl	0 <b8SysPuts>
  b0:	e59f0070 	ldr	r0, [pc, #112]	; 128 <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x128>
  b4:	ebfffffe 	bl	0 <b8SysPuts>
  b8:	e3a00053 	mov	r0, #83	; 0x53
  bc:	ebfffffe 	bl	0 <b8SysPutNum>
  c0:	e59f0064 	ldr	r0, [pc, #100]	; 12c <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x12c>
  c4:	ebfffffe 	bl	0 <b8SysPuts>
  c8:	e59f0060 	ldr	r0, [pc, #96]	; 130 <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x130>
  cc:	ebfffffe 	bl	0 <b8SysPuts>
  d0:	e59f005c 	ldr	r0, [pc, #92]	; 134 <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x134>
  d4:	ebfffffe 	bl	0 <b8SysPuts>
  d8:	e59f0058 	ldr	r0, [pc, #88]	; 138 <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x138>
  dc:	ebfffffe 	bl	0 <b8SysPuts>
  e0:	e59f0054 	ldr	r0, [pc, #84]	; 13c <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x13c>
  e4:	ebfffffe 	bl	0 <b8SysPuts>
  e8:	e59f0050 	ldr	r0, [pc, #80]	; 140 <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x140>
  ec:	ebfffffe 	bl	0 <b8SysPuts>
  f0:	e1a00007 	mov	r0, r7
  f4:	ebfffffe 	bl	0 <b8SysPutHex>
  f8:	e59f003c 	ldr	r0, [pc, #60]	; 13c <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x13c>
  fc:	ebfffffe 	bl	0 <b8SysPuts>
 100:	e59f003c 	ldr	r0, [pc, #60]	; 144 <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x144>
 104:	ebfffffe 	bl	0 <b8SysPuts>
 108:	e59f0038 	ldr	r0, [pc, #56]	; 148 <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x148>
 10c:	ebfffffe 	bl	0 <b8SysPuts>
 110:	e1000070 	hlt	0x0000
 114:	eaffffcc 	b	4c <CPadObj::CPadObj(unsigned long, CfgNesCtrl const*)+0x4c>
 118:	00000008 	.word	0x00000008
	...
 124:	0000001c 	.word	0x0000001c
 128:	00000024 	.word	0x00000024
 12c:	00000028 	.word	0x00000028
 130:	0000002c 	.word	0x0000002c
 134:	00000034 	.word	0x00000034
 138:	00000038 	.word	0x00000038
 13c:	00000044 	.word	0x00000044
 140:	00000048 	.word	0x00000048
 144:	00000064 	.word	0x00000064
 148:	000000ac 	.word	0x000000ac

Disassembly of section .text._Z8_CPadObjm:

00000000 <_CPadObj(unsigned long)>:
   0:	e3500003 	cmp	r0, #3
   4:	e92d4070 	push	{r4, r5, r6, lr}
   8:	e1a04000 	mov	r4, r0
   c:	e1a0500e 	mov	r5, lr
  10:	8a000004 	bhi	28 <_CPadObj(unsigned long)+0x28>
  14:	e59f610c 	ldr	r6, [pc, #268]	; 128 <_CPadObj(unsigned long)+0x128>
  18:	e7960104 	ldr	r0, [r6, r4, lsl #2]
  1c:	e3500000 	cmp	r0, #0
  20:	0a000021 	beq	ac <_CPadObj(unsigned long)+0xac>
  24:	e8bd8070 	pop	{r4, r5, r6, pc}
  28:	e59f00fc 	ldr	r0, [pc, #252]	; 12c <_CPadObj(unsigned long)+0x12c>
  2c:	ebfffffe 	bl	0 <b8SysPuts>
  30:	e59f00f8 	ldr	r0, [pc, #248]	; 130 <_CPadObj(unsigned long)+0x130>
  34:	ebfffffe 	bl	0 <b8SysPuts>
  38:	e59f00f4 	ldr	r0, [pc, #244]	; 134 <_CPadObj(unsigned long)+0x134>
  3c:	ebfffffe 	bl	0 <b8SysPuts>
  40:	e3a00062 	mov	r0, #98	; 0x62
  44:	ebfffffe 	bl	0 <b8SysPutNum>
  48:	e59f00e8 	ldr	r0, [pc, #232]	; 138 <_CPadObj(unsigned long)+0x138>
  4c:	ebfffffe 	bl	0 <b8SysPuts>
  50:	e59f00e4 	ldr	r0, [pc, #228]	; 13c <_CPadObj(unsigned long)+0x13c>
  54:	ebfffffe 	bl	0 <b8SysPuts>
  58:	e59f00e0 	ldr	r0, [pc, #224]	; 140 <_CPadObj(unsigned long)+0x140>
  5c:	ebfffffe 	bl	0 <b8SysPuts>
  60:	e59f00dc 	ldr	r0, [pc, #220]	; 144 <_CPadObj(unsigned long)+0x144>
  64:	ebfffffe 	bl	0 <b8SysPuts>
  68:	e59f00d8 	ldr	r0, [pc, #216]	; 148 <_CPadObj(unsigned long)+0x148>
  6c:	ebfffffe 	bl	0 <b8SysPuts>
  70:	e59f00d4 	ldr	r0, [pc, #212]	; 14c <_CPadObj(unsigned long)+0x14c>
  74:	ebfffffe 	bl	0 <b8SysPuts>
  78:	e1a00005 	mov	r0, r5
  7c:	ebfffffe 	bl	0 <b8SysPutHex>
  80:	e59f00c0 	ldr	r0, [pc, #192]	; 148 <_CPadObj(unsigned long)+0x148>
  84:	ebfffffe 	bl	0 <b8SysPuts>
  88:	e59f00c0 	ldr	r0, [pc, #192]	; 150 <_CPadObj(unsigned long)+0x150>
  8c:	ebfffffe 	bl	0 <b8SysPuts>
  90:	e59f00bc 	ldr	r0, [pc, #188]	; 154 <_CPadObj(unsigned long)+0x154>
  94:	ebfffffe 	bl	0 <b8SysPuts>
  98:	e1000070 	hlt	0x0000
  9c:	e59f6084 	ldr	r6, [pc, #132]	; 128 <_CPadObj(unsigned long)+0x128>
  a0:	e7960104 	ldr	r0, [r6, r4, lsl #2]
  a4:	e3500000 	cmp	r0, #0
  a8:	1affffdd 	bne	24 <_CPadObj(unsigned long)+0x24>
  ac:	e59f0078 	ldr	r0, [pc, #120]	; 12c <_CPadObj(unsigned long)+0x12c>
  b0:	ebfffffe 	bl	0 <b8SysPuts>
  b4:	e59f0074 	ldr	r0, [pc, #116]	; 130 <_CPadObj(unsigned long)+0x130>
  b8:	ebfffffe 	bl	0 <b8SysPuts>
  bc:	e59f0070 	ldr	r0, [pc, #112]	; 134 <_CPadObj(unsigned long)+0x134>
  c0:	ebfffffe 	bl	0 <b8SysPuts>
  c4:	e3a00063 	mov	r0, #99	; 0x63
  c8:	ebfffffe 	bl	0 <b8SysPutNum>
  cc:	e59f0064 	ldr	r0, [pc, #100]	; 138 <_CPadObj(unsigned long)+0x138>
  d0:	ebfffffe 	bl	0 <b8SysPuts>
  d4:	e59f0060 	ldr	r0, [pc, #96]	; 13c <_CPadObj(unsigned long)+0x13c>
  d8:	ebfffffe 	bl	0 <b8SysPuts>
  dc:	e59f005c 	ldr	r0, [pc, #92]	; 140 <_CPadObj(unsigned long)+0x140>
  e0:	ebfffffe 	bl	0 <b8SysPuts>
  e4:	e59f006c 	ldr	r0, [pc, #108]	; 158 <_CPadObj(unsigned long)+0x158>
  e8:	ebfffffe 	bl	0 <b8SysPuts>
  ec:	e59f0054 	ldr	r0, [pc, #84]	; 148 <_CPadObj(unsigned long)+0x148>
  f0:	ebfffffe 	bl	0 <b8SysPuts>
  f4:	e59f0050 	ldr	r0, [pc, #80]	; 14c <_CPadObj(unsigned long)+0x14c>
  f8:	ebfffffe 	bl	0 <b8SysPuts>
  fc:	e1a00005 	mov	r0, r5
 100:	ebfffffe 	bl	0 <b8SysPutHex>
 104:	e59f003c 	ldr	r0, [pc, #60]	; 148 <_CPadObj(unsigned long)+0x148>
 108:	ebfffffe 	bl	0 <b8SysPuts>
 10c:	e59f003c 	ldr	r0, [pc, #60]	; 150 <_CPadObj(unsigned long)+0x150>
 110:	ebfffffe 	bl	0 <b8SysPuts>
 114:	e59f0038 	ldr	r0, [pc, #56]	; 154 <_CPadObj(unsigned long)+0x154>
 118:	ebfffffe 	bl	0 <b8SysPuts>
 11c:	e1000070 	hlt	0x0000
 120:	e7960104 	ldr	r0, [r6, r4, lsl #2]
 124:	e8bd8070 	pop	{r4, r5, r6, pc}
	...
 130:	0000001c 	.word	0x0000001c
 134:	00000024 	.word	0x00000024
 138:	00000028 	.word	0x00000028
 13c:	00000000 	.word	0x00000000
 140:	00000034 	.word	0x00000034
 144:	00000038 	.word	0x00000038
 148:	00000044 	.word	0x00000044
 14c:	00000048 	.word	0x00000048
 150:	00000064 	.word	0x00000064
 154:	000000ac 	.word	0x000000ac
 158:	0000000c 	.word	0x0000000c

pico8.o:     file format elf32-littlearm


Disassembly of section .text._ZN5pico85Pico87_updateEv:

00000000 <pico8::Pico8::_update()>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN5pico85Pico85_drawEv:

00000000 <pico8::Pico8::_draw()>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN5pico8L21_calc_segments_vangleEN3fpm5fixedIlxLj8EEEPiPm:

00000000 <pico8::_calc_segments_vangle(fpm::fixed<long, long long, 8u>, int*, unsigned long*)>:
   0:	e3a03c06 	mov	r3, #1536	; 0x600
   4:	e92d4010 	push	{r4, lr}
   8:	e0cec390 	smull	r12, lr, r0, r3
   c:	e1a00540 	asr	r0, r0, #10
  10:	e1a03fce 	asr	r3, lr, #31
  14:	e203307f 	and	r3, r3, #127	; 0x7f
  18:	e093300c 	adds	r3, r3, r12
  1c:	e2aee000 	adc	lr, lr, #0
  20:	e1a033a3 	lsr	r3, r3, #7
  24:	e1833c8e 	orr	r3, r3, lr, lsl #25
  28:	e1a0cfae 	lsr	r12, lr, #31
  2c:	e09cc003 	adds	r12, r12, r3
  30:	e1a04fce 	asr	r4, lr, #31
  34:	e0233fce 	eor	r3, r3, lr, asr #31
  38:	e1a0e3ce 	asr	lr, lr, #7
  3c:	e2aee000 	adc	lr, lr, #0
  40:	e0533004 	subs	r3, r3, r4
  44:	e2033001 	and	r3, r3, #1
  48:	e1a0c0ac 	lsr	r12, r12, #1
  4c:	e0233004 	eor	r3, r3, r4
  50:	e0533004 	subs	r3, r3, r4
  54:	e18ccf8e 	orr	r12, r12, lr, lsl #31
  58:	e08cc003 	add	r12, r12, r3
  5c:	e08cc400 	add	r12, r12, r0, lsl #8
  60:	e35c0b22 	cmp	r12, #34816	; 0x8800
  64:	b3a03301 	movlt	r3, #67108864	; 0x4000000
  68:	b3a0c010 	movlt	r12, #16
  6c:	ba000006 	blt	8c <pico8::_calc_segments_vangle(fpm::fixed<long, long long, 8u>, int*, unsigned long*)+0x8c>
  70:	e1a0c5cc 	asr	r12, r12, #11
  74:	e35c0031 	cmp	r12, #49	; 0x31
  78:	c3a0c032 	movgt	r12, #50	; 0x32
  7c:	d59f3014 	ldrle	r3, [pc, #20]	; 98 <pico8::_calc_segments_vangle(fpm::fixed<long, long long, 8u>, int*, unsigned long*)+0x98>
  80:	d24c0010 	suble	r0, r12, #16
  84:	d7933100 	ldrle	r3, [r3, r0, lsl #2]
  88:	c59f300c 	ldrgt	r3, [pc, #12]	; 9c <pico8::_calc_segments_vangle(fpm::fixed<long, long long, 8u>, int*, unsigned long*)+0x9c>
  8c:	e581c000 	str	r12, [r1]
  90:	e5823000 	str	r3, [r2]
  94:	e8bd8010 	pop	{r4, pc}
  98:	00000000 	.word	0x00000000
  9c:	0147ae14 	.word	0x0147ae14

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceISt6vectorI12_b8PpuBgTileSaIS1_EESaIS3_ELN9__gnu_cxx12_Lock_policyE0EED2Ev:

00000000 <std::_Sp_counted_ptr_inplace<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> >, std::allocator<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > >, (__gnu_cxx::_Lock_policy)0>::~_Sp_counted_ptr_inplace()>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceI11CHifDecoderSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED2Ev:

00000000 <std::_Sp_counted_ptr_inplace<CHifDecoder, std::allocator<CHifDecoder>, (__gnu_cxx::_Lock_policy)0>::~_Sp_counted_ptr_inplace()>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceI11CHifDecoderSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info:

00000000 <std::_Sp_counted_ptr_inplace<CHifDecoder, std::allocator<CHifDecoder>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)>:
   0:	e59f3028 	ldr	r3, [pc, #40]	; 30 <std::_Sp_counted_ptr_inplace<CHifDecoder, std::allocator<CHifDecoder>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x30>
   4:	e92d4010 	push	{r4, lr}
   8:	e1510003 	cmp	r1, r3
   c:	e280400c 	add	r4, r0, #12
  10:	0a000004 	beq	28 <std::_Sp_counted_ptr_inplace<CHifDecoder, std::allocator<CHifDecoder>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x28>
  14:	e1a00001 	mov	r0, r1
  18:	e59f1014 	ldr	r1, [pc, #20]	; 34 <std::_Sp_counted_ptr_inplace<CHifDecoder, std::allocator<CHifDecoder>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x34>
  1c:	ebfffffe 	bl	0 <std::type_info::operator==(std::type_info const&) const>
  20:	e3500000 	cmp	r0, #0
  24:	03a04000 	moveq	r4, #0
  28:	e1a00004 	mov	r0, r4
  2c:	e8bd8010 	pop	{r4, pc}
	...

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceISt6vectorI12_b8PpuBgTileSaIS1_EESaIS3_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info:

00000000 <std::_Sp_counted_ptr_inplace<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> >, std::allocator<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > >, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)>:
   0:	e59f3028 	ldr	r3, [pc, #40]	; 30 <std::_Sp_counted_ptr_inplace<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> >, std::allocator<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > >, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x30>
   4:	e92d4010 	push	{r4, lr}
   8:	e1510003 	cmp	r1, r3
   c:	e280400c 	add	r4, r0, #12
  10:	0a000004 	beq	28 <std::_Sp_counted_ptr_inplace<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> >, std::allocator<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > >, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x28>
  14:	e1a00001 	mov	r0, r1
  18:	e59f1014 	ldr	r1, [pc, #20]	; 34 <std::_Sp_counted_ptr_inplace<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> >, std::allocator<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > >, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x34>
  1c:	ebfffffe 	bl	0 <std::type_info::operator==(std::type_info const&) const>
  20:	e3500000 	cmp	r0, #0
  24:	03a04000 	moveq	r4, #0
  28:	e1a00004 	mov	r0, r4
  2c:	e8bd8010 	pop	{r4, pc}
	...

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceI11CHifDecoderSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv:

00000000 <std::_Sp_counted_ptr_inplace<CHifDecoder, std::allocator<CHifDecoder>, (__gnu_cxx::_Lock_policy)0>::_M_dispose()>:
   0:	e280000c 	add	r0, r0, #12
   4:	eafffffe 	b	0 <CHifDecoder::~CHifDecoder()>

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceI11CHifDecoderSaIS0_ELN9__gnu_cxx12_Lock_policyE0EED0Ev:

00000000 <std::_Sp_counted_ptr_inplace<CHifDecoder, std::allocator<CHifDecoder>, (__gnu_cxx::_Lock_policy)0>::~_Sp_counted_ptr_inplace()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e3a01010 	mov	r1, #16
   c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  10:	e1a00004 	mov	r0, r4
  14:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceISt6vectorI12_b8PpuBgTileSaIS1_EESaIS3_ELN9__gnu_cxx12_Lock_policyE0EED0Ev:

00000000 <std::_Sp_counted_ptr_inplace<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> >, std::allocator<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > >, (__gnu_cxx::_Lock_policy)0>::~_Sp_counted_ptr_inplace()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e3a01018 	mov	r1, #24
   c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  10:	e1a00004 	mov	r0, r4
  14:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZN5pico83btnENS_6ButtonEh.part.0:

00000000 <pico8::btn(pico8::Button, unsigned char) [clone .part.0]>:
   0:	e3e03a05 	mvn	r3, #20480	; 0x5000
   4:	e3500010 	cmp	r0, #16
   8:	e5133fff 	ldr	r3, [r3, #-4095]	; 0xfffff001
   c:	0a000008 	beq	34 <pico8::btn(pico8::Button, unsigned char) [clone .part.0]+0x34>
  10:	e3500005 	cmp	r0, #5
  14:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
  18:	ea000028 	b	c0 <pico8::btn(pico8::Button, unsigned char) [clone .part.0]+0xc0>
  1c:	00000084 	.word	0x00000084
  20:	00000090 	.word	0x00000090
  24:	0000009c 	.word	0x0000009c
  28:	000000a8 	.word	0x000000a8
  2c:	000000b4 	.word	0x000000b4
  30:	00000078 	.word	0x00000078
  34:	e1a00123 	lsr	r0, r3, #2
  38:	e2000001 	and	r0, r0, #1
  3c:	e3130010 	tst	r3, #16
  40:	13800002 	orrne	r0, r0, #2
  44:	e3130008 	tst	r3, #8
  48:	13800004 	orrne	r0, r0, #4
  4c:	e3130020 	tst	r3, #32
  50:	13800008 	orrne	r0, r0, #8
  54:	e3130080 	tst	r3, #128	; 0x80
  58:	13800010 	orrne	r0, r0, #16
  5c:	e3130040 	tst	r3, #64	; 0x40
  60:	e59f3060 	ldr	r3, [pc, #96]	; c8 <pico8::btn(pico8::Button, unsigned char) [clone .part.0]+0xc8>
  64:	13800020 	orrne	r0, r0, #32
  68:	e1d330b8 	ldrh	r3, [r3, #8]
  6c:	e3130001 	tst	r3, #1
  70:	13800040 	orrne	r0, r0, #64	; 0x40
  74:	e1a0f00e 	mov	pc, lr
  78:	e1a03323 	lsr	r3, r3, #6
  7c:	e2030001 	and	r0, r3, #1
  80:	e1a0f00e 	mov	pc, lr
  84:	e1a03123 	lsr	r3, r3, #2
  88:	e2030001 	and	r0, r3, #1
  8c:	e1a0f00e 	mov	pc, lr
  90:	e1a03223 	lsr	r3, r3, #4
  94:	e2030001 	and	r0, r3, #1
  98:	e1a0f00e 	mov	pc, lr
  9c:	e1a031a3 	lsr	r3, r3, #3
  a0:	e2030001 	and	r0, r3, #1
  a4:	e1a0f00e 	mov	pc, lr
  a8:	e1a032a3 	lsr	r3, r3, #5
  ac:	e2030001 	and	r0, r3, #1
  b0:	e1a0f00e 	mov	pc, lr
  b4:	e1a033a3 	lsr	r3, r3, #7
  b8:	e2030001 	and	r0, r3, #1
  bc:	e1a0f00e 	mov	pc, lr
  c0:	e3a00000 	mov	r0, #0
  c4:	e1a0f00e 	mov	pc, lr
  c8:	00000000 	.word	0x00000000

Disassembly of section .text._ZN3fpm5fixedIlxLj8EEdVERKS1_.part.0:

00000000 <fpm::fixed<long, long long, 8u>::operator/=(fpm::fixed<long, long long, 8u> const&) [clone .part.0]>:
   0:	e3a010e5 	mov	r1, #229	; 0xe5
   4:	e92d4010 	push	{r4, lr}
   8:	e59f3008 	ldr	r3, [pc, #8]	; 18 <fpm::fixed<long, long long, 8u>::operator/=(fpm::fixed<long, long long, 8u> const&) [clone .part.0]+0x18>
   c:	e59f2008 	ldr	r2, [pc, #8]	; 1c <fpm::fixed<long, long long, 8u>::operator/=(fpm::fixed<long, long long, 8u> const&) [clone .part.0]+0x1c>
  10:	e59f0008 	ldr	r0, [pc, #8]	; 20 <fpm::fixed<long, long long, 8u>::operator/=(fpm::fixed<long, long long, 8u> const&) [clone .part.0]+0x20>
  14:	ebfffffe 	bl	0 <__assert_func>
  18:	00000000 	.word	0x00000000
  1c:	00000010 	.word	0x00000010
  20:	00000120 	.word	0x00000120

Disassembly of section .text._ZN5pico8L13_is_collidingERK4PolyRK4Rect.constprop.0:

00000000 <pico8::_is_colliding(Poly const&, Rect const&) [clone .constprop.0]>:
   0:	e59f20b4 	ldr	r2, [pc, #180]	; bc <pico8::_is_colliding(Poly const&, Rect const&) [clone .constprop.0]+0xbc>
   4:	e5901000 	ldr	r1, [r0]
   8:	e5923000 	ldr	r3, [r2]
   c:	e1510003 	cmp	r1, r3
  10:	aa000005 	bge	2c <pico8::_is_colliding(Poly const&, Rect const&) [clone .constprop.0]+0x2c>
  14:	e590c008 	ldr	r12, [r0, #8]
  18:	e153000c 	cmp	r3, r12
  1c:	da000002 	ble	2c <pico8::_is_colliding(Poly const&, Rect const&) [clone .constprop.0]+0x2c>
  20:	e590c010 	ldr	r12, [r0, #16]
  24:	e153000c 	cmp	r3, r12
  28:	ca000021 	bgt	b4 <pico8::_is_colliding(Poly const&, Rect const&) [clone .constprop.0]+0xb4>
  2c:	e592c008 	ldr	r12, [r2, #8]
  30:	e083300c 	add	r3, r3, r12
  34:	e1510003 	cmp	r1, r3
  38:	da000005 	ble	54 <pico8::_is_colliding(Poly const&, Rect const&) [clone .constprop.0]+0x54>
  3c:	e5901008 	ldr	r1, [r0, #8]
  40:	e1530001 	cmp	r3, r1
  44:	aa000002 	bge	54 <pico8::_is_colliding(Poly const&, Rect const&) [clone .constprop.0]+0x54>
  48:	e5901010 	ldr	r1, [r0, #16]
  4c:	e1530001 	cmp	r3, r1
  50:	ba000017 	blt	b4 <pico8::_is_colliding(Poly const&, Rect const&) [clone .constprop.0]+0xb4>
  54:	e5901004 	ldr	r1, [r0, #4]
  58:	e5923004 	ldr	r3, [r2, #4]
  5c:	e1510003 	cmp	r1, r3
  60:	aa000005 	bge	7c <pico8::_is_colliding(Poly const&, Rect const&) [clone .constprop.0]+0x7c>
  64:	e590c00c 	ldr	r12, [r0, #12]
  68:	e153000c 	cmp	r3, r12
  6c:	da000002 	ble	7c <pico8::_is_colliding(Poly const&, Rect const&) [clone .constprop.0]+0x7c>
  70:	e590c014 	ldr	r12, [r0, #20]
  74:	e153000c 	cmp	r3, r12
  78:	ca00000d 	bgt	b4 <pico8::_is_colliding(Poly const&, Rect const&) [clone .constprop.0]+0xb4>
  7c:	e592200c 	ldr	r2, [r2, #12]
  80:	e0833002 	add	r3, r3, r2
  84:	e1510003 	cmp	r1, r3
  88:	da000007 	ble	ac <pico8::_is_colliding(Poly const&, Rect const&) [clone .constprop.0]+0xac>
  8c:	e590200c 	ldr	r2, [r0, #12]
  90:	e1530002 	cmp	r3, r2
  94:	aa000004 	bge	ac <pico8::_is_colliding(Poly const&, Rect const&) [clone .constprop.0]+0xac>
  98:	e5902014 	ldr	r2, [r0, #20]
  9c:	e1530002 	cmp	r3, r2
  a0:	b3a00000 	movlt	r0, #0
  a4:	a3a00001 	movge	r0, #1
  a8:	e1a0f00e 	mov	pc, lr
  ac:	e3a00001 	mov	r0, #1
  b0:	e1a0f00e 	mov	pc, lr
  b4:	e3a00000 	mov	r0, #0
  b8:	e1a0f00e 	mov	pc, lr
  bc:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico8L13_is_collidingERK4LineRK4Rect.constprop.0:

00000000 <pico8::_is_colliding(Line const&, Rect const&) [clone .constprop.0]>:
   0:	e59f2084 	ldr	r2, [pc, #132]	; 8c <pico8::_is_colliding(Line const&, Rect const&) [clone .constprop.0]+0x8c>
   4:	e5901000 	ldr	r1, [r0]
   8:	e5923000 	ldr	r3, [r2]
   c:	e1510003 	cmp	r1, r3
  10:	aa000002 	bge	20 <pico8::_is_colliding(Line const&, Rect const&) [clone .constprop.0]+0x20>
  14:	e590c008 	ldr	r12, [r0, #8]
  18:	e153000c 	cmp	r3, r12
  1c:	ca000018 	bgt	84 <pico8::_is_colliding(Line const&, Rect const&) [clone .constprop.0]+0x84>
  20:	e592c008 	ldr	r12, [r2, #8]
  24:	e083300c 	add	r3, r3, r12
  28:	e1510003 	cmp	r1, r3
  2c:	da000002 	ble	3c <pico8::_is_colliding(Line const&, Rect const&) [clone .constprop.0]+0x3c>
  30:	e5901008 	ldr	r1, [r0, #8]
  34:	e1530001 	cmp	r3, r1
  38:	ba000011 	blt	84 <pico8::_is_colliding(Line const&, Rect const&) [clone .constprop.0]+0x84>
  3c:	e5901004 	ldr	r1, [r0, #4]
  40:	e5923004 	ldr	r3, [r2, #4]
  44:	e1510003 	cmp	r1, r3
  48:	aa000002 	bge	58 <pico8::_is_colliding(Line const&, Rect const&) [clone .constprop.0]+0x58>
  4c:	e590c00c 	ldr	r12, [r0, #12]
  50:	e153000c 	cmp	r3, r12
  54:	ca00000a 	bgt	84 <pico8::_is_colliding(Line const&, Rect const&) [clone .constprop.0]+0x84>
  58:	e592200c 	ldr	r2, [r2, #12]
  5c:	e0833002 	add	r3, r3, r2
  60:	e1510003 	cmp	r1, r3
  64:	da000004 	ble	7c <pico8::_is_colliding(Line const&, Rect const&) [clone .constprop.0]+0x7c>
  68:	e590200c 	ldr	r2, [r0, #12]
  6c:	e1530002 	cmp	r3, r2
  70:	b3a00000 	movlt	r0, #0
  74:	a3a00001 	movge	r0, #1
  78:	e1a0f00e 	mov	pc, lr
  7c:	e3a00001 	mov	r0, #1
  80:	e1a0f00e 	mov	pc, lr
  84:	e3a00000 	mov	r0, #0
  88:	e1a0f00e 	mov	pc, lr
  8c:	00000000 	.word	0x00000000

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceISt6vectorI12_b8PpuBgTileSaIS1_EESaIS3_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv:

00000000 <std::_Sp_counted_ptr_inplace<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> >, std::allocator<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > >, (__gnu_cxx::_Lock_policy)0>::_M_dispose()>:
   0:	e1a03000 	mov	r3, r0
   4:	e590000c 	ldr	r0, [r0, #12]
   8:	e3500000 	cmp	r0, #0
   c:	01a0f00e 	moveq	pc, lr
  10:	e5931014 	ldr	r1, [r3, #20]
  14:	e0411000 	sub	r1, r1, r0
  18:	eafffffe 	b	0 <operator delete(void*, unsigned int)>

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceISt6vectorI12_b8PpuBgTileSaIS1_EESaIS3_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv:

00000000 <std::_Sp_counted_ptr_inplace<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> >, std::allocator<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > >, (__gnu_cxx::_Lock_policy)0>::_M_destroy()>:
   0:	e3a01018 	mov	r1, #24
   4:	eafffffe 	b	0 <operator delete(void*, unsigned int)>

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceI11CHifDecoderSaIS0_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv:

00000000 <std::_Sp_counted_ptr_inplace<CHifDecoder, std::allocator<CHifDecoder>, (__gnu_cxx::_Lock_policy)0>::_M_destroy()>:
   0:	e3a01010 	mov	r1, #16
   4:	eafffffe 	b	0 <operator delete(void*, unsigned int)>

Disassembly of section .text.__tcf_0:

00000000 <__tcf_0>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e59f406c 	ldr	r4, [pc, #108]	; 78 <__tcf_0+0x78>
   8:	e2446050 	sub	r6, r4, #80	; 0x50
   c:	e5145008 	ldr	r5, [r4, #-8]
  10:	e2444014 	sub	r4, r4, #20
  14:	e3550000 	cmp	r5, #0
  18:	0a000013 	beq	6c <__tcf_0+0x6c>
  1c:	e5953004 	ldr	r3, [r5, #4]
  20:	e2433001 	sub	r3, r3, #1
  24:	e3530000 	cmp	r3, #0
  28:	e5853004 	str	r3, [r5, #4]
  2c:	1a00000e 	bne	6c <__tcf_0+0x6c>
  30:	e5953000 	ldr	r3, [r5]
  34:	e1a00005 	mov	r0, r5
  38:	e5933008 	ldr	r3, [r3, #8]
  3c:	e1a0e00f 	mov	lr, pc
  40:	e1a0f003 	mov	pc, r3
  44:	e5953008 	ldr	r3, [r5, #8]
  48:	e2433001 	sub	r3, r3, #1
  4c:	e3530000 	cmp	r3, #0
  50:	e5853008 	str	r3, [r5, #8]
  54:	1a000004 	bne	6c <__tcf_0+0x6c>
  58:	e5953000 	ldr	r3, [r5]
  5c:	e1a00005 	mov	r0, r5
  60:	e593300c 	ldr	r3, [r3, #12]
  64:	e1a0e00f 	mov	lr, pc
  68:	e1a0f003 	mov	pc, r3
  6c:	e1540006 	cmp	r4, r6
  70:	1affffe5 	bne	c <__tcf_0+0xc>
  74:	e8bd8070 	pop	{r4, r5, r6, pc}
  78:	00000050 	.word	0x00000050

Disassembly of section .text._ZNSt10shared_ptrI11CHifDecoderED2Ev:

00000000 <std::shared_ptr<CHifDecoder>::~shared_ptr()>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e5905004 	ldr	r5, [r0, #4]
   8:	e1a04000 	mov	r4, r0
   c:	e3550000 	cmp	r5, #0
  10:	0a000013 	beq	64 <std::shared_ptr<CHifDecoder>::~shared_ptr()+0x64>
  14:	e5953004 	ldr	r3, [r5, #4]
  18:	e2433001 	sub	r3, r3, #1
  1c:	e3530000 	cmp	r3, #0
  20:	e5853004 	str	r3, [r5, #4]
  24:	1a00000e 	bne	64 <std::shared_ptr<CHifDecoder>::~shared_ptr()+0x64>
  28:	e5953000 	ldr	r3, [r5]
  2c:	e1a00005 	mov	r0, r5
  30:	e5933008 	ldr	r3, [r3, #8]
  34:	e1a0e00f 	mov	lr, pc
  38:	e1a0f003 	mov	pc, r3
  3c:	e5953008 	ldr	r3, [r5, #8]
  40:	e2433001 	sub	r3, r3, #1
  44:	e3530000 	cmp	r3, #0
  48:	e5853008 	str	r3, [r5, #8]
  4c:	1a000004 	bne	64 <std::shared_ptr<CHifDecoder>::~shared_ptr()+0x64>
  50:	e5953000 	ldr	r3, [r5]
  54:	e1a00005 	mov	r0, r5
  58:	e593300c 	ldr	r3, [r3, #12]
  5c:	e1a0e00f 	mov	lr, pc
  60:	e1a0f003 	mov	pc, r3
  64:	e1a00004 	mov	r0, r4
  68:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv:

00000000 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)0>::_M_release()>:
   0:	e5903004 	ldr	r3, [r0, #4]
   4:	e2433001 	sub	r3, r3, #1
   8:	e3530000 	cmp	r3, #0
   c:	e5803004 	str	r3, [r0, #4]
  10:	11a0f00e 	movne	pc, lr
  14:	e92d4010 	push	{r4, lr}
  18:	e1a04000 	mov	r4, r0
  1c:	e5903000 	ldr	r3, [r0]
  20:	e5933008 	ldr	r3, [r3, #8]
  24:	e1a0e00f 	mov	lr, pc
  28:	e1a0f003 	mov	pc, r3
  2c:	e5943008 	ldr	r3, [r4, #8]
  30:	e2433001 	sub	r3, r3, #1
  34:	e3530000 	cmp	r3, #0
  38:	e5843008 	str	r3, [r4, #8]
  3c:	1a000004 	bne	54 <std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)0>::_M_release()+0x54>
  40:	e5943000 	ldr	r3, [r4]
  44:	e1a00004 	mov	r0, r4
  48:	e8bd4010 	pop	{r4, lr}
  4c:	e593300c 	ldr	r3, [r3, #12]
  50:	e1a0f003 	mov	pc, r3
  54:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZN5pico86seterrENS_5ErrorE:

00000000 <pico8::seterr(pico8::Error)>:
   0:	e59f300c 	ldr	r3, [pc, #12]	; 14 <pico8::seterr(pico8::Error)+0x14>
   4:	e5d32000 	ldrb	r2, [r3]
   8:	e3520000 	cmp	r2, #0
   c:	05c30000 	strbeq	r0, [r3]
  10:	e1a0f00e 	mov	pc, lr
  14:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico85Pico83runEv:

00000000 <pico8::Pico8::run()>:
   0:	e3a04000 	mov	r4, #0
   4:	e92d4880 	push	{r7, r11, lr}
   8:	e59f3694 	ldr	r3, [pc, #1684]	; 6a4 <pico8::Pico8::run()+0x6a4>
   c:	e59f8694 	ldr	r8, [pc, #1684]	; 6a8 <pico8::Pico8::run()+0x6a8>
  10:	e5c34000 	strb	r4, [r3]
  14:	e59f3690 	ldr	r3, [pc, #1680]	; 6ac <pico8::Pico8::run()+0x6ac>
  18:	e59fa690 	ldr	r10, [pc, #1680]	; 6b0 <pico8::Pico8::run()+0x6b0>
  1c:	e5c34000 	strb	r4, [r3]
  20:	e59f368c 	ldr	r3, [pc, #1676]	; 6b4 <pico8::Pico8::run()+0x6b4>
  24:	e24dd094 	sub	sp, sp, #148	; 0x94
  28:	e1a02004 	mov	r2, r4
  2c:	e1a01004 	mov	r1, r4
  30:	e1a09000 	mov	r9, r0
  34:	e1a00008 	mov	r0, r8
  38:	e58de004 	str	lr, [sp, #4]
  3c:	e5c34000 	strb	r4, [r3]
  40:	e58a4000 	str	r4, [r10]
  44:	ebfffffe 	bl	0 <Vec::set(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  48:	e8980003 	ldm	r8, {r0, r1}
  4c:	e3a0c008 	mov	r12, #8
  50:	e3e03a0d 	mvn	r3, #53248	; 0xd000
  54:	e59f265c 	ldr	r2, [pc, #1628]	; 6b8 <pico8::Pico8::run()+0x6b8>
  58:	e59f565c 	ldr	r5, [pc, #1628]	; 6bc <pico8::Pico8::run()+0x6bc>
  5c:	e8820003 	stm	r2, {r0, r1}
  60:	e59f2658 	ldr	r2, [pc, #1624]	; 6c0 <pico8::Pico8::run()+0x6c0>
  64:	e59f6658 	ldr	r6, [pc, #1624]	; 6c4 <pico8::Pico8::run()+0x6c4>
  68:	e1c2c0b0 	strh	r12, [r2]
  6c:	e5132feb 	ldr	r2, [r3, #-4075]	; 0xfffff015
  70:	e5133fef 	ldr	r3, [r3, #-4079]	; 0xfffff011
  74:	e1a01005 	mov	r1, r5
  78:	e02330a2 	eor	r3, r3, r2, lsr #1
  7c:	e59f2644 	ldr	r2, [pc, #1604]	; 6c8 <pico8::Pico8::run()+0x6c8>
  80:	e0233823 	eor	r3, r3, r3, lsr #16
  84:	e0030392 	mul	r3, r2, r3
  88:	e24221db 	sub	r2, r2, #-1073741770	; 0xc0000036
  8c:	e24227ce 	sub	r2, r2, #54001664	; 0x3380000
  90:	e2422b47 	sub	r2, r2, #72704	; 0x11c00
  94:	e02336a3 	eor	r3, r3, r3, lsr #13
  98:	e0030392 	mul	r3, r2, r3
  9c:	e59f2628 	ldr	r2, [pc, #1576]	; 6cc <pico8::Pico8::run()+0x6cc>
  a0:	e0233823 	eor	r3, r3, r3, lsr #16
  a4:	e1a00006 	mov	r0, r6
  a8:	e5823000 	str	r3, [r2]
  ac:	ebfffffe 	bl	0 <b8PpuGetResolution>
  b0:	e3a00010 	mov	r0, #16
  b4:	e3a01004 	mov	r1, #4
  b8:	e5952000 	ldr	r2, [r5]
  bc:	e59f360c 	ldr	r3, [pc, #1548]	; 6d0 <pico8::Pico8::run()+0x6d0>
  c0:	e1a02402 	lsl	r2, r2, #8
  c4:	e596c000 	ldr	r12, [r6]
  c8:	e583200c 	str	r2, [r3, #12]
  cc:	e59f2600 	ldr	r2, [pc, #1536]	; 6d4 <pico8::Pico8::run()+0x6d4>
  d0:	e1a0c40c 	lsl	r12, r12, #8
  d4:	e5c20008 	strb	r0, [r2, #8]
  d8:	e583c008 	str	r12, [r3, #8]
  dc:	e5824004 	str	r4, [r2, #4]
  e0:	e5824000 	str	r4, [r2]
  e4:	e59fc5ec 	ldr	r12, [pc, #1516]	; 6d8 <pico8::Pico8::run()+0x6d8>
  e8:	e582400c 	str	r4, [r2, #12]
  ec:	e59f25e8 	ldr	r2, [pc, #1512]	; 6dc <pico8::Pico8::run()+0x6dc>
  f0:	e59f75e8 	ldr	r7, [pc, #1512]	; 6e0 <pico8::Pico8::run()+0x6e0>
  f4:	e5834000 	str	r4, [r3]
  f8:	e5834004 	str	r4, [r3, #4]
  fc:	e5c21008 	strb	r1, [r2, #8]
 100:	e5824004 	str	r4, [r2, #4]
 104:	e5824000 	str	r4, [r2]
 108:	e893000f 	ldm	r3, {r0, r1, r2, r3}
 10c:	e88c000f 	stm	r12, {r0, r1, r2, r3}
 110:	e3a02a01 	mov	r2, #4096	; 0x1000
 114:	e59f05c8 	ldr	r0, [pc, #1480]	; 6e4 <pico8::Pico8::run()+0x6e4>
 118:	e1a05007 	mov	r5, r7
 11c:	e28db008 	add	r11, sp, #8
 120:	ebfffffe 	bl	0 <memset>
 124:	e3a02044 	mov	r2, #68	; 0x44
 128:	e3a01000 	mov	r1, #0
 12c:	e1a0000b 	mov	r0, r11
 130:	ebfffffe 	bl	0 <memset>
 134:	e3a02044 	mov	r2, #68	; 0x44
 138:	e3a01000 	mov	r1, #0
 13c:	e28d004c 	add	r0, sp, #76	; 0x4c
 140:	ebfffffe 	bl	0 <memset>
 144:	e1a00005 	mov	r0, r5
 148:	e3a02088 	mov	r2, #136	; 0x88
 14c:	e1a0100b 	mov	r1, r11
 150:	ebfffffe 	bl	0 <memcpy>
 154:	e3540001 	cmp	r4, #1
 158:	e2855088 	add	r5, r5, #136	; 0x88
 15c:	1a0000ea 	bne	50c <pico8::Pico8::run()+0x50c>
 160:	e3a00010 	mov	r0, #16
 164:	ebfffffe 	bl	0 <operator new(unsigned int)>
 168:	e5804004 	str	r4, [r0, #4]
 16c:	e5804008 	str	r4, [r0, #8]
 170:	e1a04000 	mov	r4, r0
 174:	e1a05000 	mov	r5, r0
 178:	e59f3568 	ldr	r3, [pc, #1384]	; 6e8 <pico8::Pico8::run()+0x6e8>
 17c:	e484300c 	str	r3, [r4], #12
 180:	e1a00004 	mov	r0, r4
 184:	ebfffffe 	bl	0 <CHifDecoder::CHifDecoder()>
 188:	e59f355c 	ldr	r3, [pc, #1372]	; 6ec <pico8::Pico8::run()+0x6ec>
 18c:	e5930004 	ldr	r0, [r3, #4]
 190:	e5834000 	str	r4, [r3]
 194:	e3500000 	cmp	r0, #0
 198:	e5835004 	str	r5, [r3, #4]
 19c:	1bfffffe 	blne	0 <pico8::Pico8::run()>
 1a0:	e3a03000 	mov	r3, #0
 1a4:	e59f5544 	ldr	r5, [pc, #1348]	; 6f0 <pico8::Pico8::run()+0x6f0>
 1a8:	e5853000 	str	r3, [r5]
 1ac:	e5853004 	str	r3, [r5, #4]
 1b0:	e1c530b8 	strh	r3, [r5, #8]
 1b4:	ebfffffe 	bl	0 <sprprint::Reset()>
 1b8:	e59f3534 	ldr	r3, [pc, #1332]	; 6f4 <pico8::Pico8::run()+0x6f4>
 1bc:	e1a0100b 	mov	r1, r11
 1c0:	e3a00001 	mov	r0, #1
 1c4:	e58d3008 	str	r3, [sp, #8]
 1c8:	ebfffffe 	bl	0 <sprprint::Open(sprprint::EnCh, sprprint::Context&)>
 1cc:	e59f3524 	ldr	r3, [pc, #1316]	; 6f8 <pico8::Pico8::run()+0x6f8>
 1d0:	e3500000 	cmp	r0, #0
 1d4:	e5830000 	str	r0, [r3]
 1d8:	0a0000dc 	beq	550 <pico8::Pico8::run()+0x550>
 1dc:	ebfffffe 	bl	0 <bgprint::Reset()>
 1e0:	e3a0c000 	mov	r12, #0
 1e4:	e59f2510 	ldr	r2, [pc, #1296]	; 6fc <pico8::Pico8::run()+0x6fc>
 1e8:	e1a0300b 	mov	r3, r11
 1ec:	e8920007 	ldm	r2, {r0, r1, r2}
 1f0:	e88b0007 	stm	r11, {r0, r1, r2}
 1f4:	e3a02c01 	mov	r2, #256	; 0x100
 1f8:	e3a00003 	mov	r0, #3
 1fc:	e1a0100c 	mov	r1, r12
 200:	e5cdc012 	strb	r12, [sp, #18]
 204:	ebfffffe 	bl	0 <bgprint::Open(bgprint::EnCh, char*, unsigned int, bgprint::Context&)>
 208:	e59f34f0 	ldr	r3, [pc, #1264]	; 700 <pico8::Pico8::run()+0x700>
 20c:	e3500000 	cmp	r0, #0
 210:	e5830000 	str	r0, [r3]
 214:	0a0000eb 	beq	5c8 <pico8::Pico8::run()+0x5c8>
 218:	e59f04e4 	ldr	r0, [pc, #1252]	; 704 <pico8::Pico8::run()+0x704>
 21c:	e59f44c0 	ldr	r4, [pc, #1216]	; 6e4 <pico8::Pico8::run()+0x6e4>
 220:	ebfffffe 	bl	0 <printf>
 224:	e59f04dc 	ldr	r0, [pc, #1244]	; 708 <pico8::Pico8::run()+0x708>
 228:	ebfffffe 	bl	0 <printf>
 22c:	e5d4300a 	ldrb	r3, [r4, #10]
 230:	e3530000 	cmp	r3, #0
 234:	1a000101 	bne	640 <pico8::Pico8::run()+0x640>
 238:	e5d43014 	ldrb	r3, [r4, #20]
 23c:	e3530000 	cmp	r3, #0
 240:	1a000112 	bne	690 <pico8::Pico8::run()+0x690>
 244:	e59f04c0 	ldr	r0, [pc, #1216]	; 70c <pico8::Pico8::run()+0x70c>
 248:	ebfffffe 	bl	0 <printf>
 24c:	e5d4300a 	ldrb	r3, [r4, #10]
 250:	e3833001 	orr	r3, r3, #1
 254:	e3530001 	cmp	r3, #1
 258:	e5c4300a 	strb	r3, [r4, #10]
 25c:	1a000106 	bne	67c <pico8::Pico8::run()+0x67c>
 260:	e3a03007 	mov	r3, #7
 264:	e59f04a4 	ldr	r0, [pc, #1188]	; 710 <pico8::Pico8::run()+0x710>
 268:	e5c4300a 	strb	r3, [r4, #10]
 26c:	ebfffffe 	bl	0 <printf>
 270:	e5d4300a 	ldrb	r3, [r4, #10]
 274:	e20330fd 	and	r3, r3, #253	; 0xfd
 278:	e3530005 	cmp	r3, #5
 27c:	e5c4300a 	strb	r3, [r4, #10]
 280:	1a0000f8 	bne	668 <pico8::Pico8::run()+0x668>
 284:	e59f0488 	ldr	r0, [pc, #1160]	; 714 <pico8::Pico8::run()+0x714>
 288:	ebfffffe 	bl	0 <printf>
 28c:	e3e03055 	mvn	r3, #85	; 0x55
 290:	e59f0480 	ldr	r0, [pc, #1152]	; 718 <pico8::Pico8::run()+0x718>
 294:	e5c4300a 	strb	r3, [r4, #10]
 298:	ebfffffe 	bl	0 <printf>
 29c:	e5d4310a 	ldrb	r3, [r4, #266]	; 0x10a
 2a0:	e5d4600a 	ldrb	r6, [r4, #10]
 2a4:	e3833001 	orr	r3, r3, #1
 2a8:	e2166001 	ands	r6, r6, #1
 2ac:	e5c4310a 	strb	r3, [r4, #266]	; 0x10a
 2b0:	1a0000e7 	bne	654 <pico8::Pico8::run()+0x654>
 2b4:	e3e0300f 	mvn	r3, #15
 2b8:	e59f045c 	ldr	r0, [pc, #1116]	; 71c <pico8::Pico8::run()+0x71c>
 2bc:	e5c4310a 	strb	r3, [r4, #266]	; 0x10a
 2c0:	ebfffffe 	bl	0 <printf>
 2c4:	e59f0454 	ldr	r0, [pc, #1108]	; 720 <pico8::Pico8::run()+0x720>
 2c8:	ebfffffe 	bl	0 <printf>
 2cc:	e59f0450 	ldr	r0, [pc, #1104]	; 724 <pico8::Pico8::run()+0x724>
 2d0:	ebfffffe 	bl	0 <printf>
 2d4:	e5993000 	ldr	r3, [r9]
 2d8:	e1a00009 	mov	r0, r9
 2dc:	e5933000 	ldr	r3, [r3]
 2e0:	e1a0e00f 	mov	lr, pc
 2e4:	e1a0f003 	mov	pc, r3
 2e8:	e59f8404 	ldr	r8, [pc, #1028]	; 6f4 <pico8::Pico8::run()+0x6f4>
 2ec:	e1a02007 	mov	r2, r7
 2f0:	e3a01000 	mov	r1, #0
 2f4:	ea000007 	b	318 <pico8::Pico8::run()+0x318>
 2f8:	e5923000 	ldr	r3, [r2]
 2fc:	e2811001 	add	r1, r1, #1
 300:	e2833001 	add	r3, r3, #1
 304:	e3510006 	cmp	r1, #6
 308:	e5826044 	str	r6, [r2, #68]	; 0x44
 30c:	e5823000 	str	r3, [r2]
 310:	e2822004 	add	r2, r2, #4
 314:	0a00000b 	beq	348 <pico8::Pico8::run()+0x348>
 318:	e20100ff 	and	r0, r1, #255	; 0xff
 31c:	ebfffffe 	bl	0 <pico8::Pico8::run()>
 320:	e3500000 	cmp	r0, #0
 324:	1afffff3 	bne	2f8 <pico8::Pico8::run()+0x2f8>
 328:	e5923044 	ldr	r3, [r2, #68]	; 0x44
 32c:	e2811001 	add	r1, r1, #1
 330:	e2833001 	add	r3, r3, #1
 334:	e3510006 	cmp	r1, #6
 338:	e5820000 	str	r0, [r2]
 33c:	e5823044 	str	r3, [r2, #68]	; 0x44
 340:	e2822004 	add	r2, r2, #4
 344:	1afffff3 	bne	318 <pico8::Pico8::run()+0x318>
 348:	e59f339c 	ldr	r3, [pc, #924]	; 6ec <pico8::Pico8::run()+0x6ec>
 34c:	e1c560b8 	strh	r6, [r5, #8]
 350:	e5930000 	ldr	r0, [r3]
 354:	ebfffffe 	bl	0 <CHifDecoder::GetMouseStatus()>
 358:	e5d03004 	ldrb	r3, [r0, #4]
 35c:	e3530000 	cmp	r3, #0
 360:	0a00005d 	beq	4dc <pico8::Pico8::run()+0x4dc>
 364:	e1d530b8 	ldrh	r3, [r5, #8]
 368:	e3833001 	orr	r3, r3, #1
 36c:	e1c530b8 	strh	r3, [r5, #8]
 370:	e5973018 	ldr	r3, [r7, #24]
 374:	e2833001 	add	r3, r3, #1
 378:	e5873018 	str	r3, [r7, #24]
 37c:	e3a03000 	mov	r3, #0
 380:	e587305c 	str	r3, [r7, #92]	; 0x5c
 384:	e59f3360 	ldr	r3, [pc, #864]	; 6ec <pico8::Pico8::run()+0x6ec>
 388:	e5930000 	ldr	r0, [r3]
 38c:	ebfffffe 	bl	0 <CHifDecoder::GetStatus()>
 390:	e1a04000 	mov	r4, r0
 394:	e590000c 	ldr	r0, [r0, #12]
 398:	e2844004 	add	r4, r4, #4
 39c:	e1500004 	cmp	r0, r4
 3a0:	1a00000e 	bne	3e0 <pico8::Pico8::run()+0x3e0>
 3a4:	ea000018 	b	40c <pico8::Pico8::run()+0x40c>
 3a8:	e35300f1 	cmp	r3, #241	; 0xf1
 3ac:	81c560b8 	strhhi	r6, [r5, #8]
 3b0:	8a000007 	bhi	3d4 <pico8::Pico8::run()+0x3d4>
 3b4:	e2833010 	add	r3, r3, #16
 3b8:	e20330ff 	and	r3, r3, #255	; 0xff
 3bc:	e3530001 	cmp	r3, #1
 3c0:	8a000003 	bhi	3d4 <pico8::Pico8::run()+0x3d4>
 3c4:	e1d230f8 	ldrsh	r3, [r2, #8]
 3c8:	e5853000 	str	r3, [r5]
 3cc:	e1d230fa 	ldrsh	r3, [r2, #10]
 3d0:	e5853004 	str	r3, [r5, #4]
 3d4:	ebfffffe 	bl	0 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>
 3d8:	e1540000 	cmp	r4, r0
 3dc:	0a00000a 	beq	40c <pico8::Pico8::run()+0x40c>
 3e0:	e5902014 	ldr	r2, [r0, #20]
 3e4:	e5d23006 	ldrb	r3, [r2, #6]
 3e8:	e35300f3 	cmp	r3, #243	; 0xf3
 3ec:	9affffed 	bls	3a8 <pico8::Pico8::run()+0x3a8>
 3f0:	e283300c 	add	r3, r3, #12
 3f4:	e20330ff 	and	r3, r3, #255	; 0xff
 3f8:	e3530003 	cmp	r3, #3
 3fc:	9afffff0 	bls	3c4 <pico8::Pico8::run()+0x3c4>
 400:	ebfffffe 	bl	0 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>
 404:	e1540000 	cmp	r4, r0
 408:	1afffff4 	bne	3e0 <pico8::Pico8::run()+0x3e0>
 40c:	e5993000 	ldr	r3, [r9]
 410:	e59f2310 	ldr	r2, [pc, #784]	; 728 <pico8::Pico8::run()+0x728>
 414:	e5933004 	ldr	r3, [r3, #4]
 418:	e1530002 	cmp	r3, r2
 41c:	1a000032 	bne	4ec <pico8::Pico8::run()+0x4ec>
 420:	e59a3000 	ldr	r3, [r10]
 424:	e2833001 	add	r3, r3, #1
 428:	e58a3000 	str	r3, [r10]
 42c:	e59f3280 	ldr	r3, [pc, #640]	; 6b4 <pico8::Pico8::run()+0x6b4>
 430:	e5d33000 	ldrb	r3, [r3]
 434:	e3530000 	cmp	r3, #0
 438:	1a000035 	bne	514 <pico8::Pico8::run()+0x514>
 43c:	e3a02801 	mov	r2, #65536	; 0x10000
 440:	e1a00008 	mov	r0, r8
 444:	e59f12e0 	ldr	r1, [pc, #736]	; 72c <pico8::Pico8::run()+0x72c>
 448:	ebfffffe 	bl	0 <b8PpuCmdSetBuff>
 44c:	e3a03010 	mov	r3, #16
 450:	e59f22d8 	ldr	r2, [pc, #728]	; 730 <pico8::Pico8::run()+0x730>
 454:	e1a00008 	mov	r0, r8
 458:	e59f12d4 	ldr	r1, [pc, #724]	; 734 <pico8::Pico8::run()+0x734>
 45c:	ebfffffe 	bl	0 <b8PpuClearOT>
 460:	e3a03001 	mov	r3, #1
 464:	e59f2240 	ldr	r2, [pc, #576]	; 6ac <pico8::Pico8::run()+0x6ac>
 468:	e5c23000 	strb	r3, [r2]
 46c:	e5993000 	ldr	r3, [r9]
 470:	e59f22c0 	ldr	r2, [pc, #704]	; 738 <pico8::Pico8::run()+0x738>
 474:	e5933008 	ldr	r3, [r3, #8]
 478:	e1530002 	cmp	r3, r2
 47c:	1a00001e 	bne	4fc <pico8::Pico8::run()+0x4fc>
 480:	e59f326c 	ldr	r3, [pc, #620]	; 6f4 <pico8::Pico8::run()+0x6f4>
 484:	e1a0100b 	mov	r1, r11
 488:	e58d3008 	str	r3, [sp, #8]
 48c:	e3a03001 	mov	r3, #1
 490:	e58d300c 	str	r3, [sp, #12]
 494:	e59f3264 	ldr	r3, [pc, #612]	; 700 <pico8::Pico8::run()+0x700>
 498:	e5930000 	ldr	r0, [r3]
 49c:	ebfffffe 	bl	0 <bgprint::Export(__sFILE*, bgprint::ExportPpuCmd const&)>
 4a0:	e59f3204 	ldr	r3, [pc, #516]	; 6ac <pico8::Pico8::run()+0x6ac>
 4a4:	e5c36000 	strb	r6, [r3]
 4a8:	e59f3204 	ldr	r3, [pc, #516]	; 6b4 <pico8::Pico8::run()+0x6b4>
 4ac:	e5d33000 	ldrb	r3, [r3]
 4b0:	e3530000 	cmp	r3, #0
 4b4:	e59f323c 	ldr	r3, [pc, #572]	; 6f8 <pico8::Pico8::run()+0x6f8>
 4b8:	e5930000 	ldr	r0, [r3]
 4bc:	1a000014 	bne	514 <pico8::Pico8::run()+0x514>
 4c0:	ebfffffe 	bl	0 <fflush>
 4c4:	e1a00008 	mov	r0, r8
 4c8:	ebfffffe 	bl	0 <b8PpuHaltAlloc>
 4cc:	e1a00008 	mov	r0, r8
 4d0:	ebfffffe 	bl	0 <b8PpuExec>
 4d4:	ebfffffe 	bl	0 <b8PpuVsyncWait>
 4d8:	eaffff83 	b	2ec <pico8::Pico8::run()+0x2ec>
 4dc:	e5873018 	str	r3, [r7, #24]
 4e0:	e597305c 	ldr	r3, [r7, #92]	; 0x5c
 4e4:	e2833001 	add	r3, r3, #1
 4e8:	eaffffa4 	b	380 <pico8::Pico8::run()+0x380>
 4ec:	e1a00009 	mov	r0, r9
 4f0:	e1a0e00f 	mov	lr, pc
 4f4:	e1a0f003 	mov	pc, r3
 4f8:	eaffffc8 	b	420 <pico8::Pico8::run()+0x420>
 4fc:	e1a00009 	mov	r0, r9
 500:	e1a0e00f 	mov	lr, pc
 504:	e1a0f003 	mov	pc, r3
 508:	eaffffdc 	b	480 <pico8::Pico8::run()+0x480>
 50c:	e3a04001 	mov	r4, #1
 510:	eaffff03 	b	124 <pico8::Pico8::run()+0x124>
 514:	e59f4220 	ldr	r4, [pc, #544]	; 73c <pico8::Pico8::run()+0x73c>
 518:	e59f5194 	ldr	r5, [pc, #404]	; 6b4 <pico8::Pico8::run()+0x6b4>
 51c:	e5943000 	ldr	r3, [r4]
 520:	e5d52000 	ldrb	r2, [r5]
 524:	e59f1214 	ldr	r1, [pc, #532]	; 740 <pico8::Pico8::run()+0x740>
 528:	e593000c 	ldr	r0, [r3, #12]
 52c:	ebfffffe 	bl	0 <fprintf>
 530:	e5943000 	ldr	r3, [r4]
 534:	e5d52000 	ldrb	r2, [r5]
 538:	e59f1204 	ldr	r1, [pc, #516]	; 744 <pico8::Pico8::run()+0x744>
 53c:	e5930008 	ldr	r0, [r3, #8]
 540:	ebfffffe 	bl	0 <fprintf>
 544:	e3a00dfa 	mov	r0, #16000	; 0x3e80
 548:	ebfffffe 	bl	0 <usleep>
 54c:	eafffffc 	b	544 <pico8::Pico8::run()+0x544>
 550:	e59f01f0 	ldr	r0, [pc, #496]	; 748 <pico8::Pico8::run()+0x748>
 554:	ebfffffe 	bl	0 <b8SysPuts>
 558:	e59f01ec 	ldr	r0, [pc, #492]	; 74c <pico8::Pico8::run()+0x74c>
 55c:	ebfffffe 	bl	0 <b8SysPuts>
 560:	e59f01e8 	ldr	r0, [pc, #488]	; 750 <pico8::Pico8::run()+0x750>
 564:	ebfffffe 	bl	0 <b8SysPuts>
 568:	e59f01e4 	ldr	r0, [pc, #484]	; 754 <pico8::Pico8::run()+0x754>
 56c:	ebfffffe 	bl	0 <b8SysPutNum>
 570:	e59f01e0 	ldr	r0, [pc, #480]	; 758 <pico8::Pico8::run()+0x758>
 574:	ebfffffe 	bl	0 <b8SysPuts>
 578:	e59f01dc 	ldr	r0, [pc, #476]	; 75c <pico8::Pico8::run()+0x75c>
 57c:	ebfffffe 	bl	0 <b8SysPuts>
 580:	e59f01d8 	ldr	r0, [pc, #472]	; 760 <pico8::Pico8::run()+0x760>
 584:	ebfffffe 	bl	0 <b8SysPuts>
 588:	e59f01d4 	ldr	r0, [pc, #468]	; 764 <pico8::Pico8::run()+0x764>
 58c:	ebfffffe 	bl	0 <b8SysPuts>
 590:	e59f01d0 	ldr	r0, [pc, #464]	; 768 <pico8::Pico8::run()+0x768>
 594:	ebfffffe 	bl	0 <b8SysPuts>
 598:	e59f01cc 	ldr	r0, [pc, #460]	; 76c <pico8::Pico8::run()+0x76c>
 59c:	ebfffffe 	bl	0 <b8SysPuts>
 5a0:	e59d0004 	ldr	r0, [sp, #4]
 5a4:	ebfffffe 	bl	0 <b8SysPutHex>
 5a8:	e59f01b8 	ldr	r0, [pc, #440]	; 768 <pico8::Pico8::run()+0x768>
 5ac:	ebfffffe 	bl	0 <b8SysPuts>
 5b0:	e59f01b8 	ldr	r0, [pc, #440]	; 770 <pico8::Pico8::run()+0x770>
 5b4:	ebfffffe 	bl	0 <b8SysPuts>
 5b8:	e59f01b4 	ldr	r0, [pc, #436]	; 774 <pico8::Pico8::run()+0x774>
 5bc:	ebfffffe 	bl	0 <b8SysPuts>
 5c0:	e1000070 	hlt	0x0000
 5c4:	eaffff04 	b	1dc <pico8::Pico8::run()+0x1dc>
 5c8:	e59f0178 	ldr	r0, [pc, #376]	; 748 <pico8::Pico8::run()+0x748>
 5cc:	ebfffffe 	bl	0 <b8SysPuts>
 5d0:	e59f0174 	ldr	r0, [pc, #372]	; 74c <pico8::Pico8::run()+0x74c>
 5d4:	ebfffffe 	bl	0 <b8SysPuts>
 5d8:	e59f0170 	ldr	r0, [pc, #368]	; 750 <pico8::Pico8::run()+0x750>
 5dc:	ebfffffe 	bl	0 <b8SysPuts>
 5e0:	e59f0190 	ldr	r0, [pc, #400]	; 778 <pico8::Pico8::run()+0x778>
 5e4:	ebfffffe 	bl	0 <b8SysPutNum>
 5e8:	e59f0168 	ldr	r0, [pc, #360]	; 758 <pico8::Pico8::run()+0x758>
 5ec:	ebfffffe 	bl	0 <b8SysPuts>
 5f0:	e59f0164 	ldr	r0, [pc, #356]	; 75c <pico8::Pico8::run()+0x75c>
 5f4:	ebfffffe 	bl	0 <b8SysPuts>
 5f8:	e59f0160 	ldr	r0, [pc, #352]	; 760 <pico8::Pico8::run()+0x760>
 5fc:	ebfffffe 	bl	0 <b8SysPuts>
 600:	e59f0174 	ldr	r0, [pc, #372]	; 77c <pico8::Pico8::run()+0x77c>
 604:	ebfffffe 	bl	0 <b8SysPuts>
 608:	e59f0158 	ldr	r0, [pc, #344]	; 768 <pico8::Pico8::run()+0x768>
 60c:	ebfffffe 	bl	0 <b8SysPuts>
 610:	e59f0154 	ldr	r0, [pc, #340]	; 76c <pico8::Pico8::run()+0x76c>
 614:	ebfffffe 	bl	0 <b8SysPuts>
 618:	e59d0004 	ldr	r0, [sp, #4]
 61c:	ebfffffe 	bl	0 <b8SysPutHex>
 620:	e59f0140 	ldr	r0, [pc, #320]	; 768 <pico8::Pico8::run()+0x768>
 624:	ebfffffe 	bl	0 <b8SysPuts>
 628:	e59f0140 	ldr	r0, [pc, #320]	; 770 <pico8::Pico8::run()+0x770>
 62c:	ebfffffe 	bl	0 <b8SysPuts>
 630:	e59f013c 	ldr	r0, [pc, #316]	; 774 <pico8::Pico8::run()+0x774>
 634:	ebfffffe 	bl	0 <b8SysPuts>
 638:	e1000070 	hlt	0x0000
 63c:	eafffef5 	b	218 <pico8::Pico8::run()+0x218>
 640:	e3a0104d 	mov	r1, #77	; 0x4d
 644:	e59f3134 	ldr	r3, [pc, #308]	; 780 <pico8::Pico8::run()+0x780>
 648:	e59f2134 	ldr	r2, [pc, #308]	; 784 <pico8::Pico8::run()+0x784>
 64c:	e59f00f8 	ldr	r0, [pc, #248]	; 74c <pico8::Pico8::run()+0x74c>
 650:	ebfffffe 	bl	0 <__assert_func>
 654:	e3a01073 	mov	r1, #115	; 0x73
 658:	e59f3128 	ldr	r3, [pc, #296]	; 788 <pico8::Pico8::run()+0x788>
 65c:	e59f2120 	ldr	r2, [pc, #288]	; 784 <pico8::Pico8::run()+0x784>
 660:	e59f00e4 	ldr	r0, [pc, #228]	; 74c <pico8::Pico8::run()+0x74c>
 664:	ebfffffe 	bl	0 <__assert_func>
 668:	e3a01064 	mov	r1, #100	; 0x64
 66c:	e59f3118 	ldr	r3, [pc, #280]	; 78c <pico8::Pico8::run()+0x78c>
 670:	e59f210c 	ldr	r2, [pc, #268]	; 784 <pico8::Pico8::run()+0x784>
 674:	e59f00d0 	ldr	r0, [pc, #208]	; 74c <pico8::Pico8::run()+0x74c>
 678:	ebfffffe 	bl	0 <__assert_func>
 67c:	e3a01056 	mov	r1, #86	; 0x56
 680:	e59f3108 	ldr	r3, [pc, #264]	; 790 <pico8::Pico8::run()+0x790>
 684:	e59f20f8 	ldr	r2, [pc, #248]	; 784 <pico8::Pico8::run()+0x784>
 688:	e59f00bc 	ldr	r0, [pc, #188]	; 74c <pico8::Pico8::run()+0x74c>
 68c:	ebfffffe 	bl	0 <__assert_func>
 690:	e3a0104e 	mov	r1, #78	; 0x4e
 694:	e59f30f8 	ldr	r3, [pc, #248]	; 794 <pico8::Pico8::run()+0x794>
 698:	e59f20e4 	ldr	r2, [pc, #228]	; 784 <pico8::Pico8::run()+0x784>
 69c:	e59f00a8 	ldr	r0, [pc, #168]	; 74c <pico8::Pico8::run()+0x74c>
 6a0:	ebfffffe 	bl	0 <__assert_func>
	...
 6c8:	85ebca6b 	.word	0x85ebca6b
	...
 6e8:	00000008 	.word	0x00000008
	...
 704:	00000128 	.word	0x00000128
 708:	00000148 	.word	0x00000148
 70c:	000001a0 	.word	0x000001a0
 710:	000001dc 	.word	0x000001dc
 714:	00000214 	.word	0x00000214
 718:	00000238 	.word	0x00000238
 71c:	0000027c 	.word	0x0000027c
 720:	000002a4 	.word	0x000002a4
 724:	000002cc 	.word	0x000002cc
	...
 740:	000002e8 	.word	0x000002e8
 744:	00000300 	.word	0x00000300
 748:	00000000 	.word	0x00000000
 74c:	0000001c 	.word	0x0000001c
 750:	00000028 	.word	0x00000028
 754:	00000101 	.word	0x00000101
 758:	0000002c 	.word	0x0000002c
 75c:	00000030 	.word	0x00000030
 760:	00000038 	.word	0x00000038
 764:	0000003c 	.word	0x0000003c
 768:	0000004c 	.word	0x0000004c
 76c:	00000050 	.word	0x00000050
 770:	0000006c 	.word	0x0000006c
 774:	000000b4 	.word	0x000000b4
 778:	0000010d 	.word	0x0000010d
 77c:	00000110 	.word	0x00000110
 780:	00000164 	.word	0x00000164
 784:	00000174 	.word	0x00000174
 788:	00000268 	.word	0x00000268
 78c:	00000204 	.word	0x00000204
 790:	000001cc 	.word	0x000001cc
 794:	00000190 	.word	0x00000190

Disassembly of section .text._ZN5pico83lspEhPKh:

00000000 <pico8::lsp(unsigned char, unsigned char const*)>:
   0:	e350000d 	cmp	r0, #13
   4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   8:	e1a04000 	mov	r4, r0
   c:	e1a0700e 	mov	r7, lr
  10:	e1a05001 	mov	r5, r1
  14:	8a000045 	bhi	130 <pico8::lsp(unsigned char, unsigned char const*)+0x130>
  18:	e59f6188 	ldr	r6, [pc, #392]	; 1a8 <pico8::lsp(unsigned char, unsigned char const*)+0x1a8>
  1c:	e7963104 	ldr	r3, [r6, r4, lsl #2]
  20:	e3530000 	cmp	r3, #0
  24:	0a00001c 	beq	9c <pico8::lsp(unsigned char, unsigned char const*)+0x9c>
  28:	e59f017c 	ldr	r0, [pc, #380]	; 1ac <pico8::lsp(unsigned char, unsigned char const*)+0x1ac>
  2c:	ebfffffe 	bl	0 <b8SysPuts>
  30:	e59f0178 	ldr	r0, [pc, #376]	; 1b0 <pico8::lsp(unsigned char, unsigned char const*)+0x1b0>
  34:	ebfffffe 	bl	0 <b8SysPuts>
  38:	e59f0174 	ldr	r0, [pc, #372]	; 1b4 <pico8::lsp(unsigned char, unsigned char const*)+0x1b4>
  3c:	ebfffffe 	bl	0 <b8SysPuts>
  40:	e59f0170 	ldr	r0, [pc, #368]	; 1b8 <pico8::lsp(unsigned char, unsigned char const*)+0x1b8>
  44:	ebfffffe 	bl	0 <b8SysPutNum>
  48:	e59f016c 	ldr	r0, [pc, #364]	; 1bc <pico8::lsp(unsigned char, unsigned char const*)+0x1bc>
  4c:	ebfffffe 	bl	0 <b8SysPuts>
  50:	e59f0168 	ldr	r0, [pc, #360]	; 1c0 <pico8::lsp(unsigned char, unsigned char const*)+0x1c0>
  54:	ebfffffe 	bl	0 <b8SysPuts>
  58:	e59f0164 	ldr	r0, [pc, #356]	; 1c4 <pico8::lsp(unsigned char, unsigned char const*)+0x1c4>
  5c:	ebfffffe 	bl	0 <b8SysPuts>
  60:	e59f0160 	ldr	r0, [pc, #352]	; 1c8 <pico8::lsp(unsigned char, unsigned char const*)+0x1c8>
  64:	ebfffffe 	bl	0 <b8SysPuts>
  68:	e59f015c 	ldr	r0, [pc, #348]	; 1cc <pico8::lsp(unsigned char, unsigned char const*)+0x1cc>
  6c:	ebfffffe 	bl	0 <b8SysPuts>
  70:	e59f0158 	ldr	r0, [pc, #344]	; 1d0 <pico8::lsp(unsigned char, unsigned char const*)+0x1d0>
  74:	ebfffffe 	bl	0 <b8SysPuts>
  78:	e1a00007 	mov	r0, r7
  7c:	ebfffffe 	bl	0 <b8SysPutHex>
  80:	e59f0144 	ldr	r0, [pc, #324]	; 1cc <pico8::lsp(unsigned char, unsigned char const*)+0x1cc>
  84:	ebfffffe 	bl	0 <b8SysPuts>
  88:	e59f0144 	ldr	r0, [pc, #324]	; 1d4 <pico8::lsp(unsigned char, unsigned char const*)+0x1d4>
  8c:	ebfffffe 	bl	0 <b8SysPuts>
  90:	e59f0140 	ldr	r0, [pc, #320]	; 1d8 <pico8::lsp(unsigned char, unsigned char const*)+0x1d8>
  94:	ebfffffe 	bl	0 <b8SysPuts>
  98:	e1000070 	hlt	0x0000
  9c:	e3a02801 	mov	r2, #65536	; 0x10000
  a0:	e59f1134 	ldr	r1, [pc, #308]	; 1dc <pico8::lsp(unsigned char, unsigned char const*)+0x1dc>
  a4:	e59f0134 	ldr	r0, [pc, #308]	; 1e0 <pico8::lsp(unsigned char, unsigned char const*)+0x1e0>
  a8:	ebfffffe 	bl	0 <b8PpuCmdSetBuff>
  ac:	e59f012c 	ldr	r0, [pc, #300]	; 1e0 <pico8::lsp(unsigned char, unsigned char const*)+0x1e0>
  b0:	ebfffffe 	bl	0 <b8PpuLoadimgAlloc>
  b4:	e1a03000 	mov	r3, r0
  b8:	e59f1124 	ldr	r1, [pc, #292]	; 1e4 <pico8::lsp(unsigned char, unsigned char const*)+0x1e4>
  bc:	e1a00124 	lsr	r0, r4, #2
  c0:	e1a02e04 	lsl	r2, r4, #28
  c4:	e1811800 	orr	r1, r1, r0, lsl #16
  c8:	e2022203 	and	r2, r2, #805306368	; 0x30000000
  cc:	e593e008 	ldr	lr, [r3, #8]
  d0:	e1822001 	orr	r2, r2, r1
  d4:	e59f110c 	ldr	r1, [pc, #268]	; 1e8 <pico8::lsp(unsigned char, unsigned char const*)+0x1e8>
  d8:	e59fc10c 	ldr	r12, [pc, #268]	; 1ec <pico8::lsp(unsigned char, unsigned char const*)+0x1ec>
  dc:	e001100e 	and	r1, r1, lr
  e0:	e3811a01 	orr	r1, r1, #4096	; 0x1000
  e4:	e5831008 	str	r1, [r3, #8]
  e8:	e593100c 	ldr	r1, [r3, #12]
  ec:	e5835004 	str	r5, [r3, #4]
  f0:	e00cc001 	and	r12, r12, r1
  f4:	e182200c 	orr	r2, r2, r12
  f8:	e583200c 	str	r2, [r3, #12]
  fc:	e59f00dc 	ldr	r0, [pc, #220]	; 1e0 <pico8::lsp(unsigned char, unsigned char const*)+0x1e0>
 100:	ebfffffe 	bl	0 <b8PpuFlushAlloc>
 104:	e1a03000 	mov	r3, r0
 108:	e5d32000 	ldrb	r2, [r3]
 10c:	e59f00cc 	ldr	r0, [pc, #204]	; 1e0 <pico8::lsp(unsigned char, unsigned char const*)+0x1e0>
 110:	e3822002 	orr	r2, r2, #2
 114:	e5c32000 	strb	r2, [r3]
 118:	e7865104 	str	r5, [r6, r4, lsl #2]
 11c:	ebfffffe 	bl	0 <b8PpuHaltAlloc>
 120:	e59f00b8 	ldr	r0, [pc, #184]	; 1e0 <pico8::lsp(unsigned char, unsigned char const*)+0x1e0>
 124:	ebfffffe 	bl	0 <b8PpuExec>
 128:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 12c:	eafffffe 	b	0 <b8PpuVsyncWait>
 130:	e59f0074 	ldr	r0, [pc, #116]	; 1ac <pico8::lsp(unsigned char, unsigned char const*)+0x1ac>
 134:	ebfffffe 	bl	0 <b8SysPuts>
 138:	e59f0070 	ldr	r0, [pc, #112]	; 1b0 <pico8::lsp(unsigned char, unsigned char const*)+0x1b0>
 13c:	ebfffffe 	bl	0 <b8SysPuts>
 140:	e59f006c 	ldr	r0, [pc, #108]	; 1b4 <pico8::lsp(unsigned char, unsigned char const*)+0x1b4>
 144:	ebfffffe 	bl	0 <b8SysPuts>
 148:	e3a00f5e 	mov	r0, #376	; 0x178
 14c:	ebfffffe 	bl	0 <b8SysPutNum>
 150:	e59f0064 	ldr	r0, [pc, #100]	; 1bc <pico8::lsp(unsigned char, unsigned char const*)+0x1bc>
 154:	ebfffffe 	bl	0 <b8SysPuts>
 158:	e59f0060 	ldr	r0, [pc, #96]	; 1c0 <pico8::lsp(unsigned char, unsigned char const*)+0x1c0>
 15c:	ebfffffe 	bl	0 <b8SysPuts>
 160:	e59f005c 	ldr	r0, [pc, #92]	; 1c4 <pico8::lsp(unsigned char, unsigned char const*)+0x1c4>
 164:	ebfffffe 	bl	0 <b8SysPuts>
 168:	e59f0080 	ldr	r0, [pc, #128]	; 1f0 <pico8::lsp(unsigned char, unsigned char const*)+0x1f0>
 16c:	ebfffffe 	bl	0 <b8SysPuts>
 170:	e59f0054 	ldr	r0, [pc, #84]	; 1cc <pico8::lsp(unsigned char, unsigned char const*)+0x1cc>
 174:	ebfffffe 	bl	0 <b8SysPuts>
 178:	e59f0050 	ldr	r0, [pc, #80]	; 1d0 <pico8::lsp(unsigned char, unsigned char const*)+0x1d0>
 17c:	ebfffffe 	bl	0 <b8SysPuts>
 180:	e1a00007 	mov	r0, r7
 184:	ebfffffe 	bl	0 <b8SysPutHex>
 188:	e59f003c 	ldr	r0, [pc, #60]	; 1cc <pico8::lsp(unsigned char, unsigned char const*)+0x1cc>
 18c:	ebfffffe 	bl	0 <b8SysPuts>
 190:	e59f003c 	ldr	r0, [pc, #60]	; 1d4 <pico8::lsp(unsigned char, unsigned char const*)+0x1d4>
 194:	ebfffffe 	bl	0 <b8SysPuts>
 198:	e59f0038 	ldr	r0, [pc, #56]	; 1d8 <pico8::lsp(unsigned char, unsigned char const*)+0x1d8>
 19c:	ebfffffe 	bl	0 <b8SysPuts>
 1a0:	e1000070 	hlt	0x0000
 1a4:	eaffff9b 	b	18 <pico8::lsp(unsigned char, unsigned char const*)+0x18>
	...
 1b0:	0000001c 	.word	0x0000001c
 1b4:	00000028 	.word	0x00000028
 1b8:	00000179 	.word	0x00000179
 1bc:	0000002c 	.word	0x0000002c
 1c0:	00000000 	.word	0x00000000
 1c4:	00000038 	.word	0x00000038
 1c8:	00000014 	.word	0x00000014
 1cc:	0000004c 	.word	0x0000004c
 1d0:	00000050 	.word	0x00000050
 1d4:	0000006c 	.word	0x0000006c
 1d8:	000000b4 	.word	0x000000b4
	...
 1e4:	00001010 	.word	0x00001010
 1e8:	c0c0c0ff 	.word	0xc0c0c0ff
 1ec:	c0c0c0c0 	.word	0xc0c0c0c0
 1f0:	00000004 	.word	0x00000004

Disassembly of section .text._ZN5pico88rectfillEN3fpm5fixedIlxLj8EEES2_S2_S2_NS_5ColorE:

00000000 <pico8::rectfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>:
   0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   4:	e59fc0fc 	ldr	r12, [pc, #252]	; 108 <pico8::rectfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x108>
   8:	e5dd6020 	ldrb	r6, [sp, #32]
   c:	e5dcc000 	ldrb	r12, [r12]
  10:	e35c0000 	cmp	r12, #0
  14:	0a000034 	beq	ec <pico8::rectfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xec>
  18:	e59fc0ec 	ldr	r12, [pc, #236]	; 10c <pico8::rectfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x10c>
  1c:	e1500002 	cmp	r0, r2
  20:	e59ce000 	ldr	lr, [r12]
  24:	e59f90e4 	ldr	r9, [pc, #228]	; 110 <pico8::rectfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x110>
  28:	e042200e 	sub	r2, r2, lr
  2c:	c040700e 	subgt	r7, r0, lr
  30:	d1a07002 	movle	r7, r2
  34:	e59cc004 	ldr	r12, [r12, #4]
  38:	d040500e 	suble	r5, r0, lr
  3c:	c1a05002 	movgt	r5, r2
  40:	e5992000 	ldr	r2, [r9]
  44:	e1530001 	cmp	r3, r1
  48:	e043300c 	sub	r3, r3, r12
  4c:	a041800c 	subge	r8, r1, r12
  50:	b1a08003 	movlt	r8, r3
  54:	b041400c 	sublt	r4, r1, r12
  58:	a1a04003 	movge	r4, r3
  5c:	e1570002 	cmp	r7, r2
  60:	ba000020 	blt	e8 <pico8::rectfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xe8>
  64:	e5993008 	ldr	r3, [r9, #8]
  68:	e0822003 	add	r2, r2, r3
  6c:	e1550002 	cmp	r5, r2
  70:	ca00001c 	bgt	e8 <pico8::rectfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xe8>
  74:	e5993004 	ldr	r3, [r9, #4]
  78:	e1540003 	cmp	r4, r3
  7c:	ba000019 	blt	e8 <pico8::rectfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xe8>
  80:	e599200c 	ldr	r2, [r9, #12]
  84:	e0833002 	add	r3, r3, r2
  88:	e1580003 	cmp	r8, r3
  8c:	ca000015 	bgt	e8 <pico8::rectfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xe8>
  90:	e59f307c 	ldr	r3, [pc, #124]	; 114 <pico8::rectfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x114>
  94:	e59f007c 	ldr	r0, [pc, #124]	; 118 <pico8::rectfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x118>
  98:	e1d310f0 	ldrsh	r1, [r3]
  9c:	ebfffffe 	bl	0 <b8PpuRectAllocZPB>
  a0:	e3560010 	cmp	r6, #16
  a4:	059f3070 	ldreq	r3, [pc, #112]	; 11c <pico8::rectfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x11c>
  a8:	e0477005 	sub	r7, r7, r5
  ac:	05d36000 	ldrbeq	r6, [r3]
  b0:	e0443008 	sub	r3, r4, r8
  b4:	e1a03443 	asr	r3, r3, #8
  b8:	e1c030b8 	strh	r3, [r0, #8]
  bc:	e5d03000 	ldrb	r3, [r0]
  c0:	e206600f 	and	r6, r6, #15
  c4:	e3c3300f 	bic	r3, r3, #15
  c8:	e1a02445 	asr	r2, r5, #8
  cc:	e1a08448 	asr	r8, r8, #8
  d0:	e1a07447 	asr	r7, r7, #8
  d4:	e1866003 	orr	r6, r6, r3
  d8:	e1c020b6 	strh	r2, [r0, #6]
  dc:	e1c080b4 	strh	r8, [r0, #4]
  e0:	e1c070ba 	strh	r7, [r0, #10]
  e4:	e5c06000 	strb	r6, [r0]
  e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  ec:	e59f302c 	ldr	r3, [pc, #44]	; 120 <pico8::rectfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x120>
  f0:	e5d32000 	ldrb	r2, [r3]
  f4:	e3520000 	cmp	r2, #0
  f8:	1afffffa 	bne	e8 <pico8::rectfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xe8>
  fc:	e3a02001 	mov	r2, #1
 100:	e5c32000 	strb	r2, [r3]
 104:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
	...

Disassembly of section .text._ZN5pico8L8_circ_r1EN3fpm5fixedIlxLj8EEES2_NS_5ColorE:

00000000 <pico8::_circ_r1(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e1a05000 	mov	r5, r0
   8:	e1a04001 	mov	r4, r1
   c:	e1a06002 	mov	r6, r2
  10:	e24dd008 	sub	sp, sp, #8
  14:	e2407c01 	sub	r7, r0, #256	; 0x100
  18:	e2418c01 	sub	r8, r1, #256	; 0x100
  1c:	e1a03001 	mov	r3, r1
  20:	e58d2000 	str	r2, [sp]
  24:	e1a01008 	mov	r1, r8
  28:	e1a02007 	mov	r2, r7
  2c:	e2400c02 	sub	r0, r0, #512	; 0x200
  30:	ebfffffe 	bl	0 <pico8::_circ_r1(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
  34:	e1a03004 	mov	r3, r4
  38:	e1a01008 	mov	r1, r8
  3c:	e1a00005 	mov	r0, r5
  40:	e2852c01 	add	r2, r5, #256	; 0x100
  44:	e58d6000 	str	r6, [sp]
  48:	ebfffffe 	bl	0 <pico8::_circ_r1(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
  4c:	e1a03008 	mov	r3, r8
  50:	e1a02005 	mov	r2, r5
  54:	e1a00007 	mov	r0, r7
  58:	e2441c02 	sub	r1, r4, #512	; 0x200
  5c:	e58d6000 	str	r6, [sp]
  60:	ebfffffe 	bl	0 <pico8::_circ_r1(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
  64:	e1a02005 	mov	r2, r5
  68:	e1a01004 	mov	r1, r4
  6c:	e1a00007 	mov	r0, r7
  70:	e58d6000 	str	r6, [sp]
  74:	e2843c01 	add	r3, r4, #256	; 0x100
  78:	ebfffffe 	bl	0 <pico8::_circ_r1(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
  7c:	e28dd008 	add	sp, sp, #8
  80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

Disassembly of section .text._ZN5pico84psetEN3fpm5fixedIlxLj8EEES2_NS_5ColorE:

00000000 <pico8::pset(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>:
   0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4:	e24dd00c 	sub	sp, sp, #12
   8:	e58d2000 	str	r2, [sp]
   c:	e2813c01 	add	r3, r1, #256	; 0x100
  10:	e2802c01 	add	r2, r0, #256	; 0x100
  14:	ebfffffe 	bl	0 <pico8::pset(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
  18:	e28dd00c 	add	sp, sp, #12
  1c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .text._ZN5pico84rectEN3fpm5fixedIlxLj8EEES2_S2_S2_NS_5ColorE:

00000000 <pico8::rect(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>:
   0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   4:	e1a08002 	mov	r8, r2
   8:	e1a04003 	mov	r4, r3
   c:	e1a06000 	mov	r6, r0
  10:	e1a05001 	mov	r5, r1
  14:	e24dd00c 	sub	sp, sp, #12
  18:	e5dd7028 	ldrb	r7, [sp, #40]	; 0x28
  1c:	e2813c01 	add	r3, r1, #256	; 0x100
  20:	e2889c01 	add	r9, r8, #256	; 0x100
  24:	e58d7000 	str	r7, [sp]
  28:	ebfffffe 	bl	0 <pico8::rect(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
  2c:	e1a02009 	mov	r2, r9
  30:	e1a01004 	mov	r1, r4
  34:	e1a00006 	mov	r0, r6
  38:	e2843c01 	add	r3, r4, #256	; 0x100
  3c:	e58d7000 	str	r7, [sp]
  40:	ebfffffe 	bl	0 <pico8::rect(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
  44:	e1a03004 	mov	r3, r4
  48:	e1a01005 	mov	r1, r5
  4c:	e1a00006 	mov	r0, r6
  50:	e2862c01 	add	r2, r6, #256	; 0x100
  54:	e58d7000 	str	r7, [sp]
  58:	ebfffffe 	bl	0 <pico8::rect(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
  5c:	e1a03004 	mov	r3, r4
  60:	e1a02009 	mov	r2, r9
  64:	e1a01005 	mov	r1, r5
  68:	e1a00008 	mov	r0, r8
  6c:	e58d7028 	str	r7, [sp, #40]	; 0x28
  70:	e28dd00c 	add	sp, sp, #12
  74:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
  78:	eafffffe 	b	0 <pico8::rect(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>

Disassembly of section .text._ZN5pico84lineERK4LineNS_5ColorE:

00000000 <pico8::line(Line const&, pico8::Color)>:
   0:	e59f30d4 	ldr	r3, [pc, #212]	; dc <pico8::line(Line const&, pico8::Color)+0xdc>
   4:	e5d33000 	ldrb	r3, [r3]
   8:	e3530000 	cmp	r3, #0
   c:	0a00002c 	beq	c4 <pico8::line(Line const&, pico8::Color)+0xc4>
  10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  14:	e24dd010 	sub	sp, sp, #16
  18:	e1a0c00d 	mov	r12, sp
  1c:	e1a04001 	mov	r4, r1
  20:	e890000f 	ldm	r0, {r0, r1, r2, r3}
  24:	e88c000f 	stm	r12, {r0, r1, r2, r3}
  28:	e59f30b0 	ldr	r3, [pc, #176]	; e0 <pico8::line(Line const&, pico8::Color)+0xe0>
  2c:	e59d8000 	ldr	r8, [sp]
  30:	e59d6008 	ldr	r6, [sp, #8]
  34:	e59d500c 	ldr	r5, [sp, #12]
  38:	e893000c 	ldm	r3, {r2, r3}
  3c:	e1a0000c 	mov	r0, r12
  40:	e0488002 	sub	r8, r8, r2
  44:	e0417003 	sub	r7, r1, r3
  48:	e0466002 	sub	r6, r6, r2
  4c:	e0455003 	sub	r5, r5, r3
  50:	e58d8000 	str	r8, [sp]
  54:	e58d7004 	str	r7, [sp, #4]
  58:	e58d6008 	str	r6, [sp, #8]
  5c:	e58d500c 	str	r5, [sp, #12]
  60:	ebfffffe 	bl	0 <pico8::line(Line const&, pico8::Color)>
  64:	e3500000 	cmp	r0, #0
  68:	1a000001 	bne	74 <pico8::line(Line const&, pico8::Color)+0x74>
  6c:	e28dd010 	add	sp, sp, #16
  70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  74:	e59f3068 	ldr	r3, [pc, #104]	; e4 <pico8::line(Line const&, pico8::Color)+0xe4>
  78:	e59f0068 	ldr	r0, [pc, #104]	; e8 <pico8::line(Line const&, pico8::Color)+0xe8>
  7c:	e1d310f0 	ldrsh	r1, [r3]
  80:	ebfffffe 	bl	0 <b8PpuLineAllocZPB>
  84:	e3540010 	cmp	r4, #16
  88:	059f305c 	ldreq	r3, [pc, #92]	; ec <pico8::line(Line const&, pico8::Color)+0xec>
  8c:	e1a08448 	asr	r8, r8, #8
  90:	05d34000 	ldrbeq	r4, [r3]
  94:	e1a07447 	asr	r7, r7, #8
  98:	e204400f 	and	r4, r4, #15
  9c:	e3844020 	orr	r4, r4, #32
  a0:	e1a06446 	asr	r6, r6, #8
  a4:	e1a05445 	asr	r5, r5, #8
  a8:	e5c04000 	strb	r4, [r0]
  ac:	e1c080b6 	strh	r8, [r0, #6]
  b0:	e1c070b4 	strh	r7, [r0, #4]
  b4:	e1c060ba 	strh	r6, [r0, #10]
  b8:	e1c050b8 	strh	r5, [r0, #8]
  bc:	e28dd010 	add	sp, sp, #16
  c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  c4:	e59f3024 	ldr	r3, [pc, #36]	; f0 <pico8::line(Line const&, pico8::Color)+0xf0>
  c8:	e5d32000 	ldrb	r2, [r3]
  cc:	e3520000 	cmp	r2, #0
  d0:	03a02001 	moveq	r2, #1
  d4:	05c32000 	strbeq	r2, [r3]
  d8:	e1a0f00e 	mov	pc, lr
	...

Disassembly of section .text._ZN5pico84lineEN3fpm5fixedIlxLj8EEES2_S2_S2_NS_5ColorE:

00000000 <pico8::line(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>:
   0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4:	e1a0c001 	mov	r12, r1
   8:	e1a0e000 	mov	lr, r0
   c:	e24dd014 	sub	sp, sp, #20
  10:	e1a0000d 	mov	r0, sp
  14:	e5dd1018 	ldrb	r1, [sp, #24]
  18:	e58de000 	str	lr, [sp]
  1c:	e58dc004 	str	r12, [sp, #4]
  20:	e58d2008 	str	r2, [sp, #8]
  24:	e58d300c 	str	r3, [sp, #12]
  28:	ebfffffe 	bl	0 <pico8::line(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
  2c:	e28dd014 	add	sp, sp, #20
  30:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .text._ZN5pico84polyERK4PolyNS_5ColorE:

00000000 <pico8::poly(Poly const&, pico8::Color)>:
   0:	e59f3104 	ldr	r3, [pc, #260]	; 10c <pico8::poly(Poly const&, pico8::Color)+0x10c>
   4:	e5d33000 	ldrb	r3, [r3]
   8:	e3530000 	cmp	r3, #0
   c:	0a000038 	beq	f4 <pico8::poly(Poly const&, pico8::Color)+0xf4>
  10:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
  14:	e24dd01c 	sub	sp, sp, #28
  18:	e1a0c000 	mov	r12, r0
  1c:	e1a0e00d 	mov	lr, sp
  20:	e59f30e8 	ldr	r3, [pc, #232]	; 110 <pico8::poly(Poly const&, pico8::Color)+0x110>
  24:	e1a04001 	mov	r4, r1
  28:	e8930820 	ldm	r3, {r5, r11}
  2c:	e8bc000f 	ldm	r12!, {r0, r1, r2, r3}
  30:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
  34:	e89c0003 	ldm	r12, {r0, r1}
  38:	e59da000 	ldr	r10, [sp]
  3c:	e59d9004 	ldr	r9, [sp, #4]
  40:	e88e0003 	stm	lr, {r0, r1}
  44:	e0428005 	sub	r8, r2, r5
  48:	e0406005 	sub	r6, r0, r5
  4c:	e04aa005 	sub	r10, r10, r5
  50:	e043700b 	sub	r7, r3, r11
  54:	e041500b 	sub	r5, r1, r11
  58:	e1a0000d 	mov	r0, sp
  5c:	e049900b 	sub	r9, r9, r11
  60:	e58da000 	str	r10, [sp]
  64:	e58d9004 	str	r9, [sp, #4]
  68:	e58d8008 	str	r8, [sp, #8]
  6c:	e58d700c 	str	r7, [sp, #12]
  70:	e58d6010 	str	r6, [sp, #16]
  74:	e58d5014 	str	r5, [sp, #20]
  78:	ebfffffe 	bl	0 <pico8::poly(Poly const&, pico8::Color)>
  7c:	e3500000 	cmp	r0, #0
  80:	1a000001 	bne	8c <pico8::poly(Poly const&, pico8::Color)+0x8c>
  84:	e28dd01c 	add	sp, sp, #28
  88:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  8c:	e59f3080 	ldr	r3, [pc, #128]	; 114 <pico8::poly(Poly const&, pico8::Color)+0x114>
  90:	e59f0080 	ldr	r0, [pc, #128]	; 118 <pico8::poly(Poly const&, pico8::Color)+0x118>
  94:	e1d310f0 	ldrsh	r1, [r3]
  98:	ebfffffe 	bl	0 <b8PpuPolyAllocZPB>
  9c:	e3540010 	cmp	r4, #16
  a0:	059f3074 	ldreq	r3, [pc, #116]	; 11c <pico8::poly(Poly const&, pico8::Color)+0x11c>
  a4:	e1a0a44a 	asr	r10, r10, #8
  a8:	05d34000 	ldrbeq	r4, [r3]
  ac:	e5d03000 	ldrb	r3, [r0]
  b0:	e204400f 	and	r4, r4, #15
  b4:	e3c3300f 	bic	r3, r3, #15
  b8:	e1a09449 	asr	r9, r9, #8
  bc:	e1a08448 	asr	r8, r8, #8
  c0:	e1a07447 	asr	r7, r7, #8
  c4:	e1a06446 	asr	r6, r6, #8
  c8:	e1a05445 	asr	r5, r5, #8
  cc:	e1844003 	orr	r4, r4, r3
  d0:	e1c0a0b6 	strh	r10, [r0, #6]
  d4:	e1c090b4 	strh	r9, [r0, #4]
  d8:	e1c080ba 	strh	r8, [r0, #10]
  dc:	e1c070b8 	strh	r7, [r0, #8]
  e0:	e1c060be 	strh	r6, [r0, #14]
  e4:	e1c050bc 	strh	r5, [r0, #12]
  e8:	e5c04000 	strb	r4, [r0]
  ec:	e28dd01c 	add	sp, sp, #28
  f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  f4:	e59f3024 	ldr	r3, [pc, #36]	; 120 <pico8::poly(Poly const&, pico8::Color)+0x120>
  f8:	e5d32000 	ldrb	r2, [r3]
  fc:	e3520000 	cmp	r2, #0
 100:	03a02001 	moveq	r2, #1
 104:	05c32000 	strbeq	r2, [r3]
 108:	e1a0f00e 	mov	pc, lr
	...

Disassembly of section .text._ZN5pico84polyEN3fpm5fixedIlxLj8EEES2_S2_S2_S2_S2_NS_5ColorE:

00000000 <pico8::poly(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>:
   0:	e1a0c001 	mov	r12, r1
   4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   8:	e24dd01c 	sub	sp, sp, #28
   c:	e59d1020 	ldr	r1, [sp, #32]
  10:	e58d300c 	str	r3, [sp, #12]
  14:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  18:	e88d1001 	stm	sp, {r0, r12}
  1c:	e58d1010 	str	r1, [sp, #16]
  20:	e1a0000d 	mov	r0, sp
  24:	e5dd1028 	ldrb	r1, [sp, #40]	; 0x28
  28:	e58d2008 	str	r2, [sp, #8]
  2c:	e58d3014 	str	r3, [sp, #20]
  30:	ebfffffe 	bl	0 <pico8::poly(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
  34:	e28dd01c 	add	sp, sp, #28
  38:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .text._ZN5pico83sprEiN3fpm5fixedIlxLj8EEES2_hhbbh:

00000000 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)>:
   0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e59fc148 	ldr	r12, [pc, #328]	; 154 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x154>
   8:	e5dd8028 	ldrb	r8, [sp, #40]	; 0x28
   c:	e5dcc000 	ldrb	r12, [r12]
  10:	e5dda02c 	ldrb	r10, [sp, #44]	; 0x2c
  14:	e35c0000 	cmp	r12, #0
  18:	e5ddb030 	ldrb	r11, [sp, #48]	; 0x30
  1c:	e5dd9034 	ldrb	r9, [sp, #52]	; 0x34
  20:	0a000044 	beq	138 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x138>
  24:	e359000f 	cmp	r9, #15
  28:	8a00003b 	bhi	11c <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x11c>
  2c:	e35000ff 	cmp	r0, #255	; 0xff
  30:	e1a07000 	mov	r7, r0
  34:	ca000038 	bgt	11c <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x11c>
  38:	e3580000 	cmp	r8, #0
  3c:	13530000 	cmpne	r3, #0
  40:	e1a04003 	mov	r4, r3
  44:	0a000033 	beq	118 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x118>
  48:	e59f3108 	ldr	r3, [pc, #264]	; 158 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x158>
  4c:	e59f0108 	ldr	r0, [pc, #264]	; 15c <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x15c>
  50:	e593c000 	ldr	r12, [r3]
  54:	e041600c 	sub	r6, r1, r12
  58:	e593c004 	ldr	r12, [r3, #4]
  5c:	e5903000 	ldr	r3, [r0]
  60:	e0861584 	add	r1, r6, r4, lsl #11
  64:	e1510003 	cmp	r1, r3
  68:	ba00002a 	blt	118 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x118>
  6c:	e5901008 	ldr	r1, [r0, #8]
  70:	e0833001 	add	r3, r3, r1
  74:	e1560003 	cmp	r6, r3
  78:	ca000026 	bgt	118 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x118>
  7c:	e5903004 	ldr	r3, [r0, #4]
  80:	e042500c 	sub	r5, r2, r12
  84:	e0852588 	add	r2, r5, r8, lsl #11
  88:	e1520003 	cmp	r2, r3
  8c:	ba000021 	blt	118 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x118>
  90:	e590200c 	ldr	r2, [r0, #12]
  94:	e0833002 	add	r3, r3, r2
  98:	e1550003 	cmp	r5, r3
  9c:	ca00001d 	bgt	118 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x118>
  a0:	e59f30b8 	ldr	r3, [pc, #184]	; 160 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x160>
  a4:	e59f00b8 	ldr	r0, [pc, #184]	; 164 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x164>
  a8:	e1d310f0 	ldrsh	r1, [r3]
  ac:	ebfffffe 	bl	0 <b8PpuSpriteAllocZPB>
  b0:	e208301f 	and	r3, r8, #31
  b4:	e183328b 	orr	r3, r3, r11, lsl #5
  b8:	e204401f 	and	r4, r4, #31
  bc:	e1a02607 	lsl	r2, r7, #12
  c0:	e1833404 	orr	r3, r3, r4, lsl #8
  c4:	e202283f 	and	r2, r2, #4128768	; 0x3f0000
  c8:	e183368a 	orr	r3, r3, r10, lsl #13
  cc:	e1833002 	orr	r3, r3, r2
  d0:	e5d02000 	ldrb	r2, [r0]
  d4:	e209900f 	and	r9, r9, #15
  d8:	e3c2200f 	bic	r2, r2, #15
  dc:	e1899002 	orr	r9, r9, r2
  e0:	e207700f 	and	r7, r7, #15
  e4:	e59f207c 	ldr	r2, [pc, #124]	; 168 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x168>
  e8:	e1a01446 	asr	r1, r6, #8
  ec:	e1833c07 	orr	r3, r3, r7, lsl #24
  f0:	e0022003 	and	r2, r2, r3
  f4:	e1c010ba 	strh	r1, [r0, #10]
  f8:	e59f306c 	ldr	r3, [pc, #108]	; 16c <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x16c>
  fc:	e5901004 	ldr	r1, [r0, #4]
 100:	e1a05445 	asr	r5, r5, #8
 104:	e0033001 	and	r3, r3, r1
 108:	e1822003 	orr	r2, r2, r3
 10c:	e1c050b8 	strh	r5, [r0, #8]
 110:	e5c09000 	strb	r9, [r0]
 114:	e5802004 	str	r2, [r0, #4]
 118:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 11c:	e59f304c 	ldr	r3, [pc, #76]	; 170 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x170>
 120:	e5d32000 	ldrb	r2, [r3]
 124:	e3520000 	cmp	r2, #0
 128:	1afffffa 	bne	118 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x118>
 12c:	e3a02002 	mov	r2, #2
 130:	e5c32000 	strb	r2, [r3]
 134:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 138:	e59f3030 	ldr	r3, [pc, #48]	; 170 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x170>
 13c:	e5d32000 	ldrb	r2, [r3]
 140:	e3520000 	cmp	r2, #0
 144:	1afffff3 	bne	118 <pico8::spr(int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x118>
 148:	e3a02001 	mov	r2, #1
 14c:	e5c32000 	strb	r2, [r3]
 150:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
	...
 168:	0f3f3f3f 	.word	0x0f3f3f3f
 16c:	c0c0c0c0 	.word	0xc0c0c0c0
 170:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico84sprbEhiN3fpm5fixedIlxLj8EEES2_hhbbh:

00000000 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e59fc174 	ldr	r12, [pc, #372]	; 180 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x180>
   8:	e24dd00c 	sub	sp, sp, #12
   c:	e5dcc000 	ldrb	r12, [r12]
  10:	e5dd8030 	ldrb	r8, [sp, #48]	; 0x30
  14:	e35c0000 	cmp	r12, #0
  18:	e5dd7034 	ldrb	r7, [sp, #52]	; 0x34
  1c:	e5dd9038 	ldrb	r9, [sp, #56]	; 0x38
  20:	e5dda03c 	ldrb	r10, [sp, #60]	; 0x3c
  24:	e5ddb040 	ldrb	r11, [sp, #64]	; 0x40
  28:	0a00004c 	beq	160 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x160>
  2c:	e1a06001 	mov	r6, r1
  30:	e18b1000 	orr	r1, r11, r0
  34:	e351000f 	cmp	r1, #15
  38:	e1a04000 	mov	r4, r0
  3c:	8a000040 	bhi	144 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x144>
  40:	e35600ff 	cmp	r6, #255	; 0xff
  44:	ca00003e 	bgt	144 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x144>
  48:	e3570000 	cmp	r7, #0
  4c:	13580000 	cmpne	r8, #0
  50:	0a000040 	beq	158 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x158>
  54:	e59f0128 	ldr	r0, [pc, #296]	; 184 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x184>
  58:	e59f1128 	ldr	r1, [pc, #296]	; 188 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x188>
  5c:	e590c000 	ldr	r12, [r0]
  60:	e042500c 	sub	r5, r2, r12
  64:	e5912000 	ldr	r2, [r1]
  68:	e590c004 	ldr	r12, [r0, #4]
  6c:	e0850588 	add	r0, r5, r8, lsl #11
  70:	e1500002 	cmp	r0, r2
  74:	ba000037 	blt	158 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x158>
  78:	e5910008 	ldr	r0, [r1, #8]
  7c:	e0822000 	add	r2, r2, r0
  80:	e1550002 	cmp	r5, r2
  84:	ca000033 	bgt	158 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x158>
  88:	e5912004 	ldr	r2, [r1, #4]
  8c:	e043300c 	sub	r3, r3, r12
  90:	e0830587 	add	r0, r3, r7, lsl #11
  94:	e1500002 	cmp	r0, r2
  98:	ba00002e 	blt	158 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x158>
  9c:	e591100c 	ldr	r1, [r1, #12]
  a0:	e58d3004 	str	r3, [sp, #4]
  a4:	e0822001 	add	r2, r2, r1
  a8:	e1530002 	cmp	r3, r2
  ac:	ca000029 	bgt	158 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x158>
  b0:	e59f20d4 	ldr	r2, [pc, #212]	; 18c <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x18c>
  b4:	e59f00d4 	ldr	r0, [pc, #212]	; 190 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x190>
  b8:	e1d210f0 	ldrsh	r1, [r2]
  bc:	ebfffffe 	bl	0 <b8PpuSpriteAllocZPB>
  c0:	e207201f 	and	r2, r7, #31
  c4:	e182228a 	orr	r2, r2, r10, lsl #5
  c8:	e208801f 	and	r8, r8, #31
  cc:	e1822408 	orr	r2, r2, r8, lsl #8
  d0:	e1821689 	orr	r1, r2, r9, lsl #13
  d4:	e59d3004 	ldr	r3, [sp, #4]
  d8:	e1a02445 	asr	r2, r5, #8
  dc:	e1c020ba 	strh	r2, [r0, #10]
  e0:	e5d02000 	ldrb	r2, [r0]
  e4:	e1a03443 	asr	r3, r3, #8
  e8:	e1a0e124 	lsr	lr, r4, #2
  ec:	e1a0c246 	asr	r12, r6, #4
  f0:	e20bb00f 	and	r11, r11, #15
  f4:	e1c030b8 	strh	r3, [r0, #8]
  f8:	e3c2300f 	bic	r3, r2, #15
  fc:	e18bb003 	orr	r11, r11, r3
 100:	e59f208c 	ldr	r2, [pc, #140]	; 194 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x194>
 104:	e5903004 	ldr	r3, [r0, #4]
 108:	e1a04204 	lsl	r4, r4, #4
 10c:	e08cc20e 	add	r12, r12, lr, lsl #4
 110:	e2044030 	and	r4, r4, #48	; 0x30
 114:	e20cc03f 	and	r12, r12, #63	; 0x3f
 118:	e206600f 	and	r6, r6, #15
 11c:	e181c80c 	orr	r12, r1, r12, lsl #16
 120:	e0022003 	and	r2, r2, r3
 124:	e1841006 	orr	r1, r4, r6
 128:	e59f3068 	ldr	r3, [pc, #104]	; 198 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x198>
 12c:	e18c1c01 	orr	r1, r12, r1, lsl #24
 130:	e0033001 	and	r3, r3, r1
 134:	e1833002 	orr	r3, r3, r2
 138:	e5c0b000 	strb	r11, [r0]
 13c:	e5803004 	str	r3, [r0, #4]
 140:	ea000004 	b	158 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x158>
 144:	e59f3050 	ldr	r3, [pc, #80]	; 19c <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x19c>
 148:	e5d32000 	ldrb	r2, [r3]
 14c:	e3520000 	cmp	r2, #0
 150:	03a02002 	moveq	r2, #2
 154:	05c32000 	strbeq	r2, [r3]
 158:	e28dd00c 	add	sp, sp, #12
 15c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 160:	e59f3034 	ldr	r3, [pc, #52]	; 19c <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x19c>
 164:	e5d32000 	ldrb	r2, [r3]
 168:	e3520000 	cmp	r2, #0
 16c:	1afffff9 	bne	158 <pico8::sprb(unsigned char, int, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, unsigned char, unsigned char, bool, bool, unsigned char)+0x158>
 170:	e3a02001 	mov	r2, #1
 174:	e5c32000 	strb	r2, [r3]
 178:	e28dd00c 	add	sp, sp, #12
 17c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
	...
 194:	c0c0c0c0 	.word	0xc0c0c0c0
 198:	3f3f3f3f 	.word	0x3f3f3f3f
 19c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico86setpalEiRKSt5arrayIhLj16EE:

00000000 <pico8::setpal(int, std::array<unsigned char, 16u> const&)>:
   0:	e59f31b8 	ldr	r3, [pc, #440]	; 1c0 <pico8::setpal(int, std::array<unsigned char, 16u> const&)+0x1c0>
   4:	e5d33000 	ldrb	r3, [r3]
   8:	e3530000 	cmp	r3, #0
   c:	1a000005 	bne	28 <pico8::setpal(int, std::array<unsigned char, 16u> const&)+0x28>
  10:	e59f31ac 	ldr	r3, [pc, #428]	; 1c4 <pico8::setpal(int, std::array<unsigned char, 16u> const&)+0x1c4>
  14:	e5d32000 	ldrb	r2, [r3]
  18:	e3520000 	cmp	r2, #0
  1c:	03a02001 	moveq	r2, #1
  20:	05c32000 	strbeq	r2, [r3]
  24:	e1a0f00e 	mov	pc, lr
  28:	e59f3198 	ldr	r3, [pc, #408]	; 1c8 <pico8::setpal(int, std::array<unsigned char, 16u> const&)+0x1c8>
  2c:	e92d4070 	push	{r4, r5, r6, lr}
  30:	e3a02001 	mov	r2, #1
  34:	e1a04001 	mov	r4, r1
  38:	e1a05000 	mov	r5, r0
  3c:	e1d310f0 	ldrsh	r1, [r3]
  40:	e59f0184 	ldr	r0, [pc, #388]	; 1cc <pico8::setpal(int, std::array<unsigned char, 16u> const&)+0x1cc>
  44:	ebfffffe 	bl	0 <b8PpuSetpalAllocZPB>
  48:	e5d03000 	ldrb	r3, [r0]
  4c:	e205500f 	and	r5, r5, #15
  50:	e3c3300f 	bic	r3, r3, #15
  54:	e1855003 	orr	r5, r5, r3
  58:	e5c05000 	strb	r5, [r0]
  5c:	e5d43000 	ldrb	r3, [r4]
  60:	e5d02004 	ldrb	r2, [r0, #4]
  64:	e203300f 	and	r3, r3, #15
  68:	e3c2200f 	bic	r2, r2, #15
  6c:	e1833002 	orr	r3, r3, r2
  70:	e5c03004 	strb	r3, [r0, #4]
  74:	e5d42001 	ldrb	r2, [r4, #1]
  78:	e203300f 	and	r3, r3, #15
  7c:	e202200f 	and	r2, r2, #15
  80:	e1833202 	orr	r3, r3, r2, lsl #4
  84:	e5c03004 	strb	r3, [r0, #4]
  88:	e5d43002 	ldrb	r3, [r4, #2]
  8c:	e5d02005 	ldrb	r2, [r0, #5]
  90:	e203300f 	and	r3, r3, #15
  94:	e3c2200f 	bic	r2, r2, #15
  98:	e1833002 	orr	r3, r3, r2
  9c:	e5c03005 	strb	r3, [r0, #5]
  a0:	e5d42003 	ldrb	r2, [r4, #3]
  a4:	e203300f 	and	r3, r3, #15
  a8:	e202200f 	and	r2, r2, #15
  ac:	e1833202 	orr	r3, r3, r2, lsl #4
  b0:	e5c03005 	strb	r3, [r0, #5]
  b4:	e5d43004 	ldrb	r3, [r4, #4]
  b8:	e5d02006 	ldrb	r2, [r0, #6]
  bc:	e203300f 	and	r3, r3, #15
  c0:	e3c2200f 	bic	r2, r2, #15
  c4:	e1833002 	orr	r3, r3, r2
  c8:	e5c03006 	strb	r3, [r0, #6]
  cc:	e5d42005 	ldrb	r2, [r4, #5]
  d0:	e203300f 	and	r3, r3, #15
  d4:	e202200f 	and	r2, r2, #15
  d8:	e1833202 	orr	r3, r3, r2, lsl #4
  dc:	e5c03006 	strb	r3, [r0, #6]
  e0:	e5d43006 	ldrb	r3, [r4, #6]
  e4:	e5d02007 	ldrb	r2, [r0, #7]
  e8:	e203300f 	and	r3, r3, #15
  ec:	e3c2200f 	bic	r2, r2, #15
  f0:	e1833002 	orr	r3, r3, r2
  f4:	e5c03007 	strb	r3, [r0, #7]
  f8:	e5d42007 	ldrb	r2, [r4, #7]
  fc:	e203300f 	and	r3, r3, #15
 100:	e202200f 	and	r2, r2, #15
 104:	e1833202 	orr	r3, r3, r2, lsl #4
 108:	e5c03007 	strb	r3, [r0, #7]
 10c:	e5d43008 	ldrb	r3, [r4, #8]
 110:	e5d02008 	ldrb	r2, [r0, #8]
 114:	e203300f 	and	r3, r3, #15
 118:	e3c2200f 	bic	r2, r2, #15
 11c:	e1833002 	orr	r3, r3, r2
 120:	e5c03008 	strb	r3, [r0, #8]
 124:	e5d42009 	ldrb	r2, [r4, #9]
 128:	e203300f 	and	r3, r3, #15
 12c:	e202200f 	and	r2, r2, #15
 130:	e1833202 	orr	r3, r3, r2, lsl #4
 134:	e5c03008 	strb	r3, [r0, #8]
 138:	e5d02009 	ldrb	r2, [r0, #9]
 13c:	e5d4300a 	ldrb	r3, [r4, #10]
 140:	e3c2200f 	bic	r2, r2, #15
 144:	e203300f 	and	r3, r3, #15
 148:	e1833002 	orr	r3, r3, r2
 14c:	e5c03009 	strb	r3, [r0, #9]
 150:	e5d4200b 	ldrb	r2, [r4, #11]
 154:	e203300f 	and	r3, r3, #15
 158:	e202200f 	and	r2, r2, #15
 15c:	e1833202 	orr	r3, r3, r2, lsl #4
 160:	e5c03009 	strb	r3, [r0, #9]
 164:	e5d0200a 	ldrb	r2, [r0, #10]
 168:	e5d4300c 	ldrb	r3, [r4, #12]
 16c:	e3c2200f 	bic	r2, r2, #15
 170:	e203300f 	and	r3, r3, #15
 174:	e1833002 	orr	r3, r3, r2
 178:	e5c0300a 	strb	r3, [r0, #10]
 17c:	e5d4200d 	ldrb	r2, [r4, #13]
 180:	e203300f 	and	r3, r3, #15
 184:	e202200f 	and	r2, r2, #15
 188:	e1833202 	orr	r3, r3, r2, lsl #4
 18c:	e5c0300a 	strb	r3, [r0, #10]
 190:	e5d0200b 	ldrb	r2, [r0, #11]
 194:	e5d4300e 	ldrb	r3, [r4, #14]
 198:	e3c2200f 	bic	r2, r2, #15
 19c:	e203300f 	and	r3, r3, #15
 1a0:	e1833002 	orr	r3, r3, r2
 1a4:	e5c0300b 	strb	r3, [r0, #11]
 1a8:	e5d4200f 	ldrb	r2, [r4, #15]
 1ac:	e203300f 	and	r3, r3, #15
 1b0:	e202200f 	and	r2, r2, #15
 1b4:	e1833202 	orr	r3, r3, r2, lsl #4
 1b8:	e5c0300b 	strb	r3, [r0, #11]
 1bc:	e8bd8070 	pop	{r4, r5, r6, pc}
	...

Disassembly of section .text._ZN5pico83palENS_5ColorES0_h:

00000000 <pico8::pal(pico8::Color, pico8::Color, unsigned char)>:
   0:	e59f3264 	ldr	r3, [pc, #612]	; 26c <pico8::pal(pico8::Color, pico8::Color, unsigned char)+0x26c>
   4:	e5d33000 	ldrb	r3, [r3]
   8:	e3530000 	cmp	r3, #0
   c:	0a000036 	beq	ec <pico8::pal(pico8::Color, pico8::Color, unsigned char)+0xec>
  10:	e1813002 	orr	r3, r1, r2
  14:	e1803003 	orr	r3, r0, r3
  18:	e353000f 	cmp	r3, #15
  1c:	e92d4070 	push	{r4, r5, r6, lr}
  20:	e1a06000 	mov	r6, r0
  24:	e1a05001 	mov	r5, r1
  28:	e1a04002 	mov	r4, r2
  2c:	9a000006 	bls	4c <pico8::pal(pico8::Color, pico8::Color, unsigned char)+0x4c>
  30:	e59f3238 	ldr	r3, [pc, #568]	; 270 <pico8::pal(pico8::Color, pico8::Color, unsigned char)+0x270>
  34:	e5d32000 	ldrb	r2, [r3]
  38:	e3520000 	cmp	r2, #0
  3c:	1a000029 	bne	e8 <pico8::pal(pico8::Color, pico8::Color, unsigned char)+0xe8>
  40:	e3a02002 	mov	r2, #2
  44:	e5c32000 	strb	r2, [r3]
  48:	e8bd8070 	pop	{r4, r5, r6, pc}
  4c:	e59f3220 	ldr	r3, [pc, #544]	; 274 <pico8::pal(pico8::Color, pico8::Color, unsigned char)+0x274>
  50:	e3a02001 	mov	r2, #1
  54:	e1d310f0 	ldrsh	r1, [r3]
  58:	e59f0218 	ldr	r0, [pc, #536]	; 278 <pico8::pal(pico8::Color, pico8::Color, unsigned char)+0x278>
  5c:	ebfffffe 	bl	0 <b8PpuSetpalAllocZPB>
  60:	e3a03010 	mov	r3, #16
  64:	e204200f 	and	r2, r4, #15
  68:	e1822613 	orr	r2, r2, r3, lsl r6
  6c:	e5903000 	ldr	r3, [r0]
  70:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
  74:	e1a03a23 	lsr	r3, r3, #20
  78:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
  7c:	e1a03a03 	lsl	r3, r3, #20
  80:	e1822003 	orr	r2, r2, r3
  84:	e2461001 	sub	r1, r6, #1
  88:	e5802000 	str	r2, [r0]
  8c:	e351000e 	cmp	r1, #14
  90:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
  94:	ea00006e 	b	254 <pico8::pal(pico8::Color, pico8::Color, unsigned char)+0x254>
  98:	00000104 	.word	0x00000104
  9c:	0000011c 	.word	0x0000011c
  a0:	00000134 	.word	0x00000134
  a4:	0000014c 	.word	0x0000014c
  a8:	00000164 	.word	0x00000164
  ac:	0000017c 	.word	0x0000017c
  b0:	00000194 	.word	0x00000194
  b4:	000001ac 	.word	0x000001ac
  b8:	000001c4 	.word	0x000001c4
  bc:	000001dc 	.word	0x000001dc
  c0:	000001f4 	.word	0x000001f4
  c4:	0000020c 	.word	0x0000020c
  c8:	00000224 	.word	0x00000224
  cc:	0000023c 	.word	0x0000023c
  d0:	000000d4 	.word	0x000000d4
  d4:	e5d0300b 	ldrb	r3, [r0, #11]
  d8:	e205500f 	and	r5, r5, #15
  dc:	e3c330f0 	bic	r3, r3, #240	; 0xf0
  e0:	e1833205 	orr	r3, r3, r5, lsl #4
  e4:	e5c0300b 	strb	r3, [r0, #11]
  e8:	e8bd8070 	pop	{r4, r5, r6, pc}
  ec:	e59f317c 	ldr	r3, [pc, #380]	; 270 <pico8::pal(pico8::Color, pico8::Color, unsigned char)+0x270>
  f0:	e5d32000 	ldrb	r2, [r3]
  f4:	e3520000 	cmp	r2, #0
  f8:	03a02001 	moveq	r2, #1
  fc:	05c32000 	strbeq	r2, [r3]
 100:	e1a0f00e 	mov	pc, lr
 104:	e5d03004 	ldrb	r3, [r0, #4]
 108:	e205500f 	and	r5, r5, #15
 10c:	e3c330f0 	bic	r3, r3, #240	; 0xf0
 110:	e1833205 	orr	r3, r3, r5, lsl #4
 114:	e5c03004 	strb	r3, [r0, #4]
 118:	e8bd8070 	pop	{r4, r5, r6, pc}
 11c:	e5d02005 	ldrb	r2, [r0, #5]
 120:	e205300f 	and	r3, r5, #15
 124:	e3c2200f 	bic	r2, r2, #15
 128:	e1833002 	orr	r3, r3, r2
 12c:	e5c03005 	strb	r3, [r0, #5]
 130:	e8bd8070 	pop	{r4, r5, r6, pc}
 134:	e5d03005 	ldrb	r3, [r0, #5]
 138:	e205500f 	and	r5, r5, #15
 13c:	e3c330f0 	bic	r3, r3, #240	; 0xf0
 140:	e1833205 	orr	r3, r3, r5, lsl #4
 144:	e5c03005 	strb	r3, [r0, #5]
 148:	e8bd8070 	pop	{r4, r5, r6, pc}
 14c:	e5d02006 	ldrb	r2, [r0, #6]
 150:	e205300f 	and	r3, r5, #15
 154:	e3c2200f 	bic	r2, r2, #15
 158:	e1833002 	orr	r3, r3, r2
 15c:	e5c03006 	strb	r3, [r0, #6]
 160:	e8bd8070 	pop	{r4, r5, r6, pc}
 164:	e5d03006 	ldrb	r3, [r0, #6]
 168:	e205500f 	and	r5, r5, #15
 16c:	e3c330f0 	bic	r3, r3, #240	; 0xf0
 170:	e1833205 	orr	r3, r3, r5, lsl #4
 174:	e5c03006 	strb	r3, [r0, #6]
 178:	e8bd8070 	pop	{r4, r5, r6, pc}
 17c:	e5d02007 	ldrb	r2, [r0, #7]
 180:	e205300f 	and	r3, r5, #15
 184:	e3c2200f 	bic	r2, r2, #15
 188:	e1833002 	orr	r3, r3, r2
 18c:	e5c03007 	strb	r3, [r0, #7]
 190:	e8bd8070 	pop	{r4, r5, r6, pc}
 194:	e5d03007 	ldrb	r3, [r0, #7]
 198:	e205500f 	and	r5, r5, #15
 19c:	e3c330f0 	bic	r3, r3, #240	; 0xf0
 1a0:	e1833205 	orr	r3, r3, r5, lsl #4
 1a4:	e5c03007 	strb	r3, [r0, #7]
 1a8:	e8bd8070 	pop	{r4, r5, r6, pc}
 1ac:	e5d02008 	ldrb	r2, [r0, #8]
 1b0:	e205300f 	and	r3, r5, #15
 1b4:	e3c2200f 	bic	r2, r2, #15
 1b8:	e1833002 	orr	r3, r3, r2
 1bc:	e5c03008 	strb	r3, [r0, #8]
 1c0:	e8bd8070 	pop	{r4, r5, r6, pc}
 1c4:	e5d03008 	ldrb	r3, [r0, #8]
 1c8:	e205500f 	and	r5, r5, #15
 1cc:	e3c330f0 	bic	r3, r3, #240	; 0xf0
 1d0:	e1833205 	orr	r3, r3, r5, lsl #4
 1d4:	e5c03008 	strb	r3, [r0, #8]
 1d8:	e8bd8070 	pop	{r4, r5, r6, pc}
 1dc:	e5d02009 	ldrb	r2, [r0, #9]
 1e0:	e205300f 	and	r3, r5, #15
 1e4:	e3c2200f 	bic	r2, r2, #15
 1e8:	e1833002 	orr	r3, r3, r2
 1ec:	e5c03009 	strb	r3, [r0, #9]
 1f0:	e8bd8070 	pop	{r4, r5, r6, pc}
 1f4:	e5d03009 	ldrb	r3, [r0, #9]
 1f8:	e205500f 	and	r5, r5, #15
 1fc:	e3c330f0 	bic	r3, r3, #240	; 0xf0
 200:	e1833205 	orr	r3, r3, r5, lsl #4
 204:	e5c03009 	strb	r3, [r0, #9]
 208:	e8bd8070 	pop	{r4, r5, r6, pc}
 20c:	e5d0200a 	ldrb	r2, [r0, #10]
 210:	e205300f 	and	r3, r5, #15
 214:	e3c2200f 	bic	r2, r2, #15
 218:	e1833002 	orr	r3, r3, r2
 21c:	e5c0300a 	strb	r3, [r0, #10]
 220:	e8bd8070 	pop	{r4, r5, r6, pc}
 224:	e5d0300a 	ldrb	r3, [r0, #10]
 228:	e205500f 	and	r5, r5, #15
 22c:	e3c330f0 	bic	r3, r3, #240	; 0xf0
 230:	e1833205 	orr	r3, r3, r5, lsl #4
 234:	e5c0300a 	strb	r3, [r0, #10]
 238:	e8bd8070 	pop	{r4, r5, r6, pc}
 23c:	e5d0200b 	ldrb	r2, [r0, #11]
 240:	e205300f 	and	r3, r5, #15
 244:	e3c2200f 	bic	r2, r2, #15
 248:	e1833002 	orr	r3, r3, r2
 24c:	e5c0300b 	strb	r3, [r0, #11]
 250:	e8bd8070 	pop	{r4, r5, r6, pc}
 254:	e5d02004 	ldrb	r2, [r0, #4]
 258:	e205300f 	and	r3, r5, #15
 25c:	e3c2200f 	bic	r2, r2, #15
 260:	e1833002 	orr	r3, r3, r2
 264:	e5c03004 	strb	r3, [r0, #4]
 268:	e8bd8070 	pop	{r4, r5, r6, pc}
	...

Disassembly of section .text._ZN5pico85colorENS_5ColorE:

00000000 <pico8::color(pico8::Color)>:
   0:	e1a02000 	mov	r2, r0
   4:	e59f3008 	ldr	r3, [pc, #8]	; 14 <pico8::color(pico8::Color)+0x14>
   8:	e5d30000 	ldrb	r0, [r3]
   c:	e5c32000 	strb	r2, [r3]
  10:	e1a0f00e 	mov	pc, lr
  14:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico86cameraEN3fpm5fixedIlxLj8EEES2_:

00000000 <pico8::camera(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4:	e1a0c001 	mov	r12, r1
   8:	e1a0e000 	mov	lr, r0
   c:	e59f3018 	ldr	r3, [pc, #24]	; 2c <pico8::camera(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x2c>
  10:	e59f2018 	ldr	r2, [pc, #24]	; 30 <pico8::camera(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x30>
  14:	e8930003 	ldm	r3, {r0, r1}
  18:	e583e000 	str	lr, [r3]
  1c:	e8820003 	stm	r2, {r0, r1}
  20:	e583c004 	str	r12, [r3, #4]
  24:	e1a00002 	mov	r0, r2
  28:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	...

Disassembly of section .text._ZN5pico84setzEi:

00000000 <pico8::setz(int)>:
   0:	e3500000 	cmp	r0, #0
   4:	b3a03000 	movlt	r3, #0
   8:	ba000003 	blt	1c <pico8::setz(int)+0x1c>
   c:	e350000f 	cmp	r0, #15
  10:	c3a0300f 	movgt	r3, #15
  14:	d1a03800 	lslle	r3, r0, #16
  18:	d1a03843 	asrle	r3, r3, #16
  1c:	e59f2004 	ldr	r2, [pc, #4]	; 28 <pico8::setz(int)+0x28>
  20:	e1c230b0 	strh	r3, [r2]
  24:	e1a0f00e 	mov	pc, lr
  28:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico84getzEv:

00000000 <pico8::getz()>:
   0:	e59f3004 	ldr	r3, [pc, #4]	; c <pico8::getz()+0xc>
   4:	e1d300f0 	ldrsh	r0, [r3]
   8:	e1a0f00e 	mov	pc, lr
   c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico84clipERK4Rect:

00000000 <pico8::clip(Rect const&)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e59fc05c 	ldr	r12, [pc, #92]	; 68 <pico8::clip(Rect const&)+0x68>
   8:	e1a04000 	mov	r4, r0
   c:	e59f6058 	ldr	r6, [pc, #88]	; 6c <pico8::clip(Rect const&)+0x6c>
  10:	e59f5058 	ldr	r5, [pc, #88]	; 70 <pico8::clip(Rect const&)+0x70>
  14:	e895000f 	ldm	r5, {r0, r1, r2, r3}
  18:	e886000f 	stm	r6, {r0, r1, r2, r3}
  1c:	e1dc10f0 	ldrsh	r1, [r12]
  20:	e59f004c 	ldr	r0, [pc, #76]	; 74 <pico8::clip(Rect const&)+0x74>
  24:	ebfffffe 	bl	0 <b8PpuScissorAllocZPB>
  28:	e5943000 	ldr	r3, [r4]
  2c:	e5942004 	ldr	r2, [r4, #4]
  30:	e1a03443 	asr	r3, r3, #8
  34:	e1c030b6 	strh	r3, [r0, #6]
  38:	e5943008 	ldr	r3, [r4, #8]
  3c:	e1a02442 	asr	r2, r2, #8
  40:	e1a03443 	asr	r3, r3, #8
  44:	e1c030ba 	strh	r3, [r0, #10]
  48:	e594300c 	ldr	r3, [r4, #12]
  4c:	e1c020b4 	strh	r2, [r0, #4]
  50:	e1a03443 	asr	r3, r3, #8
  54:	e1c030b8 	strh	r3, [r0, #8]
  58:	e894000f 	ldm	r4, {r0, r1, r2, r3}
  5c:	e885000f 	stm	r5, {r0, r1, r2, r3}
  60:	e1a00006 	mov	r0, r6
  64:	e8bd8070 	pop	{r4, r5, r6, pc}
	...

Disassembly of section .text._ZN5pico84clipEN3fpm5fixedIlxLj8EEES2_S2_S2_:

00000000 <pico8::clip(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e1a0c000 	mov	r12, r0
   4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   8:	e24dd014 	sub	sp, sp, #20
   c:	e1a0000d 	mov	r0, sp
  10:	e98d000e 	stmib	sp, {r1, r2, r3}
  14:	e58dc000 	str	r12, [sp]
  18:	ebfffffe 	bl	0 <pico8::clip(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  1c:	e28dd014 	add	sp, sp, #20
  20:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .text._ZN5pico84clipEv:

00000000 <pico8::clip()>:
   0:	e3a01000 	mov	r1, #0
   4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   8:	e59f2034 	ldr	r2, [pc, #52]	; 44 <pico8::clip()+0x44>
   c:	e59f3034 	ldr	r3, [pc, #52]	; 48 <pico8::clip()+0x48>
  10:	e5922000 	ldr	r2, [r2]
  14:	e5933000 	ldr	r3, [r3]
  18:	e24dd014 	sub	sp, sp, #20
  1c:	e1a02402 	lsl	r2, r2, #8
  20:	e1a03403 	lsl	r3, r3, #8
  24:	e1a0000d 	mov	r0, sp
  28:	e58d2008 	str	r2, [sp, #8]
  2c:	e58d300c 	str	r3, [sp, #12]
  30:	e58d1000 	str	r1, [sp]
  34:	e58d1004 	str	r1, [sp, #4]
  38:	ebfffffe 	bl	0 <pico8::clip()>
  3c:	e28dd014 	add	sp, sp, #20
  40:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
	...

Disassembly of section .text._ZN5pico84maxzEv:

00000000 <pico8::maxz()>:
   0:	e3a0000f 	mov	r0, #15
   4:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN5pico84circEN3fpm5fixedIlxLj8EEES2_S2_NS_5ColorE:

00000000 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>:
   0:	e59fc258 	ldr	r12, [pc, #600]	; 260 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x260>
   4:	e5dcc000 	ldrb	r12, [r12]
   8:	e35c0000 	cmp	r12, #0
   c:	0a000026 	beq	ac <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xac>
  10:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
  14:	e3520000 	cmp	r2, #0
  18:	e1a04002 	mov	r4, r2
  1c:	e24dd044 	sub	sp, sp, #68	; 0x44
  20:	da00001f 	ble	a4 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
  24:	e3520c01 	cmp	r2, #256	; 0x100
  28:	e1a06003 	mov	r6, r3
  2c:	e1a03001 	mov	r3, r1
  30:	ca000024 	bgt	c8 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xc8>
  34:	e59fc228 	ldr	r12, [pc, #552]	; 264 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x264>
  38:	e59fe228 	ldr	lr, [pc, #552]	; 268 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x268>
  3c:	e59c2000 	ldr	r2, [r12]
  40:	e59c4004 	ldr	r4, [r12, #4]
  44:	e59ec000 	ldr	r12, [lr]
  48:	e0402002 	sub	r2, r0, r2
  4c:	e152000c 	cmp	r2, r12
  50:	ba000013 	blt	a4 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
  54:	e59e5008 	ldr	r5, [lr, #8]
  58:	e08cc005 	add	r12, r12, r5
  5c:	e152000c 	cmp	r2, r12
  60:	ca00000f 	bgt	a4 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
  64:	e59e3004 	ldr	r3, [lr, #4]
  68:	e0414004 	sub	r4, r1, r4
  6c:	e1540003 	cmp	r4, r3
  70:	ba00000b 	blt	a4 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
  74:	e59e200c 	ldr	r2, [lr, #12]
  78:	e0833002 	add	r3, r3, r2
  7c:	e1540003 	cmp	r4, r3
  80:	ca000007 	bgt	a4 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
  84:	e1a02006 	mov	r2, r6
  88:	e28dd044 	add	sp, sp, #68	; 0x44
  8c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
  90:	eafffffe 	b	0 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
  94:	e59d301c 	ldr	r3, [sp, #28]
  98:	e58b3000 	str	r3, [r11]
  9c:	e59d3018 	ldr	r3, [sp, #24]
  a0:	e58b3004 	str	r3, [r11, #4]
  a4:	e28dd044 	add	sp, sp, #68	; 0x44
  a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  ac:	e59f31b8 	ldr	r3, [pc, #440]	; 26c <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x26c>
  b0:	e5d32000 	ldrb	r2, [r3]
  b4:	e3520000 	cmp	r2, #0
  b8:	11a0f00e 	movne	pc, lr
  bc:	e3a02001 	mov	r2, #1
  c0:	e5c32000 	strb	r2, [r3]
  c4:	e1a0f00e 	mov	pc, lr
  c8:	e59fb194 	ldr	r11, [pc, #404]	; 264 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x264>
  cc:	e59f1194 	ldr	r1, [pc, #404]	; 268 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x268>
  d0:	e59b2000 	ldr	r2, [r11]
  d4:	e59b7004 	ldr	r7, [r11, #4]
  d8:	e0405002 	sub	r5, r0, r2
  dc:	e58d201c 	str	r2, [sp, #28]
  e0:	e5912000 	ldr	r2, [r1]
  e4:	e0850004 	add	r0, r5, r4
  e8:	e1500002 	cmp	r0, r2
  ec:	e58d5010 	str	r5, [sp, #16]
  f0:	e58d7018 	str	r7, [sp, #24]
  f4:	e045c004 	sub	r12, r5, r4
  f8:	e1a00084 	lsl	r0, r4, #1
  fc:	baffffe8 	blt	a4 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
 100:	e591e008 	ldr	lr, [r1, #8]
 104:	e082200e 	add	r2, r2, lr
 108:	e15c0002 	cmp	r12, r2
 10c:	caffffe4 	bgt	a4 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
 110:	e0439007 	sub	r9, r3, r7
 114:	e0492004 	sub	r2, r9, r4
 118:	e5913004 	ldr	r3, [r1, #4]
 11c:	e0800002 	add	r0, r0, r2
 120:	e1500003 	cmp	r0, r3
 124:	e58d9014 	str	r9, [sp, #20]
 128:	baffffdd 	blt	a4 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
 12c:	e591100c 	ldr	r1, [r1, #12]
 130:	e0833001 	add	r3, r3, r1
 134:	e1520003 	cmp	r2, r3
 138:	caffffd9 	bgt	a4 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
 13c:	e3a08000 	mov	r8, #0
 140:	e1a00004 	mov	r0, r4
 144:	e28d2024 	add	r2, sp, #36	; 0x24
 148:	e28d1020 	add	r1, sp, #32
 14c:	ebfffffe 	bl	0 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
 150:	e28d7030 	add	r7, sp, #48	; 0x30
 154:	e1a02008 	mov	r2, r8
 158:	e1a01008 	mov	r1, r8
 15c:	e1a0000b 	mov	r0, r11
 160:	ebfffffe 	bl	0 <Vec::set(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
 164:	e1a02009 	mov	r2, r9
 168:	e1a00007 	mov	r0, r7
 16c:	e0841005 	add	r1, r4, r5
 170:	e58d8030 	str	r8, [sp, #48]	; 0x30
 174:	e58d8034 	str	r8, [sp, #52]	; 0x34
 178:	e58d8038 	str	r8, [sp, #56]	; 0x38
 17c:	e58d803c 	str	r8, [sp, #60]	; 0x3c
 180:	ebfffffe 	bl	0 <Vec::set(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
 184:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
 188:	e3560010 	cmp	r6, #16
 18c:	e58d3004 	str	r3, [sp, #4]
 190:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
 194:	e59d9020 	ldr	r9, [sp, #32]
 198:	e58d3008 	str	r3, [sp, #8]
 19c:	059f30cc 	ldreq	r3, [pc, #204]	; 270 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x270>
 1a0:	e59da024 	ldr	r10, [sp, #36]	; 0x24
 1a4:	05d36000 	ldrbeq	r6, [r3]
 1a8:	e3590000 	cmp	r9, #0
 1ac:	daffffb8 	ble	94 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x94>
 1b0:	e2493001 	sub	r3, r9, #1
 1b4:	e3a05000 	mov	r5, #0
 1b8:	e58d3000 	str	r3, [sp]
 1bc:	e1a03004 	mov	r3, r4
 1c0:	e1a0800a 	mov	r8, r10
 1c4:	e1a04005 	mov	r4, r5
 1c8:	e1a05003 	mov	r5, r3
 1cc:	ea000011 	b	218 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x218>
 1d0:	e59d3004 	ldr	r3, [sp, #4]
 1d4:	e58d3038 	str	r3, [sp, #56]	; 0x38
 1d8:	e59d3008 	ldr	r3, [sp, #8]
 1dc:	e58d303c 	str	r3, [sp, #60]	; 0x3c
 1e0:	e1a00007 	mov	r0, r7
 1e4:	ebfffffe 	bl	0 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
 1e8:	e3500000 	cmp	r0, #0
 1ec:	e2844001 	add	r4, r4, #1
 1f0:	e088800a 	add	r8, r8, r10
 1f4:	0a000002 	beq	204 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x204>
 1f8:	e1a01006 	mov	r1, r6
 1fc:	e1a00007 	mov	r0, r7
 200:	ebfffffe 	bl	0 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
 204:	e28d3038 	add	r3, sp, #56	; 0x38
 208:	e1540009 	cmp	r4, r9
 20c:	e8930003 	ldm	r3, {r0, r1}
 210:	e8870003 	stm	r7, {r0, r1}
 214:	0affff9e 	beq	94 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x94>
 218:	e59d3000 	ldr	r3, [sp]
 21c:	e1530004 	cmp	r3, r4
 220:	daffffea 	ble	1d0 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x1d0>
 224:	e1a01928 	lsr	r1, r8, #18
 228:	e1a00005 	mov	r0, r5
 22c:	e58d100c 	str	r1, [sp, #12]
 230:	ebfffffe 	bl	0 <rad_cos_12(fpm::fixed<long, long long, 8u>, unsigned long)>
 234:	e1a02000 	mov	r2, r0
 238:	e59d3010 	ldr	r3, [sp, #16]
 23c:	e1a00005 	mov	r0, r5
 240:	e0822003 	add	r2, r2, r3
 244:	e59d100c 	ldr	r1, [sp, #12]
 248:	e58d2038 	str	r2, [sp, #56]	; 0x38
 24c:	ebfffffe 	bl	0 <rad_sin_12(fpm::fixed<long, long long, 8u>, unsigned long)>
 250:	e59d3014 	ldr	r3, [sp, #20]
 254:	e0800003 	add	r0, r0, r3
 258:	e58d003c 	str	r0, [sp, #60]	; 0x3c
 25c:	eaffffdf 	b	1e0 <pico8::circ(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x1e0>
	...

Disassembly of section .text._ZN5pico88circfillEN3fpm5fixedIlxLj8EEES2_S2_NS_5ColorE:

00000000 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>:
   0:	e59fc2b8 	ldr	r12, [pc, #696]	; 2c0 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x2c0>
   4:	e5dcc000 	ldrb	r12, [r12]
   8:	e35c0000 	cmp	r12, #0
   c:	0a000026 	beq	ac <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xac>
  10:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
  14:	e3520000 	cmp	r2, #0
  18:	e1a04002 	mov	r4, r2
  1c:	e24dd06c 	sub	sp, sp, #108	; 0x6c
  20:	da00001f 	ble	a4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
  24:	e3520c01 	cmp	r2, #256	; 0x100
  28:	e1a05000 	mov	r5, r0
  2c:	e1a09003 	mov	r9, r3
  30:	e1a06001 	mov	r6, r1
  34:	ca000022 	bgt	c4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xc4>
  38:	e59f2284 	ldr	r2, [pc, #644]	; 2c4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x2c4>
  3c:	e59fc284 	ldr	r12, [pc, #644]	; 2c8 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x2c8>
  40:	e8924008 	ldm	r2, {r3, lr}
  44:	e59c2000 	ldr	r2, [r12]
  48:	e0403003 	sub	r3, r0, r3
  4c:	e1530002 	cmp	r3, r2
  50:	ba000013 	blt	a4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
  54:	e59c4008 	ldr	r4, [r12, #8]
  58:	e0822004 	add	r2, r2, r4
  5c:	e1530002 	cmp	r3, r2
  60:	ca00000f 	bgt	a4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
  64:	e59c3004 	ldr	r3, [r12, #4]
  68:	e041e00e 	sub	lr, r1, lr
  6c:	e15e0003 	cmp	lr, r3
  70:	ba00000b 	blt	a4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
  74:	e59c200c 	ldr	r2, [r12, #12]
  78:	e0833002 	add	r3, r3, r2
  7c:	e15e0003 	cmp	lr, r3
  80:	ca000007 	bgt	a4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
  84:	e1a02009 	mov	r2, r9
  88:	ebfffffe 	bl	0 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
  8c:	e1a01006 	mov	r1, r6
  90:	e1a00005 	mov	r0, r5
  94:	e58d9000 	str	r9, [sp]
  98:	e2863c01 	add	r3, r6, #256	; 0x100
  9c:	e2852c01 	add	r2, r5, #256	; 0x100
  a0:	ebfffffe 	bl	0 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
  a4:	e28dd06c 	add	sp, sp, #108	; 0x6c
  a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  ac:	e59f3218 	ldr	r3, [pc, #536]	; 2cc <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x2cc>
  b0:	e5d32000 	ldrb	r2, [r3]
  b4:	e3520000 	cmp	r2, #0
  b8:	03a02001 	moveq	r2, #1
  bc:	05c32000 	strbeq	r2, [r3]
  c0:	e1a0f00e 	mov	pc, lr
  c4:	e59f01f8 	ldr	r0, [pc, #504]	; 2c4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x2c4>
  c8:	e59f21f8 	ldr	r2, [pc, #504]	; 2c8 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x2c8>
  cc:	e5903000 	ldr	r3, [r0]
  d0:	e590e004 	ldr	lr, [r0, #4]
  d4:	e0455003 	sub	r5, r5, r3
  d8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  dc:	e5923000 	ldr	r3, [r2]
  e0:	e0851004 	add	r1, r5, r4
  e4:	e1510003 	cmp	r1, r3
  e8:	e58de028 	str	lr, [sp, #40]	; 0x28
  ec:	e0450004 	sub	r0, r5, r4
  f0:	e1a01084 	lsl	r1, r4, #1
  f4:	baffffea 	blt	a4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
  f8:	e592c008 	ldr	r12, [r2, #8]
  fc:	e083300c 	add	r3, r3, r12
 100:	e1500003 	cmp	r0, r3
 104:	caffffe6 	bgt	a4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
 108:	e046600e 	sub	r6, r6, lr
 10c:	e5923004 	ldr	r3, [r2, #4]
 110:	e0460004 	sub	r0, r6, r4
 114:	e0811000 	add	r1, r1, r0
 118:	e1510003 	cmp	r1, r3
 11c:	e58d6020 	str	r6, [sp, #32]
 120:	baffffdf 	blt	a4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
 124:	e592200c 	ldr	r2, [r2, #12]
 128:	e0833002 	add	r3, r3, r2
 12c:	e1500003 	cmp	r0, r3
 130:	caffffdb 	bgt	a4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0xa4>
 134:	e3a08000 	mov	r8, #0
 138:	e1a00004 	mov	r0, r4
 13c:	e28d2034 	add	r2, sp, #52	; 0x34
 140:	e28d1030 	add	r1, sp, #48	; 0x30
 144:	ebfffffe 	bl	0 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
 148:	e28d7040 	add	r7, sp, #64	; 0x40
 14c:	e1a02008 	mov	r2, r8
 150:	e1a01008 	mov	r1, r8
 154:	e59f0168 	ldr	r0, [pc, #360]	; 2c4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x2c4>
 158:	ebfffffe 	bl	0 <Vec::set(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
 15c:	e1a02006 	mov	r2, r6
 160:	e1a00007 	mov	r0, r7
 164:	e0841005 	add	r1, r4, r5
 168:	e58d8040 	str	r8, [sp, #64]	; 0x40
 16c:	e58d8044 	str	r8, [sp, #68]	; 0x44
 170:	e58d8048 	str	r8, [sp, #72]	; 0x48
 174:	e58d804c 	str	r8, [sp, #76]	; 0x4c
 178:	ebfffffe 	bl	0 <Vec::set(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
 17c:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
 180:	e3590010 	cmp	r9, #16
 184:	e58d3018 	str	r3, [sp, #24]
 188:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
 18c:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
 190:	e58d301c 	str	r3, [sp, #28]
 194:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
 198:	e58d2010 	str	r2, [sp, #16]
 19c:	e58d300c 	str	r3, [sp, #12]
 1a0:	059f3128 	ldreq	r3, [pc, #296]	; 2d0 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x2d0>
 1a4:	05d39000 	ldrbeq	r9, [r3]
 1a8:	e3a03000 	mov	r3, #0
 1ac:	e1520003 	cmp	r2, r3
 1b0:	e58d3050 	str	r3, [sp, #80]	; 0x50
 1b4:	e58d3054 	str	r3, [sp, #84]	; 0x54
 1b8:	e58d3058 	str	r3, [sp, #88]	; 0x58
 1bc:	e58d305c 	str	r3, [sp, #92]	; 0x5c
 1c0:	e58d3060 	str	r3, [sp, #96]	; 0x60
 1c4:	e58d3064 	str	r3, [sp, #100]	; 0x64
 1c8:	da000035 	ble	2a4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x2a4>
 1cc:	e1a06003 	mov	r6, r3
 1d0:	e59d3010 	ldr	r3, [sp, #16]
 1d4:	e58d9024 	str	r9, [sp, #36]	; 0x24
 1d8:	e2433001 	sub	r3, r3, #1
 1dc:	e1a09006 	mov	r9, r6
 1e0:	e59da00c 	ldr	r10, [sp, #12]
 1e4:	e1a06004 	mov	r6, r4
 1e8:	e58d3014 	str	r3, [sp, #20]
 1ec:	e59d4020 	ldr	r4, [sp, #32]
 1f0:	e28db050 	add	r11, sp, #80	; 0x50
 1f4:	e28d8048 	add	r8, sp, #72	; 0x48
 1f8:	ea000019 	b	264 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x264>
 1fc:	e59d3018 	ldr	r3, [sp, #24]
 200:	e58d3048 	str	r3, [sp, #72]	; 0x48
 204:	e59d301c 	ldr	r3, [sp, #28]
 208:	e58d304c 	str	r3, [sp, #76]	; 0x4c
 20c:	e59d300c 	ldr	r3, [sp, #12]
 210:	e58d5060 	str	r5, [sp, #96]	; 0x60
 214:	e08aa003 	add	r10, r10, r3
 218:	e28d3058 	add	r3, sp, #88	; 0x58
 21c:	e8970003 	ldm	r7, {r0, r1}
 220:	e88b0003 	stm	r11, {r0, r1}
 224:	e8980003 	ldm	r8, {r0, r1}
 228:	e8830003 	stm	r3, {r0, r1}
 22c:	e1a0000b 	mov	r0, r11
 230:	e58d4064 	str	r4, [sp, #100]	; 0x64
 234:	ebfffffe 	bl	0 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
 238:	e3500000 	cmp	r0, #0
 23c:	e2899001 	add	r9, r9, #1
 240:	0a000002 	beq	250 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x250>
 244:	e1a0000b 	mov	r0, r11
 248:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
 24c:	ebfffffe 	bl	0 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)>
 250:	e8980003 	ldm	r8, {r0, r1}
 254:	e59d3010 	ldr	r3, [sp, #16]
 258:	e8870003 	stm	r7, {r0, r1}
 25c:	e1590003 	cmp	r9, r3
 260:	0a00000f 	beq	2a4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x2a4>
 264:	e59d3014 	ldr	r3, [sp, #20]
 268:	e1590003 	cmp	r9, r3
 26c:	aaffffe2 	bge	1fc <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x1fc>
 270:	e1a0192a 	lsr	r1, r10, #18
 274:	e1a00006 	mov	r0, r6
 278:	e58d1020 	str	r1, [sp, #32]
 27c:	ebfffffe 	bl	0 <rad_cos_12(fpm::fixed<long, long long, 8u>, unsigned long)>
 280:	e1a02000 	mov	r2, r0
 284:	e59d1020 	ldr	r1, [sp, #32]
 288:	e0822005 	add	r2, r2, r5
 28c:	e1a00006 	mov	r0, r6
 290:	e58d2048 	str	r2, [sp, #72]	; 0x48
 294:	ebfffffe 	bl	0 <rad_sin_12(fpm::fixed<long, long long, 8u>, unsigned long)>
 298:	e0800004 	add	r0, r0, r4
 29c:	e58d004c 	str	r0, [sp, #76]	; 0x4c
 2a0:	eaffffd9 	b	20c <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x20c>
 2a4:	e59f3018 	ldr	r3, [pc, #24]	; 2c4 <pico8::circfill(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, pico8::Color)+0x2c4>
 2a8:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
 2ac:	e5832000 	str	r2, [r3]
 2b0:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
 2b4:	e5832004 	str	r2, [r3, #4]
 2b8:	e28dd06c 	add	sp, sp, #108	; 0x6c
 2bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
	...

Disassembly of section .text._ZN5pico87scursorEiiNS_5ColorEi:

00000000 <pico8::scursor(int, int, pico8::Color, int)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e59f70ac 	ldr	r7, [pc, #172]	; b8 <pico8::scursor(int, int, pico8::Color, int)+0xb8>
   8:	e24dd008 	sub	sp, sp, #8
   c:	e597c000 	ldr	r12, [r7]
  10:	e35c0000 	cmp	r12, #0
  14:	0a00001e 	beq	94 <pico8::scursor(int, int, pico8::Color, int)+0x94>
  18:	e1a04002 	mov	r4, r2
  1c:	e3a02000 	mov	r2, #0
  20:	e1a05000 	mov	r5, r0
  24:	e1a06001 	mov	r6, r1
  28:	e1a0000c 	mov	r0, r12
  2c:	e1a0100d 	mov	r1, sp
  30:	e1a08003 	mov	r8, r3
  34:	e58d2000 	str	r2, [sp]
  38:	e1cd20b6 	strh	r2, [sp, #6]
  3c:	ebfffffe 	bl	0 <sprprint::GetInfo(__sFILE*, sprprint::Info&)>
  40:	e3500000 	cmp	r0, #0
  44:	ba000008 	blt	6c <pico8::scursor(int, int, pico8::Color, int)+0x6c>
  48:	e59f206c 	ldr	r2, [pc, #108]	; bc <pico8::scursor(int, int, pico8::Color, int)+0xbc>
  4c:	e1dd30f0 	ldrsh	r3, [sp]
  50:	e5823000 	str	r3, [r2]
  54:	e1dd30f2 	ldrsh	r3, [sp, #2]
  58:	e5823004 	str	r3, [r2, #4]
  5c:	e1dd30b6 	ldrh	r3, [sp, #6]
  60:	e582300c 	str	r3, [r2, #12]
  64:	e5dd3004 	ldrb	r3, [sp, #4]
  68:	e5c23008 	strb	r3, [r2, #8]
  6c:	e1a03808 	lsl	r3, r8, #16
  70:	e1a02806 	lsl	r2, r6, #16
  74:	e1a01805 	lsl	r1, r5, #16
  78:	e5970000 	ldr	r0, [r7]
  7c:	e1a03823 	lsr	r3, r3, #16
  80:	e1a02842 	asr	r2, r2, #16
  84:	e1a01841 	asr	r1, r1, #16
  88:	ebfffffe 	bl	0 <sprprint::Locate(__sFILE*, short, short, unsigned short)>
  8c:	e3540010 	cmp	r4, #16
  90:	1a000002 	bne	a0 <pico8::scursor(int, int, pico8::Color, int)+0xa0>
  94:	e59f0020 	ldr	r0, [pc, #32]	; bc <pico8::scursor(int, int, pico8::Color, int)+0xbc>
  98:	e28dd008 	add	sp, sp, #8
  9c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  a0:	e5970000 	ldr	r0, [r7]
  a4:	e1a01004 	mov	r1, r4
  a8:	ebfffffe 	bl	0 <sprprint::Color(__sFILE*, b8PpuColor)>
  ac:	e59f0008 	ldr	r0, [pc, #8]	; bc <pico8::scursor(int, int, pico8::Color, int)+0xbc>
  b0:	e28dd008 	add	sp, sp, #8
  b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	...

Disassembly of section .text._ZN5pico83clsENS_5ColorE:

00000000 <pico8::cls(pico8::Color)>:
   0:	e59f30fc 	ldr	r3, [pc, #252]	; 104 <pico8::cls(pico8::Color)+0x104>
   4:	e5d33000 	ldrb	r3, [r3]
   8:	e3530000 	cmp	r3, #0
   c:	1a000005 	bne	28 <pico8::cls(pico8::Color)+0x28>
  10:	e59f30f0 	ldr	r3, [pc, #240]	; 108 <pico8::cls(pico8::Color)+0x108>
  14:	e5d32000 	ldrb	r2, [r3]
  18:	e3520000 	cmp	r2, #0
  1c:	03a02001 	moveq	r2, #1
  20:	05c32000 	strbeq	r2, [r3]
  24:	e1a0f00e 	mov	pc, lr
  28:	e3a03000 	mov	r3, #0
  2c:	e92d4070 	push	{r4, r5, r6, lr}
  30:	e1a01003 	mov	r1, r3
  34:	e1a04000 	mov	r4, r0
  38:	e3a02010 	mov	r2, #16
  3c:	e1a00003 	mov	r0, r3
  40:	ebfffffe 	bl	0 <pico8::cls(pico8::Color)>
  44:	e3a0100f 	mov	r1, #15
  48:	e59f00bc 	ldr	r0, [pc, #188]	; 10c <pico8::cls(pico8::Color)+0x10c>
  4c:	ebfffffe 	bl	0 <b8PpuScissorAllocZPB>
  50:	e3a03000 	mov	r3, #0
  54:	e1a02000 	mov	r2, r0
  58:	e59f60b0 	ldr	r6, [pc, #176]	; 110 <pico8::cls(pico8::Color)+0x110>
  5c:	e59f50b0 	ldr	r5, [pc, #176]	; 114 <pico8::cls(pico8::Color)+0x114>
  60:	e1d6e0b0 	ldrh	lr, [r6]
  64:	e1d5c0b0 	ldrh	r12, [r5]
  68:	e5823004 	str	r3, [r2, #4]
  6c:	e1c2e0ba 	strh	lr, [r2, #10]
  70:	e1c2c0b8 	strh	r12, [r2, #8]
  74:	e3a0100f 	mov	r1, #15
  78:	e59f008c 	ldr	r0, [pc, #140]	; 10c <pico8::cls(pico8::Color)+0x10c>
  7c:	ebfffffe 	bl	0 <b8PpuRectAllocZPB>
  80:	e3a0c000 	mov	r12, #0
  84:	e1a02000 	mov	r2, r0
  88:	e3540010 	cmp	r4, #16
  8c:	059f3084 	ldreq	r3, [pc, #132]	; 118 <pico8::cls(pico8::Color)+0x118>
  90:	e5d01000 	ldrb	r1, [r0]
  94:	05d33000 	ldrbeq	r3, [r3]
  98:	e1d600b0 	ldrh	r0, [r6]
  9c:	e1d5e0b0 	ldrh	lr, [r5]
  a0:	0203300f 	andeq	r3, r3, #15
  a4:	1204300f 	andne	r3, r4, #15
  a8:	e3c1100f 	bic	r1, r1, #15
  ac:	e1833001 	orr	r3, r3, r1
  b0:	e5c23000 	strb	r3, [r2]
  b4:	e1c200ba 	strh	r0, [r2, #10]
  b8:	e1c2e0b8 	strh	lr, [r2, #8]
  bc:	e582c004 	str	r12, [r2, #4]
  c0:	e3a0100f 	mov	r1, #15
  c4:	e59f0040 	ldr	r0, [pc, #64]	; 10c <pico8::cls(pico8::Color)+0x10c>
  c8:	ebfffffe 	bl	0 <b8PpuScissorAllocZPB>
  cc:	e59f3048 	ldr	r3, [pc, #72]	; 11c <pico8::cls(pico8::Color)+0x11c>
  d0:	e5931008 	ldr	r1, [r3, #8]
  d4:	e593200c 	ldr	r2, [r3, #12]
  d8:	e593c004 	ldr	r12, [r3, #4]
  dc:	e593e000 	ldr	lr, [r3]
  e0:	e1a0c44c 	asr	r12, r12, #8
  e4:	e1a0e44e 	asr	lr, lr, #8
  e8:	e1a01441 	asr	r1, r1, #8
  ec:	e1a03442 	asr	r3, r2, #8
  f0:	e1c0e0b6 	strh	lr, [r0, #6]
  f4:	e1c0c0b4 	strh	r12, [r0, #4]
  f8:	e1c010ba 	strh	r1, [r0, #10]
  fc:	e1c030b8 	strh	r3, [r0, #8]
 100:	e8bd8070 	pop	{r4, r5, r6, pc}
	...

Disassembly of section .text._ZN5pico86sprintESt17basic_string_viewIcSt11char_traitsIcEEz:

00000000 <pico8::sprint(std::basic_string_view<char, std::char_traits<char> >, ...)>:
   0:	e92d000f 	push	{r0, r1, r2, r3}
   4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   8:	e59f3024 	ldr	r3, [pc, #36]	; 34 <pico8::sprint(std::basic_string_view<char, std::char_traits<char> >, ...)+0x34>
   c:	e24dd00c 	sub	sp, sp, #12
  10:	e28d2018 	add	r2, sp, #24
  14:	e59d1014 	ldr	r1, [sp, #20]
  18:	e5930000 	ldr	r0, [r3]
  1c:	e58d2004 	str	r2, [sp, #4]
  20:	ebfffffe 	bl	0 <vfprintf>
  24:	e28dd00c 	add	sp, sp, #12
  28:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  2c:	e28dd010 	add	sp, sp, #16
  30:	e1a0f00e 	mov	pc, lr
  34:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico86sprintEiiNS_5ColorESt17basic_string_viewIcSt11char_traitsIcEEz:

00000000 <pico8::sprint(int, int, pico8::Color, std::basic_string_view<char, std::char_traits<char> >, ...)>:
   0:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   8:	e3a03000 	mov	r3, #0
   c:	e24dd008 	sub	sp, sp, #8
  10:	ebfffffe 	bl	0 <pico8::sprint(int, int, pico8::Color, std::basic_string_view<char, std::char_traits<char> >, ...)>
  14:	e59f3020 	ldr	r3, [pc, #32]	; 3c <pico8::sprint(int, int, pico8::Color, std::basic_string_view<char, std::char_traits<char> >, ...)+0x3c>
  18:	e28d2014 	add	r2, sp, #20
  1c:	e59d1010 	ldr	r1, [sp, #16]
  20:	e5930000 	ldr	r0, [r3]
  24:	e58d2004 	str	r2, [sp, #4]
  28:	ebfffffe 	bl	0 <vfprintf>
  2c:	e28dd008 	add	sp, sp, #8
  30:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  34:	e28dd004 	add	sp, sp, #4
  38:	e1a0f00e 	mov	pc, lr
  3c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico86cursorEiiNS_5BgPalE:

00000000 <pico8::cursor(int, int, pico8::BgPal)>:
   0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   4:	e59f7094 	ldr	r7, [pc, #148]	; a0 <pico8::cursor(int, int, pico8::BgPal)+0xa0>
   8:	e24dd00c 	sub	sp, sp, #12
   c:	e5973000 	ldr	r3, [r7]
  10:	e3530000 	cmp	r3, #0
  14:	0a000018 	beq	7c <pico8::cursor(int, int, pico8::BgPal)+0x7c>
  18:	e1a06000 	mov	r6, r0
  1c:	e1a00003 	mov	r0, r3
  20:	e3a03000 	mov	r3, #0
  24:	e1a05001 	mov	r5, r1
  28:	e1a0100d 	mov	r1, sp
  2c:	e1a04002 	mov	r4, r2
  30:	e58d3000 	str	r3, [sp]
  34:	ebfffffe 	bl	0 <bgprint::GetInfo(__sFILE*, bgprint::Info&)>
  38:	e3500000 	cmp	r0, #0
  3c:	ba000006 	blt	5c <pico8::cursor(int, int, pico8::BgPal)+0x5c>
  40:	e59f305c 	ldr	r3, [pc, #92]	; a4 <pico8::cursor(int, int, pico8::BgPal)+0xa4>
  44:	e1dd20f0 	ldrsh	r2, [sp]
  48:	e5832000 	str	r2, [r3]
  4c:	e1dd20f2 	ldrsh	r2, [sp, #2]
  50:	e5832004 	str	r2, [r3, #4]
  54:	e5dd2004 	ldrb	r2, [sp, #4]
  58:	e5c32008 	strb	r2, [r3, #8]
  5c:	e1a02805 	lsl	r2, r5, #16
  60:	e1a01806 	lsl	r1, r6, #16
  64:	e5970000 	ldr	r0, [r7]
  68:	e1a02842 	asr	r2, r2, #16
  6c:	e1a01841 	asr	r1, r1, #16
  70:	ebfffffe 	bl	0 <bgprint::Locate(__sFILE*, short, short)>
  74:	e3540004 	cmp	r4, #4
  78:	1a000002 	bne	88 <pico8::cursor(int, int, pico8::BgPal)+0x88>
  7c:	e59f0020 	ldr	r0, [pc, #32]	; a4 <pico8::cursor(int, int, pico8::BgPal)+0xa4>
  80:	e28dd00c 	add	sp, sp, #12
  84:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  88:	e5970000 	ldr	r0, [r7]
  8c:	e1a01004 	mov	r1, r4
  90:	ebfffffe 	bl	0 <bgprint::Pal(__sFILE*, unsigned char)>
  94:	e59f0008 	ldr	r0, [pc, #8]	; a4 <pico8::cursor(int, int, pico8::BgPal)+0xa4>
  98:	e28dd00c 	add	sp, sp, #12
  9c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	...

Disassembly of section .text._ZN5pico85printESt17basic_string_viewIcSt11char_traitsIcEEz:

00000000 <pico8::print(std::basic_string_view<char, std::char_traits<char> >, ...)>:
   0:	e92d000f 	push	{r0, r1, r2, r3}
   4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   8:	e59f3024 	ldr	r3, [pc, #36]	; 34 <pico8::print(std::basic_string_view<char, std::char_traits<char> >, ...)+0x34>
   c:	e24dd00c 	sub	sp, sp, #12
  10:	e28d2018 	add	r2, sp, #24
  14:	e59d1014 	ldr	r1, [sp, #20]
  18:	e5930000 	ldr	r0, [r3]
  1c:	e58d2004 	str	r2, [sp, #4]
  20:	ebfffffe 	bl	0 <vfprintf>
  24:	e28dd00c 	add	sp, sp, #12
  28:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  2c:	e28dd010 	add	sp, sp, #16
  30:	e1a0f00e 	mov	pc, lr
  34:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico85printEiiNS_5BgPalESt17basic_string_viewIcSt11char_traitsIcEEz:

00000000 <pico8::print(int, int, pico8::BgPal, std::basic_string_view<char, std::char_traits<char> >, ...)>:
   0:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   8:	e24dd008 	sub	sp, sp, #8
   c:	ebfffffe 	bl	0 <pico8::print(int, int, pico8::BgPal, std::basic_string_view<char, std::char_traits<char> >, ...)>
  10:	e59f3020 	ldr	r3, [pc, #32]	; 38 <pico8::print(int, int, pico8::BgPal, std::basic_string_view<char, std::char_traits<char> >, ...)+0x38>
  14:	e28d2014 	add	r2, sp, #20
  18:	e59d1010 	ldr	r1, [sp, #16]
  1c:	e5930000 	ldr	r0, [r3]
  20:	e58d2004 	str	r2, [sp, #4]
  24:	ebfffffe 	bl	0 <vfprintf>
  28:	e28dd008 	add	sp, sp, #8
  2c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  30:	e28dd004 	add	sp, sp, #4
  34:	e1a0f00e 	mov	pc, lr
  38:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico84fsetEhhhh:

00000000 <pico8::fset(unsigned char, unsigned char, unsigned char, unsigned char)>:
   0:	e353000f 	cmp	r3, #15
   4:	8a00000d 	bhi	40 <pico8::fset(unsigned char, unsigned char, unsigned char, unsigned char)+0x40>
   8:	e35100ff 	cmp	r1, #255	; 0xff
   c:	0a000011 	beq	58 <pico8::fset(unsigned char, unsigned char, unsigned char, unsigned char)+0x58>
  10:	e3510007 	cmp	r1, #7
  14:	8a000009 	bhi	40 <pico8::fset(unsigned char, unsigned char, unsigned char, unsigned char)+0x40>
  18:	e3520001 	cmp	r2, #1
  1c:	8a000007 	bhi	40 <pico8::fset(unsigned char, unsigned char, unsigned char, unsigned char)+0x40>
  20:	0a000010 	beq	68 <pico8::fset(unsigned char, unsigned char, unsigned char, unsigned char)+0x68>
  24:	e3a0c001 	mov	r12, #1
  28:	e59f2050 	ldr	r2, [pc, #80]	; 80 <pico8::fset(unsigned char, unsigned char, unsigned char, unsigned char)+0x80>
  2c:	e0823403 	add	r3, r2, r3, lsl #8
  30:	e7d32000 	ldrb	r2, [r3, r0]
  34:	e1c2211c 	bic	r2, r2, r12, lsl r1
  38:	e7c32000 	strb	r2, [r3, r0]
  3c:	e1a0f00e 	mov	pc, lr
  40:	e59f303c 	ldr	r3, [pc, #60]	; 84 <pico8::fset(unsigned char, unsigned char, unsigned char, unsigned char)+0x84>
  44:	e5d32000 	ldrb	r2, [r3]
  48:	e3520000 	cmp	r2, #0
  4c:	03a02002 	moveq	r2, #2
  50:	05c32000 	strbeq	r2, [r3]
  54:	e1a0f00e 	mov	pc, lr
  58:	e59f1020 	ldr	r1, [pc, #32]	; 80 <pico8::fset(unsigned char, unsigned char, unsigned char, unsigned char)+0x80>
  5c:	e0813403 	add	r3, r1, r3, lsl #8
  60:	e7c32000 	strb	r2, [r3, r0]
  64:	e1a0f00e 	mov	pc, lr
  68:	e59fc010 	ldr	r12, [pc, #16]	; 80 <pico8::fset(unsigned char, unsigned char, unsigned char, unsigned char)+0x80>
  6c:	e08c3403 	add	r3, r12, r3, lsl #8
  70:	e7d3c000 	ldrb	r12, [r3, r0]
  74:	e18c2112 	orr	r2, r12, r2, lsl r1
  78:	e7c32000 	strb	r2, [r3, r0]
  7c:	e1a0f00e 	mov	pc, lr
	...

Disassembly of section .text._ZN5pico84fgetEhhh:

00000000 <pico8::fget(unsigned char, unsigned char, unsigned char)>:
   0:	e352000f 	cmp	r2, #15
   4:	8a000003 	bhi	18 <pico8::fget(unsigned char, unsigned char, unsigned char)+0x18>
   8:	e35100ff 	cmp	r1, #255	; 0xff
   c:	0a000010 	beq	54 <pico8::fget(unsigned char, unsigned char, unsigned char)+0x54>
  10:	e3510007 	cmp	r1, #7
  14:	9a000006 	bls	34 <pico8::fget(unsigned char, unsigned char, unsigned char)+0x34>
  18:	e59f3044 	ldr	r3, [pc, #68]	; 64 <pico8::fget(unsigned char, unsigned char, unsigned char)+0x64>
  1c:	e5d30000 	ldrb	r0, [r3]
  20:	e3500000 	cmp	r0, #0
  24:	1a000008 	bne	4c <pico8::fget(unsigned char, unsigned char, unsigned char)+0x4c>
  28:	e3a02002 	mov	r2, #2
  2c:	e5c32000 	strb	r2, [r3]
  30:	e1a0f00e 	mov	pc, lr
  34:	e59f302c 	ldr	r3, [pc, #44]	; 68 <pico8::fget(unsigned char, unsigned char, unsigned char)+0x68>
  38:	e0833402 	add	r3, r3, r2, lsl #8
  3c:	e7d30000 	ldrb	r0, [r3, r0]
  40:	e1a00150 	asr	r0, r0, r1
  44:	e2000001 	and	r0, r0, #1
  48:	e1a0f00e 	mov	pc, lr
  4c:	e3a00000 	mov	r0, #0
  50:	e1a0f00e 	mov	pc, lr
  54:	e59f300c 	ldr	r3, [pc, #12]	; 68 <pico8::fget(unsigned char, unsigned char, unsigned char)+0x68>
  58:	e0833402 	add	r3, r3, r2, lsl #8
  5c:	e7d30000 	ldrb	r0, [r3, r0]
  60:	e1a0f00e 	mov	pc, lr
	...

Disassembly of section .text._ZN5pico88mapsetupENS_7BgTilesES0_St8optionalISt10shared_ptrISt6vectorI12_b8PpuBgTileSaIS4_EEEEhhNS_7BgIndexE:

00000000 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e24dd014 	sub	sp, sp, #20
   8:	e5dd503c 	ldrb	r5, [sp, #60]	; 0x3c
   c:	e5dda038 	ldrb	r10, [sp, #56]	; 0x38
  10:	e3550003 	cmp	r5, #3
  14:	e58d3000 	str	r3, [sp]
  18:	8a000086 	bhi	238 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x238>
  1c:	e5d24008 	ldrb	r4, [r2, #8]
  20:	e1a06000 	mov	r6, r0
  24:	e3540000 	cmp	r4, #0
  28:	e1a07001 	mov	r7, r1
  2c:	1a00005a 	bne	19c <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x19c>
  30:	e3a00018 	mov	r0, #24
  34:	e1cd40bc 	strh	r4, [sp, #12]
  38:	ebfffffe 	bl	0 <operator new(unsigned int)>
  3c:	e3a02001 	mov	r2, #1
  40:	e1a0b000 	mov	r11, r0
  44:	e0080697 	mul	r8, r7, r6
  48:	e59f1228 	ldr	r1, [pc, #552]	; 278 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x278>
  4c:	e3780107 	cmn	r8, #-1073741823	; 0xc0000001
  50:	e5802004 	str	r2, [r0, #4]
  54:	e5802008 	str	r2, [r0, #8]
  58:	e1a09000 	mov	r9, r0
  5c:	e48b100c 	str	r1, [r11], #12
  60:	ca000082 	bgt	270 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x270>
  64:	e3580000 	cmp	r8, #0
  68:	e580400c 	str	r4, [r0, #12]
  6c:	e5804014 	str	r4, [r0, #20]
  70:	e5804010 	str	r4, [r0, #16]
  74:	0580800c 	streq	r8, [r0, #12]
  78:	05808014 	streq	r8, [r0, #20]
  7c:	0a00000e 	beq	bc <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0xbc>
  80:	e1a08088 	lsl	r8, r8, #1
  84:	e1a00008 	mov	r0, r8
  88:	ebfffffe 	bl	0 <operator new(unsigned int)>
  8c:	e0808008 	add	r8, r0, r8
  90:	e589000c 	str	r0, [r9, #12]
  94:	e5890010 	str	r0, [r9, #16]
  98:	e5898014 	str	r8, [r9, #20]
  9c:	e2804002 	add	r4, r0, #2
  a0:	e2440002 	sub	r0, r4, #2
  a4:	e3a02002 	mov	r2, #2
  a8:	e28d100c 	add	r1, sp, #12
  ac:	ebfffffe 	bl	0 <memcpy>
  b0:	e1540008 	cmp	r4, r8
  b4:	e2844002 	add	r4, r4, #2
  b8:	1afffff8 	bne	a0 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0xa0>
  bc:	e0852105 	add	r2, r5, r5, lsl #2
  c0:	e59f41b4 	ldr	r4, [pc, #436]	; 27c <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x27c>
  c4:	e1a02102 	lsl	r2, r2, #2
  c8:	e2822008 	add	r2, r2, #8
  cc:	e784b002 	str	r11, [r4, r2]
  d0:	e0842002 	add	r2, r4, r2
  d4:	e592b004 	ldr	r11, [r2, #4]
  d8:	e5898010 	str	r8, [r9, #16]
  dc:	e35b0000 	cmp	r11, #0
  e0:	e5829004 	str	r9, [r2, #4]
  e4:	e1a08105 	lsl	r8, r5, #2
  e8:	0a00000e 	beq	128 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x128>
  ec:	e59b3004 	ldr	r3, [r11, #4]
  f0:	e2433001 	sub	r3, r3, #1
  f4:	e3530000 	cmp	r3, #0
  f8:	e58b3004 	str	r3, [r11, #4]
  fc:	1a000009 	bne	128 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x128>
 100:	e59b3000 	ldr	r3, [r11]
 104:	e1a0000b 	mov	r0, r11
 108:	e5933008 	ldr	r3, [r3, #8]
 10c:	e1a0e00f 	mov	lr, pc
 110:	e1a0f003 	mov	pc, r3
 114:	e59b3008 	ldr	r3, [r11, #8]
 118:	e2433001 	sub	r3, r3, #1
 11c:	e3530000 	cmp	r3, #0
 120:	e58b3008 	str	r3, [r11, #8]
 124:	0a00004b 	beq	258 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x258>
 128:	e0883005 	add	r3, r8, r5
 12c:	e0843103 	add	r3, r4, r3, lsl #2
 130:	e3560000 	cmp	r6, #0
 134:	03a00020 	moveq	r0, #32
 138:	e1c360b2 	strh	r6, [r3, #2]
 13c:	e1c370b4 	strh	r7, [r3, #4]
 140:	0a000002 	beq	150 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x150>
 144:	e1a00006 	mov	r0, r6
 148:	ebfffffe 	bl	0 <__ctzsi2>
 14c:	e20000ff 	and	r0, r0, #255	; 0xff
 150:	e0883005 	add	r3, r8, r5
 154:	e3570000 	cmp	r7, #0
 158:	e0843103 	add	r3, r4, r3, lsl #2
 15c:	e5c30006 	strb	r0, [r3, #6]
 160:	03a00020 	moveq	r0, #32
 164:	0a000002 	beq	174 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x174>
 168:	e1a00007 	mov	r0, r7
 16c:	ebfffffe 	bl	0 <__ctzsi2>
 170:	e20000ff 	and	r0, r0, #255	; 0xff
 174:	e3a03001 	mov	r3, #1
 178:	e0888005 	add	r8, r8, r5
 17c:	e7c43108 	strb	r3, [r4, r8, lsl #2]
 180:	e59d3000 	ldr	r3, [sp]
 184:	e0844108 	add	r4, r4, r8, lsl #2
 188:	e5c40007 	strb	r0, [r4, #7]
 18c:	e5c43010 	strb	r3, [r4, #16]
 190:	e5c4a011 	strb	r10, [r4, #17]
 194:	e28dd014 	add	sp, sp, #20
 198:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 19c:	e0853105 	add	r3, r5, r5, lsl #2
 1a0:	e59f40d4 	ldr	r4, [pc, #212]	; 27c <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x27c>
 1a4:	e1a03103 	lsl	r3, r3, #2
 1a8:	e2833008 	add	r3, r3, #8
 1ac:	e084b003 	add	r11, r4, r3
 1b0:	e59b0004 	ldr	r0, [r11, #4]
 1b4:	e8920204 	ldm	r2, {r2, r9}
 1b8:	e1590000 	cmp	r9, r0
 1bc:	e7842003 	str	r2, [r4, r3]
 1c0:	e1a08105 	lsl	r8, r5, #2
 1c4:	0affffd7 	beq	128 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x128>
 1c8:	e3590000 	cmp	r9, #0
 1cc:	15993004 	ldrne	r3, [r9, #4]
 1d0:	12833001 	addne	r3, r3, #1
 1d4:	15893004 	strne	r3, [r9, #4]
 1d8:	e3500000 	cmp	r0, #0
 1dc:	0a000013 	beq	230 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x230>
 1e0:	e5903004 	ldr	r3, [r0, #4]
 1e4:	e2433001 	sub	r3, r3, #1
 1e8:	e3530000 	cmp	r3, #0
 1ec:	e5803004 	str	r3, [r0, #4]
 1f0:	1a00000e 	bne	230 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x230>
 1f4:	e5903000 	ldr	r3, [r0]
 1f8:	e58d0004 	str	r0, [sp, #4]
 1fc:	e5933008 	ldr	r3, [r3, #8]
 200:	e1a0e00f 	mov	lr, pc
 204:	e1a0f003 	mov	pc, r3
 208:	e59d0004 	ldr	r0, [sp, #4]
 20c:	e5903008 	ldr	r3, [r0, #8]
 210:	e2433001 	sub	r3, r3, #1
 214:	e3530000 	cmp	r3, #0
 218:	e5803008 	str	r3, [r0, #8]
 21c:	1a000003 	bne	230 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x230>
 220:	e5903000 	ldr	r3, [r0]
 224:	e593300c 	ldr	r3, [r3, #12]
 228:	e1a0e00f 	mov	lr, pc
 22c:	e1a0f003 	mov	pc, r3
 230:	e58b9004 	str	r9, [r11, #4]
 234:	eaffffbb 	b	128 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x128>
 238:	e59f3040 	ldr	r3, [pc, #64]	; 280 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x280>
 23c:	e5d32000 	ldrb	r2, [r3]
 240:	e3520000 	cmp	r2, #0
 244:	1affffd2 	bne	194 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x194>
 248:	e3a02002 	mov	r2, #2
 24c:	e5c32000 	strb	r2, [r3]
 250:	e28dd014 	add	sp, sp, #20
 254:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 258:	e59b3000 	ldr	r3, [r11]
 25c:	e1a0000b 	mov	r0, r11
 260:	e593300c 	ldr	r3, [r3, #12]
 264:	e1a0e00f 	mov	lr, pc
 268:	e1a0f003 	mov	pc, r3
 26c:	eaffffad 	b	128 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x128>
 270:	e59f000c 	ldr	r0, [pc, #12]	; 284 <pico8::mapsetup(pico8::BgTiles, pico8::BgTiles, std::optional<std::shared_ptr<std::vector<_b8PpuBgTile, std::allocator<_b8PpuBgTile> > > >, unsigned char, unsigned char, pico8::BgIndex)+0x284>
 274:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 278:	00000008 	.word	0x00000008
	...

Disassembly of section .text._ZN5pico83mapEssNS_7BgIndexE:

00000000 <pico8::map(short, short, pico8::BgIndex)>:
   0:	e59f30d0 	ldr	r3, [pc, #208]	; d8 <pico8::map(short, short, pico8::BgIndex)+0xd8>
   4:	e5d33000 	ldrb	r3, [r3]
   8:	e3530000 	cmp	r3, #0
   c:	0a00002b 	beq	c0 <pico8::map(short, short, pico8::BgIndex)+0xc0>
  10:	e59f30c4 	ldr	r3, [pc, #196]	; dc <pico8::map(short, short, pico8::BgIndex)+0xdc>
  14:	e0822102 	add	r2, r2, r2, lsl #2
  18:	e92d4070 	push	{r4, r5, r6, lr}
  1c:	e0836102 	add	r6, r3, r2, lsl #2
  20:	e7d33102 	ldrb	r3, [r3, r2, lsl #2]
  24:	e3530000 	cmp	r3, #0
  28:	1a000006 	bne	48 <pico8::map(short, short, pico8::BgIndex)+0x48>
  2c:	e59f30ac 	ldr	r3, [pc, #172]	; e0 <pico8::map(short, short, pico8::BgIndex)+0xe0>
  30:	e5d32000 	ldrb	r2, [r3]
  34:	e3520000 	cmp	r2, #0
  38:	1a00001f 	bne	bc <pico8::map(short, short, pico8::BgIndex)+0xbc>
  3c:	e3a02003 	mov	r2, #3
  40:	e5c32000 	strb	r2, [r3]
  44:	e8bd8070 	pop	{r4, r5, r6, pc}
  48:	e59f3094 	ldr	r3, [pc, #148]	; e4 <pico8::map(short, short, pico8::BgIndex)+0xe4>
  4c:	e1a05000 	mov	r5, r0
  50:	e1a04001 	mov	r4, r1
  54:	e59f008c 	ldr	r0, [pc, #140]	; e8 <pico8::map(short, short, pico8::BgIndex)+0xe8>
  58:	e1d310f0 	ldrsh	r1, [r3]
  5c:	ebfffffe 	bl	0 <b8PpuBgAllocZPB>
  60:	e5963008 	ldr	r3, [r6, #8]
  64:	e5931000 	ldr	r1, [r3]
  68:	e1c050ba 	strh	r5, [r0, #10]
  6c:	e5d63007 	ldrb	r3, [r6, #7]
  70:	e5d62006 	ldrb	r2, [r6, #6]
  74:	e203300f 	and	r3, r3, #15
  78:	e1832602 	orr	r2, r3, r2, lsl #12
  7c:	e5d63010 	ldrb	r3, [r6, #16]
  80:	e5801004 	str	r1, [r0, #4]
  84:	e5d61011 	ldrb	r1, [r6, #17]
  88:	e1a03103 	lsl	r3, r3, #2
  8c:	e2011003 	and	r1, r1, #3
  90:	e203300c 	and	r3, r3, #12
  94:	e1833001 	orr	r3, r3, r1
  98:	e5d0100c 	ldrb	r1, [r0, #12]
  9c:	e1c040b8 	strh	r4, [r0, #8]
  a0:	e3c1100f 	bic	r1, r1, #15
  a4:	e1833001 	orr	r3, r3, r1
  a8:	e5c0300c 	strb	r3, [r0, #12]
  ac:	e1d030b0 	ldrh	r3, [r0]
  b0:	e2033eff 	and	r3, r3, #4080	; 0xff0
  b4:	e1823003 	orr	r3, r2, r3
  b8:	e1c030b0 	strh	r3, [r0]
  bc:	e8bd8070 	pop	{r4, r5, r6, pc}
  c0:	e59f3018 	ldr	r3, [pc, #24]	; e0 <pico8::map(short, short, pico8::BgIndex)+0xe0>
  c4:	e5d32000 	ldrb	r2, [r3]
  c8:	e3520000 	cmp	r2, #0
  cc:	03a02001 	moveq	r2, #1
  d0:	05c32000 	strbeq	r2, [r3]
  d4:	e1a0f00e 	mov	pc, lr
	...

Disassembly of section .text._ZN5pico85mgettEmmNS_7BgIndexE:

00000000 <pico8::mgett(unsigned long, unsigned long, pico8::BgIndex)>:
   0:	e59f309c 	ldr	r3, [pc, #156]	; a4 <pico8::mgett(unsigned long, unsigned long, pico8::BgIndex)+0xa4>
   4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   8:	e0822102 	add	r2, r2, r2, lsl #2
   c:	e083c102 	add	r12, r3, r2, lsl #2
  10:	e7d33102 	ldrb	r3, [r3, r2, lsl #2]
  14:	e24dd00c 	sub	sp, sp, #12
  18:	e3530000 	cmp	r3, #0
  1c:	1a00000b 	bne	50 <pico8::mgett(unsigned long, unsigned long, pico8::BgIndex)+0x50>
  20:	e59f3080 	ldr	r3, [pc, #128]	; a8 <pico8::mgett(unsigned long, unsigned long, pico8::BgIndex)+0xa8>
  24:	e5d32000 	ldrb	r2, [r3]
  28:	e3520000 	cmp	r2, #0
  2c:	03a02003 	moveq	r2, #3
  30:	05c32000 	strbeq	r2, [r3]
  34:	e3a03000 	mov	r3, #0
  38:	e1cd30b4 	strh	r3, [sp, #4]
  3c:	e5dd3004 	ldrb	r3, [sp, #4]
  40:	e5dd0005 	ldrb	r0, [sp, #5]
  44:	e1830400 	orr	r0, r3, r0, lsl #8
  48:	e28dd00c 	add	sp, sp, #12
  4c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  50:	e1dc30b2 	ldrh	r3, [r12, #2]
  54:	e1530000 	cmp	r3, r0
  58:	9afffff5 	bls	34 <pico8::mgett(unsigned long, unsigned long, pico8::BgIndex)+0x34>
  5c:	e1dc20b4 	ldrh	r2, [r12, #4]
  60:	e1520001 	cmp	r2, r1
  64:	9afffff2 	bls	34 <pico8::mgett(unsigned long, unsigned long, pico8::BgIndex)+0x34>
  68:	e0200391 	mla	r0, r1, r3, r0
  6c:	e59c2008 	ldr	r2, [r12, #8]
  70:	e8920006 	ldm	r2, {r1, r2}
  74:	e0422001 	sub	r2, r2, r1
  78:	e15000c2 	cmp	r0, r2, asr #1
  7c:	e1a020c2 	asr	r2, r2, #1
  80:	2a000004 	bcs	98 <pico8::mgett(unsigned long, unsigned long, pico8::BgIndex)+0x98>
  84:	e0811080 	add	r1, r1, r0, lsl #1
  88:	e3a02002 	mov	r2, #2
  8c:	e28d0004 	add	r0, sp, #4
  90:	ebfffffe 	bl	0 <memcpy>
  94:	eaffffe8 	b	3c <pico8::mgett(unsigned long, unsigned long, pico8::BgIndex)+0x3c>
  98:	e1a01000 	mov	r1, r0
  9c:	e59f0008 	ldr	r0, [pc, #8]	; ac <pico8::mgett(unsigned long, unsigned long, pico8::BgIndex)+0xac>
  a0:	ebfffffe 	bl	0 <std::__throw_out_of_range_fmt(char const*, ...)>
	...

Disassembly of section .text._ZN5pico84mgetEmmNS_7BgIndexE:

00000000 <pico8::mget(unsigned long, unsigned long, pico8::BgIndex)>:
   0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4:	e24dd00c 	sub	sp, sp, #12
   8:	ebfffffe 	bl	0 <pico8::mget(unsigned long, unsigned long, pico8::BgIndex)>
   c:	e1a03320 	lsr	r3, r0, #6
  10:	e203303f 	and	r3, r3, #63	; 0x3f
  14:	e200003f 	and	r0, r0, #63	; 0x3f
  18:	e0830200 	add	r0, r3, r0, lsl #4
  1c:	e28dd00c 	add	sp, sp, #12
  20:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .text._ZN5pico85msettEmm12_b8PpuBgTileNS_7BgIndexE:

00000000 <pico8::msett(unsigned long, unsigned long, _b8PpuBgTile, pico8::BgIndex)>:
   0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4:	e59fc094 	ldr	r12, [pc, #148]	; a0 <pico8::msett(unsigned long, unsigned long, _b8PpuBgTile, pico8::BgIndex)+0xa0>
   8:	e0833103 	add	r3, r3, r3, lsl #2
   c:	e24dd00c 	sub	sp, sp, #12
  10:	e1cd20b4 	strh	r2, [sp, #4]
  14:	e7dc2103 	ldrb	r2, [r12, r3, lsl #2]
  18:	e08cc103 	add	r12, r12, r3, lsl #2
  1c:	e3520000 	cmp	r2, #0
  20:	0a000013 	beq	74 <pico8::msett(unsigned long, unsigned long, _b8PpuBgTile, pico8::BgIndex)+0x74>
  24:	e1dc30b2 	ldrh	r3, [r12, #2]
  28:	e1530000 	cmp	r3, r0
  2c:	9a00000e 	bls	6c <pico8::msett(unsigned long, unsigned long, _b8PpuBgTile, pico8::BgIndex)+0x6c>
  30:	e1dc20b4 	ldrh	r2, [r12, #4]
  34:	e1520001 	cmp	r2, r1
  38:	9a00000b 	bls	6c <pico8::msett(unsigned long, unsigned long, _b8PpuBgTile, pico8::BgIndex)+0x6c>
  3c:	e59c2008 	ldr	r2, [r12, #8]
  40:	e0200391 	mla	r0, r1, r3, r0
  44:	e5923000 	ldr	r3, [r2]
  48:	e5922004 	ldr	r2, [r2, #4]
  4c:	e0422003 	sub	r2, r2, r3
  50:	e15000c2 	cmp	r0, r2, asr #1
  54:	e1a020c2 	asr	r2, r2, #1
  58:	2a00000d 	bcs	94 <pico8::msett(unsigned long, unsigned long, _b8PpuBgTile, pico8::BgIndex)+0x94>
  5c:	e3a02002 	mov	r2, #2
  60:	e28d1004 	add	r1, sp, #4
  64:	e0830080 	add	r0, r3, r0, lsl #1
  68:	ebfffffe 	bl	0 <memcpy>
  6c:	e28dd00c 	add	sp, sp, #12
  70:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  74:	e59f3028 	ldr	r3, [pc, #40]	; a4 <pico8::msett(unsigned long, unsigned long, _b8PpuBgTile, pico8::BgIndex)+0xa4>
  78:	e5d32000 	ldrb	r2, [r3]
  7c:	e3520000 	cmp	r2, #0
  80:	1afffff9 	bne	6c <pico8::msett(unsigned long, unsigned long, _b8PpuBgTile, pico8::BgIndex)+0x6c>
  84:	e3a02003 	mov	r2, #3
  88:	e5c32000 	strb	r2, [r3]
  8c:	e28dd00c 	add	sp, sp, #12
  90:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  94:	e1a01000 	mov	r1, r0
  98:	e59f0008 	ldr	r0, [pc, #8]	; a8 <pico8::msett(unsigned long, unsigned long, _b8PpuBgTile, pico8::BgIndex)+0xa8>
  9c:	ebfffffe 	bl	0 <std::__throw_out_of_range_fmt(char const*, ...)>
	...

Disassembly of section .text._ZN5pico84msetEmmhhNS_7BgIndexEh:

00000000 <pico8::mset(unsigned long, unsigned long, unsigned char, unsigned char, pico8::BgIndex, unsigned char)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e353000f 	cmp	r3, #15
   8:	e5ddc010 	ldrb	r12, [sp, #16]
   c:	e5dd4014 	ldrb	r4, [sp, #20]
  10:	9a000006 	bls	30 <pico8::mset(unsigned long, unsigned long, unsigned char, unsigned char, pico8::BgIndex, unsigned char)+0x30>
  14:	e59f30d4 	ldr	r3, [pc, #212]	; f0 <pico8::mset(unsigned long, unsigned long, unsigned char, unsigned char, pico8::BgIndex, unsigned char)+0xf0>
  18:	e5d32000 	ldrb	r2, [r3]
  1c:	e3520000 	cmp	r2, #0
  20:	1a00000e 	bne	60 <pico8::mset(unsigned long, unsigned long, unsigned char, unsigned char, pico8::BgIndex, unsigned char)+0x60>
  24:	e3a02002 	mov	r2, #2
  28:	e5c32000 	strb	r2, [r3]
  2c:	e8bd8070 	pop	{r4, r5, r6, pc}
  30:	e59fe0bc 	ldr	lr, [pc, #188]	; f4 <pico8::mset(unsigned long, unsigned long, unsigned char, unsigned char, pico8::BgIndex, unsigned char)+0xf4>
  34:	e08cc10c 	add	r12, r12, r12, lsl #2
  38:	e7de510c 	ldrb	r5, [lr, r12, lsl #2]
  3c:	e08ee10c 	add	lr, lr, r12, lsl #2
  40:	e3550000 	cmp	r5, #0
  44:	0a00001f 	beq	c8 <pico8::mset(unsigned long, unsigned long, unsigned char, unsigned char, pico8::BgIndex, unsigned char)+0xc8>
  48:	e1dec0b2 	ldrh	r12, [lr, #2]
  4c:	e150000c 	cmp	r0, r12
  50:	2a000002 	bcs	60 <pico8::mset(unsigned long, unsigned long, unsigned char, unsigned char, pico8::BgIndex, unsigned char)+0x60>
  54:	e1de50b4 	ldrh	r5, [lr, #4]
  58:	e1510005 	cmp	r1, r5
  5c:	3a000000 	bcc	64 <pico8::mset(unsigned long, unsigned long, unsigned char, unsigned char, pico8::BgIndex, unsigned char)+0x64>
  60:	e8bd8070 	pop	{r4, r5, r6, pc}
  64:	e021019c 	mla	r1, r12, r1, r0
  68:	e59e0008 	ldr	r0, [lr, #8]
  6c:	e590c000 	ldr	r12, [r0]
  70:	e5900004 	ldr	r0, [r0, #4]
  74:	e040000c 	sub	r0, r0, r12
  78:	e15100c0 	cmp	r1, r0, asr #1
  7c:	e1a000c0 	asr	r0, r0, #1
  80:	2a000017 	bcs	e4 <pico8::mset(unsigned long, unsigned long, unsigned char, unsigned char, pico8::BgIndex, unsigned char)+0xe4>
  84:	e1a00203 	lsl	r0, r3, #4
  88:	e202e00f 	and	lr, r2, #15
  8c:	e1a03123 	lsr	r3, r3, #2
  90:	e2000030 	and	r0, r0, #48	; 0x30
  94:	e1a02222 	lsr	r2, r2, #4
  98:	e180000e 	orr	r0, r0, lr
  9c:	e0822203 	add	r2, r2, r3, lsl #4
  a0:	e1822300 	orr	r2, r2, r0, lsl #6
  a4:	e7cc2081 	strb	r2, [r12, r1, lsl #1]
  a8:	e08cc081 	add	r12, r12, r1, lsl #1
  ac:	e5dc3001 	ldrb	r3, [r12, #1]
  b0:	e1a00120 	lsr	r0, r0, #2
  b4:	e1800304 	orr	r0, r0, r4, lsl #6
  b8:	e2033030 	and	r3, r3, #48	; 0x30
  bc:	e1800003 	orr	r0, r0, r3
  c0:	e5cc0001 	strb	r0, [r12, #1]
  c4:	e8bd8070 	pop	{r4, r5, r6, pc}
  c8:	e59f3020 	ldr	r3, [pc, #32]	; f0 <pico8::mset(unsigned long, unsigned long, unsigned char, unsigned char, pico8::BgIndex, unsigned char)+0xf0>
  cc:	e5d32000 	ldrb	r2, [r3]
  d0:	e3520000 	cmp	r2, #0
  d4:	1affffe1 	bne	60 <pico8::mset(unsigned long, unsigned long, unsigned char, unsigned char, pico8::BgIndex, unsigned char)+0x60>
  d8:	e3a02003 	mov	r2, #3
  dc:	e5c32000 	strb	r2, [r3]
  e0:	e8bd8070 	pop	{r4, r5, r6, pc}
  e4:	e1a02000 	mov	r2, r0
  e8:	e59f0008 	ldr	r0, [pc, #8]	; f8 <pico8::mset(unsigned long, unsigned long, unsigned char, unsigned char, pico8::BgIndex, unsigned char)+0xf8>
  ec:	ebfffffe 	bl	0 <std::__throw_out_of_range_fmt(char const*, ...)>
	...

Disassembly of section .text._ZN5pico84mclsE12_b8PpuBgTileNS_7BgIndexE:

00000000 <pico8::mcls(_b8PpuBgTile, pico8::BgIndex)>:
   0:	e92d4030 	push	{r4, r5, lr}
   4:	e59f3074 	ldr	r3, [pc, #116]	; 80 <pico8::mcls(_b8PpuBgTile, pico8::BgIndex)+0x80>
   8:	e0811101 	add	r1, r1, r1, lsl #2
   c:	e7d32101 	ldrb	r2, [r3, r1, lsl #2]
  10:	e24dd00c 	sub	sp, sp, #12
  14:	e3520000 	cmp	r2, #0
  18:	e1cd00b4 	strh	r0, [sp, #4]
  1c:	0a00000f 	beq	60 <pico8::mcls(_b8PpuBgTile, pico8::BgIndex)+0x60>
  20:	e1a01101 	lsl	r1, r1, #2
  24:	e0833001 	add	r3, r3, r1
  28:	e5933008 	ldr	r3, [r3, #8]
  2c:	e8930030 	ldm	r3, {r4, r5}
  30:	e1550004 	cmp	r5, r4
  34:	0a000007 	beq	58 <pico8::mcls(_b8PpuBgTile, pico8::BgIndex)+0x58>
  38:	e2844002 	add	r4, r4, #2
  3c:	e2440002 	sub	r0, r4, #2
  40:	e3a02002 	mov	r2, #2
  44:	e28d1004 	add	r1, sp, #4
  48:	ebfffffe 	bl	0 <memcpy>
  4c:	e1540005 	cmp	r4, r5
  50:	e2844002 	add	r4, r4, #2
  54:	1afffff8 	bne	3c <pico8::mcls(_b8PpuBgTile, pico8::BgIndex)+0x3c>
  58:	e28dd00c 	add	sp, sp, #12
  5c:	e8bd8030 	pop	{r4, r5, pc}
  60:	e59f301c 	ldr	r3, [pc, #28]	; 84 <pico8::mcls(_b8PpuBgTile, pico8::BgIndex)+0x84>
  64:	e5d32000 	ldrb	r2, [r3]
  68:	e3520000 	cmp	r2, #0
  6c:	1afffff9 	bne	58 <pico8::mcls(_b8PpuBgTile, pico8::BgIndex)+0x58>
  70:	e3a02003 	mov	r2, #3
  74:	e5c32000 	strb	r2, [r3]
  78:	e28dd00c 	add	sp, sp, #12
  7c:	e8bd8030 	pop	{r4, r5, pc}
	...

Disassembly of section .text._ZN5pico83btnENS_6ButtonEh:

00000000 <pico8::btn(pico8::Button, unsigned char)>:
   0:	e3510000 	cmp	r1, #0
   4:	0afffffe 	beq	0 <pico8::btn(pico8::Button, unsigned char)>
   8:	e3a00000 	mov	r0, #0
   c:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN5pico84btnpENS_6ButtonEh:

00000000 <pico8::btnp(pico8::Button, unsigned char)>:
   0:	e3510000 	cmp	r1, #0
   4:	1a000010 	bne	4c <pico8::btnp(pico8::Button, unsigned char)+0x4c>
   8:	e92d4010 	push	{r4, lr}
   c:	e59f40cc 	ldr	r4, [pc, #204]	; e0 <pico8::btnp(pico8::Button, unsigned char)+0xe0>
  10:	e3500010 	cmp	r0, #16
  14:	e5941000 	ldr	r1, [r4]
  18:	e2013003 	and	r3, r1, #3
  1c:	0a00000c 	beq	54 <pico8::btnp(pico8::Button, unsigned char)+0x54>
  20:	e7940100 	ldr	r0, [r4, r0, lsl #2]
  24:	e3500001 	cmp	r0, #1
  28:	0a000006 	beq	48 <pico8::btnp(pico8::Button, unsigned char)+0x48>
  2c:	e350000e 	cmp	r0, #14
  30:	9a000003 	bls	44 <pico8::btnp(pico8::Button, unsigned char)+0x44>
  34:	e3100003 	tst	r0, #3
  38:	03a00001 	moveq	r0, #1
  3c:	13a00000 	movne	r0, #0
  40:	e8bd8010 	pop	{r4, pc}
  44:	e3a00000 	mov	r0, #0
  48:	e8bd8010 	pop	{r4, pc}
  4c:	e3a00000 	mov	r0, #0
  50:	e1a0f00e 	mov	pc, lr
  54:	e3510001 	cmp	r1, #1
  58:	0a00001e 	beq	d8 <pico8::btnp(pico8::Button, unsigned char)+0xd8>
  5c:	e351000e 	cmp	r1, #14
  60:	9a000001 	bls	6c <pico8::btnp(pico8::Button, unsigned char)+0x6c>
  64:	e3530000 	cmp	r3, #0
  68:	0a00001a 	beq	d8 <pico8::btnp(pico8::Button, unsigned char)+0xd8>
  6c:	e3a01000 	mov	r1, #0
  70:	e3a00001 	mov	r0, #1
  74:	ebfffffe 	bl	0 <pico8::btnp(pico8::Button, unsigned char)>
  78:	e3500000 	cmp	r0, #0
  7c:	1afffff1 	bne	48 <pico8::btnp(pico8::Button, unsigned char)+0x48>
  80:	e1a01000 	mov	r1, r0
  84:	e3a00002 	mov	r0, #2
  88:	ebfffffe 	bl	0 <pico8::btnp(pico8::Button, unsigned char)>
  8c:	e3500000 	cmp	r0, #0
  90:	1affffec 	bne	48 <pico8::btnp(pico8::Button, unsigned char)+0x48>
  94:	e1a01000 	mov	r1, r0
  98:	e3a00003 	mov	r0, #3
  9c:	ebfffffe 	bl	0 <pico8::btnp(pico8::Button, unsigned char)>
  a0:	e3500000 	cmp	r0, #0
  a4:	1affffe7 	bne	48 <pico8::btnp(pico8::Button, unsigned char)+0x48>
  a8:	e1a01000 	mov	r1, r0
  ac:	e3a00004 	mov	r0, #4
  b0:	ebfffffe 	bl	0 <pico8::btnp(pico8::Button, unsigned char)>
  b4:	e3500000 	cmp	r0, #0
  b8:	1affffe2 	bne	48 <pico8::btnp(pico8::Button, unsigned char)+0x48>
  bc:	e1a01000 	mov	r1, r0
  c0:	e3a00005 	mov	r0, #5
  c4:	ebfffffe 	bl	0 <pico8::btnp(pico8::Button, unsigned char)>
  c8:	e3500000 	cmp	r0, #0
  cc:	1affffdd 	bne	48 <pico8::btnp(pico8::Button, unsigned char)+0x48>
  d0:	e3a00006 	mov	r0, #6
  d4:	eaffffd1 	b	20 <pico8::btnp(pico8::Button, unsigned char)+0x20>
  d8:	e3a00001 	mov	r0, #1
  dc:	e8bd8010 	pop	{r4, pc}
  e0:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico84btnrENS_6ButtonEh:

00000000 <pico8::btnr(pico8::Button, unsigned char)>:
   0:	e3510000 	cmp	r1, #0
   4:	059f300c 	ldreq	r3, [pc, #12]	; 18 <pico8::btnr(pico8::Button, unsigned char)+0x18>
   8:	00833100 	addeq	r3, r3, r0, lsl #2
   c:	05930044 	ldreq	r0, [r3, #68]	; 0x44
  10:	13a00000 	movne	r0, #0
  14:	e1a0f00e 	mov	pc, lr
  18:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico84statEi:

00000000 <pico8::stat(int)>:
   0:	e3500022 	cmp	r0, #34	; 0x22
   4:	0a000018 	beq	6c <pico8::stat(int)+0x6c>
   8:	ca000008 	bgt	30 <pico8::stat(int)+0x30>
   c:	e3500020 	cmp	r0, #32
  10:	0a000010 	beq	58 <pico8::stat(int)+0x58>
  14:	e3500021 	cmp	r0, #33	; 0x21
  18:	1a00000c 	bne	50 <pico8::stat(int)+0x50>
  1c:	e59f3054 	ldr	r3, [pc, #84]	; 78 <pico8::stat(int)+0x78>
  20:	e5930004 	ldr	r0, [r3, #4]
  24:	e1a00400 	lsl	r0, r0, #8
  28:	e1a00640 	asr	r0, r0, #12
  2c:	e1a0f00e 	mov	pc, lr
  30:	e3500ffa 	cmp	r0, #1000	; 0x3e8
  34:	1a000005 	bne	50 <pico8::stat(int)+0x50>
  38:	e59f303c 	ldr	r3, [pc, #60]	; 7c <pico8::stat(int)+0x7c>
  3c:	e5930008 	ldr	r0, [r3, #8]
  40:	e5933000 	ldr	r3, [r3]
  44:	e0400003 	sub	r0, r0, r3
  48:	e1a00140 	asr	r0, r0, #2
  4c:	e1a0f00e 	mov	pc, lr
  50:	e3a00000 	mov	r0, #0
  54:	e1a0f00e 	mov	pc, lr
  58:	e59f3018 	ldr	r3, [pc, #24]	; 78 <pico8::stat(int)+0x78>
  5c:	e5930000 	ldr	r0, [r3]
  60:	e1a00400 	lsl	r0, r0, #8
  64:	e1a00640 	asr	r0, r0, #12
  68:	e1a0f00e 	mov	pc, lr
  6c:	e59f3004 	ldr	r3, [pc, #4]	; 78 <pico8::stat(int)+0x78>
  70:	e1d300b8 	ldrh	r0, [r3, #8]
  74:	e1a0f00e 	mov	pc, lr
	...

Disassembly of section .text._ZN5pico86mousexEv:

00000000 <pico8::mousex()>:
   0:	e59f300c 	ldr	r3, [pc, #12]	; 14 <pico8::mousex()+0x14>
   4:	e5930000 	ldr	r0, [r3]
   8:	e1a00400 	lsl	r0, r0, #8
   c:	e1a00240 	asr	r0, r0, #4
  10:	e1a0f00e 	mov	pc, lr
  14:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico86mouseyEv:

00000000 <pico8::mousey()>:
   0:	e59f300c 	ldr	r3, [pc, #12]	; 14 <pico8::mousey()+0x14>
   4:	e5930004 	ldr	r0, [r3, #4]
   8:	e1a00400 	lsl	r0, r0, #8
   c:	e1a00240 	asr	r0, r0, #4
  10:	e1a0f00e 	mov	pc, lr
  14:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico811mousestatusEv:

00000000 <pico8::mousestatus()>:
   0:	e59f3004 	ldr	r3, [pc, #4]	; c <pico8::mousestatus()+0xc>
   4:	e1d300b8 	ldrh	r0, [r3, #8]
   8:	e1a0f00e 	mov	pc, lr
   c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico83absEN3fpm5fixedIlxLj8EEE:

00000000 <pico8::abs(fpm::fixed<long, long long, 8u>)>:
   0:	e3500000 	cmp	r0, #0
   4:	b2600000 	rsblt	r0, r0, #0
   8:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN5pico83flrEN3fpm5fixedIlxLj8EEE:

00000000 <pico8::flr(fpm::fixed<long, long long, 8u>)>:
   0:	e2503000 	subs	r3, r0, #0
   4:	b24330ff 	sublt	r3, r3, #255	; 0xff
   8:	e3530000 	cmp	r3, #0
   c:	e28300ff 	add	r0, r3, #255	; 0xff
  10:	a1a00003 	movge	r0, r3
  14:	e3c000ff 	bic	r0, r0, #255	; 0xff
  18:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN5pico83celEN3fpm5fixedIlxLj8EEE:

00000000 <pico8::cel(fpm::fixed<long, long long, 8u>)>:
   0:	e2503000 	subs	r3, r0, #0
   4:	c28330ff 	addgt	r3, r3, #255	; 0xff
   8:	e3530000 	cmp	r3, #0
   c:	e28300ff 	add	r0, r3, #255	; 0xff
  10:	a1a00003 	movge	r0, r3
  14:	e3c000ff 	bic	r0, r0, #255	; 0xff
  18:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN5pico83maxEN3fpm5fixedIlxLj8EEES2_:

00000000 <pico8::max(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e1500001 	cmp	r0, r1
   4:	b1a00001 	movlt	r0, r1
   8:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN5pico83minEN3fpm5fixedIlxLj8EEES2_:

00000000 <pico8::min(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e1500001 	cmp	r0, r1
   4:	a1a00001 	movge	r0, r1
   8:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN5pico83midEN3fpm5fixedIlxLj8EEES2_S2_:

00000000 <pico8::mid(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e1510000 	cmp	r1, r0
   4:	b1a03001 	movlt	r3, r1
   8:	b1a01000 	movlt	r1, r0
   c:	a1a03000 	movge	r3, r0
  10:	e1520001 	cmp	r2, r1
  14:	a1a02001 	movge	r2, r1
  18:	e1520003 	cmp	r2, r3
  1c:	a1a00002 	movge	r0, r2
  20:	b1a00003 	movlt	r0, r3
  24:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN5pico83sgnEN3fpm5fixedIlxLj8EEE:

00000000 <pico8::sgn(fpm::fixed<long, long long, 8u>)>:
   0:	e3500000 	cmp	r0, #0
   4:	da000001 	ble	10 <pico8::sgn(fpm::fixed<long, long long, 8u>)+0x10>
   8:	e3a00c01 	mov	r0, #256	; 0x100
   c:	e1a0f00e 	mov	pc, lr
  10:	0afffffc 	beq	8 <pico8::sgn(fpm::fixed<long, long long, 8u>)+0x8>
  14:	e3e000ff 	mvn	r0, #255	; 0xff
  18:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN5pico84sqrtEN3fpm5fixedIlxLj8EEE:

00000000 <pico8::sqrt(fpm::fixed<long, long long, 8u>)>:
   0:	e3500000 	cmp	r0, #0
   4:	ba000028 	blt	ac <pico8::sqrt(fpm::fixed<long, long long, 8u>)+0xac>
   8:	01a0f00e 	moveq	pc, lr
   c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  10:	e1a01fc0 	asr	r1, r0, #31
  14:	e1a04c40 	asr	r4, r0, #24
  18:	e1a05400 	lsl	r5, r0, #8
  1c:	ebfffffe 	bl	0 <__clzdi2>
  20:	e3a03000 	mov	r3, #0
  24:	e3a02001 	mov	r2, #1
  28:	e1a06003 	mov	r6, r3
  2c:	e2601047 	rsb	r1, r0, #71	; 0x47
  30:	e3c11001 	bic	r1, r1, #1
  34:	e2410020 	sub	r0, r1, #32
  38:	e1a00012 	lsl	r0, r2, r0
  3c:	e261c020 	rsb	r12, r1, #32
  40:	e1800c32 	orr	r0, r0, r2, lsr r12
  44:	e1a02112 	lsl	r2, r2, r1
  48:	e0931002 	adds	r1, r3, r2
  4c:	e0a0c006 	adc	r12, r0, r6
  50:	e1550001 	cmp	r5, r1
  54:	e1a030a3 	lsr	r3, r3, #1
  58:	e0d4700c 	sbcs	r7, r4, r12
  5c:	e1833f86 	orr	r3, r3, r6, lsl #31
  60:	e1a0e122 	lsr	lr, r2, #2
  64:	e1a060c6 	asr	r6, r6, #1
  68:	ba000005 	blt	84 <pico8::sqrt(fpm::fixed<long, long long, 8u>)+0x84>
  6c:	e0551001 	subs	r1, r5, r1
  70:	e0c4400c 	sbc	r4, r4, r12
  74:	e0932002 	adds	r2, r3, r2
  78:	e1a05001 	mov	r5, r1
  7c:	e1a03002 	mov	r3, r2
  80:	e0a06006 	adc	r6, r0, r6
  84:	e18e2f00 	orr	r2, lr, r0, lsl #30
  88:	e1a00140 	asr	r0, r0, #2
  8c:	e1921000 	orrs	r1, r2, r0
  90:	1affffec 	bne	48 <pico8::sqrt(fpm::fixed<long, long long, 8u>)+0x48>
  94:	e1530005 	cmp	r3, r5
  98:	e0d66004 	sbcs	r6, r6, r4
  9c:	aa000000 	bge	a4 <pico8::sqrt(fpm::fixed<long, long long, 8u>)+0xa4>
  a0:	e2933001 	adds	r3, r3, #1
  a4:	e1a00003 	mov	r0, r3
  a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  ac:	e3a00000 	mov	r0, #0
  b0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN5pico84rnduEv:

00000000 <pico8::rndu()>:
   0:	e59f3014 	ldr	r3, [pc, #20]	; 1c <pico8::rndu()+0x1c>
   4:	e5930000 	ldr	r0, [r3]
   8:	e0200680 	eor	r0, r0, r0, lsl #13
   c:	e02008a0 	eor	r0, r0, r0, lsr #17
  10:	e0200280 	eor	r0, r0, r0, lsl #5
  14:	e5830000 	str	r0, [r3]
  18:	e1a0f00e 	mov	pc, lr
  1c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico83rndEN3fpm5fixedIlxLj8EEE:

00000000 <pico8::rnd(fpm::fixed<long, long long, 8u>)>:
   0:	e3500001 	cmp	r0, #1
   4:	ca000001 	bgt	10 <pico8::rnd(fpm::fixed<long, long long, 8u>)+0x10>
   8:	e3a00000 	mov	r0, #0
   c:	e1a0f00e 	mov	pc, lr
  10:	e59f3020 	ldr	r3, [pc, #32]	; 38 <pico8::rnd(fpm::fixed<long, long long, 8u>)+0x38>
  14:	e1a01000 	mov	r1, r0
  18:	e5930000 	ldr	r0, [r3]
  1c:	e92d4010 	push	{r4, lr}
  20:	e0200680 	eor	r0, r0, r0, lsl #13
  24:	e02008a0 	eor	r0, r0, r0, lsr #17
  28:	e0200280 	eor	r0, r0, r0, lsl #5
  2c:	e5830000 	str	r0, [r3]
  30:	ebfffffe 	bl	0 <qmod(unsigned long, unsigned long)>
  34:	e8bd8010 	pop	{r4, pc}
  38:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico84rndiEN3fpm5fixedIlxLj8EEE:

00000000 <pico8::rndi(fpm::fixed<long, long long, 8u>)>:
   0:	e3500c01 	cmp	r0, #256	; 0x100
   4:	ca000001 	bgt	10 <pico8::rndi(fpm::fixed<long, long long, 8u>)+0x10>
   8:	e3a00000 	mov	r0, #0
   c:	e1a0f00e 	mov	pc, lr
  10:	e59f2028 	ldr	r2, [pc, #40]	; 40 <pico8::rndi(fpm::fixed<long, long long, 8u>)+0x40>
  14:	e92d4010 	push	{r4, lr}
  18:	e5923000 	ldr	r3, [r2]
  1c:	e1a01440 	asr	r1, r0, #8
  20:	e0233683 	eor	r3, r3, r3, lsl #13
  24:	e02338a3 	eor	r3, r3, r3, lsr #17
  28:	e0233283 	eor	r3, r3, r3, lsl #5
  2c:	e1a000a3 	lsr	r0, r3, #1
  30:	e5823000 	str	r3, [r2]
  34:	ebfffffe 	bl	0 <qmod(unsigned long, unsigned long)>
  38:	e1a00400 	lsl	r0, r0, #8
  3c:	e8bd8010 	pop	{r4, pc}
  40:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico84rndfEN3fpm5fixedIlxLj8EEES2_:

00000000 <pico8::rndf(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e1500001 	cmp	r0, r1
   4:	d1a03001 	movle	r3, r1
   8:	c1a03000 	movgt	r3, r0
   c:	e92d4010 	push	{r4, lr}
  10:	c1a04001 	movgt	r4, r1
  14:	d1a04000 	movle	r4, r0
  18:	e1a02fc3 	asr	r2, r3, #31
  1c:	e2933001 	adds	r3, r3, #1
  20:	e2a22000 	adc	r2, r2, #0
  24:	e0531004 	subs	r1, r3, r4
  28:	e0c23fc4 	sbc	r3, r2, r4, asr #31
  2c:	e59f2038 	ldr	r2, [pc, #56]	; 6c <pico8::rndf(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x6c>
  30:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
  34:	e2d33000 	sbcs	r3, r3, #0
  38:	e5923000 	ldr	r3, [r2]
  3c:	e0233683 	eor	r3, r3, r3, lsl #13
  40:	e02338a3 	eor	r3, r3, r3, lsr #17
  44:	e0233283 	eor	r3, r3, r3, lsl #5
  48:	3a000002 	bcc	58 <pico8::rndf(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x58>
  4c:	e5823000 	str	r3, [r2]
  50:	e08400a3 	add	r0, r4, r3, lsr #1
  54:	e8bd8010 	pop	{r4, pc}
  58:	e1a000a3 	lsr	r0, r3, #1
  5c:	e5823000 	str	r3, [r2]
  60:	ebfffffe 	bl	0 <qmod(unsigned long, unsigned long)>
  64:	e0840000 	add	r0, r4, r0
  68:	e8bd8010 	pop	{r4, pc}
  6c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico85srandEm:

00000000 <pico8::srand(unsigned long)>:
   0:	e59f3004 	ldr	r3, [pc, #4]	; c <pico8::srand(unsigned long)+0xc>
   4:	e5830000 	str	r0, [r3]
   8:	e1a0f00e 	mov	pc, lr
   c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico84reswEv:

00000000 <pico8::resw()>:
   0:	e59f3008 	ldr	r3, [pc, #8]	; 10 <pico8::resw()+0x10>
   4:	e5930000 	ldr	r0, [r3]
   8:	e1a00400 	lsl	r0, r0, #8
   c:	e1a0f00e 	mov	pc, lr
  10:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico84reshEv:

00000000 <pico8::resh()>:
   0:	e59f3008 	ldr	r3, [pc, #8]	; 10 <pico8::resh()+0x10>
   4:	e5930000 	ldr	r0, [r3]
   8:	e1a00400 	lsl	r0, r0, #8
   c:	e1a0f00e 	mov	pc, lr
  10:	00000000 	.word	0x00000000

Disassembly of section .text._ZN5pico84sgetEhhh:

00000000 <pico8::sget(unsigned char, unsigned char, unsigned char)>:
   0:	e352000d 	cmp	r2, #13
   4:	8a00000c 	bhi	3c <pico8::sget(unsigned char, unsigned char, unsigned char)+0x3c>
   8:	e1803001 	orr	r3, r0, r1
   c:	e3130080 	tst	r3, #128	; 0x80
  10:	1a000009 	bne	3c <pico8::sget(unsigned char, unsigned char, unsigned char)+0x3c>
  14:	e59f3044 	ldr	r3, [pc, #68]	; 60 <pico8::sget(unsigned char, unsigned char, unsigned char)+0x60>
  18:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1c:	e3530000 	cmp	r3, #0
  20:	0a00000c 	beq	58 <pico8::sget(unsigned char, unsigned char, unsigned char)+0x58>
  24:	e0831301 	add	r1, r3, r1, lsl #6
  28:	e3100001 	tst	r0, #1
  2c:	e7d100a0 	ldrb	r0, [r1, r0, lsr #1]
  30:	1200000f 	andne	r0, r0, #15
  34:	01a00220 	lsreq	r0, r0, #4
  38:	e1a0f00e 	mov	pc, lr
  3c:	e59f3020 	ldr	r3, [pc, #32]	; 64 <pico8::sget(unsigned char, unsigned char, unsigned char)+0x64>
  40:	e5d30000 	ldrb	r0, [r3]
  44:	e3500000 	cmp	r0, #0
  48:	1a000002 	bne	58 <pico8::sget(unsigned char, unsigned char, unsigned char)+0x58>
  4c:	e3a02002 	mov	r2, #2
  50:	e5c32000 	strb	r2, [r3]
  54:	e1a0f00e 	mov	pc, lr
  58:	e3a00000 	mov	r0, #0
  5c:	e1a0f00e 	mov	pc, lr
	...

Disassembly of section .text._ZN3fpm3sinIlxLj8EEENS_5fixedIT_T0_XT1_EEES4_:

00000000 <fpm::fixed<long, long long, 8u> fpm::sin<long, long long, 8u>(fpm::fixed<long, long long, 8u>)>:
   0:	e59f1134 	ldr	r1, [pc, #308]	; 13c <fpm::fixed<long, long long, 8u> fpm::sin<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0x13c>
   4:	e92d4010 	push	{r4, lr}
   8:	e0c1c190 	smull	r12, r1, r0, r1
   c:	e1a0cfc0 	asr	r12, r0, #31
  10:	e06cc241 	rsb	r12, r12, r1, asr #4
  14:	e08c128c 	add	r1, r12, r12, lsl #5
  18:	e08cc081 	add	r12, r12, r1, lsl #1
  1c:	e06cc10c 	rsb	r12, r12, r12, lsl #2
  20:	e040c18c 	sub	r12, r0, r12, lsl #3
  24:	e1a01fcc 	asr	r1, r12, #31
  28:	e1a01481 	lsl	r1, r1, #9
  2c:	e3a03000 	mov	r3, #0
  30:	e59f2108 	ldr	r2, [pc, #264]	; 140 <fpm::fixed<long, long long, 8u> fpm::sin<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0x140>
  34:	e1a0048c 	lsl	r0, r12, #9
  38:	e1811bac 	orr	r1, r1, r12, lsr #23
  3c:	ebfffffe 	bl	0 <__aeabi_ldivmod>
  40:	e1a03fa1 	lsr	r3, r1, #31
  44:	e1a0cfc1 	asr	r12, r1, #31
  48:	e0933000 	adds	r3, r3, r0
  4c:	e0200fc1 	eor	r0, r0, r1, asr #31
  50:	e2a11000 	adc	r1, r1, #0
  54:	e050200c 	subs	r2, r0, r12
  58:	e2022001 	and	r2, r2, #1
  5c:	e022200c 	eor	r2, r2, r12
  60:	e1a030a3 	lsr	r3, r3, #1
  64:	e1833f81 	orr	r3, r3, r1, lsl #31
  68:	e052200c 	subs	r2, r2, r12
  6c:	e0933002 	adds	r3, r3, r2
  70:	42833b01 	addmi	r3, r3, #1024	; 0x400
  74:	e3530c02 	cmp	r3, #512	; 0x200
  78:	c3e01000 	mvngt	r1, #0
  7c:	d3a01001 	movle	r1, #1
  80:	c2433c02 	subgt	r3, r3, #512	; 0x200
  84:	e3530c01 	cmp	r3, #256	; 0x100
  88:	c2633c02 	rsbgt	r3, r3, #512	; 0x200
  8c:	e0c02393 	smull	r2, r0, r3, r3
  90:	e0010193 	mul	r1, r3, r1
  94:	e1a03422 	lsr	r3, r2, #8
  98:	e1833c00 	orr	r3, r3, r0, lsl #24
  9c:	e3a00024 	mov	r0, #36	; 0x24
  a0:	e1a0cc02 	lsl	r12, r2, #24
  a4:	e0833fac 	add	r3, r3, r12, lsr #31
  a8:	e08c2093 	umull	r2, r12, r3, r0
  ac:	e1a00c02 	lsl	r0, r2, #24
  b0:	e1a02422 	lsr	r2, r2, #8
  b4:	e1822c0c 	orr	r2, r2, r12, lsl #24
  b8:	e0822fa0 	add	r2, r2, r0, lsr #31
  bc:	e2622f52 	rsb	r2, r2, #328	; 0x148
  c0:	e08c0392 	umull	r0, r12, r2, r3
  c4:	e1a0efc2 	asr	lr, r2, #31
  c8:	e022ce93 	mla	r2, r3, lr, r12
  cc:	e1a03420 	lsr	r3, r0, #8
  d0:	e1833c02 	orr	r3, r3, r2, lsl #24
  d4:	e1a00c00 	lsl	r0, r0, #24
  d8:	e0833fa0 	add	r3, r3, r0, lsr #31
  dc:	e2633fc9 	rsb	r3, r3, #804	; 0x324
  e0:	e0c20193 	smull	r0, r2, r3, r1
  e4:	e1a03fc2 	asr	r3, r2, #31
  e8:	e203307f 	and	r3, r3, #127	; 0x7f
  ec:	e0933000 	adds	r3, r3, r0
  f0:	e2a22000 	adc	r2, r2, #0
  f4:	e1a033a3 	lsr	r3, r3, #7
  f8:	e1833c82 	orr	r3, r3, r2, lsl #25
  fc:	e1a00fa2 	lsr	r0, r2, #31
 100:	e1a01fc2 	asr	r1, r2, #31
 104:	e0900003 	adds	r0, r0, r3
 108:	e1a0c3c2 	asr	r12, r2, #7
 10c:	e0233fc2 	eor	r3, r3, r2, asr #31
 110:	e2ac2000 	adc	r2, r12, #0
 114:	e0533001 	subs	r3, r3, r1
 118:	e2033001 	and	r3, r3, #1
 11c:	e0233001 	eor	r3, r3, r1
 120:	e1a000a0 	lsr	r0, r0, #1
 124:	e1800f82 	orr	r0, r0, r2, lsl #31
 128:	e0533001 	subs	r3, r3, r1
 12c:	e0800003 	add	r0, r0, r3
 130:	e0800fa0 	add	r0, r0, r0, lsr #31
 134:	e1a000c0 	asr	r0, r0, #1
 138:	e8bd8010 	pop	{r4, pc}
 13c:	028c1979 	.word	0x028c1979
 140:	00000192 	.word	0x00000192

Disassembly of section .text._ZN5pico83cosEN3fpm5fixedIlxLj8EEE:

00000000 <pico8::cos(fpm::fixed<long, long long, 8u>)>:
   0:	e2800e19 	add	r0, r0, #400	; 0x190
   4:	e92d4010 	push	{r4, lr}
   8:	e2800002 	add	r0, r0, #2
   c:	ebfffffe 	bl	0 <pico8::cos(fpm::fixed<long, long long, 8u>)>
  10:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZN5pico83sinEN3fpm5fixedIlxLj8EEE:

00000000 <pico8::sin(fpm::fixed<long, long long, 8u>)>:
   0:	e92d4010 	push	{r4, lr}
   4:	ebfffffe 	bl	0 <pico8::sin(fpm::fixed<long, long long, 8u>)>
   8:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZN3fpm6detail14atan_sanitizedIlxLj8EEENS_5fixedIT_T0_XT1_EEES5_:

00000000 <fpm::fixed<long, long long, 8u> fpm::detail::atan_sanitized<long, long long, 8u>(fpm::fixed<long, long long, 8u>)>:
   0:	e3500c01 	cmp	r0, #256	; 0x100
   4:	e92d4010 	push	{r4, lr}
   8:	8a000028 	bhi	b0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_sanitized<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0xb0>
   c:	e3a02014 	mov	r2, #20
  10:	e0cc3090 	smull	r3, r12, r0, r0
  14:	e1a01423 	lsr	r1, r3, #8
  18:	e1811c0c 	orr	r1, r1, r12, lsl #24
  1c:	e1a03c03 	lsl	r3, r3, #24
  20:	e0811fa3 	add	r1, r1, r3, lsr #31
  24:	e08c3291 	umull	r3, r12, r1, r2
  28:	e1a02c03 	lsl	r2, r3, #24
  2c:	e1a03423 	lsr	r3, r3, #8
  30:	e1833c0c 	orr	r3, r3, r12, lsl #24
  34:	e0833fa2 	add	r3, r3, r2, lsr #31
  38:	e243304a 	sub	r3, r3, #74	; 0x4a
  3c:	e082c193 	umull	r12, r2, r3, r1
  40:	e1a0efc3 	asr	lr, r3, #31
  44:	e0222e91 	mla	r2, r1, lr, r2
  48:	e1a03fc2 	asr	r3, r2, #31
  4c:	e203307f 	and	r3, r3, #127	; 0x7f
  50:	e093300c 	adds	r3, r3, r12
  54:	e2a22000 	adc	r2, r2, #0
  58:	e1a033a3 	lsr	r3, r3, #7
  5c:	e1833c82 	orr	r3, r3, r2, lsl #25
  60:	e1a01fa2 	lsr	r1, r2, #31
  64:	e0911003 	adds	r1, r1, r3
  68:	e1a0c3c2 	asr	r12, r2, #7
  6c:	e0233fc2 	eor	r3, r3, r2, asr #31
  70:	e1a02fc2 	asr	r2, r2, #31
  74:	e2acc000 	adc	r12, r12, #0
  78:	e0533002 	subs	r3, r3, r2
  7c:	e2033001 	and	r3, r3, #1
  80:	e0233002 	eor	r3, r3, r2
  84:	e1a010a1 	lsr	r1, r1, #1
  88:	e0533002 	subs	r3, r3, r2
  8c:	e1811f8c 	orr	r1, r1, r12, lsl #31
  90:	e0811003 	add	r1, r1, r3
  94:	e28110ff 	add	r1, r1, #255	; 0xff
  98:	e0c23091 	smull	r3, r2, r1, r0
  9c:	e1a00423 	lsr	r0, r3, #8
  a0:	e1800c02 	orr	r0, r0, r2, lsl #24
  a4:	e1a03c03 	lsl	r3, r3, #24
  a8:	e0800fa3 	add	r0, r0, r3, lsr #31
  ac:	e8bd8010 	pop	{r4, pc}
  b0:	e59f300c 	ldr	r3, [pc, #12]	; c4 <fpm::fixed<long, long long, 8u> fpm::detail::atan_sanitized<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0xc4>
  b4:	e59f200c 	ldr	r2, [pc, #12]	; c8 <fpm::fixed<long, long long, 8u> fpm::detail::atan_sanitized<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0xc8>
  b8:	e59f100c 	ldr	r1, [pc, #12]	; cc <fpm::fixed<long, long long, 8u> fpm::detail::atan_sanitized<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0xcc>
  bc:	e59f000c 	ldr	r0, [pc, #12]	; d0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_sanitized<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0xd0>
  c0:	ebfffffe 	bl	0 <__assert_func>
  c4:	00000000 	.word	0x00000000
  c8:	00000020 	.word	0x00000020
  cc:	0000024a 	.word	0x0000024a
  d0:	000000a0 	.word	0x000000a0

Disassembly of section .text._ZN3fpm6detail8atan_divIlxLj8EEENS_5fixedIT_T0_XT1_EEES5_S5_:

00000000 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e251c000 	subs	r12, r1, #0
   4:	e92d4010 	push	{r4, lr}
   8:	0a00002f 	beq	cc <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0xcc>
   c:	e3500000 	cmp	r0, #0
  10:	ba000012 	blt	60 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x60>
  14:	e35c0000 	cmp	r12, #0
  18:	ba000023 	blt	ac <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0xac>
  1c:	e15c0000 	cmp	r12, r0
  20:	aa000014 	bge	78 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x78>
  24:	e1a01fcc 	asr	r1, r12, #31
  28:	e1a01481 	lsl	r1, r1, #9
  2c:	e1a02000 	mov	r2, r0
  30:	e1a03fc0 	asr	r3, r0, #31
  34:	e1811bac 	orr	r1, r1, r12, lsr #23
  38:	e1a0048c 	lsl	r0, r12, #9
  3c:	ebfffffe 	bl	0 <__aeabi_ldivmod>
  40:	e1a030a0 	lsr	r3, r0, #1
  44:	e1833f81 	orr	r3, r3, r1, lsl #31
  48:	e2000001 	and	r0, r0, #1
  4c:	e0830000 	add	r0, r3, r0
  50:	ebfffffe 	bl	0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  54:	e2600e19 	rsb	r0, r0, #400	; 0x190
  58:	e2800002 	add	r0, r0, #2
  5c:	e8bd8010 	pop	{r4, pc}
  60:	e35c0000 	cmp	r12, #0
  64:	ba000014 	blt	bc <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0xbc>
  68:	e2600000 	rsb	r0, r0, #0
  6c:	ebfffffe 	bl	0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  70:	e2600000 	rsb	r0, r0, #0
  74:	e8bd8010 	pop	{r4, pc}
  78:	e1a01fc0 	asr	r1, r0, #31
  7c:	e1a01481 	lsl	r1, r1, #9
  80:	e1a03fcc 	asr	r3, r12, #31
  84:	e1a0200c 	mov	r2, r12
  88:	e1811ba0 	orr	r1, r1, r0, lsr #23
  8c:	e1a00480 	lsl	r0, r0, #9
  90:	ebfffffe 	bl	0 <__aeabi_ldivmod>
  94:	e1a030a0 	lsr	r3, r0, #1
  98:	e1833f81 	orr	r3, r3, r1, lsl #31
  9c:	e2000001 	and	r0, r0, #1
  a0:	e0830000 	add	r0, r3, r0
  a4:	ebfffffe 	bl	0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  a8:	e8bd8010 	pop	{r4, pc}
  ac:	e26c1000 	rsb	r1, r12, #0
  b0:	ebfffffe 	bl	0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  b4:	e2600000 	rsb	r0, r0, #0
  b8:	e8bd8010 	pop	{r4, pc}
  bc:	e26c1000 	rsb	r1, r12, #0
  c0:	e2600000 	rsb	r0, r0, #0
  c4:	ebfffffe 	bl	0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  c8:	e8bd8010 	pop	{r4, pc}
  cc:	e59f300c 	ldr	r3, [pc, #12]	; e0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0xe0>
  d0:	e59f200c 	ldr	r2, [pc, #12]	; e4 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0xe4>
  d4:	e59f100c 	ldr	r1, [pc, #12]	; e8 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0xe8>
  d8:	e59f000c 	ldr	r0, [pc, #12]	; ec <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0xec>
  dc:	ebfffffe 	bl	0 <__assert_func>
  e0:	00000000 	.word	0x00000000
  e4:	00000010 	.word	0x00000010
  e8:	0000025e 	.word	0x0000025e
  ec:	000000a0 	.word	0x000000a0

Disassembly of section .text._ZN5pico85atan2EN3fpm5fixedIlxLj8EEES2_:

00000000 <pico8::atan2(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e2515000 	subs	r5, r1, #0
   8:	e1a04000 	mov	r4, r0
   c:	0a000005 	beq	28 <pico8::atan2(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x28>
  10:	ebfffffe 	bl	0 <pico8::atan2(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  14:	e3550000 	cmp	r5, #0
  18:	a1a04000 	movge	r4, r0
  1c:	ba000008 	blt	44 <pico8::atan2(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x44>
  20:	e1a00004 	mov	r0, r4
  24:	e8bd8070 	pop	{r4, r5, r6, pc}
  28:	e3500000 	cmp	r0, #0
  2c:	0afffffb 	beq	20 <pico8::atan2(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x20>
  30:	c59f4020 	ldrgt	r4, [pc, #32]	; 58 <pico8::atan2(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x58>
  34:	cafffff9 	bgt	20 <pico8::atan2(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x20>
  38:	e59f401c 	ldr	r4, [pc, #28]	; 5c <pico8::atan2(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x5c>
  3c:	e1a00004 	mov	r0, r4
  40:	e8bd8070 	pop	{r4, r5, r6, pc}
  44:	e3540000 	cmp	r4, #0
  48:	a2804fc9 	addge	r4, r0, #804	; 0x324
  4c:	b2404fc9 	sublt	r4, r0, #804	; 0x324
  50:	e1a00004 	mov	r0, r4
  54:	e8bd8070 	pop	{r4, r5, r6, pc}
  58:	00000192 	.word	0x00000192
  5c:	fffffe6e 	.word	0xfffffe6e

Disassembly of section .text.startup._GLOBAL__sub_I__ZN5pico86seterrENS_5ErrorE:

00000000 <_GLOBAL__sub_I__ZN5pico86seterrENS_5ErrorE>:
   0:	e3a02000 	mov	r2, #0
   4:	e59f306c 	ldr	r3, [pc, #108]	; 78 <_GLOBAL__sub_I__ZN5pico86seterrENS_5ErrorE+0x78>
   8:	e59f106c 	ldr	r1, [pc, #108]	; 7c <_GLOBAL__sub_I__ZN5pico86seterrENS_5ErrorE+0x7c>
   c:	e92d4010 	push	{r4, lr}
  10:	e59fc068 	ldr	r12, [pc, #104]	; 80 <_GLOBAL__sub_I__ZN5pico86seterrENS_5ErrorE+0x80>
  14:	e59f0068 	ldr	r0, [pc, #104]	; 84 <_GLOBAL__sub_I__ZN5pico86seterrENS_5ErrorE+0x84>
  18:	e5831000 	str	r1, [r3]
  1c:	e59f3064 	ldr	r3, [pc, #100]	; 88 <_GLOBAL__sub_I__ZN5pico86seterrENS_5ErrorE+0x88>
  20:	e58c2000 	str	r2, [r12]
  24:	e2831050 	add	r1, r3, #80	; 0x50
  28:	e58c2004 	str	r2, [r12, #4]
  2c:	e5802000 	str	r2, [r0]
  30:	e5802004 	str	r2, [r0, #4]
  34:	e5832000 	str	r2, [r3]
  38:	e5832004 	str	r2, [r3, #4]
  3c:	e5832008 	str	r2, [r3, #8]
  40:	e583200c 	str	r2, [r3, #12]
  44:	e5832010 	str	r2, [r3, #16]
  48:	e2833014 	add	r3, r3, #20
  4c:	e1510003 	cmp	r1, r3
  50:	1afffff7 	bne	34 <_GLOBAL__sub_I__ZN5pico86seterrENS_5ErrorE+0x34>
  54:	e59f2030 	ldr	r2, [pc, #48]	; 8c <_GLOBAL__sub_I__ZN5pico86seterrENS_5ErrorE+0x8c>
  58:	e59f1030 	ldr	r1, [pc, #48]	; 90 <_GLOBAL__sub_I__ZN5pico86seterrENS_5ErrorE+0x90>
  5c:	e3a00000 	mov	r0, #0
  60:	ebfffffe 	bl	0 <__aeabi_atexit>
  64:	e8bd4010 	pop	{r4, lr}
  68:	e59f201c 	ldr	r2, [pc, #28]	; 8c <_GLOBAL__sub_I__ZN5pico86seterrENS_5ErrorE+0x8c>
  6c:	e59f1020 	ldr	r1, [pc, #32]	; 94 <_GLOBAL__sub_I__ZN5pico86seterrENS_5ErrorE+0x94>
  70:	e59f0020 	ldr	r0, [pc, #32]	; 98 <_GLOBAL__sub_I__ZN5pico86seterrENS_5ErrorE+0x98>
  74:	eafffffe 	b	0 <__aeabi_atexit>
  78:	00000000 	.word	0x00000000
  7c:	a5a5a5a5 	.word	0xa5a5a5a5
	...

pipe.o:     file format elf32-littlearm


Disassembly of section .text._ZN4Pipe5CPipe7vOnPushEh:

00000000 <Pipe::CPipe::vOnPush(unsigned char)>:
   0:	e3a00000 	mov	r0, #0
   4:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN4Pipe5CPipe6vOnPopERh:

00000000 <Pipe::CPipe::vOnPop(unsigned char&)>:
   0:	e3a00000 	mov	r0, #0
   4:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN4Pipe9CNullPipeD2Ev:

00000000 <Pipe::CNullPipe::~CNullPipe()>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN4Pipe9CNullPipeD0Ev:

00000000 <Pipe::CNullPipe::~CNullPipe()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e3a0100c 	mov	r1, #12
   c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  10:	e1a00004 	mov	r0, r4
  14:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZN4Pipe9CNullPipeC2Ev:

00000000 <Pipe::CNullPipe::CNullPipe()>:
   0:	e3a02000 	mov	r2, #0
   4:	e59f100c 	ldr	r1, [pc, #12]	; 18 <Pipe::CNullPipe::CNullPipe()+0x18>
   8:	e5802004 	str	r2, [r0, #4]
   c:	e5802008 	str	r2, [r0, #8]
  10:	e5801000 	str	r1, [r0]
  14:	e1a0f00e 	mov	pc, lr
  18:	00000008 	.word	0x00000008

Disassembly of section .text._ZN4Pipe14CMemBufferPipe4DumpEv:

00000000 <Pipe::CMemBufferPipe::Dump()>:
   0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   4:	e590300c 	ldr	r3, [r0, #12]
   8:	e5906010 	ldr	r6, [r0, #16]
   c:	e1560003 	cmp	r6, r3
  10:	0a000016 	beq	70 <Pipe::CMemBufferPipe::Dump()+0x70>
  14:	e1a04003 	mov	r4, r3
  18:	e5d31000 	ldrb	r1, [r3]
  1c:	e59f0050 	ldr	r0, [pc, #80]	; 74 <Pipe::CMemBufferPipe::Dump()+0x74>
  20:	ebfffffe 	bl	0 <printf>
  24:	e59f8048 	ldr	r8, [pc, #72]	; 74 <Pipe::CMemBufferPipe::Dump()+0x74>
  28:	e59f9048 	ldr	r9, [pc, #72]	; 78 <Pipe::CMemBufferPipe::Dump()+0x78>
  2c:	e2466001 	sub	r6, r6, #1
  30:	e2647001 	rsb	r7, r4, #1
  34:	e1560004 	cmp	r6, r4
  38:	e0875004 	add	r5, r7, r4
  3c:	0a00000a 	beq	6c <Pipe::CMemBufferPipe::Dump()+0x6c>
  40:	e1a00008 	mov	r0, r8
  44:	e5f41001 	ldrb	r1, [r4, #1]!
  48:	e205500f 	and	r5, r5, #15
  4c:	ebfffffe 	bl	0 <printf>
  50:	e355000f 	cmp	r5, #15
  54:	1afffff6 	bne	34 <Pipe::CMemBufferPipe::Dump()+0x34>
  58:	e1a00009 	mov	r0, r9
  5c:	ebfffffe 	bl	0 <printf>
  60:	e1560004 	cmp	r6, r4
  64:	e0875004 	add	r5, r7, r4
  68:	1afffff4 	bne	40 <Pipe::CMemBufferPipe::Dump()+0x40>
  6c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  70:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  74:	00000000 	.word	0x00000000
  78:	00000008 	.word	0x00000008

Disassembly of section .text._ZN4Pipe4MoveESt10shared_ptrINS_5CPipeEES2_:

00000000 <Pipe::Move(std::shared_ptr<Pipe::CPipe>, std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   4:	e1a06000 	mov	r6, r0
   8:	e1a07001 	mov	r7, r1
   c:	e24dd00c 	sub	sp, sp, #12
  10:	e5964000 	ldr	r4, [r6]
  14:	e28d1007 	add	r1, sp, #7
  18:	e5943000 	ldr	r3, [r4]
  1c:	e1a00004 	mov	r0, r4
  20:	e5933004 	ldr	r3, [r3, #4]
  24:	e1a0e00f 	mov	lr, pc
  28:	e1a0f003 	mov	pc, r3
  2c:	e3500000 	cmp	r0, #0
  30:	1a000001 	bne	3c <Pipe::Move(std::shared_ptr<Pipe::CPipe>, std::shared_ptr<Pipe::CPipe>)+0x3c>
  34:	e28dd00c 	add	sp, sp, #12
  38:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  3c:	e5975000 	ldr	r5, [r7]
  40:	e5943008 	ldr	r3, [r4, #8]
  44:	e5952000 	ldr	r2, [r5]
  48:	e2833001 	add	r3, r3, #1
  4c:	e5922000 	ldr	r2, [r2]
  50:	e1a00005 	mov	r0, r5
  54:	e5dd1007 	ldrb	r1, [sp, #7]
  58:	e5843008 	str	r3, [r4, #8]
  5c:	e1a0e00f 	mov	lr, pc
  60:	e1a0f002 	mov	pc, r2
  64:	e3500000 	cmp	r0, #0
  68:	0affffe8 	beq	10 <Pipe::Move(std::shared_ptr<Pipe::CPipe>, std::shared_ptr<Pipe::CPipe>)+0x10>
  6c:	e5953004 	ldr	r3, [r5, #4]
  70:	e2833001 	add	r3, r3, #1
  74:	e5853004 	str	r3, [r5, #4]
  78:	eaffffe4 	b	10 <Pipe::Move(std::shared_ptr<Pipe::CPipe>, std::shared_ptr<Pipe::CPipe>)+0x10>

rle.o:     file format elf32-littlearm


Disassembly of section .text._ZN3Rle11CRleEncoder5SetInESt10shared_ptrIN4Pipe5CPipeEE:

00000000 <Rle::CRleEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e8910048 	ldm	r1, {r3, r6}
   8:	e5905004 	ldr	r5, [r0, #4]
   c:	e5803000 	str	r3, [r0]
  10:	e1560005 	cmp	r6, r5
  14:	0a00001b 	beq	88 <Rle::CRleEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x88>
  18:	e3560000 	cmp	r6, #0
  1c:	15963004 	ldrne	r3, [r6, #4]
  20:	e1a04000 	mov	r4, r0
  24:	12833001 	addne	r3, r3, #1
  28:	15863004 	strne	r3, [r6, #4]
  2c:	e3550000 	cmp	r5, #0
  30:	0a000013 	beq	84 <Rle::CRleEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  34:	e5953004 	ldr	r3, [r5, #4]
  38:	e2433001 	sub	r3, r3, #1
  3c:	e3530000 	cmp	r3, #0
  40:	e5853004 	str	r3, [r5, #4]
  44:	1a00000e 	bne	84 <Rle::CRleEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  48:	e5953000 	ldr	r3, [r5]
  4c:	e1a00005 	mov	r0, r5
  50:	e5933008 	ldr	r3, [r3, #8]
  54:	e1a0e00f 	mov	lr, pc
  58:	e1a0f003 	mov	pc, r3
  5c:	e5953008 	ldr	r3, [r5, #8]
  60:	e2433001 	sub	r3, r3, #1
  64:	e3530000 	cmp	r3, #0
  68:	e5853008 	str	r3, [r5, #8]
  6c:	1a000004 	bne	84 <Rle::CRleEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  70:	e5953000 	ldr	r3, [r5]
  74:	e1a00005 	mov	r0, r5
  78:	e593300c 	ldr	r3, [r3, #12]
  7c:	e1a0e00f 	mov	lr, pc
  80:	e1a0f003 	mov	pc, r3
  84:	e5846004 	str	r6, [r4, #4]
  88:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN3Rle11CRleEncoder6SetOutESt10shared_ptrIN4Pipe5CPipeEE:

00000000 <Rle::CRleEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e8910048 	ldm	r1, {r3, r6}
   8:	e590500c 	ldr	r5, [r0, #12]
   c:	e5803008 	str	r3, [r0, #8]
  10:	e1560005 	cmp	r6, r5
  14:	0a00001b 	beq	88 <Rle::CRleEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x88>
  18:	e3560000 	cmp	r6, #0
  1c:	15963004 	ldrne	r3, [r6, #4]
  20:	e1a04000 	mov	r4, r0
  24:	12833001 	addne	r3, r3, #1
  28:	15863004 	strne	r3, [r6, #4]
  2c:	e3550000 	cmp	r5, #0
  30:	0a000013 	beq	84 <Rle::CRleEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  34:	e5953004 	ldr	r3, [r5, #4]
  38:	e2433001 	sub	r3, r3, #1
  3c:	e3530000 	cmp	r3, #0
  40:	e5853004 	str	r3, [r5, #4]
  44:	1a00000e 	bne	84 <Rle::CRleEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  48:	e5953000 	ldr	r3, [r5]
  4c:	e1a00005 	mov	r0, r5
  50:	e5933008 	ldr	r3, [r3, #8]
  54:	e1a0e00f 	mov	lr, pc
  58:	e1a0f003 	mov	pc, r3
  5c:	e5953008 	ldr	r3, [r5, #8]
  60:	e2433001 	sub	r3, r3, #1
  64:	e3530000 	cmp	r3, #0
  68:	e5853008 	str	r3, [r5, #8]
  6c:	1a000004 	bne	84 <Rle::CRleEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  70:	e5953000 	ldr	r3, [r5]
  74:	e1a00005 	mov	r0, r5
  78:	e593300c 	ldr	r3, [r3, #12]
  7c:	e1a0e00f 	mov	lr, pc
  80:	e1a0f003 	mov	pc, r3
  84:	e584600c 	str	r6, [r4, #12]
  88:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN3Rle11CRleDecoder5SetInESt10shared_ptrIN4Pipe5CPipeEE:

00000000 <Rle::CRleDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e8910048 	ldm	r1, {r3, r6}
   8:	e5905004 	ldr	r5, [r0, #4]
   c:	e5803000 	str	r3, [r0]
  10:	e1560005 	cmp	r6, r5
  14:	0a00001b 	beq	88 <Rle::CRleDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x88>
  18:	e3560000 	cmp	r6, #0
  1c:	15963004 	ldrne	r3, [r6, #4]
  20:	e1a04000 	mov	r4, r0
  24:	12833001 	addne	r3, r3, #1
  28:	15863004 	strne	r3, [r6, #4]
  2c:	e3550000 	cmp	r5, #0
  30:	0a000013 	beq	84 <Rle::CRleDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  34:	e5953004 	ldr	r3, [r5, #4]
  38:	e2433001 	sub	r3, r3, #1
  3c:	e3530000 	cmp	r3, #0
  40:	e5853004 	str	r3, [r5, #4]
  44:	1a00000e 	bne	84 <Rle::CRleDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  48:	e5953000 	ldr	r3, [r5]
  4c:	e1a00005 	mov	r0, r5
  50:	e5933008 	ldr	r3, [r3, #8]
  54:	e1a0e00f 	mov	lr, pc
  58:	e1a0f003 	mov	pc, r3
  5c:	e5953008 	ldr	r3, [r5, #8]
  60:	e2433001 	sub	r3, r3, #1
  64:	e3530000 	cmp	r3, #0
  68:	e5853008 	str	r3, [r5, #8]
  6c:	1a000004 	bne	84 <Rle::CRleDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  70:	e5953000 	ldr	r3, [r5]
  74:	e1a00005 	mov	r0, r5
  78:	e593300c 	ldr	r3, [r3, #12]
  7c:	e1a0e00f 	mov	lr, pc
  80:	e1a0f003 	mov	pc, r3
  84:	e5846004 	str	r6, [r4, #4]
  88:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN3Rle11CRleDecoder6SetOutESt10shared_ptrIN4Pipe5CPipeEE:

00000000 <Rle::CRleDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e8910048 	ldm	r1, {r3, r6}
   8:	e590500c 	ldr	r5, [r0, #12]
   c:	e5803008 	str	r3, [r0, #8]
  10:	e1560005 	cmp	r6, r5
  14:	0a00001b 	beq	88 <Rle::CRleDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x88>
  18:	e3560000 	cmp	r6, #0
  1c:	15963004 	ldrne	r3, [r6, #4]
  20:	e1a04000 	mov	r4, r0
  24:	12833001 	addne	r3, r3, #1
  28:	15863004 	strne	r3, [r6, #4]
  2c:	e3550000 	cmp	r5, #0
  30:	0a000013 	beq	84 <Rle::CRleDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  34:	e5953004 	ldr	r3, [r5, #4]
  38:	e2433001 	sub	r3, r3, #1
  3c:	e3530000 	cmp	r3, #0
  40:	e5853004 	str	r3, [r5, #4]
  44:	1a00000e 	bne	84 <Rle::CRleDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  48:	e5953000 	ldr	r3, [r5]
  4c:	e1a00005 	mov	r0, r5
  50:	e5933008 	ldr	r3, [r3, #8]
  54:	e1a0e00f 	mov	lr, pc
  58:	e1a0f003 	mov	pc, r3
  5c:	e5953008 	ldr	r3, [r5, #8]
  60:	e2433001 	sub	r3, r3, #1
  64:	e3530000 	cmp	r3, #0
  68:	e5853008 	str	r3, [r5, #8]
  6c:	1a000004 	bne	84 <Rle::CRleDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  70:	e5953000 	ldr	r3, [r5]
  74:	e1a00005 	mov	r0, r5
  78:	e593300c 	ldr	r3, [r3, #12]
  7c:	e1a0e00f 	mov	lr, pc
  80:	e1a0f003 	mov	pc, r3
  84:	e584600c 	str	r6, [r4, #12]
  88:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN3Rle11CRleDecoder6DecodeEv:

00000000 <Rle::CRleDecoder::Decode()>:
   0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   4:	e1a06000 	mov	r6, r0
   8:	e24dd00c 	sub	sp, sp, #12
   c:	e5964000 	ldr	r4, [r6]
  10:	e28d1007 	add	r1, sp, #7
  14:	e5943000 	ldr	r3, [r4]
  18:	e1a00004 	mov	r0, r4
  1c:	e5933004 	ldr	r3, [r3, #4]
  20:	e1a0e00f 	mov	lr, pc
  24:	e1a0f003 	mov	pc, r3
  28:	e3500000 	cmp	r0, #0
  2c:	0a000006 	beq	4c <Rle::CRleDecoder::Decode()+0x4c>
  30:	e5943008 	ldr	r3, [r4, #8]
  34:	e1dd70d7 	ldrsb	r7, [sp, #7]
  38:	e2833001 	add	r3, r3, #1
  3c:	e3570000 	cmp	r7, #0
  40:	e5843008 	str	r3, [r4, #8]
  44:	ca000021 	bgt	d0 <Rle::CRleDecoder::Decode()+0xd0>
  48:	1a000002 	bne	58 <Rle::CRleDecoder::Decode()+0x58>
  4c:	e3a00000 	mov	r0, #0
  50:	e28dd00c 	add	sp, sp, #12
  54:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  58:	e3a04000 	mov	r4, #0
  5c:	e2677000 	rsb	r7, r7, #0
  60:	e5965000 	ldr	r5, [r6]
  64:	e28d1007 	add	r1, sp, #7
  68:	e5953000 	ldr	r3, [r5]
  6c:	e1a00005 	mov	r0, r5
  70:	e5933004 	ldr	r3, [r3, #4]
  74:	e1a0e00f 	mov	lr, pc
  78:	e1a0f003 	mov	pc, r3
  7c:	e3500000 	cmp	r0, #0
  80:	15953008 	ldrne	r3, [r5, #8]
  84:	e5dd1007 	ldrb	r1, [sp, #7]
  88:	12833001 	addne	r3, r3, #1
  8c:	15853008 	strne	r3, [r5, #8]
  90:	e5965008 	ldr	r5, [r6, #8]
  94:	e2844001 	add	r4, r4, #1
  98:	e5953000 	ldr	r3, [r5]
  9c:	e1a00005 	mov	r0, r5
  a0:	e5933000 	ldr	r3, [r3]
  a4:	e1a0e00f 	mov	lr, pc
  a8:	e1a0f003 	mov	pc, r3
  ac:	e3500000 	cmp	r0, #0
  b0:	15953004 	ldrne	r3, [r5, #4]
  b4:	e1a04c04 	lsl	r4, r4, #24
  b8:	12833001 	addne	r3, r3, #1
  bc:	e1a04c44 	asr	r4, r4, #24
  c0:	15853004 	strne	r3, [r5, #4]
  c4:	e1540007 	cmp	r4, r7
  c8:	baffffe4 	blt	60 <Rle::CRleDecoder::Decode()+0x60>
  cc:	eaffffce 	b	c <Rle::CRleDecoder::Decode()+0xc>
  d0:	e5964000 	ldr	r4, [r6]
  d4:	e28d1007 	add	r1, sp, #7
  d8:	e5943000 	ldr	r3, [r4]
  dc:	e1a00004 	mov	r0, r4
  e0:	e5933004 	ldr	r3, [r3, #4]
  e4:	e1a0e00f 	mov	lr, pc
  e8:	e1a0f003 	mov	pc, r3
  ec:	e3a05000 	mov	r5, #0
  f0:	e3500000 	cmp	r0, #0
  f4:	15943008 	ldrne	r3, [r4, #8]
  f8:	12833001 	addne	r3, r3, #1
  fc:	15843008 	strne	r3, [r4, #8]
 100:	e5964008 	ldr	r4, [r6, #8]
 104:	e5dd1007 	ldrb	r1, [sp, #7]
 108:	e5943000 	ldr	r3, [r4]
 10c:	e1a00004 	mov	r0, r4
 110:	e5933000 	ldr	r3, [r3]
 114:	e1a0e00f 	mov	lr, pc
 118:	e1a0f003 	mov	pc, r3
 11c:	e3500000 	cmp	r0, #0
 120:	15942004 	ldrne	r2, [r4, #4]
 124:	e2855001 	add	r5, r5, #1
 128:	e1a03c05 	lsl	r3, r5, #24
 12c:	12822001 	addne	r2, r2, #1
 130:	e1a03c43 	asr	r3, r3, #24
 134:	15842004 	strne	r2, [r4, #4]
 138:	e1570003 	cmp	r7, r3
 13c:	caffffef 	bgt	100 <Rle::CRleDecoder::Decode()+0x100>
 140:	eaffffb1 	b	c <Rle::CRleDecoder::Decode()+0xc>

Disassembly of section .text._ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_:

00000000 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)>:
   0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e8900480 	ldm	r0, {r7, r10}
   8:	e04a3007 	sub	r3, r10, r7
   c:	e3730106 	cmn	r3, #-2147483647	; 0x80000001
  10:	0a00003f 	beq	114 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x114>
  14:	e3530001 	cmp	r3, #1
  18:	e1a0b002 	mov	r11, r2
  1c:	21a02003 	movcs	r2, r3
  20:	33a02001 	movcc	r2, #1
  24:	e0934002 	adds	r4, r3, r2
  28:	e1a06000 	mov	r6, r0
  2c:	e1a08001 	mov	r8, r1
  30:	2a000034 	bcs	108 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x108>
  34:	e3540000 	cmp	r4, #0
  38:	01a09004 	moveq	r9, r4
  3c:	e0415007 	sub	r5, r1, r7
  40:	1a000028 	bne	e8 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0xe8>
  44:	e5db3000 	ldrb	r3, [r11]
  48:	e3550000 	cmp	r5, #0
  4c:	e7c93005 	strb	r3, [r9, r5]
  50:	e04aa008 	sub	r10, r10, r8
  54:	ca000017 	bgt	b8 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0xb8>
  58:	e2855001 	add	r5, r5, #1
  5c:	e35a0000 	cmp	r10, #0
  60:	e0895005 	add	r5, r9, r5
  64:	ca00000b 	bgt	98 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x98>
  68:	e3570000 	cmp	r7, #0
  6c:	e085500a 	add	r5, r5, r10
  70:	1a000003 	bne	84 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x84>
  74:	e5869000 	str	r9, [r6]
  78:	e5865004 	str	r5, [r6, #4]
  7c:	e5864008 	str	r4, [r6, #8]
  80:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
  84:	e5961008 	ldr	r1, [r6, #8]
  88:	e0411007 	sub	r1, r1, r7
  8c:	e1a00007 	mov	r0, r7
  90:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  94:	eafffff6 	b	74 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x74>
  98:	e1a00005 	mov	r0, r5
  9c:	e1a01008 	mov	r1, r8
  a0:	e1a0200a 	mov	r2, r10
  a4:	ebfffffe 	bl	0 <memcpy>
  a8:	e3570000 	cmp	r7, #0
  ac:	e085500a 	add	r5, r5, r10
  b0:	0affffef 	beq	74 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x74>
  b4:	eafffff2 	b	84 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x84>
  b8:	e1a02005 	mov	r2, r5
  bc:	e1a01007 	mov	r1, r7
  c0:	e1a00009 	mov	r0, r9
  c4:	ebfffffe 	bl	0 <memmove>
  c8:	e2855001 	add	r5, r5, #1
  cc:	e35a0000 	cmp	r10, #0
  d0:	e0895005 	add	r5, r9, r5
  d4:	caffffef 	bgt	98 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x98>
  d8:	e5961008 	ldr	r1, [r6, #8]
  dc:	e085500a 	add	r5, r5, r10
  e0:	e0411007 	sub	r1, r1, r7
  e4:	eaffffe8 	b	8c <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x8c>
  e8:	e3e03102 	mvn	r3, #-2147483648	; 0x80000000
  ec:	e1540003 	cmp	r4, r3
  f0:	21a04003 	movcs	r4, r3
  f4:	e1a00004 	mov	r0, r4
  f8:	ebfffffe 	bl	0 <operator new(unsigned int)>
  fc:	e1a09000 	mov	r9, r0
 100:	e0804004 	add	r4, r0, r4
 104:	eaffffce 	b	44 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x44>
 108:	e3e04102 	mvn	r4, #-2147483648	; 0x80000000
 10c:	e0415007 	sub	r5, r1, r7
 110:	eafffff7 	b	f4 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0xf4>
 114:	e59f0000 	ldr	r0, [pc]	; 11c <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x11c>
 118:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 11c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN3Rle11CRleEncoder6EncodeEv:

00000000 <Rle::CRleEncoder::Encode()>:
   0:	e3a03000 	mov	r3, #0
   4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   8:	e1a06000 	mov	r6, r0
   c:	e1a0a003 	mov	r10, r3
  10:	e1a05003 	mov	r5, r3
  14:	e1a07003 	mov	r7, r3
  18:	e5904000 	ldr	r4, [r0]
  1c:	e24dd014 	sub	sp, sp, #20
  20:	e59f836c 	ldr	r8, [pc, #876]	; 394 <Rle::CRleEncoder::Encode()+0x394>
  24:	e58d3004 	str	r3, [sp, #4]
  28:	e58d3008 	str	r3, [sp, #8]
  2c:	e58d300c 	str	r3, [sp, #12]
  30:	e5843008 	str	r3, [r4, #8]
  34:	e5943000 	ldr	r3, [r4]
  38:	e1a00004 	mov	r0, r4
  3c:	e5933004 	ldr	r3, [r3, #4]
  40:	e28d1003 	add	r1, sp, #3
  44:	e1a0e00f 	mov	lr, pc
  48:	e1a0f003 	mov	pc, r3
  4c:	e3500000 	cmp	r0, #0
  50:	1a000018 	bne	b8 <Rle::CRleEncoder::Encode()+0xb8>
  54:	e59d9004 	ldr	r9, [sp, #4]
  58:	e0451009 	sub	r1, r5, r9
  5c:	e3510001 	cmp	r1, #1
  60:	8a000079 	bhi	24c <Rle::CRleEncoder::Encode()+0x24c>
  64:	e3570000 	cmp	r7, #0
  68:	1a0000b2 	bne	338 <Rle::CRleEncoder::Encode()+0x338>
  6c:	e5964008 	ldr	r4, [r6, #8]
  70:	e3a01000 	mov	r1, #0
  74:	e5943000 	ldr	r3, [r4]
  78:	e1a00004 	mov	r0, r4
  7c:	e5933000 	ldr	r3, [r3]
  80:	e1a0e00f 	mov	lr, pc
  84:	e1a0f003 	mov	pc, r3
  88:	e3500000 	cmp	r0, #0
  8c:	15943004 	ldrne	r3, [r4, #4]
  90:	12833001 	addne	r3, r3, #1
  94:	15843004 	strne	r3, [r4, #4]
  98:	e3590000 	cmp	r9, #0
  9c:	0a000002 	beq	ac <Rle::CRleEncoder::Encode()+0xac>
  a0:	e1a00009 	mov	r0, r9
  a4:	e04a1009 	sub	r1, r10, r9
  a8:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  ac:	e3a00000 	mov	r0, #0
  b0:	e28dd014 	add	sp, sp, #20
  b4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  b8:	e5943008 	ldr	r3, [r4, #8]
  bc:	e5dd2003 	ldrb	r2, [sp, #3]
  c0:	e2833001 	add	r3, r3, #1
  c4:	e1520008 	cmp	r2, r8
  c8:	e5843008 	str	r3, [r4, #8]
  cc:	0a000052 	beq	21c <Rle::CRleEncoder::Encode()+0x21c>
  d0:	e3570001 	cmp	r7, #1
  d4:	8a00000d 	bhi	110 <Rle::CRleEncoder::Encode()+0x110>
  d8:	e155000a 	cmp	r5, r10
  dc:	0a000023 	beq	170 <Rle::CRleEncoder::Encode()+0x170>
  e0:	e5dd3003 	ldrb	r3, [sp, #3]
  e4:	e59db004 	ldr	r11, [sp, #4]
  e8:	e4c53001 	strb	r3, [r5], #1
  ec:	e045800b 	sub	r8, r5, r11
  f0:	e358007e 	cmp	r8, #126	; 0x7e
  f4:	e58d5008 	str	r5, [sp, #8]
  f8:	8a000025 	bhi	194 <Rle::CRleEncoder::Encode()+0x194>
  fc:	e3a07001 	mov	r7, #1
 100:	e5dd8003 	ldrb	r8, [sp, #3]
 104:	e59da00c 	ldr	r10, [sp, #12]
 108:	e5964000 	ldr	r4, [r6]
 10c:	eaffffc8 	b	34 <Rle::CRleEncoder::Encode()+0x34>
 110:	e5964008 	ldr	r4, [r6, #8]
 114:	e1a01007 	mov	r1, r7
 118:	e5943000 	ldr	r3, [r4]
 11c:	e1a00004 	mov	r0, r4
 120:	e5933000 	ldr	r3, [r3]
 124:	e1a0e00f 	mov	lr, pc
 128:	e1a0f003 	mov	pc, r3
 12c:	e3500000 	cmp	r0, #0
 130:	15943004 	ldrne	r3, [r4, #4]
 134:	e20810ff 	and	r1, r8, #255	; 0xff
 138:	12833001 	addne	r3, r3, #1
 13c:	15843004 	strne	r3, [r4, #4]
 140:	e5964008 	ldr	r4, [r6, #8]
 144:	e5943000 	ldr	r3, [r4]
 148:	e1a00004 	mov	r0, r4
 14c:	e5933000 	ldr	r3, [r3]
 150:	e1a0e00f 	mov	lr, pc
 154:	e1a0f003 	mov	pc, r3
 158:	e3500000 	cmp	r0, #0
 15c:	15943004 	ldrne	r3, [r4, #4]
 160:	12833001 	addne	r3, r3, #1
 164:	15843004 	strne	r3, [r4, #4]
 168:	e155000a 	cmp	r5, r10
 16c:	1affffdb 	bne	e0 <Rle::CRleEncoder::Encode()+0xe0>
 170:	e1a01005 	mov	r1, r5
 174:	e28d2003 	add	r2, sp, #3
 178:	e28d0004 	add	r0, sp, #4
 17c:	ebfffffe 	bl	0 <Rle::CRleEncoder::Encode()>
 180:	e59d5008 	ldr	r5, [sp, #8]
 184:	e59db004 	ldr	r11, [sp, #4]
 188:	e045800b 	sub	r8, r5, r11
 18c:	e358007e 	cmp	r8, #126	; 0x7e
 190:	9affffd9 	bls	fc <Rle::CRleEncoder::Encode()+0xfc>
 194:	e5964008 	ldr	r4, [r6, #8]
 198:	e2681000 	rsb	r1, r8, #0
 19c:	e5943000 	ldr	r3, [r4]
 1a0:	e1a00004 	mov	r0, r4
 1a4:	e5933000 	ldr	r3, [r3]
 1a8:	e20110ff 	and	r1, r1, #255	; 0xff
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e1a0f003 	mov	pc, r3
 1b4:	e3500000 	cmp	r0, #0
 1b8:	15943004 	ldrne	r3, [r4, #4]
 1bc:	e24b7001 	sub	r7, r11, #1
 1c0:	12833001 	addne	r3, r3, #1
 1c4:	15843004 	strne	r3, [r4, #4]
 1c8:	e0878008 	add	r8, r7, r8
 1cc:	e5964008 	ldr	r4, [r6, #8]
 1d0:	e5f71001 	ldrb	r1, [r7, #1]!
 1d4:	e5943000 	ldr	r3, [r4]
 1d8:	e1a00004 	mov	r0, r4
 1dc:	e5933000 	ldr	r3, [r3]
 1e0:	e1a0e00f 	mov	lr, pc
 1e4:	e1a0f003 	mov	pc, r3
 1e8:	e3500000 	cmp	r0, #0
 1ec:	15943004 	ldrne	r3, [r4, #4]
 1f0:	12833001 	addne	r3, r3, #1
 1f4:	15843004 	strne	r3, [r4, #4]
 1f8:	e1580007 	cmp	r8, r7
 1fc:	1afffff2 	bne	1cc <Rle::CRleEncoder::Encode()+0x1cc>
 200:	e15b0005 	cmp	r11, r5
 204:	11a0500b 	movne	r5, r11
 208:	e3a07000 	mov	r7, #0
 20c:	e59da00c 	ldr	r10, [sp, #12]
 210:	e59f817c 	ldr	r8, [pc, #380]	; 394 <Rle::CRleEncoder::Encode()+0x394>
 214:	158db008 	strne	r11, [sp, #8]
 218:	eaffffba 	b	108 <Rle::CRleEncoder::Encode()+0x108>
 21c:	e357007e 	cmp	r7, #126	; 0x7e
 220:	8affffba 	bhi	110 <Rle::CRleEncoder::Encode()+0x110>
 224:	e59d9004 	ldr	r9, [sp, #4]
 228:	e0454009 	sub	r4, r5, r9
 22c:	e3540001 	cmp	r4, #1
 230:	8a000022 	bhi	2c0 <Rle::CRleEncoder::Encode()+0x2c0>
 234:	e1590005 	cmp	r9, r5
 238:	11a05009 	movne	r5, r9
 23c:	158d9008 	strne	r9, [sp, #8]
 240:	e2877001 	add	r7, r7, #1
 244:	e20770ff 	and	r7, r7, #255	; 0xff
 248:	eaffffae 	b	108 <Rle::CRleEncoder::Encode()+0x108>
 24c:	e5964008 	ldr	r4, [r6, #8]
 250:	e2611000 	rsb	r1, r1, #0
 254:	e5943000 	ldr	r3, [r4]
 258:	e1a00004 	mov	r0, r4
 25c:	e5933000 	ldr	r3, [r3]
 260:	e20110ff 	and	r1, r1, #255	; 0xff
 264:	e1a0e00f 	mov	lr, pc
 268:	e1a0f003 	mov	pc, r3
 26c:	e3500000 	cmp	r0, #0
 270:	15943004 	ldrne	r3, [r4, #4]
 274:	12833001 	addne	r3, r3, #1
 278:	15843004 	strne	r3, [r4, #4]
 27c:	e1590005 	cmp	r9, r5
 280:	0affff79 	beq	6c <Rle::CRleEncoder::Encode()+0x6c>
 284:	e1a07009 	mov	r7, r9
 288:	e5964008 	ldr	r4, [r6, #8]
 28c:	e4d71001 	ldrb	r1, [r7], #1
 290:	e5943000 	ldr	r3, [r4]
 294:	e1a00004 	mov	r0, r4
 298:	e5933000 	ldr	r3, [r3]
 29c:	e1a0e00f 	mov	lr, pc
 2a0:	e1a0f003 	mov	pc, r3
 2a4:	e3500000 	cmp	r0, #0
 2a8:	15943004 	ldrne	r3, [r4, #4]
 2ac:	12833001 	addne	r3, r3, #1
 2b0:	15843004 	strne	r3, [r4, #4]
 2b4:	e1550007 	cmp	r5, r7
 2b8:	1afffff2 	bne	288 <Rle::CRleEncoder::Encode()+0x288>
 2bc:	eaffff6a 	b	6c <Rle::CRleEncoder::Encode()+0x6c>
 2c0:	e5968008 	ldr	r8, [r6, #8]
 2c4:	e2641001 	rsb	r1, r4, #1
 2c8:	e5982000 	ldr	r2, [r8]
 2cc:	e1a00008 	mov	r0, r8
 2d0:	e5922000 	ldr	r2, [r2]
 2d4:	e20110ff 	and	r1, r1, #255	; 0xff
 2d8:	e1a0e00f 	mov	lr, pc
 2dc:	e1a0f002 	mov	pc, r2
 2e0:	e3500000 	cmp	r0, #0
 2e4:	15982004 	ldrne	r2, [r8, #4]
 2e8:	e249b002 	sub	r11, r9, #2
 2ec:	12822001 	addne	r2, r2, #1
 2f0:	15882004 	strne	r2, [r8, #4]
 2f4:	e08bb004 	add	r11, r11, r4
 2f8:	e2498001 	sub	r8, r9, #1
 2fc:	e5964008 	ldr	r4, [r6, #8]
 300:	e5f81001 	ldrb	r1, [r8, #1]!
 304:	e5942000 	ldr	r2, [r4]
 308:	e1a00004 	mov	r0, r4
 30c:	e5922000 	ldr	r2, [r2]
 310:	e1a0e00f 	mov	lr, pc
 314:	e1a0f002 	mov	pc, r2
 318:	e3500000 	cmp	r0, #0
 31c:	15942004 	ldrne	r2, [r4, #4]
 320:	12822001 	addne	r2, r2, #1
 324:	15842004 	strne	r2, [r4, #4]
 328:	e15b0008 	cmp	r11, r8
 32c:	1afffff2 	bne	2fc <Rle::CRleEncoder::Encode()+0x2fc>
 330:	e5dd8003 	ldrb	r8, [sp, #3]
 334:	eaffffbe 	b	234 <Rle::CRleEncoder::Encode()+0x234>
 338:	e5964008 	ldr	r4, [r6, #8]
 33c:	e1a01007 	mov	r1, r7
 340:	e5943000 	ldr	r3, [r4]
 344:	e1a00004 	mov	r0, r4
 348:	e5933000 	ldr	r3, [r3]
 34c:	e1a0e00f 	mov	lr, pc
 350:	e1a0f003 	mov	pc, r3
 354:	e3500000 	cmp	r0, #0
 358:	15943004 	ldrne	r3, [r4, #4]
 35c:	e20810ff 	and	r1, r8, #255	; 0xff
 360:	12833001 	addne	r3, r3, #1
 364:	15843004 	strne	r3, [r4, #4]
 368:	e5964008 	ldr	r4, [r6, #8]
 36c:	e5943000 	ldr	r3, [r4]
 370:	e1a00004 	mov	r0, r4
 374:	e5933000 	ldr	r3, [r3]
 378:	e1a0e00f 	mov	lr, pc
 37c:	e1a0f003 	mov	pc, r3
 380:	e3500000 	cmp	r0, #0
 384:	15943004 	ldrne	r3, [r4, #4]
 388:	12833001 	addne	r3, r3, #1
 38c:	15843004 	strne	r3, [r4, #4]
 390:	eaffff35 	b	6c <Rle::CRleEncoder::Encode()+0x6c>
 394:	0000ffff 	.word	0x0000ffff

shell.o:     file format elf32-littlearm


Disassembly of section .text._ZN4CObj8vOnTouchEv:

00000000 <CObj::vOnTouch()>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN4CObj7vOnDrawEP9_b8PpuCmd:

00000000 <CObj::vOnDraw(_b8PpuCmd*)>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN14CClearShellCmdD2Ev:

00000000 <CClearShellCmd::~CClearShellCmd()>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN13CHelpShellCmdD2Ev:

00000000 <CHelpShellCmd::~CHelpShellCmd()>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN13CHelpShellCmdD0Ev:

00000000 <CHelpShellCmd::~CHelpShellCmd()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e3a0101c 	mov	r1, #28
   c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  10:	e1a00004 	mov	r0, r4
  14:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZN14CClearShellCmdD0Ev:

00000000 <CClearShellCmd::~CClearShellCmd()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e3a01018 	mov	r1, #24
   c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  10:	e1a00004 	mov	r0, r4
  14:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZNSt8_Rb_treeI4cstrILj16EESt4pairIKS1_P9CShellCmdESt10_Select1stIS6_E7cmp_strSaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E.isra.0:

00000000 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e2503000 	subs	r3, r0, #0
   8:	e24dd00c 	sub	sp, sp, #12
   c:	e58d3004 	str	r3, [sp, #4]
  10:	0a00005d 	beq	18c <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x18c>
  14:	e59d3004 	ldr	r3, [sp, #4]
  18:	e593900c 	ldr	r9, [r3, #12]
  1c:	e3590000 	cmp	r9, #0
  20:	0a000052 	beq	170 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x170>
  24:	e599a00c 	ldr	r10, [r9, #12]
  28:	e35a0000 	cmp	r10, #0
  2c:	0a000048 	beq	154 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x154>
  30:	e59ab00c 	ldr	r11, [r10, #12]
  34:	e35b0000 	cmp	r11, #0
  38:	0a00003e 	beq	138 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x138>
  3c:	e59b400c 	ldr	r4, [r11, #12]
  40:	e3540000 	cmp	r4, #0
  44:	0a00002b 	beq	f8 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0xf8>
  48:	e594500c 	ldr	r5, [r4, #12]
  4c:	e3550000 	cmp	r5, #0
  50:	0a000018 	beq	b8 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0xb8>
  54:	e595700c 	ldr	r7, [r5, #12]
  58:	e3570000 	cmp	r7, #0
  5c:	0a00001d 	beq	d8 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0xd8>
  60:	e597600c 	ldr	r6, [r7, #12]
  64:	e3560000 	cmp	r6, #0
  68:	0a00002a 	beq	118 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x118>
  6c:	e596800c 	ldr	r8, [r6, #12]
  70:	e3580000 	cmp	r8, #0
  74:	0a000007 	beq	98 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x98>
  78:	e598000c 	ldr	r0, [r8, #12]
  7c:	ebffffdf 	bl	0 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]>
  80:	e1a00008 	mov	r0, r8
  84:	e5988008 	ldr	r8, [r8, #8]
  88:	e3a01024 	mov	r1, #36	; 0x24
  8c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  90:	e3580000 	cmp	r8, #0
  94:	1afffff7 	bne	78 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x78>
  98:	e5968008 	ldr	r8, [r6, #8]
  9c:	e3a01024 	mov	r1, #36	; 0x24
  a0:	e1a00006 	mov	r0, r6
  a4:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  a8:	e3580000 	cmp	r8, #0
  ac:	0a000019 	beq	118 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x118>
  b0:	e1a06008 	mov	r6, r8
  b4:	eaffffec 	b	6c <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x6c>
  b8:	e5945008 	ldr	r5, [r4, #8]
  bc:	e3a01024 	mov	r1, #36	; 0x24
  c0:	e1a00004 	mov	r0, r4
  c4:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  c8:	e3550000 	cmp	r5, #0
  cc:	0a000009 	beq	f8 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0xf8>
  d0:	e1a04005 	mov	r4, r5
  d4:	eaffffdb 	b	48 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x48>
  d8:	e5956008 	ldr	r6, [r5, #8]
  dc:	e3a01024 	mov	r1, #36	; 0x24
  e0:	e1a00005 	mov	r0, r5
  e4:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  e8:	e3560000 	cmp	r6, #0
  ec:	0afffff1 	beq	b8 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0xb8>
  f0:	e1a05006 	mov	r5, r6
  f4:	eaffffd6 	b	54 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x54>
  f8:	e59b4008 	ldr	r4, [r11, #8]
  fc:	e3a01024 	mov	r1, #36	; 0x24
 100:	e1a0000b 	mov	r0, r11
 104:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 108:	e3540000 	cmp	r4, #0
 10c:	0a000009 	beq	138 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x138>
 110:	e1a0b004 	mov	r11, r4
 114:	eaffffc8 	b	3c <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x3c>
 118:	e5976008 	ldr	r6, [r7, #8]
 11c:	e3a01024 	mov	r1, #36	; 0x24
 120:	e1a00007 	mov	r0, r7
 124:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 128:	e3560000 	cmp	r6, #0
 12c:	0affffe9 	beq	d8 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0xd8>
 130:	e1a07006 	mov	r7, r6
 134:	eaffffc9 	b	60 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x60>
 138:	e59a4008 	ldr	r4, [r10, #8]
 13c:	e3a01024 	mov	r1, #36	; 0x24
 140:	e1a0000a 	mov	r0, r10
 144:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 148:	e3540000 	cmp	r4, #0
 14c:	11a0a004 	movne	r10, r4
 150:	1affffb6 	bne	30 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x30>
 154:	e5994008 	ldr	r4, [r9, #8]
 158:	e3a01024 	mov	r1, #36	; 0x24
 15c:	e1a00009 	mov	r0, r9
 160:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 164:	e3540000 	cmp	r4, #0
 168:	11a09004 	movne	r9, r4
 16c:	1affffac 	bne	24 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x24>
 170:	e59d0004 	ldr	r0, [sp, #4]
 174:	e3a01024 	mov	r1, #36	; 0x24
 178:	e5904008 	ldr	r4, [r0, #8]
 17c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 180:	e3540000 	cmp	r4, #0
 184:	158d4004 	strne	r4, [sp, #4]
 188:	1affffa1 	bne	14 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_erase(std::_Rb_tree_node<std::pair<cstr<16u> const, CShellCmd*> >*) [clone .isra.0]+0x14>
 18c:	e28dd00c 	add	sp, sp, #12
 190:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

Disassembly of section .text._ZN9CShellObjD2Ev:

00000000 <CShellObj::~CShellObj()>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e590601c 	ldr	r6, [r0, #28]
   8:	e59f3094 	ldr	r3, [pc, #148]	; a4 <CShellObj::~CShellObj()+0xa4>
   c:	e3560000 	cmp	r6, #0
  10:	e1a05000 	mov	r5, r0
  14:	e5803000 	str	r3, [r0]
  18:	0a00001d 	beq	94 <CShellObj::~CShellObj()+0x94>
  1c:	e596410c 	ldr	r4, [r6, #268]	; 0x10c
  20:	e2867f41 	add	r7, r6, #260	; 0x104
  24:	e1540007 	cmp	r4, r7
  28:	0a00000b 	beq	5c <CShellObj::~CShellObj()+0x5c>
  2c:	e5940020 	ldr	r0, [r4, #32]
  30:	e3500000 	cmp	r0, #0
  34:	0a000003 	beq	48 <CShellObj::~CShellObj()+0x48>
  38:	e5903000 	ldr	r3, [r0]
  3c:	e5933008 	ldr	r3, [r3, #8]
  40:	e1a0e00f 	mov	lr, pc
  44:	e1a0f003 	mov	pc, r3
  48:	e1a00004 	mov	r0, r4
  4c:	ebfffffe 	bl	0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)>
  50:	e1570000 	cmp	r7, r0
  54:	e1a04000 	mov	r4, r0
  58:	1afffff3 	bne	2c <CShellObj::~CShellObj()+0x2c>
  5c:	e5964108 	ldr	r4, [r6, #264]	; 0x108
  60:	e3540000 	cmp	r4, #0
  64:	0a000007 	beq	88 <CShellObj::~CShellObj()+0x88>
  68:	e594000c 	ldr	r0, [r4, #12]
  6c:	ebfffffe 	bl	0 <CShellObj::~CShellObj()>
  70:	e1a00004 	mov	r0, r4
  74:	e5944008 	ldr	r4, [r4, #8]
  78:	e3a01024 	mov	r1, #36	; 0x24
  7c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  80:	e3540000 	cmp	r4, #0
  84:	1afffff7 	bne	68 <CShellObj::~CShellObj()+0x68>
  88:	e3a01f46 	mov	r1, #280	; 0x118
  8c:	e1a00006 	mov	r0, r6
  90:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  94:	e1a00005 	mov	r0, r5
  98:	ebfffffe 	bl	0 <CObj::~CObj()>
  9c:	e1a00005 	mov	r0, r5
  a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  a4:	00000008 	.word	0x00000008

Disassembly of section .text._ZN9CShellObjD0Ev:

00000000 <CShellObj::~CShellObj()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	ebfffffe 	bl	0 <CShellObj::~CShellObj()>
   c:	e1a00004 	mov	r0, r4
  10:	e3a01024 	mov	r1, #36	; 0x24
  14:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  18:	e1a00004 	mov	r0, r4
  1c:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZN9CShellObj6PromptEv:

00000000 <CShellObj::Prompt()>:
   0:	e59f0000 	ldr	r0, [pc]	; 8 <CShellObj::Prompt()+0x8>
   4:	eafffffe 	b	0 <printf>
   8:	00000000 	.word	0x00000000

Disassembly of section .text._ZN9CShellObj12_SetLineBuffEPKc:

00000000 <CShellObj::_SetLineBuff(char const*)>:
   0:	e3510000 	cmp	r1, #0
   4:	01a03001 	moveq	r3, r1
   8:	e590c01c 	ldr	r12, [r0, #28]
   c:	0a000009 	beq	38 <CShellObj::_SetLineBuff(char const*)+0x38>
  10:	e3a03000 	mov	r3, #0
  14:	e2411001 	sub	r1, r1, #1
  18:	e28c007f 	add	r0, r12, #127	; 0x7f
  1c:	e5f12001 	ldrb	r2, [r1, #1]!
  20:	e3520000 	cmp	r2, #0
  24:	0a000003 	beq	38 <CShellObj::_SetLineBuff(char const*)+0x38>
  28:	e2833001 	add	r3, r3, #1
  2c:	e353007f 	cmp	r3, #127	; 0x7f
  30:	e5e02001 	strb	r2, [r0, #1]!
  34:	1afffff8 	bne	1c <CShellObj::_SetLineBuff(char const*)+0x1c>
  38:	e3a02000 	mov	r2, #0
  3c:	e08cc003 	add	r12, r12, r3
  40:	e5cc2080 	strb	r2, [r12, #128]	; 0x80
  44:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN9CShellCmdC2EPKc:

00000000 <CShellCmd::CShellCmd(char const*)>:
   0:	e3a03000 	mov	r3, #0
   4:	e59f2048 	ldr	r2, [pc, #72]	; 54 <CShellCmd::CShellCmd(char const*)+0x54>
   8:	e3510000 	cmp	r1, #0
   c:	e5c03004 	strb	r3, [r0, #4]
  10:	e5803014 	str	r3, [r0, #20]
  14:	e5802000 	str	r2, [r0]
  18:	01a03001 	moveq	r3, r1
  1c:	0a000008 	beq	44 <CShellCmd::CShellCmd(char const*)+0x44>
  20:	e2411001 	sub	r1, r1, #1
  24:	e280c003 	add	r12, r0, #3
  28:	e5f12001 	ldrb	r2, [r1, #1]!
  2c:	e3520000 	cmp	r2, #0
  30:	0a000003 	beq	44 <CShellCmd::CShellCmd(char const*)+0x44>
  34:	e2833001 	add	r3, r3, #1
  38:	e353000f 	cmp	r3, #15
  3c:	e5ec2001 	strb	r2, [r12, #1]!
  40:	1afffff8 	bne	28 <CShellCmd::CShellCmd(char const*)+0x28>
  44:	e3a02000 	mov	r2, #0
  48:	e0803003 	add	r3, r0, r3
  4c:	e5c32004 	strb	r2, [r3, #4]
  50:	e1a0f00e 	mov	pc, lr
  54:	00000008 	.word	0x00000008

Disassembly of section .text._ZN9CShellCmd8ShowHelpERKSt6vectorI4cstrILj16EESaIS2_EEPKc:

00000000 <CShellCmd::ShowHelp(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&, char const*)>:
   0:	e8910009 	ldm	r1, {r0, r3}
   4:	e0433000 	sub	r3, r3, r0
   8:	e3530010 	cmp	r3, #16
   c:	9a000026 	bls	ac <CShellCmd::ShowHelp(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&, char const*)+0xac>
  10:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  14:	e1a07001 	mov	r7, r1
  18:	e1a05002 	mov	r5, r2
  1c:	e3a06001 	mov	r6, #1
  20:	e3a04000 	mov	r4, #0
  24:	e24dd014 	sub	sp, sp, #20
  28:	e3a03000 	mov	r3, #0
  2c:	e3a0c02d 	mov	r12, #45	; 0x2d
  30:	e59f207c 	ldr	r2, [pc, #124]	; b4 <CShellCmd::ShowHelp(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&, char const*)+0xb4>
  34:	e24de001 	sub	lr, sp, #1
  38:	e0800206 	add	r0, r0, r6, lsl #4
  3c:	ea000002 	b	4c <CShellCmd::ShowHelp(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&, char const*)+0x4c>
  40:	e5f2c001 	ldrb	r12, [r2, #1]!
  44:	e35c0000 	cmp	r12, #0
  48:	0a000003 	beq	5c <CShellCmd::ShowHelp(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&, char const*)+0x5c>
  4c:	e2833001 	add	r3, r3, #1
  50:	e353000f 	cmp	r3, #15
  54:	e5eec001 	strb	r12, [lr, #1]!
  58:	1afffff8 	bne	40 <CShellCmd::ShowHelp(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&, char const*)+0x40>
  5c:	e2833010 	add	r3, r3, #16
  60:	e08d3003 	add	r3, sp, r3
  64:	e1a0100d 	mov	r1, sp
  68:	e5434010 	strb	r4, [r3, #-16]
  6c:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  70:	e3500000 	cmp	r0, #0
  74:	0a000007 	beq	98 <CShellCmd::ShowHelp(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&, char const*)+0x98>
  78:	e8970009 	ldm	r7, {r0, r3}
  7c:	e2866001 	add	r6, r6, #1
  80:	e0433000 	sub	r3, r3, r0
  84:	e1560243 	cmp	r6, r3, asr #4
  88:	3affffe6 	bcc	28 <CShellCmd::ShowHelp(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&, char const*)+0x28>
  8c:	e3a00000 	mov	r0, #0
  90:	e28dd014 	add	sp, sp, #20
  94:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  98:	e1a00005 	mov	r0, r5
  9c:	ebfffffe 	bl	0 <printf>
  a0:	e3a00001 	mov	r0, #1
  a4:	e28dd014 	add	sp, sp, #20
  a8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  ac:	e3a00000 	mov	r0, #0
  b0:	e1a0f00e 	mov	pc, lr
  b4:	00000000 	.word	0x00000000

Disassembly of section .text._ZN14CClearShellCmd7vOnMainERKSt6vectorI4cstrILj16EESaIS2_EE:

00000000 <CClearShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)>:
   0:	e92d4010 	push	{r4, lr}
   4:	e59f201c 	ldr	r2, [pc, #28]	; 28 <CClearShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x28>
   8:	ebfffffe 	bl	0 <CClearShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)>
   c:	e3500000 	cmp	r0, #0
  10:	1a000002 	bne	20 <CClearShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x20>
  14:	e3a0100c 	mov	r1, #12
  18:	e59f000c 	ldr	r0, [pc, #12]	; 2c <CClearShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x2c>
  1c:	ebfffffe 	bl	0 <printf>
  20:	e3a00000 	mov	r0, #0
  24:	e8bd8010 	pop	{r4, pc}
  28:	00000000 	.word	0x00000000
  2c:	00000010 	.word	0x00000010

Disassembly of section .text._ZNSt6vectorI4cstrILj16EESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_:

00000000 <void std::vector<cstr<16u>, std::allocator<cstr<16u> > >::_M_realloc_insert<cstr<16u> const&>(__gnu_cxx::__normal_iterator<cstr<16u>*, std::vector<cstr<16u>, std::allocator<cstr<16u> > > >, cstr<16u> const&)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e5909000 	ldr	r9, [r0]
   8:	e5906004 	ldr	r6, [r0, #4]
   c:	e24dd014 	sub	sp, sp, #20
  10:	e0465009 	sub	r5, r6, r9
  14:	e1a05245 	asr	r5, r5, #4
  18:	e375037e 	cmn	r5, #-134217727	; 0xf8000001
  1c:	0a00004b 	beq	150 <void std::vector<cstr<16u>, std::allocator<cstr<16u> > >::_M_realloc_insert<cstr<16u> const&>(__gnu_cxx::__normal_iterator<cstr<16u>*, std::vector<cstr<16u>, std::allocator<cstr<16u> > > >, cstr<16u> const&)+0x150>
  20:	e3550001 	cmp	r5, #1
  24:	e1a04001 	mov	r4, r1
  28:	e1a01002 	mov	r1, r2
  2c:	21a02005 	movcs	r2, r5
  30:	33a02001 	movcc	r2, #1
  34:	e0955002 	adds	r5, r5, r2
  38:	e1a07000 	mov	r7, r0
  3c:	e1a0a004 	mov	r10, r4
  40:	2a00003e 	bcs	140 <void std::vector<cstr<16u>, std::allocator<cstr<16u> > >::_M_realloc_insert<cstr<16u> const&>(__gnu_cxx::__normal_iterator<cstr<16u>*, std::vector<cstr<16u>, std::allocator<cstr<16u> > > >, cstr<16u> const&)+0x140>
  44:	e3550000 	cmp	r5, #0
  48:	e0443009 	sub	r3, r4, r9
  4c:	03a08010 	moveq	r8, #16
  50:	e58d3008 	str	r3, [sp, #8]
  54:	058d5004 	streq	r5, [sp, #4]
  58:	1a00002c 	bne	110 <void std::vector<cstr<16u>, std::allocator<cstr<16u> > >::_M_realloc_insert<cstr<16u> const&>(__gnu_cxx::__normal_iterator<cstr<16u>*, std::vector<cstr<16u>, std::allocator<cstr<16u> > > >, cstr<16u> const&)+0x110>
  5c:	e99d0009 	ldmib	sp, {r0, r3}
  60:	e3a02010 	mov	r2, #16
  64:	e0830000 	add	r0, r3, r0
  68:	ebfffffe 	bl	0 <memcpy>
  6c:	e1540009 	cmp	r4, r9
  70:	0a00000e 	beq	b0 <void std::vector<cstr<16u>, std::allocator<cstr<16u> > >::_M_realloc_insert<cstr<16u> const&>(__gnu_cxx::__normal_iterator<cstr<16u>*, std::vector<cstr<16u>, std::allocator<cstr<16u> > > >, cstr<16u> const&)+0xb0>
  74:	e1a0b009 	mov	r11, r9
  78:	e59d3004 	ldr	r3, [sp, #4]
  7c:	e2838010 	add	r8, r3, #16
  80:	e1a0100b 	mov	r1, r11
  84:	e2480010 	sub	r0, r8, #16
  88:	e3a02010 	mov	r2, #16
  8c:	e28bb010 	add	r11, r11, #16
  90:	ebfffffe 	bl	0 <memcpy>
  94:	e15b0004 	cmp	r11, r4
  98:	e2888010 	add	r8, r8, #16
  9c:	1afffff7 	bne	80 <void std::vector<cstr<16u>, std::allocator<cstr<16u> > >::_M_realloc_insert<cstr<16u> const&>(__gnu_cxx::__normal_iterator<cstr<16u>*, std::vector<cstr<16u>, std::allocator<cstr<16u> > > >, cstr<16u> const&)+0x80>
  a0:	e59d3008 	ldr	r3, [sp, #8]
  a4:	e2838010 	add	r8, r3, #16
  a8:	e59d3004 	ldr	r3, [sp, #4]
  ac:	e0838008 	add	r8, r3, r8
  b0:	e1540006 	cmp	r4, r6
  b4:	0a00000a 	beq	e4 <void std::vector<cstr<16u>, std::allocator<cstr<16u> > >::_M_realloc_insert<cstr<16u> const&>(__gnu_cxx::__normal_iterator<cstr<16u>*, std::vector<cstr<16u>, std::allocator<cstr<16u> > > >, cstr<16u> const&)+0xe4>
  b8:	e0464004 	sub	r4, r6, r4
  bc:	e288b010 	add	r11, r8, #16
  c0:	e3a02010 	mov	r2, #16
  c4:	e1a0100a 	mov	r1, r10
  c8:	e24b0010 	sub	r0, r11, #16
  cc:	e08aa002 	add	r10, r10, r2
  d0:	ebfffffe 	bl	0 <memcpy>
  d4:	e15a0006 	cmp	r10, r6
  d8:	e28bb010 	add	r11, r11, #16
  dc:	1afffff7 	bne	c0 <void std::vector<cstr<16u>, std::allocator<cstr<16u> > >::_M_realloc_insert<cstr<16u> const&>(__gnu_cxx::__normal_iterator<cstr<16u>*, std::vector<cstr<16u>, std::allocator<cstr<16u> > > >, cstr<16u> const&)+0xc0>
  e0:	e0888004 	add	r8, r8, r4
  e4:	e3590000 	cmp	r9, #0
  e8:	0a000003 	beq	fc <void std::vector<cstr<16u>, std::allocator<cstr<16u> > >::_M_realloc_insert<cstr<16u> const&>(__gnu_cxx::__normal_iterator<cstr<16u>*, std::vector<cstr<16u>, std::allocator<cstr<16u> > > >, cstr<16u> const&)+0xfc>
  ec:	e5971008 	ldr	r1, [r7, #8]
  f0:	e1a00009 	mov	r0, r9
  f4:	e0411009 	sub	r1, r1, r9
  f8:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  fc:	e59d3004 	ldr	r3, [sp, #4]
 100:	e5875008 	str	r5, [r7, #8]
 104:	e8870108 	stm	r7, {r3, r8}
 108:	e28dd014 	add	sp, sp, #20
 10c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 110:	e3e0233e 	mvn	r2, #-134217728	; 0xf8000000
 114:	e1550002 	cmp	r5, r2
 118:	21a05002 	movcs	r5, r2
 11c:	e1a05205 	lsl	r5, r5, #4
 120:	e1a00005 	mov	r0, r5
 124:	e58d100c 	str	r1, [sp, #12]
 128:	ebfffffe 	bl	0 <operator new(unsigned int)>
 12c:	e59d100c 	ldr	r1, [sp, #12]
 130:	e58d0004 	str	r0, [sp, #4]
 134:	e0805005 	add	r5, r0, r5
 138:	e2808010 	add	r8, r0, #16
 13c:	eaffffc6 	b	5c <void std::vector<cstr<16u>, std::allocator<cstr<16u> > >::_M_realloc_insert<cstr<16u> const&>(__gnu_cxx::__normal_iterator<cstr<16u>*, std::vector<cstr<16u>, std::allocator<cstr<16u> > > >, cstr<16u> const&)+0x5c>
 140:	e0443009 	sub	r3, r4, r9
 144:	e3e0513e 	mvn	r5, #-2147483633	; 0x8000000f
 148:	e58d3008 	str	r3, [sp, #8]
 14c:	eafffff3 	b	120 <void std::vector<cstr<16u>, std::allocator<cstr<16u> > >::_M_realloc_insert<cstr<16u> const&>(__gnu_cxx::__normal_iterator<cstr<16u>*, std::vector<cstr<16u>, std::allocator<cstr<16u> > > >, cstr<16u> const&)+0x120>
 150:	e59f0000 	ldr	r0, [pc]	; 158 <void std::vector<cstr<16u>, std::allocator<cstr<16u> > >::_M_realloc_insert<cstr<16u> const&>(__gnu_cxx::__normal_iterator<cstr<16u>*, std::vector<cstr<16u>, std::allocator<cstr<16u> > > >, cstr<16u> const&)+0x158>
 154:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 158:	00000000 	.word	0x00000000

Disassembly of section .text._ZN9CShellObj20GetAvailableCommandsEv:

00000000 <CShellObj::GetAvailableCommands()>:
   0:	e3a03000 	mov	r3, #0
   4:	e92d4070 	push	{r4, r5, r6, lr}
   8:	e591601c 	ldr	r6, [r1, #28]
   c:	e1a05000 	mov	r5, r0
  10:	e596410c 	ldr	r4, [r6, #268]	; 0x10c
  14:	e2866f41 	add	r6, r6, #260	; 0x104
  18:	e1560004 	cmp	r6, r4
  1c:	e5803000 	str	r3, [r0]
  20:	e5803004 	str	r3, [r0, #4]
  24:	e5803008 	str	r3, [r0, #8]
  28:	0a000014 	beq	80 <CShellObj::GetAvailableCommands()+0x80>
  2c:	e1a00003 	mov	r0, r3
  30:	ea00000a 	b	60 <CShellObj::GetAvailableCommands()+0x60>
  34:	e3a02010 	mov	r2, #16
  38:	ebfffffe 	bl	0 <memcpy>
  3c:	e5953004 	ldr	r3, [r5, #4]
  40:	e2833010 	add	r3, r3, #16
  44:	e5853004 	str	r3, [r5, #4]
  48:	e1a00004 	mov	r0, r4
  4c:	ebfffffe 	bl	0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)>
  50:	e1560000 	cmp	r6, r0
  54:	e1a04000 	mov	r4, r0
  58:	0a000008 	beq	80 <CShellObj::GetAvailableCommands()+0x80>
  5c:	e9950009 	ldmib	r5, {r0, r3}
  60:	e1500003 	cmp	r0, r3
  64:	e2841010 	add	r1, r4, #16
  68:	1afffff1 	bne	34 <CShellObj::GetAvailableCommands()+0x34>
  6c:	e1a01000 	mov	r1, r0
  70:	e2842010 	add	r2, r4, #16
  74:	e1a00005 	mov	r0, r5
  78:	ebfffffe 	bl	0 <CShellObj::GetAvailableCommands()>
  7c:	eafffff1 	b	48 <CShellObj::GetAvailableCommands()+0x48>
  80:	e1a00005 	mov	r0, r5
  84:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZNSt8_Rb_treeI4cstrILj16EESt4pairIKS1_P9CShellCmdESt10_Select1stIS6_E7cmp_strSaIS6_EE4findERS3_:

00000000 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::find(cstr<16u> const&)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e5904008 	ldr	r4, [r0, #8]
   8:	e2807004 	add	r7, r0, #4
   c:	e3540000 	cmp	r4, #0
  10:	0a000015 	beq	6c <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::find(cstr<16u> const&)+0x6c>
  14:	e1a05001 	mov	r5, r1
  18:	e1a06007 	mov	r6, r7
  1c:	e2840010 	add	r0, r4, #16
  20:	e1a01005 	mov	r1, r5
  24:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  28:	e5943008 	ldr	r3, [r4, #8]
  2c:	e594200c 	ldr	r2, [r4, #12]
  30:	e3500000 	cmp	r0, #0
  34:	a1a06004 	movge	r6, r4
  38:	b1a04002 	movlt	r4, r2
  3c:	a1a04003 	movge	r4, r3
  40:	e3540000 	cmp	r4, #0
  44:	1afffff4 	bne	1c <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::find(cstr<16u> const&)+0x1c>
  48:	e1570006 	cmp	r7, r6
  4c:	0a000004 	beq	64 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::find(cstr<16u> const&)+0x64>
  50:	e2861010 	add	r1, r6, #16
  54:	e1a00005 	mov	r0, r5
  58:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  5c:	e3500000 	cmp	r0, #0
  60:	b1a06007 	movlt	r6, r7
  64:	e1a00006 	mov	r0, r6
  68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  6c:	e1a06007 	mov	r6, r7
  70:	e1a00006 	mov	r0, r6
  74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

Disassembly of section .text._ZNSt8_Rb_treeI4cstrILj16EESt4pairIKS1_P9CShellCmdESt10_Select1stIS6_E7cmp_strSaIS6_EE24_M_get_insert_unique_posERS3_:

00000000 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_get_insert_unique_pos(cstr<16u> const&)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e5914008 	ldr	r4, [r1, #8]
   8:	e1a08001 	mov	r8, r1
   c:	e3540000 	cmp	r4, #0
  10:	e1a07000 	mov	r7, r0
  14:	e1a06002 	mov	r6, r2
  18:	02814004 	addeq	r4, r1, #4
  1c:	1a000001 	bne	28 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_get_insert_unique_pos(cstr<16u> const&)+0x28>
  20:	ea00000e 	b	60 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_get_insert_unique_pos(cstr<16u> const&)+0x60>
  24:	e1a04003 	mov	r4, r3
  28:	e2845010 	add	r5, r4, #16
  2c:	e1a01005 	mov	r1, r5
  30:	e1a00006 	mov	r0, r6
  34:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  38:	e594c008 	ldr	r12, [r4, #8]
  3c:	e3500000 	cmp	r0, #0
  40:	e594300c 	ldr	r3, [r4, #12]
  44:	b1a0300c 	movlt	r3, r12
  48:	b3a02001 	movlt	r2, #1
  4c:	a3a02000 	movge	r2, #0
  50:	e3530000 	cmp	r3, #0
  54:	1afffff2 	bne	24 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_get_insert_unique_pos(cstr<16u> const&)+0x24>
  58:	e3520000 	cmp	r2, #0
  5c:	0a000013 	beq	b0 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_get_insert_unique_pos(cstr<16u> const&)+0xb0>
  60:	e598300c 	ldr	r3, [r8, #12]
  64:	e1530004 	cmp	r3, r4
  68:	03a03000 	moveq	r3, #0
  6c:	08870018 	stmeq	r7, {r3, r4}
  70:	0a00000c 	beq	a8 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_get_insert_unique_pos(cstr<16u> const&)+0xa8>
  74:	e1a00004 	mov	r0, r4
  78:	ebfffffe 	bl	0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)>
  7c:	e1a08004 	mov	r8, r4
  80:	e1a04000 	mov	r4, r0
  84:	e2805010 	add	r5, r0, #16
  88:	e1a01006 	mov	r1, r6
  8c:	e1a00005 	mov	r0, r5
  90:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  94:	e3a03000 	mov	r3, #0
  98:	e3500000 	cmp	r0, #0
  9c:	b8870108 	stmlt	r7, {r3, r8}
  a0:	a5874000 	strge	r4, [r7]
  a4:	a5873004 	strge	r3, [r7, #4]
  a8:	e1a00007 	mov	r0, r7
  ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  b0:	e1a08004 	mov	r8, r4
  b4:	eafffff3 	b	88 <std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_get_insert_unique_pos(cstr<16u> const&)+0x88>

Disassembly of section .text._ZNSt8_Rb_treeI4cstrILj16EESt4pairIKS1_P9CShellCmdESt10_Select1stIS6_E7cmp_strSaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_.isra.0:

00000000 <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e1a06000 	mov	r6, r0
   8:	e24dd00c 	sub	sp, sp, #12
   c:	e3a00024 	mov	r0, #36	; 0x24
  10:	e1a04001 	mov	r4, r1
  14:	e1a07002 	mov	r7, r2
  18:	ebfffffe 	bl	0 <operator new(unsigned int)>
  1c:	e3a02010 	mov	r2, #16
  20:	e1a05000 	mov	r5, r0
  24:	e3a0a000 	mov	r10, #0
  28:	e0809002 	add	r9, r0, r2
  2c:	e1a00009 	mov	r0, r9
  30:	e5971000 	ldr	r1, [r7]
  34:	e2868004 	add	r8, r6, #4
  38:	ebfffffe 	bl	0 <memcpy>
  3c:	e1580004 	cmp	r8, r4
  40:	e585a020 	str	r10, [r5, #32]
  44:	0a00001e 	beq	c4 <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0xc4>
  48:	e284b010 	add	r11, r4, #16
  4c:	e1a0100b 	mov	r1, r11
  50:	e1a00009 	mov	r0, r9
  54:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  58:	e3500000 	cmp	r0, #0
  5c:	e1a07004 	mov	r7, r4
  60:	aa000037 	bge	144 <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0x144>
  64:	e596300c 	ldr	r3, [r6, #12]
  68:	e1530004 	cmp	r3, r4
  6c:	0a00000a 	beq	9c <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0x9c>
  70:	e1a00004 	mov	r0, r4
  74:	ebfffffe 	bl	0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)>
  78:	e1a01009 	mov	r1, r9
  7c:	e1a0a000 	mov	r10, r0
  80:	e2800010 	add	r0, r0, #16
  84:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  88:	e3500000 	cmp	r0, #0
  8c:	aa000015 	bge	e8 <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0xe8>
  90:	e59a400c 	ldr	r4, [r10, #12]
  94:	e3540000 	cmp	r4, #0
  98:	0a000049 	beq	1c4 <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0x1c4>
  9c:	e3570000 	cmp	r7, #0
  a0:	e1a04007 	mov	r4, r7
  a4:	1a000016 	bne	104 <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0x104>
  a8:	e1a00005 	mov	r0, r5
  ac:	e1a05004 	mov	r5, r4
  b0:	e3a01024 	mov	r1, #36	; 0x24
  b4:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  b8:	e1a00005 	mov	r0, r5
  bc:	e28dd00c 	add	sp, sp, #12
  c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  c4:	e5963014 	ldr	r3, [r6, #20]
  c8:	e153000a 	cmp	r3, r10
  cc:	0a000005 	beq	e8 <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0xe8>
  d0:	e5960010 	ldr	r0, [r6, #16]
  d4:	e1a01009 	mov	r1, r9
  d8:	e2800010 	add	r0, r0, #16
  dc:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  e0:	e150000a 	cmp	r0, r10
  e4:	ba00002b 	blt	198 <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0x198>
  e8:	e1a02009 	mov	r2, r9
  ec:	e1a01006 	mov	r1, r6
  f0:	e1a0000d 	mov	r0, sp
  f4:	ebfffffe 	bl	0 <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]>
  f8:	e89d0090 	ldm	sp, {r4, r7}
  fc:	e3570000 	cmp	r7, #0
 100:	0affffe8 	beq	a8 <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0xa8>
 104:	e2540000 	subs	r0, r4, #0
 108:	13a00001 	movne	r0, #1
 10c:	e1580007 	cmp	r8, r7
 110:	03800001 	orreq	r0, r0, #1
 114:	e3500000 	cmp	r0, #0
 118:	0a000021 	beq	1a4 <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0x1a4>
 11c:	e1a03008 	mov	r3, r8
 120:	e1a02007 	mov	r2, r7
 124:	e1a01005 	mov	r1, r5
 128:	ebfffffe 	bl	0 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)>
 12c:	e1a00005 	mov	r0, r5
 130:	e5963014 	ldr	r3, [r6, #20]
 134:	e2833001 	add	r3, r3, #1
 138:	e5863014 	str	r3, [r6, #20]
 13c:	e28dd00c 	add	sp, sp, #12
 140:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 144:	e1a01009 	mov	r1, r9
 148:	e1a0000b 	mov	r0, r11
 14c:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
 150:	e3500000 	cmp	r0, #0
 154:	aaffffd3 	bge	a8 <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0xa8>
 158:	e5963010 	ldr	r3, [r6, #16]
 15c:	e1530004 	cmp	r3, r4
 160:	0a000015 	beq	1bc <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0x1bc>
 164:	e1a00004 	mov	r0, r4
 168:	ebfffffe 	bl	0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)>
 16c:	e1a04000 	mov	r4, r0
 170:	e1a00009 	mov	r0, r9
 174:	e2841010 	add	r1, r4, #16
 178:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
 17c:	e3500000 	cmp	r0, #0
 180:	aaffffd8 	bge	e8 <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0xe8>
 184:	e597300c 	ldr	r3, [r7, #12]
 188:	e3530000 	cmp	r3, #0
 18c:	11a07004 	movne	r7, r4
 190:	1affffd9 	bne	fc <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0xfc>
 194:	ea000003 	b	1a8 <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0x1a8>
 198:	e1a0400a 	mov	r4, r10
 19c:	e5967010 	ldr	r7, [r6, #16]
 1a0:	eaffffd5 	b	fc <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0xfc>
 1a4:	e287b010 	add	r11, r7, #16
 1a8:	e1a0100b 	mov	r1, r11
 1ac:	e1a00009 	mov	r0, r9
 1b0:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
 1b4:	e1a00fa0 	lsr	r0, r0, #31
 1b8:	eaffffd7 	b	11c <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0x11c>
 1bc:	e1a0400a 	mov	r4, r10
 1c0:	eaffffcd 	b	fc <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0xfc>
 1c4:	e1a0700a 	mov	r7, r10
 1c8:	e1a00004 	mov	r0, r4
 1cc:	eaffffce 	b	10c <std::_Rb_tree_iterator<std::pair<cstr<16u> const, CShellCmd*> > std::_Rb_tree<cstr<16u>, std::pair<cstr<16u> const, CShellCmd*>, std::_Select1st<std::pair<cstr<16u> const, CShellCmd*> >, cmp_str, std::allocator<std::pair<cstr<16u> const, CShellCmd*> > >::_M_emplace_hint_unique<std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>, std::tuple<> >(std::_Rb_tree_const_iterator<std::pair<cstr<16u> const, CShellCmd*> >, std::piecewise_construct_t const&, std::tuple<cstr<16u> const&>&&, std::tuple<>&&) [clone .isra.0]+0x10c>

Disassembly of section .text._ZN9CShellObj6_ParseEv:

00000000 <CShellObj::_Parse()>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e3a05000 	mov	r5, #0
   8:	e1a06000 	mov	r6, r0
   c:	e590301c 	ldr	r3, [r0, #28]
  10:	e24dd020 	sub	sp, sp, #32
  14:	e5d34080 	ldrb	r4, [r3, #128]	; 0x80
  18:	e5cd5010 	strb	r5, [sp, #16]
  1c:	e58d5004 	str	r5, [sp, #4]
  20:	e58d5008 	str	r5, [sp, #8]
  24:	e58d500c 	str	r5, [sp, #12]
  28:	e2837080 	add	r7, r3, #128	; 0x80
  2c:	e3540020 	cmp	r4, #32
  30:	0a000057 	beq	194 <CShellObj::_Parse()+0x194>
  34:	e3540000 	cmp	r4, #0
  38:	0a00001e 	beq	b8 <CShellObj::_Parse()+0xb8>
  3c:	e2878001 	add	r8, r7, #1
  40:	e28d0010 	add	r0, sp, #16
  44:	e5cd5001 	strb	r5, [sp, #1]
  48:	e5cd4000 	strb	r4, [sp]
  4c:	ebfffffe 	bl	0 <cstr_strlen(char const*)>
  50:	e350000e 	cmp	r0, #14
  54:	e1a07008 	mov	r7, r8
  58:	8a000009 	bhi	84 <CShellObj::_Parse()+0x84>
  5c:	e1a0200d 	mov	r2, sp
  60:	e28d3010 	add	r3, sp, #16
  64:	e0833000 	add	r3, r3, r0
  68:	e2800001 	add	r0, r0, #1
  6c:	e350000f 	cmp	r0, #15
  70:	e4c34001 	strb	r4, [r3], #1
  74:	0a000002 	beq	84 <CShellObj::_Parse()+0x84>
  78:	e5f24001 	ldrb	r4, [r2, #1]!
  7c:	e3540000 	cmp	r4, #0
  80:	1afffff8 	bne	68 <CShellObj::_Parse()+0x68>
  84:	e2803020 	add	r3, r0, #32
  88:	e08d0003 	add	r0, sp, r3
  8c:	e5405010 	strb	r5, [r0, #-16]
  90:	e4d84001 	ldrb	r4, [r8], #1
  94:	e31400df 	tst	r4, #223	; 0xdf
  98:	1affffe8 	bne	40 <CShellObj::_Parse()+0x40>
  9c:	e28d0010 	add	r0, sp, #16
  a0:	ebfffffe 	bl	0 <cstr_strlen(char const*)>
  a4:	e3500000 	cmp	r0, #0
  a8:	1a00003c 	bne	1a0 <CShellObj::_Parse()+0x1a0>
  ac:	e5d74000 	ldrb	r4, [r7]
  b0:	e3540000 	cmp	r4, #0
  b4:	1affffdc 	bne	2c <CShellObj::_Parse()+0x2c>
  b8:	e99d000a 	ldmib	sp, {r1, r3}
  bc:	e1530001 	cmp	r3, r1
  c0:	0a00004e 	beq	200 <CShellObj::_Parse()+0x200>
  c4:	e596001c 	ldr	r0, [r6, #28]
  c8:	e2800c01 	add	r0, r0, #256	; 0x100
  cc:	ebfffffe 	bl	0 <CShellObj::_Parse()>
  d0:	e596801c 	ldr	r8, [r6, #28]
  d4:	e2887f41 	add	r7, r8, #260	; 0x104
  d8:	e1570000 	cmp	r7, r0
  dc:	0a000049 	beq	208 <CShellObj::_Parse()+0x208>
  e0:	e5984108 	ldr	r4, [r8, #264]	; 0x108
  e4:	e1a05007 	mov	r5, r7
  e8:	e3540000 	cmp	r4, #0
  ec:	e59d6004 	ldr	r6, [sp, #4]
  f0:	0a00003b 	beq	1e4 <CShellObj::_Parse()+0x1e4>
  f4:	e2840010 	add	r0, r4, #16
  f8:	e1a01006 	mov	r1, r6
  fc:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
 100:	e5943008 	ldr	r3, [r4, #8]
 104:	e594200c 	ldr	r2, [r4, #12]
 108:	e3500000 	cmp	r0, #0
 10c:	a1a05004 	movge	r5, r4
 110:	b1a04002 	movlt	r4, r2
 114:	a1a04003 	movge	r4, r3
 118:	e3540000 	cmp	r4, #0
 11c:	1afffff4 	bne	f4 <CShellObj::_Parse()+0xf4>
 120:	e1570005 	cmp	r7, r5
 124:	0a00002e 	beq	1e4 <CShellObj::_Parse()+0x1e4>
 128:	e1a00006 	mov	r0, r6
 12c:	e2851010 	add	r1, r5, #16
 130:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
 134:	e3500000 	cmp	r0, #0
 138:	ba000029 	blt	1e4 <CShellObj::_Parse()+0x1e4>
 13c:	e5950020 	ldr	r0, [r5, #32]
 140:	e28d1004 	add	r1, sp, #4
 144:	e5903000 	ldr	r3, [r0]
 148:	e5933000 	ldr	r3, [r3]
 14c:	e1a0e00f 	mov	lr, pc
 150:	e1a0f003 	mov	pc, r3
 154:	e2504000 	subs	r4, r0, #0
 158:	da000003 	ble	16c <CShellObj::_Parse()+0x16c>
 15c:	e1a02004 	mov	r2, r4
 160:	e59d1004 	ldr	r1, [sp, #4]
 164:	e59f00b4 	ldr	r0, [pc, #180]	; 220 <CShellObj::_Parse()+0x220>
 168:	ebfffffe 	bl	0 <printf>
 16c:	e59d1004 	ldr	r1, [sp, #4]
 170:	e3510000 	cmp	r1, #0
 174:	0a000003 	beq	188 <CShellObj::_Parse()+0x188>
 178:	e59d300c 	ldr	r3, [sp, #12]
 17c:	e1a00001 	mov	r0, r1
 180:	e0431001 	sub	r1, r3, r1
 184:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 188:	e1a00004 	mov	r0, r4
 18c:	e28dd020 	add	sp, sp, #32
 190:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 194:	e5d74001 	ldrb	r4, [r7, #1]
 198:	e2877001 	add	r7, r7, #1
 19c:	eaffffa2 	b	2c <CShellObj::_Parse()+0x2c>
 1a0:	e59d0008 	ldr	r0, [sp, #8]
 1a4:	e59d300c 	ldr	r3, [sp, #12]
 1a8:	e1500003 	cmp	r0, r3
 1ac:	0a000007 	beq	1d0 <CShellObj::_Parse()+0x1d0>
 1b0:	e3a02010 	mov	r2, #16
 1b4:	e08d1002 	add	r1, sp, r2
 1b8:	ebfffffe 	bl	0 <memcpy>
 1bc:	e59d3008 	ldr	r3, [sp, #8]
 1c0:	e2833010 	add	r3, r3, #16
 1c4:	e58d3008 	str	r3, [sp, #8]
 1c8:	e5cd5010 	strb	r5, [sp, #16]
 1cc:	eaffffb6 	b	ac <CShellObj::_Parse()+0xac>
 1d0:	e1a01000 	mov	r1, r0
 1d4:	e28d2010 	add	r2, sp, #16
 1d8:	e28d0004 	add	r0, sp, #4
 1dc:	ebfffffe 	bl	0 <CShellObj::_Parse()>
 1e0:	eafffff8 	b	1c8 <CShellObj::_Parse()+0x1c8>
 1e4:	e1a01005 	mov	r1, r5
 1e8:	e1a0200d 	mov	r2, sp
 1ec:	e2880c01 	add	r0, r8, #256	; 0x100
 1f0:	e58d6000 	str	r6, [sp]
 1f4:	ebfffffe 	bl	0 <CShellObj::_Parse()>
 1f8:	e1a05000 	mov	r5, r0
 1fc:	eaffffce 	b	13c <CShellObj::_Parse()+0x13c>
 200:	e3a04000 	mov	r4, #0
 204:	eaffffd9 	b	170 <CShellObj::_Parse()+0x170>
 208:	e59d1004 	ldr	r1, [sp, #4]
 20c:	e59f0010 	ldr	r0, [pc, #16]	; 224 <CShellObj::_Parse()+0x224>
 210:	ebfffffe 	bl	0 <printf>
 214:	e3a04001 	mov	r4, #1
 218:	e59d1004 	ldr	r1, [sp, #4]
 21c:	eaffffd3 	b	170 <CShellObj::_Parse()+0x170>
 220:	00000018 	.word	0x00000018
 224:	00000000 	.word	0x00000000

Disassembly of section .text._ZN9CShellObj15ExecShellScriptESt10shared_ptrINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE:

00000000 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>:
   0:	e3a02000 	mov	r2, #0
   4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   c:	e5911000 	ldr	r1, [r1]
  10:	e28db018 	add	r11, sp, #24
  14:	e58db010 	str	r11, [sp, #16]
  18:	e5cd2018 	strb	r2, [sp, #24]
  1c:	e58d2014 	str	r2, [sp, #20]
  20:	e8910420 	ldm	r1, {r5, r10}
  24:	e085a00a 	add	r10, r5, r10
  28:	e155000a 	cmp	r5, r10
  2c:	e58d0004 	str	r0, [sp, #4]
  30:	0a000020 	beq	b8 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0xb8>
  34:	e1a0400b 	mov	r4, r11
  38:	e1a08002 	mov	r8, r2
  3c:	e1a07002 	mov	r7, r2
  40:	ea000007 	b	64 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x64>
  44:	e3570000 	cmp	r7, #0
  48:	1a00001c 	bne	c0 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0xc0>
  4c:	e15a0005 	cmp	r10, r5
  50:	e58d8014 	str	r8, [sp, #20]
  54:	e5c48000 	strb	r8, [r4]
  58:	0a000010 	beq	a0 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0xa0>
  5c:	e59d7014 	ldr	r7, [sp, #20]
  60:	e59d4010 	ldr	r4, [sp, #16]
  64:	e4d56001 	ldrb	r6, [r5], #1
  68:	e356000a 	cmp	r6, #10
  6c:	0afffff4 	beq	44 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x44>
  70:	e154000b 	cmp	r4, r11
  74:	e2873001 	add	r3, r7, #1
  78:	0a000025 	beq	114 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x114>
  7c:	e59d9018 	ldr	r9, [sp, #24]
  80:	e1530009 	cmp	r3, r9
  84:	8a000025 	bhi	120 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x120>
  88:	e7c46007 	strb	r6, [r4, r7]
  8c:	e59d2010 	ldr	r2, [sp, #16]
  90:	e15a0005 	cmp	r10, r5
  94:	e58d3014 	str	r3, [sp, #20]
  98:	e7c28003 	strb	r8, [r2, r3]
  9c:	1affffee 	bne	5c <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x5c>
  a0:	e59d0010 	ldr	r0, [sp, #16]
  a4:	e150000b 	cmp	r0, r11
  a8:	0a000002 	beq	b8 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0xb8>
  ac:	e59d1018 	ldr	r1, [sp, #24]
  b0:	e2811001 	add	r1, r1, #1
  b4:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  b8:	e28dd02c 	add	sp, sp, #44	; 0x2c
  bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  c0:	e59d3004 	ldr	r3, [sp, #4]
  c4:	e3540000 	cmp	r4, #0
  c8:	e593c01c 	ldr	r12, [r3, #28]
  cc:	01a03004 	moveq	r3, r4
  d0:	0a000009 	beq	fc <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0xfc>
  d4:	e3a03000 	mov	r3, #0
  d8:	e2441001 	sub	r1, r4, #1
  dc:	e28c007f 	add	r0, r12, #127	; 0x7f
  e0:	e5f12001 	ldrb	r2, [r1, #1]!
  e4:	e3520000 	cmp	r2, #0
  e8:	0a000003 	beq	fc <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0xfc>
  ec:	e2833001 	add	r3, r3, #1
  f0:	e353007f 	cmp	r3, #127	; 0x7f
  f4:	e5e02001 	strb	r2, [r0, #1]!
  f8:	1afffff8 	bne	e0 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0xe0>
  fc:	e08cc003 	add	r12, r12, r3
 100:	e59d0004 	ldr	r0, [sp, #4]
 104:	e5cc8080 	strb	r8, [r12, #128]	; 0x80
 108:	ebfffffe 	bl	0 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)>
 10c:	e59d4010 	ldr	r4, [sp, #16]
 110:	eaffffcd 	b	4c <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x4c>
 114:	e353000f 	cmp	r3, #15
 118:	9affffda 	bls	88 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x88>
 11c:	e3a0900f 	mov	r9, #15
 120:	e3530000 	cmp	r3, #0
 124:	ba000027 	blt	1c8 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x1c8>
 128:	e1530089 	cmp	r3, r9, lsl #1
 12c:	e1a09089 	lsl	r9, r9, #1
 130:	3a000014 	bcc	188 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x188>
 134:	e1a09003 	mov	r9, r3
 138:	e2990001 	adds	r0, r9, #1
 13c:	4a000013 	bmi	190 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x190>
 140:	e58d3008 	str	r3, [sp, #8]
 144:	ebfffffe 	bl	0 <operator new(unsigned int)>
 148:	e3570000 	cmp	r7, #0
 14c:	e1a04000 	mov	r4, r0
 150:	e59d3008 	ldr	r3, [sp, #8]
 154:	1a00000e 	bne	194 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x194>
 158:	e59d1010 	ldr	r1, [sp, #16]
 15c:	e151000b 	cmp	r1, r11
 160:	0a000005 	beq	17c <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x17c>
 164:	e1a00001 	mov	r0, r1
 168:	e59d1018 	ldr	r1, [sp, #24]
 16c:	e58d3008 	str	r3, [sp, #8]
 170:	e2811001 	add	r1, r1, #1
 174:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 178:	e59d3008 	ldr	r3, [sp, #8]
 17c:	e58d9018 	str	r9, [sp, #24]
 180:	e58d4010 	str	r4, [sp, #16]
 184:	eaffffbf 	b	88 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x88>
 188:	e3590000 	cmp	r9, #0
 18c:	aaffffe9 	bge	138 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x138>
 190:	ebfffffe 	bl	0 <std::__throw_bad_alloc()>
 194:	e3570001 	cmp	r7, #1
 198:	e59d1010 	ldr	r1, [sp, #16]
 19c:	0a000006 	beq	1bc <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x1bc>
 1a0:	e1a02007 	mov	r2, r7
 1a4:	e58d300c 	str	r3, [sp, #12]
 1a8:	e58d1008 	str	r1, [sp, #8]
 1ac:	ebfffffe 	bl	0 <memcpy>
 1b0:	e59d300c 	ldr	r3, [sp, #12]
 1b4:	e59d1008 	ldr	r1, [sp, #8]
 1b8:	eaffffe7 	b	15c <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x15c>
 1bc:	e5d10000 	ldrb	r0, [r1]
 1c0:	e5c40000 	strb	r0, [r4]
 1c4:	eaffffe4 	b	15c <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x15c>
 1c8:	e59f0000 	ldr	r0, [pc]	; 1d0 <CShellObj::ExecShellScript(std::shared_ptr<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >)+0x1d0>
 1cc:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 1d0:	00000000 	.word	0x00000000

Disassembly of section .text._ZN9CShellObj5InputEm:

00000000 <CShellObj::Input(unsigned long)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e1a04801 	lsl	r4, r1, #16
   8:	e1a04824 	lsr	r4, r4, #16
   c:	e354002a 	cmp	r4, #42	; 0x2a
  10:	e1a05000 	mov	r5, r0
  14:	8a00002d 	bhi	d0 <CShellObj::Input(unsigned long)+0xd0>
  18:	e3540002 	cmp	r4, #2
  1c:	9a00002e 	bls	dc <CShellObj::Input(unsigned long)+0xdc>
  20:	e2443003 	sub	r3, r4, #3
  24:	e3530027 	cmp	r3, #39	; 0x27
  28:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  2c:	ea00002a 	b	dc <CShellObj::Input(unsigned long)+0xdc>
  30:	00000164 	.word	0x00000164
  34:	000000dc 	.word	0x000000dc
  38:	000000dc 	.word	0x000000dc
  3c:	000000dc 	.word	0x000000dc
  40:	000000dc 	.word	0x000000dc
  44:	00000178 	.word	0x00000178
  48:	000000dc 	.word	0x000000dc
  4c:	000001d4 	.word	0x000001d4
  50:	000000dc 	.word	0x000000dc
  54:	00000214 	.word	0x00000214
  58:	000000dc 	.word	0x000000dc
  5c:	000000dc 	.word	0x000000dc
  60:	000000dc 	.word	0x000000dc
  64:	000000dc 	.word	0x000000dc
  68:	000000dc 	.word	0x000000dc
  6c:	000000dc 	.word	0x000000dc
  70:	000000dc 	.word	0x000000dc
  74:	000000dc 	.word	0x000000dc
  78:	000000dc 	.word	0x000000dc
  7c:	000000dc 	.word	0x000000dc
  80:	000000dc 	.word	0x000000dc
  84:	000000dc 	.word	0x000000dc
  88:	000000dc 	.word	0x000000dc
  8c:	000000dc 	.word	0x000000dc
  90:	000000dc 	.word	0x000000dc
  94:	000000dc 	.word	0x000000dc
  98:	000000dc 	.word	0x000000dc
  9c:	000000dc 	.word	0x000000dc
  a0:	000000dc 	.word	0x000000dc
  a4:	000000fc 	.word	0x000000fc
  a8:	000000fc 	.word	0x000000fc
  ac:	000000fc 	.word	0x000000fc
  b0:	000000fc 	.word	0x000000fc
  b4:	000000fc 	.word	0x000000fc
  b8:	000000fc 	.word	0x000000fc
  bc:	000000fc 	.word	0x000000fc
  c0:	000000fc 	.word	0x000000fc
  c4:	000000fc 	.word	0x000000fc
  c8:	000000fc 	.word	0x000000fc
  cc:	000000fc 	.word	0x000000fc
  d0:	e3540082 	cmp	r4, #130	; 0x82
  d4:	0a000054 	beq	22c <CShellObj::Input(unsigned long)+0x22c>
  d8:	9a000000 	bls	e0 <CShellObj::Input(unsigned long)+0xe0>
  dc:	e8bd8070 	pop	{r4, r5, r6, pc}
  e0:	e354005f 	cmp	r4, #95	; 0x5f
  e4:	8a000019 	bhi	150 <CShellObj::Input(unsigned long)+0x150>
  e8:	e354005c 	cmp	r4, #92	; 0x5c
  ec:	8a000002 	bhi	fc <CShellObj::Input(unsigned long)+0xfc>
  f0:	e244302d 	sub	r3, r4, #45	; 0x2d
  f4:	e353002e 	cmp	r3, #46	; 0x2e
  f8:	8a000018 	bhi	160 <CShellObj::Input(unsigned long)+0x160>
  fc:	e595001c 	ldr	r0, [r5, #28]
 100:	e2800080 	add	r0, r0, #128	; 0x80
 104:	ebfffffe 	bl	0 <cstr_strlen(char const*)>
 108:	e2800001 	add	r0, r0, #1
 10c:	e350007f 	cmp	r0, #127	; 0x7f
 110:	8afffff1 	bhi	dc <CShellObj::Input(unsigned long)+0xdc>
 114:	e595501c 	ldr	r5, [r5, #28]
 118:	e20460ff 	and	r6, r4, #255	; 0xff
 11c:	e2850080 	add	r0, r5, #128	; 0x80
 120:	ebfffffe 	bl	0 <cstr_strlen(char const*)>
 124:	e350007e 	cmp	r0, #126	; 0x7e
 128:	90853000 	addls	r3, r5, r0
 12c:	95c36080 	strbls	r6, [r3, #128]	; 0x80
 130:	e3a03000 	mov	r3, #0
 134:	92800001 	addls	r0, r0, #1
 138:	e0855000 	add	r5, r5, r0
 13c:	e5c53080 	strb	r3, [r5, #128]	; 0x80
 140:	e1a01004 	mov	r1, r4
 144:	e8bd4070 	pop	{r4, r5, r6, lr}
 148:	e59f0124 	ldr	r0, [pc, #292]	; 274 <CShellObj::Input(unsigned long)+0x274>
 14c:	eafffffe 	b	0 <printf>
 150:	e2443061 	sub	r3, r4, #97	; 0x61
 154:	e353001d 	cmp	r3, #29
 158:	9affffe7 	bls	fc <CShellObj::Input(unsigned long)+0xfc>
 15c:	e8bd8070 	pop	{r4, r5, r6, pc}
 160:	e8bd8070 	pop	{r4, r5, r6, pc}
 164:	e59f010c 	ldr	r0, [pc, #268]	; 278 <CShellObj::Input(unsigned long)+0x278>
 168:	ebfffffe 	bl	0 <printf>
 16c:	e8bd4070 	pop	{r4, r5, r6, lr}
 170:	e59f0104 	ldr	r0, [pc, #260]	; 27c <CShellObj::Input(unsigned long)+0x27c>
 174:	eafffffe 	b	0 <printf>
 178:	e3a01008 	mov	r1, #8
 17c:	e59f00f0 	ldr	r0, [pc, #240]	; 274 <CShellObj::Input(unsigned long)+0x274>
 180:	ebfffffe 	bl	0 <printf>
 184:	e595401c 	ldr	r4, [r5, #28]
 188:	e2846080 	add	r6, r4, #128	; 0x80
 18c:	e1a00006 	mov	r0, r6
 190:	ebfffffe 	bl	0 <cstr_strlen(char const*)>
 194:	e3500000 	cmp	r0, #0
 198:	0a000004 	beq	1b0 <CShellObj::Input(unsigned long)+0x1b0>
 19c:	e1a00006 	mov	r0, r6
 1a0:	ebfffffe 	bl	0 <cstr_strlen(char const*)>
 1a4:	e3a03000 	mov	r3, #0
 1a8:	e0844000 	add	r4, r4, r0
 1ac:	e5c4307f 	strb	r3, [r4, #127]	; 0x7f
 1b0:	e59f00c0 	ldr	r0, [pc, #192]	; 278 <CShellObj::Input(unsigned long)+0x278>
 1b4:	ebfffffe 	bl	0 <printf>
 1b8:	e59f00bc 	ldr	r0, [pc, #188]	; 27c <CShellObj::Input(unsigned long)+0x27c>
 1bc:	ebfffffe 	bl	0 <printf>
 1c0:	e595101c 	ldr	r1, [r5, #28]
 1c4:	e59f00b4 	ldr	r0, [pc, #180]	; 280 <CShellObj::Input(unsigned long)+0x280>
 1c8:	e2811080 	add	r1, r1, #128	; 0x80
 1cc:	e8bd4070 	pop	{r4, r5, r6, lr}
 1d0:	eafffffe 	b	0 <printf>
 1d4:	e59f009c 	ldr	r0, [pc, #156]	; 278 <CShellObj::Input(unsigned long)+0x278>
 1d8:	ebfffffe 	bl	0 <printf>
 1dc:	e1a00005 	mov	r0, r5
 1e0:	ebfffffe 	bl	0 <CShellObj::Input(unsigned long)>
 1e4:	e3500000 	cmp	r0, #0
 1e8:	1a000002 	bne	1f8 <CShellObj::Input(unsigned long)+0x1f8>
 1ec:	e5d53020 	ldrb	r3, [r5, #32]
 1f0:	e3530000 	cmp	r3, #0
 1f4:	0a000014 	beq	24c <CShellObj::Input(unsigned long)+0x24c>
 1f8:	e3a04000 	mov	r4, #0
 1fc:	e59f0078 	ldr	r0, [pc, #120]	; 27c <CShellObj::Input(unsigned long)+0x27c>
 200:	e5c54020 	strb	r4, [r5, #32]
 204:	ebfffffe 	bl	0 <printf>
 208:	e595301c 	ldr	r3, [r5, #28]
 20c:	e5c34080 	strb	r4, [r3, #128]	; 0x80
 210:	e8bd8070 	pop	{r4, r5, r6, pc}
 214:	e3a0100c 	mov	r1, #12
 218:	e59f0054 	ldr	r0, [pc, #84]	; 274 <CShellObj::Input(unsigned long)+0x274>
 21c:	ebfffffe 	bl	0 <printf>
 220:	e8bd4070 	pop	{r4, r5, r6, lr}
 224:	e59f0050 	ldr	r0, [pc, #80]	; 27c <CShellObj::Input(unsigned long)+0x27c>
 228:	eafffffe 	b	0 <printf>
 22c:	e3a01008 	mov	r1, #8
 230:	e59f004c 	ldr	r0, [pc, #76]	; 284 <CShellObj::Input(unsigned long)+0x284>
 234:	ebfffffe 	bl	0 <printf>
 238:	e3a02080 	mov	r2, #128	; 0x80
 23c:	e595101c 	ldr	r1, [r5, #28]
 240:	e0810002 	add	r0, r1, r2
 244:	ebfffffe 	bl	0 <memcpy>
 248:	eaffffda 	b	1b8 <CShellObj::Input(unsigned long)+0x1b8>
 24c:	e595001c 	ldr	r0, [r5, #28]
 250:	e2800080 	add	r0, r0, #128	; 0x80
 254:	ebfffffe 	bl	0 <cstr_strlen(char const*)>
 258:	e3500000 	cmp	r0, #0
 25c:	0affffe5 	beq	1f8 <CShellObj::Input(unsigned long)+0x1f8>
 260:	e3a02080 	mov	r2, #128	; 0x80
 264:	e595001c 	ldr	r0, [r5, #28]
 268:	e0801002 	add	r1, r0, r2
 26c:	ebfffffe 	bl	0 <memcpy>
 270:	eaffffe0 	b	1f8 <CShellObj::Input(unsigned long)+0x1f8>
 274:	00000010 	.word	0x00000010
	...
 280:	00000008 	.word	0x00000008
 284:	00000004 	.word	0x00000004

Disassembly of section .text._ZN9CShellObj7vOnStepEv:

00000000 <CShellObj::vOnStep()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	ebfffffe 	bl	0 <getchar>
   c:	e3700001 	cmn	r0, #1
  10:	1a000000 	bne	18 <CShellObj::vOnStep()+0x18>
  14:	e8bd8010 	pop	{r4, pc}
  18:	e1a01000 	mov	r1, r0
  1c:	e1a00004 	mov	r0, r4
  20:	e8bd4010 	pop	{r4, lr}
  24:	eafffffe 	b	0 <CShellObj::vOnStep()>

Disassembly of section .text._ZN13CHelpShellCmd7vOnMainERKSt6vectorI4cstrILj16EESaIS2_EE:

00000000 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e1a05000 	mov	r5, r0
   8:	e3a03001 	mov	r3, #1
   c:	e5951018 	ldr	r1, [r5, #24]
  10:	e24dd090 	sub	sp, sp, #144	; 0x90
  14:	e28d0004 	add	r0, sp, #4
  18:	e5c13020 	strb	r3, [r1, #32]
  1c:	ebfffffe 	bl	0 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)>
  20:	e59d8004 	ldr	r8, [sp, #4]
  24:	e59d6008 	ldr	r6, [sp, #8]
  28:	e1560008 	cmp	r6, r8
  2c:	0a00004e 	beq	16c <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x16c>
  30:	e3a04000 	mov	r4, #0
  34:	e59f715c 	ldr	r7, [pc, #348]	; 198 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x198>
  38:	e3a03000 	mov	r3, #0
  3c:	e3a02068 	mov	r2, #104	; 0x68
  40:	e59f0154 	ldr	r0, [pc, #340]	; 19c <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x19c>
  44:	e28d100f 	add	r1, sp, #15
  48:	ea000002 	b	58 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x58>
  4c:	e5f02001 	ldrb	r2, [r0, #1]!
  50:	e3520000 	cmp	r2, #0
  54:	0a000003 	beq	68 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x68>
  58:	e2833001 	add	r3, r3, #1
  5c:	e353000f 	cmp	r3, #15
  60:	e5e12001 	strb	r2, [r1, #1]!
  64:	1afffff8 	bne	4c <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x4c>
  68:	e2833090 	add	r3, r3, #144	; 0x90
  6c:	e08d3003 	add	r3, sp, r3
  70:	e1a00008 	mov	r0, r8
  74:	e28d1010 	add	r1, sp, #16
  78:	e5434080 	strb	r4, [r3, #-128]	; 0xffffff80
  7c:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  80:	e3500000 	cmp	r0, #0
  84:	0a000035 	beq	160 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x160>
  88:	e1a01008 	mov	r1, r8
  8c:	e1a00007 	mov	r0, r7
  90:	ebfffffe 	bl	0 <printf>
  94:	e3580000 	cmp	r8, #0
  98:	01a03008 	moveq	r3, r8
  9c:	e5cd4010 	strb	r4, [sp, #16]
  a0:	0a000009 	beq	cc <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0xcc>
  a4:	e3a03000 	mov	r3, #0
  a8:	e28d000f 	add	r0, sp, #15
  ac:	e2481001 	sub	r1, r8, #1
  b0:	e5f12001 	ldrb	r2, [r1, #1]!
  b4:	e3520000 	cmp	r2, #0
  b8:	0a000003 	beq	cc <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0xcc>
  bc:	e2833001 	add	r3, r3, #1
  c0:	e353007f 	cmp	r3, #127	; 0x7f
  c4:	e5e02001 	strb	r2, [r0, #1]!
  c8:	1afffff8 	bne	b0 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0xb0>
  cc:	e2833090 	add	r3, r3, #144	; 0x90
  d0:	e08d3003 	add	r3, sp, r3
  d4:	e28d0010 	add	r0, sp, #16
  d8:	e5434080 	strb	r4, [r3, #-128]	; 0xffffff80
  dc:	ebfffffe 	bl	0 <cstr_strlen(char const*)>
  e0:	e350007e 	cmp	r0, #126	; 0x7e
  e4:	8a00000a 	bhi	114 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x114>
  e8:	e3a03020 	mov	r3, #32
  ec:	e28d2010 	add	r2, sp, #16
  f0:	e59f10a8 	ldr	r1, [pc, #168]	; 1a0 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x1a0>
  f4:	e0822000 	add	r2, r2, r0
  f8:	e2800001 	add	r0, r0, #1
  fc:	e350007f 	cmp	r0, #127	; 0x7f
 100:	e4c23001 	strb	r3, [r2], #1
 104:	0a000002 	beq	114 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x114>
 108:	e5f13001 	ldrb	r3, [r1, #1]!
 10c:	e3530000 	cmp	r3, #0
 110:	1afffff8 	bne	f8 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0xf8>
 114:	e3a03000 	mov	r3, #0
 118:	e2800090 	add	r0, r0, #144	; 0x90
 11c:	e08d0000 	add	r0, sp, r0
 120:	e5952018 	ldr	r2, [r5, #24]
 124:	e5404080 	strb	r4, [r0, #-128]	; 0xffffff80
 128:	e592c01c 	ldr	r12, [r2, #28]
 12c:	e28d100f 	add	r1, sp, #15
 130:	e28c007f 	add	r0, r12, #127	; 0x7f
 134:	e5f12001 	ldrb	r2, [r1, #1]!
 138:	e3520000 	cmp	r2, #0
 13c:	0a000003 	beq	150 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x150>
 140:	e2833001 	add	r3, r3, #1
 144:	e353007f 	cmp	r3, #127	; 0x7f
 148:	e5e02001 	strb	r2, [r0, #1]!
 14c:	1afffff8 	bne	134 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x134>
 150:	e08cc003 	add	r12, r12, r3
 154:	e5cc4080 	strb	r4, [r12, #128]	; 0x80
 158:	e5950018 	ldr	r0, [r5, #24]
 15c:	ebfffffe 	bl	0 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)>
 160:	e2888010 	add	r8, r8, #16
 164:	e1560008 	cmp	r6, r8
 168:	1affffb2 	bne	38 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x38>
 16c:	e59f0030 	ldr	r0, [pc, #48]	; 1a4 <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x1a4>
 170:	ebfffffe 	bl	0 <printf>
 174:	e59d0004 	ldr	r0, [sp, #4]
 178:	e3500000 	cmp	r0, #0
 17c:	0a000002 	beq	18c <CHelpShellCmd::vOnMain(std::vector<cstr<16u>, std::allocator<cstr<16u> > > const&)+0x18c>
 180:	e59d100c 	ldr	r1, [sp, #12]
 184:	e0411000 	sub	r1, r1, r0
 188:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 18c:	e3a00000 	mov	r0, #0
 190:	e28dd090 	add	sp, sp, #144	; 0x90
 194:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 198:	00000008 	.word	0x00000008
 19c:	00000000 	.word	0x00000000
 1a0:	00000010 	.word	0x00000010
 1a4:	00000000 	.word	0x00000000

Disassembly of section .text._ZN9CShellObj8RegisterEP9CShellCmd.part.0:

00000000 <CShellObj::Register(CShellCmd*) [clone .part.0]>:
   0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   4:	e1a06000 	mov	r6, r0
   8:	e590001c 	ldr	r0, [r0, #28]
   c:	e2815004 	add	r5, r1, #4
  10:	e1a07001 	mov	r7, r1
  14:	e24dd008 	sub	sp, sp, #8
  18:	e1a01005 	mov	r1, r5
  1c:	e2800c01 	add	r0, r0, #256	; 0x100
  20:	ebfffffe 	bl	0 <CShellObj::Register(CShellCmd*) [clone .part.0]>
  24:	e596a01c 	ldr	r10, [r6, #28]
  28:	e28a9f41 	add	r9, r10, #260	; 0x104
  2c:	e1590000 	cmp	r9, r0
  30:	0a000004 	beq	48 <CShellObj::Register(CShellCmd*) [clone .part.0]+0x48>
  34:	e1a01005 	mov	r1, r5
  38:	e59f0098 	ldr	r0, [pc, #152]	; d8 <CShellObj::Register(CShellCmd*) [clone .part.0]+0xd8>
  3c:	e28dd008 	add	sp, sp, #8
  40:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
  44:	eafffffe 	b	0 <printf>
  48:	e59a4108 	ldr	r4, [r10, #264]	; 0x108
  4c:	e1a08009 	mov	r8, r9
  50:	e3540000 	cmp	r4, #0
  54:	0a000015 	beq	b0 <CShellObj::Register(CShellCmd*) [clone .part.0]+0xb0>
  58:	e2840010 	add	r0, r4, #16
  5c:	e1a01005 	mov	r1, r5
  60:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  64:	e5943008 	ldr	r3, [r4, #8]
  68:	e594200c 	ldr	r2, [r4, #12]
  6c:	e3500000 	cmp	r0, #0
  70:	a1a08004 	movge	r8, r4
  74:	b1a04002 	movlt	r4, r2
  78:	a1a04003 	movge	r4, r3
  7c:	e3540000 	cmp	r4, #0
  80:	1afffff4 	bne	58 <CShellObj::Register(CShellCmd*) [clone .part.0]+0x58>
  84:	e1590008 	cmp	r9, r8
  88:	0a000008 	beq	b0 <CShellObj::Register(CShellCmd*) [clone .part.0]+0xb0>
  8c:	e1a00005 	mov	r0, r5
  90:	e2881010 	add	r1, r8, #16
  94:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  98:	e3500000 	cmp	r0, #0
  9c:	ba000003 	blt	b0 <CShellObj::Register(CShellCmd*) [clone .part.0]+0xb0>
  a0:	e5887020 	str	r7, [r8, #32]
  a4:	e5876014 	str	r6, [r7, #20]
  a8:	e28dd008 	add	sp, sp, #8
  ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  b0:	e1a01008 	mov	r1, r8
  b4:	e28a0c01 	add	r0, r10, #256	; 0x100
  b8:	e28d2004 	add	r2, sp, #4
  bc:	e58d5004 	str	r5, [sp, #4]
  c0:	ebfffffe 	bl	0 <CShellObj::Register(CShellCmd*) [clone .part.0]>
  c4:	e1a08000 	mov	r8, r0
  c8:	e5887020 	str	r7, [r8, #32]
  cc:	e5876014 	str	r6, [r7, #20]
  d0:	e28dd008 	add	sp, sp, #8
  d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  d8:	00000000 	.word	0x00000000

Disassembly of section .text._ZN9CShellObj8RegisterEP9CShellCmd:

00000000 <CShellObj::Register(CShellCmd*)>:
   0:	e3510000 	cmp	r1, #0
   4:	01a0f00e 	moveq	pc, lr
   8:	eafffffe 	b	0 <CShellObj::Register(CShellCmd*)>

Disassembly of section .text._ZN9CShellObjC2Ev:

00000000 <CShellObj::CShellObj()>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e3a05000 	mov	r5, #0
   8:	e1a04000 	mov	r4, r0
   c:	ebfffffe 	bl	0 <CObj::CObj()>
  10:	e59f3120 	ldr	r3, [pc, #288]	; 138 <CShellObj::CShellObj()+0x138>
  14:	e3a00f46 	mov	r0, #280	; 0x118
  18:	e5843000 	str	r3, [r4]
  1c:	e5c45020 	strb	r5, [r4, #32]
  20:	ebfffffe 	bl	0 <operator new(unsigned int)>
  24:	e1a03000 	mov	r3, r0
  28:	e2832f41 	add	r2, r3, #260	; 0x104
  2c:	e583210c 	str	r2, [r3, #268]	; 0x10c
  30:	e5832110 	str	r2, [r3, #272]	; 0x110
  34:	e3a0001c 	mov	r0, #28
  38:	e584301c 	str	r3, [r4, #28]
  3c:	e5c35000 	strb	r5, [r3]
  40:	e5c35080 	strb	r5, [r3, #128]	; 0x80
  44:	e5c35104 	strb	r5, [r3, #260]	; 0x104
  48:	e5835108 	str	r5, [r3, #264]	; 0x108
  4c:	e5835114 	str	r5, [r3, #276]	; 0x114
  50:	ebfffffe 	bl	0 <operator new(unsigned int)>
  54:	e3a0c068 	mov	r12, #104	; 0x68
  58:	e1a01000 	mov	r1, r0
  5c:	e5c05004 	strb	r5, [r0, #4]
  60:	e5805014 	str	r5, [r0, #20]
  64:	e2802003 	add	r2, r0, #3
  68:	e59fe0cc 	ldr	lr, [pc, #204]	; 13c <CShellObj::CShellObj()+0x13c>
  6c:	e2800012 	add	r0, r0, #18
  70:	ea000002 	b	80 <CShellObj::CShellObj()+0x80>
  74:	e5fec001 	ldrb	r12, [lr, #1]!
  78:	e35c0000 	cmp	r12, #0
  7c:	0a000006 	beq	9c <CShellObj::CShellObj()+0x9c>
  80:	e1a03002 	mov	r3, r2
  84:	e5e2c001 	strb	r12, [r2, #1]!
  88:	e2433002 	sub	r3, r3, #2
  8c:	e1520000 	cmp	r2, r0
  90:	e0433001 	sub	r3, r3, r1
  94:	1afffff6 	bne	74 <CShellObj::CShellObj()+0x74>
  98:	e3a0300f 	mov	r3, #15
  9c:	e3a05000 	mov	r5, #0
  a0:	e59f2098 	ldr	r2, [pc, #152]	; 140 <CShellObj::CShellObj()+0x140>
  a4:	e0813003 	add	r3, r1, r3
  a8:	e5c35004 	strb	r5, [r3, #4]
  ac:	e1a00004 	mov	r0, r4
  b0:	e5812000 	str	r2, [r1]
  b4:	e5814018 	str	r4, [r1, #24]
  b8:	ebfffffe 	bl	0 <CShellObj::CShellObj()>
  bc:	e3a00018 	mov	r0, #24
  c0:	ebfffffe 	bl	0 <operator new(unsigned int)>
  c4:	e3a0c063 	mov	r12, #99	; 0x63
  c8:	e1a01000 	mov	r1, r0
  cc:	e5c05004 	strb	r5, [r0, #4]
  d0:	e5805014 	str	r5, [r0, #20]
  d4:	e2802003 	add	r2, r0, #3
  d8:	e59fe064 	ldr	lr, [pc, #100]	; 144 <CShellObj::CShellObj()+0x144>
  dc:	e2800012 	add	r0, r0, #18
  e0:	ea000002 	b	f0 <CShellObj::CShellObj()+0xf0>
  e4:	e5fec001 	ldrb	r12, [lr, #1]!
  e8:	e35c0000 	cmp	r12, #0
  ec:	0a000006 	beq	10c <CShellObj::CShellObj()+0x10c>
  f0:	e1a03002 	mov	r3, r2
  f4:	e5e2c001 	strb	r12, [r2, #1]!
  f8:	e2433002 	sub	r3, r3, #2
  fc:	e1500002 	cmp	r0, r2
 100:	e0433001 	sub	r3, r3, r1
 104:	1afffff6 	bne	e4 <CShellObj::CShellObj()+0xe4>
 108:	e3a0300f 	mov	r3, #15
 10c:	e3a0c000 	mov	r12, #0
 110:	e59f2030 	ldr	r2, [pc, #48]	; 148 <CShellObj::CShellObj()+0x148>
 114:	e0813003 	add	r3, r1, r3
 118:	e5c3c004 	strb	r12, [r3, #4]
 11c:	e1a00004 	mov	r0, r4
 120:	e5812000 	str	r2, [r1]
 124:	ebfffffe 	bl	0 <CShellObj::CShellObj()>
 128:	e59f001c 	ldr	r0, [pc, #28]	; 14c <CShellObj::CShellObj()+0x14c>
 12c:	ebfffffe 	bl	0 <printf>
 130:	e1a00004 	mov	r0, r4
 134:	e8bd8070 	pop	{r4, r5, r6, pc}
 138:	00000008 	.word	0x00000008
 13c:	00000000 	.word	0x00000000
 140:	00000008 	.word	0x00000008
 144:	00000000 	.word	0x00000000
 148:	00000008 	.word	0x00000008
 14c:	00000000 	.word	0x00000000

sound.o:     file format elf32-littlearm


sprprint.o:     file format elf32-littlearm


Disassembly of section .text._Z14sprprint_closeP4File:

00000000 <sprprint_close(File*)>:
   0:	e5903004 	ldr	r3, [r0, #4]
   4:	e5d32012 	ldrb	r2, [r3, #18]
   8:	e3520000 	cmp	r2, #0
   c:	13a02000 	movne	r2, #0
  10:	11a00002 	movne	r0, r2
  14:	15c32012 	strbne	r2, [r3, #18]
  18:	03e00000 	mvneq	r0, #0
  1c:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._Z13sprprint_openP4File:

00000000 <sprprint_open(File*)>:
   0:	e92d4030 	push	{r4, r5, lr}
   4:	e5905004 	ldr	r5, [r0, #4]
   8:	e24dd00c 	sub	sp, sp, #12
   c:	e5d54012 	ldrb	r4, [r5, #18]
  10:	e3540000 	cmp	r4, #0
  14:	1a00000a 	bne	44 <sprprint_open(File*)+0x44>
  18:	e3a03001 	mov	r3, #1
  1c:	e1a0000d 	mov	r0, sp
  20:	e5c53012 	strb	r3, [r5, #18]
  24:	e28d1004 	add	r1, sp, #4
  28:	ebfffffe 	bl	0 <b8PpuGetResolution>
  2c:	e89d000c 	ldm	sp, {r2, r3}
  30:	e1a00004 	mov	r0, r4
  34:	e1c521ba 	strh	r2, [r5, #26]
  38:	e1c531bc 	strh	r3, [r5, #28]
  3c:	e28dd00c 	add	sp, sp, #12
  40:	e8bd8030 	pop	{r4, r5, pc}
  44:	e3e00000 	mvn	r0, #0
  48:	eafffffb 	b	3c <sprprint_open(File*)+0x3c>

Disassembly of section .text._Z14sprprint_ioctlP4FilejPv:

00000000 <sprprint_ioctl(File*, unsigned int, void*)>:
   0:	e3520000 	cmp	r2, #0
   4:	13500000 	cmpne	r0, #0
   8:	e92d4010 	push	{r4, lr}
   c:	03a03001 	moveq	r3, #1
  10:	13a03000 	movne	r3, #0
  14:	0a000018 	beq	7c <sprprint_ioctl(File*, unsigned int, void*)+0x7c>
  18:	e3510000 	cmp	r1, #0
  1c:	e590c004 	ldr	r12, [r0, #4]
  20:	0a000011 	beq	6c <sprprint_ioctl(File*, unsigned int, void*)+0x6c>
  24:	e3510001 	cmp	r1, #1
  28:	0a000003 	beq	3c <sprprint_ioctl(File*, unsigned int, void*)+0x3c>
  2c:	e3a00019 	mov	r0, #25
  30:	ebfffffe 	bl	0 <set_errno>
  34:	e3e00000 	mvn	r0, #0
  38:	e8bd8010 	pop	{r4, pc}
  3c:	e1dce0bc 	ldrh	lr, [r12, #12]
  40:	e1dc10be 	ldrh	r1, [r12, #14]
  44:	e1a00003 	mov	r0, r3
  48:	e1c2e0b0 	strh	lr, [r2]
  4c:	e1dc31b8 	ldrh	r3, [r12, #24]
  50:	e5dce015 	ldrb	lr, [r12, #21]
  54:	e1c210b2 	strh	r1, [r2, #2]
  58:	e5dc1016 	ldrb	r1, [r12, #22]
  5c:	e5c2e004 	strb	lr, [r2, #4]
  60:	e5c21005 	strb	r1, [r2, #5]
  64:	e1c230b6 	strh	r3, [r2, #6]
  68:	e8bd8010 	pop	{r4, pc}
  6c:	e5923000 	ldr	r3, [r2]
  70:	e1a00001 	mov	r0, r1
  74:	e58c3008 	str	r3, [r12, #8]
  78:	e8bd8010 	pop	{r4, pc}
  7c:	e3a00016 	mov	r0, #22
  80:	ebfffffe 	bl	0 <set_errno>
  84:	e3e00000 	mvn	r0, #0
  88:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text.__tcf_0:

00000000 <__tcf_0>:
   0:	e92d4010 	push	{r4, lr}
   4:	e59f4010 	ldr	r4, [pc, #16]	; 1c <__tcf_0+0x1c>
   8:	e2840024 	add	r0, r4, #36	; 0x24
   c:	ebfffffe 	bl	0 <CEscapeSeqDecoder::~CEscapeSeqDecoder()>
  10:	e2840004 	add	r0, r4, #4
  14:	e8bd4010 	pop	{r4, lr}
  18:	eafffffe 	b	0 <CEscapeSeqDecoder::~CEscapeSeqDecoder()>
  1c:	00000000 	.word	0x00000000

Disassembly of section .text._ZL14sprprint_writeP4FilePKcj:

00000000 <sprprint_write(File*, char const*, unsigned int)>:
   0:	e3520000 	cmp	r2, #0
   4:	13510000 	cmpne	r1, #0
   8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   c:	03a05001 	moveq	r5, #1
  10:	13a05000 	movne	r5, #0
  14:	e24dd00c 	sub	sp, sp, #12
  18:	0a000100 	beq	420 <sprprint_write(File*, char const*, unsigned int)+0x420>
  1c:	e5904004 	ldr	r4, [r0, #4]
  20:	e5943000 	ldr	r3, [r4]
  24:	e3530001 	cmp	r3, #1
  28:	8a0000fc 	bhi	420 <sprprint_write(File*, char const*, unsigned int)+0x420>
  2c:	e1a07002 	mov	r7, r2
  30:	e59f93f8 	ldr	r9, [pc, #1016]	; 430 <sprprint_write(File*, char const*, unsigned int)+0x430>
  34:	e59f83f8 	ldr	r8, [pc, #1016]	; 434 <sprprint_write(File*, char const*, unsigned int)+0x434>
  38:	e59fa3f8 	ldr	r10, [pc, #1016]	; 438 <sprprint_write(File*, char const*, unsigned int)+0x438>
  3c:	e2416001 	sub	r6, r1, #1
  40:	e5f61001 	ldrb	r1, [r6, #1]!
  44:	e3510000 	cmp	r1, #0
  48:	0a00001c 	beq	c0 <sprprint_write(File*, char const*, unsigned int)+0xc0>
  4c:	e2840004 	add	r0, r4, #4
  50:	ebfffffe 	bl	0 <CEscapeSeqDecoder::Stream(int)>
  54:	e5d03003 	ldrb	r3, [r0, #3]
  58:	e3530011 	cmp	r3, #17
  5c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  60:	ea000013 	b	b4 <sprprint_write(File*, char const*, unsigned int)+0xb4>
  64:	00000294 	.word	0x00000294
  68:	00000274 	.word	0x00000274
  6c:	00000254 	.word	0x00000254
  70:	00000234 	.word	0x00000234
  74:	00000214 	.word	0x00000214
  78:	000000b4 	.word	0x000000b4
  7c:	000001f4 	.word	0x000001f4
  80:	000000b4 	.word	0x000000b4
  84:	000000fc 	.word	0x000000fc
  88:	000000b4 	.word	0x000000b4
  8c:	000000b4 	.word	0x000000b4
  90:	000000b4 	.word	0x000000b4
  94:	000000b4 	.word	0x000000b4
  98:	000000b4 	.word	0x000000b4
  9c:	000000b4 	.word	0x000000b4
  a0:	000000e4 	.word	0x000000e4
  a4:	000000ac 	.word	0x000000ac
  a8:	000000cc 	.word	0x000000cc
  ac:	e3a03000 	mov	r3, #0
  b0:	e5c43013 	strb	r3, [r4, #19]
  b4:	e2855001 	add	r5, r5, #1
  b8:	e1570005 	cmp	r7, r5
  bc:	8affffdf 	bhi	40 <sprprint_write(File*, char const*, unsigned int)+0x40>
  c0:	e1a00005 	mov	r0, r5
  c4:	e28dd00c 	add	sp, sp, #12
  c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  cc:	e1d030bc 	ldrh	r3, [r0, #12]
  d0:	e2855001 	add	r5, r5, #1
  d4:	e1570005 	cmp	r7, r5
  d8:	e1c431b8 	strh	r3, [r4, #24]
  dc:	8affffd7 	bhi	40 <sprprint_write(File*, char const*, unsigned int)+0x40>
  e0:	eafffff6 	b	c0 <sprprint_write(File*, char const*, unsigned int)+0xc0>
  e4:	e3a03001 	mov	r3, #1
  e8:	e2855001 	add	r5, r5, #1
  ec:	e1570005 	cmp	r7, r5
  f0:	e5c43013 	strb	r3, [r4, #19]
  f4:	8affffd1 	bhi	40 <sprprint_write(File*, char const*, unsigned int)+0x40>
  f8:	eafffff0 	b	c0 <sprprint_write(File*, char const*, unsigned int)+0xc0>
  fc:	e5d03008 	ldrb	r3, [r0, #8]
 100:	e5d42014 	ldrb	r2, [r4, #20]
 104:	e203300f 	and	r3, r3, #15
 108:	e3c2200f 	bic	r2, r2, #15
 10c:	e1833002 	orr	r3, r3, r2
 110:	e5c43014 	strb	r3, [r4, #20]
 114:	e5d03009 	ldrb	r3, [r0, #9]
 118:	e3530000 	cmp	r3, #0
 11c:	0a0000ab 	beq	3d0 <sprprint_write(File*, char const*, unsigned int)+0x3d0>
 120:	e243201e 	sub	r2, r3, #30
 124:	e3520007 	cmp	r2, #7
 128:	9a0000b7 	bls	40c <sprprint_write(File*, char const*, unsigned int)+0x40c>
 12c:	e2432032 	sub	r2, r3, #50	; 0x32
 130:	e20220ff 	and	r2, r2, #255	; 0xff
 134:	e352000f 	cmp	r2, #15
 138:	95c42015 	strbls	r2, [r4, #21]
 13c:	9a000007 	bls	160 <sprprint_write(File*, char const*, unsigned int)+0x160>
 140:	e243205a 	sub	r2, r3, #90	; 0x5a
 144:	e3520007 	cmp	r2, #7
 148:	8a0000a0 	bhi	3d0 <sprprint_write(File*, char const*, unsigned int)+0x3d0>
 14c:	e08a3003 	add	r3, r10, r3
 150:	e5533052 	ldrb	r3, [r3, #-82]	; 0xffffffae
 154:	e3530010 	cmp	r3, #16
 158:	e5c43015 	strb	r3, [r4, #21]
 15c:	0a00009b 	beq	3d0 <sprprint_write(File*, char const*, unsigned int)+0x3d0>
 160:	e5d0300a 	ldrb	r3, [r0, #10]
 164:	e3530000 	cmp	r3, #0
 168:	03a02010 	moveq	r2, #16
 16c:	0a00000b 	beq	1a0 <sprprint_write(File*, char const*, unsigned int)+0x1a0>
 170:	e243201e 	sub	r2, r3, #30
 174:	e3520007 	cmp	r2, #7
 178:	9a0000a0 	bls	400 <sprprint_write(File*, char const*, unsigned int)+0x400>
 17c:	e2432032 	sub	r2, r3, #50	; 0x32
 180:	e20220ff 	and	r2, r2, #255	; 0xff
 184:	e352000f 	cmp	r2, #15
 188:	9a000004 	bls	1a0 <sprprint_write(File*, char const*, unsigned int)+0x1a0>
 18c:	e243205a 	sub	r2, r3, #90	; 0x5a
 190:	e3520007 	cmp	r2, #7
 194:	83a02007 	movhi	r2, #7
 198:	908a3003 	addls	r3, r10, r3
 19c:	95532052 	ldrbls	r2, [r3, #-82]	; 0xffffffae
 1a0:	e5c42016 	strb	r2, [r4, #22]
 1a4:	e1d411b8 	ldrh	r1, [r4, #24]
 1a8:	e3a02001 	mov	r2, #1
 1ac:	e5940008 	ldr	r0, [r4, #8]
 1b0:	ebfffffe 	bl	0 <b8PpuSetpalAllocZPB>
 1b4:	e5d43013 	ldrb	r3, [r4, #19]
 1b8:	e5d42015 	ldrb	r2, [r4, #21]
 1bc:	e1a03203 	lsl	r3, r3, #4
 1c0:	e1833e02 	orr	r3, r3, r2, lsl #28
 1c4:	e5902004 	ldr	r2, [r0, #4]
 1c8:	e0033009 	and	r3, r3, r9
 1cc:	e0022008 	and	r2, r2, r8
 1d0:	e1833002 	orr	r3, r3, r2
 1d4:	e5803004 	str	r3, [r0, #4]
 1d8:	e5d03000 	ldrb	r3, [r0]
 1dc:	e2855001 	add	r5, r5, #1
 1e0:	e383300f 	orr	r3, r3, #15
 1e4:	e1570005 	cmp	r7, r5
 1e8:	e5c03000 	strb	r3, [r0]
 1ec:	8affff93 	bhi	40 <sprprint_write(File*, char const*, unsigned int)+0x40>
 1f0:	eaffffb2 	b	c0 <sprprint_write(File*, char const*, unsigned int)+0xc0>
 1f4:	e1d030b4 	ldrh	r3, [r0, #4]
 1f8:	e2855001 	add	r5, r5, #1
 1fc:	e1c430bc 	strh	r3, [r4, #12]
 200:	e1d030b6 	ldrh	r3, [r0, #6]
 204:	e1570005 	cmp	r7, r5
 208:	e1c430be 	strh	r3, [r4, #14]
 20c:	8affff8b 	bhi	40 <sprprint_write(File*, char const*, unsigned int)+0x40>
 210:	eaffffaa 	b	c0 <sprprint_write(File*, char const*, unsigned int)+0xc0>
 214:	e1d430bc 	ldrh	r3, [r4, #12]
 218:	e5d42010 	ldrb	r2, [r4, #16]
 21c:	e2855001 	add	r5, r5, #1
 220:	e0433002 	sub	r3, r3, r2
 224:	e1570005 	cmp	r7, r5
 228:	e1c430bc 	strh	r3, [r4, #12]
 22c:	8affff83 	bhi	40 <sprprint_write(File*, char const*, unsigned int)+0x40>
 230:	eaffffa2 	b	c0 <sprprint_write(File*, char const*, unsigned int)+0xc0>
 234:	e1d420bc 	ldrh	r2, [r4, #12]
 238:	e5d43010 	ldrb	r3, [r4, #16]
 23c:	e2855001 	add	r5, r5, #1
 240:	e0833002 	add	r3, r3, r2
 244:	e1570005 	cmp	r7, r5
 248:	e1c430bc 	strh	r3, [r4, #12]
 24c:	8affff7b 	bhi	40 <sprprint_write(File*, char const*, unsigned int)+0x40>
 250:	eaffff9a 	b	c0 <sprprint_write(File*, char const*, unsigned int)+0xc0>
 254:	e1d420be 	ldrh	r2, [r4, #14]
 258:	e5d43011 	ldrb	r3, [r4, #17]
 25c:	e2855001 	add	r5, r5, #1
 260:	e0833002 	add	r3, r3, r2
 264:	e1570005 	cmp	r7, r5
 268:	e1c430be 	strh	r3, [r4, #14]
 26c:	8affff73 	bhi	40 <sprprint_write(File*, char const*, unsigned int)+0x40>
 270:	eaffff92 	b	c0 <sprprint_write(File*, char const*, unsigned int)+0xc0>
 274:	e1d430be 	ldrh	r3, [r4, #14]
 278:	e5d42011 	ldrb	r2, [r4, #17]
 27c:	e2855001 	add	r5, r5, #1
 280:	e0433002 	sub	r3, r3, r2
 284:	e1570005 	cmp	r7, r5
 288:	e1c430be 	strh	r3, [r4, #14]
 28c:	8affff6b 	bhi	40 <sprprint_write(File*, char const*, unsigned int)+0x40>
 290:	eaffff8a 	b	c0 <sprprint_write(File*, char const*, unsigned int)+0xc0>
 294:	e1d0b0b0 	ldrh	r11, [r0]
 298:	e35b000a 	cmp	r11, #10
 29c:	0a00004e 	beq	3dc <sprprint_write(File*, char const*, unsigned int)+0x3dc>
 2a0:	e24bb020 	sub	r11, r11, #32
 2a4:	e1a0b80b 	lsl	r11, r11, #16
 2a8:	e1a0b82b 	lsr	r11, r11, #16
 2ac:	e35b005f 	cmp	r11, #95	; 0x5f
 2b0:	8a000058 	bhi	418 <sprprint_write(File*, char const*, unsigned int)+0x418>
 2b4:	e1d430fc 	ldrsh	r3, [r4, #12]
 2b8:	e3730007 	cmn	r3, #7
 2bc:	ba00003d 	blt	3b8 <sprprint_write(File*, char const*, unsigned int)+0x3b8>
 2c0:	e1d421fa 	ldrsh	r2, [r4, #26]
 2c4:	e1520003 	cmp	r2, r3
 2c8:	da00003a 	ble	3b8 <sprprint_write(File*, char const*, unsigned int)+0x3b8>
 2cc:	e1d420fe 	ldrsh	r2, [r4, #14]
 2d0:	e3720007 	cmn	r2, #7
 2d4:	ba000037 	blt	3b8 <sprprint_write(File*, char const*, unsigned int)+0x3b8>
 2d8:	e1d411fc 	ldrsh	r1, [r4, #28]
 2dc:	e1510002 	cmp	r1, r2
 2e0:	da000034 	ble	3b8 <sprprint_write(File*, char const*, unsigned int)+0x3b8>
 2e4:	e5d43016 	ldrb	r3, [r4, #22]
 2e8:	e3530010 	cmp	r3, #16
 2ec:	0a00000e 	beq	32c <sprprint_write(File*, char const*, unsigned int)+0x32c>
 2f0:	e1d411b8 	ldrh	r1, [r4, #24]
 2f4:	e5940008 	ldr	r0, [r4, #8]
 2f8:	ebfffffe 	bl	0 <b8PpuRectAllocZPB>
 2fc:	e59f1138 	ldr	r1, [pc, #312]	; 43c <sprprint_write(File*, char const*, unsigned int)+0x43c>
 300:	e5d42016 	ldrb	r2, [r4, #22]
 304:	e1d4e0bc 	ldrh	lr, [r4, #12]
 308:	e1d4c0be 	ldrh	r12, [r4, #14]
 30c:	e5801008 	str	r1, [r0, #8]
 310:	e5d01000 	ldrb	r1, [r0]
 314:	e202200f 	and	r2, r2, #15
 318:	e3c1100f 	bic	r1, r1, #15
 31c:	e1822001 	orr	r2, r2, r1
 320:	e1c0e0b6 	strh	lr, [r0, #6]
 324:	e1c0c0b4 	strh	r12, [r0, #4]
 328:	e5c02000 	strb	r2, [r0]
 32c:	e1d411b8 	ldrh	r1, [r4, #24]
 330:	e5940008 	ldr	r0, [r4, #8]
 334:	ebfffffe 	bl	0 <b8PpuSpriteAllocZPB>
 338:	e1d420be 	ldrh	r2, [r4, #14]
 33c:	e1d4c0bc 	ldrh	r12, [r4, #12]
 340:	e59f10f8 	ldr	r1, [pc, #248]	; 440 <sprprint_write(File*, char const*, unsigned int)+0x440>
 344:	e1c020b8 	strh	r2, [r0, #8]
 348:	e1d020b4 	ldrh	r2, [r0, #4]
 34c:	e1c0c0ba 	strh	r12, [r0, #10]
 350:	e0022001 	and	r2, r2, r1
 354:	e3822c01 	orr	r2, r2, #256	; 0x100
 358:	e3822001 	orr	r2, r2, #1
 35c:	e1c020b4 	strh	r2, [r0, #4]
 360:	e5d02000 	ldrb	r2, [r0]
 364:	e58d0004 	str	r0, [sp, #4]
 368:	e382200f 	orr	r2, r2, #15
 36c:	e5c02000 	strb	r2, [r0]
 370:	ebfffffe 	bl	0 <fontdata::dstxtile()>
 374:	e59d3004 	ldr	r3, [sp, #4]
 378:	e20b200f 	and	r2, r11, #15
 37c:	e5d31007 	ldrb	r1, [r3, #7]
 380:	e0802002 	add	r2, r0, r2
 384:	e3c1103f 	bic	r1, r1, #63	; 0x3f
 388:	e202203f 	and	r2, r2, #63	; 0x3f
 38c:	e1822001 	orr	r2, r2, r1
 390:	e5c32007 	strb	r2, [r3, #7]
 394:	ebfffffe 	bl	0 <fontdata::dstytile()>
 398:	e59d3004 	ldr	r3, [sp, #4]
 39c:	e080222b 	add	r2, r0, r11, lsr #4
 3a0:	e5d31006 	ldrb	r1, [r3, #6]
 3a4:	e202203f 	and	r2, r2, #63	; 0x3f
 3a8:	e3c1103f 	bic	r1, r1, #63	; 0x3f
 3ac:	e1822001 	orr	r2, r2, r1
 3b0:	e5c32006 	strb	r2, [r3, #6]
 3b4:	e1d430fc 	ldrsh	r3, [r4, #12]
 3b8:	e2855001 	add	r5, r5, #1
 3bc:	e2833008 	add	r3, r3, #8
 3c0:	e1570005 	cmp	r7, r5
 3c4:	e1c430bc 	strh	r3, [r4, #12]
 3c8:	8affff1c 	bhi	40 <sprprint_write(File*, char const*, unsigned int)+0x40>
 3cc:	eaffff3b 	b	c0 <sprprint_write(File*, char const*, unsigned int)+0xc0>
 3d0:	e3a03007 	mov	r3, #7
 3d4:	e5c43015 	strb	r3, [r4, #21]
 3d8:	eaffff60 	b	160 <sprprint_write(File*, char const*, unsigned int)+0x160>
 3dc:	e3a03000 	mov	r3, #0
 3e0:	e1c430bc 	strh	r3, [r4, #12]
 3e4:	e1d430be 	ldrh	r3, [r4, #14]
 3e8:	e2855001 	add	r5, r5, #1
 3ec:	e2833008 	add	r3, r3, #8
 3f0:	e1570005 	cmp	r7, r5
 3f4:	e1c430be 	strh	r3, [r4, #14]
 3f8:	8affff10 	bhi	40 <sprprint_write(File*, char const*, unsigned int)+0x40>
 3fc:	eaffff2f 	b	c0 <sprprint_write(File*, char const*, unsigned int)+0xc0>
 400:	e08a3003 	add	r3, r10, r3
 404:	e553201e 	ldrb	r2, [r3, #-30]	; 0xffffffe2
 408:	eaffff64 	b	1a0 <sprprint_write(File*, char const*, unsigned int)+0x1a0>
 40c:	e08a3003 	add	r3, r10, r3
 410:	e553301e 	ldrb	r3, [r3, #-30]	; 0xffffffe2
 414:	eaffff4e 	b	154 <sprprint_write(File*, char const*, unsigned int)+0x154>
 418:	e1a00007 	mov	r0, r7
 41c:	eaffff28 	b	c4 <sprprint_write(File*, char const*, unsigned int)+0xc4>
 420:	e3a00016 	mov	r0, #22
 424:	ebfffffe 	bl	0 <set_errno>
 428:	e3e00000 	mvn	r0, #0
 42c:	eaffff24 	b	c4 <sprprint_write(File*, char const*, unsigned int)+0xc4>
 430:	f00000f0 	.word	0xf00000f0
 434:	0fffff0f 	.word	0x0fffff0f
 438:	00000000 	.word	0x00000000
 43c:	00080008 	.word	0x00080008
 440:	ffffc0c0 	.word	0xffffc0c0

Disassembly of section .text._ZN8sprprint5ResetEv:

00000000 <sprprint::Reset()>:
   0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   4:	e59f50ac 	ldr	r5, [pc, #172]	; b8 <sprprint::Reset()+0xb8>
   8:	e24dd024 	sub	sp, sp, #36	; 0x24
   c:	e5d54000 	ldrb	r4, [r5]
  10:	e3540000 	cmp	r4, #0
  14:	0a000001 	beq	20 <sprprint::Reset()+0x20>
  18:	e28dd024 	add	sp, sp, #36	; 0x24
  1c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  20:	e3a07001 	mov	r7, #1
  24:	e59f6090 	ldr	r6, [pc, #144]	; bc <sprprint::Reset()+0xbc>
  28:	e3a01030 	mov	r1, #48	; 0x30
  2c:	e3a00020 	mov	r0, #32
  30:	ebfffffe 	bl	0 <fontdata::load(unsigned char, unsigned char)>
  34:	e1a01004 	mov	r1, r4
  38:	e3a02020 	mov	r2, #32
  3c:	e1a0000d 	mov	r0, sp
  40:	e5864000 	str	r4, [r6]
  44:	ebfffffe 	bl	0 <memset>
  48:	e1a03004 	mov	r3, r4
  4c:	e3a01020 	mov	r1, #32
  50:	e1a0000d 	mov	r0, sp
  54:	e59f2064 	ldr	r2, [pc, #100]	; c0 <sprprint::Reset()+0xc0>
  58:	ebfffffe 	bl	0 <snprintf>
  5c:	e1a03006 	mov	r3, r6
  60:	e1a0000d 	mov	r0, sp
  64:	e59f2058 	ldr	r2, [pc, #88]	; c4 <sprprint::Reset()+0xc4>
  68:	e59f1058 	ldr	r1, [pc, #88]	; c8 <sprprint::Reset()+0xc8>
  6c:	ebfffffe 	bl	0 <fs_register_driver>
  70:	e1a01004 	mov	r1, r4
  74:	e3a02020 	mov	r2, #32
  78:	e1a0000d 	mov	r0, sp
  7c:	e5867020 	str	r7, [r6, #32]
  80:	ebfffffe 	bl	0 <memset>
  84:	e1a03007 	mov	r3, r7
  88:	e3a01020 	mov	r1, #32
  8c:	e1a0000d 	mov	r0, sp
  90:	e59f2028 	ldr	r2, [pc, #40]	; c0 <sprprint::Reset()+0xc0>
  94:	ebfffffe 	bl	0 <snprintf>
  98:	e1a0000d 	mov	r0, sp
  9c:	e59f2020 	ldr	r2, [pc, #32]	; c4 <sprprint::Reset()+0xc4>
  a0:	e59f1020 	ldr	r1, [pc, #32]	; c8 <sprprint::Reset()+0xc8>
  a4:	e2863020 	add	r3, r6, #32
  a8:	ebfffffe 	bl	0 <fs_register_driver>
  ac:	e5c57000 	strb	r7, [r5]
  b0:	e28dd024 	add	sp, sp, #36	; 0x24
  b4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	...
  c4:	000001b6 	.word	0x000001b6
  c8:	00000000 	.word	0x00000000

Disassembly of section .text._ZN8sprprint4OpenENS_4EnChERNS_7ContextE:

00000000 <sprprint::Open(sprprint::EnCh, sprprint::Context&)>:
   0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   4:	e3500001 	cmp	r0, #1
   8:	83a04000 	movhi	r4, #0
   c:	e24dd034 	sub	sp, sp, #52	; 0x34
  10:	8a000032 	bhi	e0 <sprprint::Open(sprprint::EnCh, sprprint::Context&)+0xe0>
  14:	e3a0200e 	mov	r2, #14
  18:	e28d5008 	add	r5, sp, #8
  1c:	e1a0c005 	mov	r12, r5
  20:	e3a0e000 	mov	lr, #0
  24:	e58d201c 	str	r2, [sp, #28]
  28:	e59f30bc 	ldr	r3, [pc, #188]	; ec <sprprint::Open(sprprint::EnCh, sprprint::Context&)+0xec>
  2c:	e59f20bc 	ldr	r2, [pc, #188]	; f0 <sprprint::Open(sprprint::EnCh, sprprint::Context&)+0xf0>
  30:	e1a06001 	mov	r6, r1
  34:	e7d27000 	ldrb	r7, [r2, r0]
  38:	e893000f 	ldm	r3, {r0, r1, r2, r3}
  3c:	e8ac0007 	stmia	r12!, {r0, r1, r2}
  40:	e28d4020 	add	r4, sp, #32
  44:	e5cc3000 	strb	r3, [r12]
  48:	e5cd7015 	strb	r7, [sp, #21]
  4c:	e5cde016 	strb	lr, [sp, #22]
  50:	e895000f 	ldm	r5, {r0, r1, r2, r3}
  54:	e884000f 	stm	r4, {r0, r1, r2, r3}
  58:	e1a00004 	mov	r0, r4
  5c:	e59f1090 	ldr	r1, [pc, #144]	; f4 <sprprint::Open(sprprint::EnCh, sprprint::Context&)+0xf4>
  60:	e58d4018 	str	r4, [sp, #24]
  64:	e58d5000 	str	r5, [sp]
  68:	e58de004 	str	lr, [sp, #4]
  6c:	e5cde008 	strb	lr, [sp, #8]
  70:	ebfffffe 	bl	0 <fopen>
  74:	e59d3018 	ldr	r3, [sp, #24]
  78:	e1530004 	cmp	r3, r4
  7c:	e1a04000 	mov	r4, r0
  80:	0a000003 	beq	94 <sprprint::Open(sprprint::EnCh, sprprint::Context&)+0x94>
  84:	e59d1020 	ldr	r1, [sp, #32]
  88:	e1a00003 	mov	r0, r3
  8c:	e2811001 	add	r1, r1, #1
  90:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  94:	e59d0000 	ldr	r0, [sp]
  98:	e1500005 	cmp	r0, r5
  9c:	0a000002 	beq	ac <sprprint::Open(sprprint::EnCh, sprprint::Context&)+0xac>
  a0:	e59d1008 	ldr	r1, [sp, #8]
  a4:	e2811001 	add	r1, r1, #1
  a8:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  ac:	e3540000 	cmp	r4, #0
  b0:	0a00000a 	beq	e0 <sprprint::Open(sprprint::EnCh, sprprint::Context&)+0xe0>
  b4:	e3a03000 	mov	r3, #0
  b8:	e3a02002 	mov	r2, #2
  bc:	e1a01003 	mov	r1, r3
  c0:	e1a00004 	mov	r0, r4
  c4:	ebfffffe 	bl	0 <setvbuf>
  c8:	e1a00004 	mov	r0, r4
  cc:	ebfffffe 	bl	0 <fflush>
  d0:	e1a02006 	mov	r2, r6
  d4:	e3a01000 	mov	r1, #0
  d8:	e1d400fe 	ldrsh	r0, [r4, #14]
  dc:	ebfffffe 	bl	0 <ioctl>
  e0:	e1a00004 	mov	r0, r4
  e4:	e28dd034 	add	sp, sp, #52	; 0x34
  e8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	...
  f4:	00000010 	.word	0x00000010

Disassembly of section .text._ZN8sprprint6LocateEP7__sFILEsst:

00000000 <sprprint::Locate(__sFILE*, short, short, unsigned short)>:
   0:	e3500000 	cmp	r0, #0
   4:	01a0f00e 	moveq	pc, lr
   8:	e1a0c003 	mov	r12, r3
   c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  10:	e24dd00c 	sub	sp, sp, #12
  14:	e1a03001 	mov	r3, r1
  18:	e58dc000 	str	r12, [sp]
  1c:	e59f1008 	ldr	r1, [pc, #8]	; 2c <sprprint::Locate(__sFILE*, short, short, unsigned short)+0x2c>
  20:	ebfffffe 	bl	0 <fprintf>
  24:	e28dd00c 	add	sp, sp, #12
  28:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  2c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN8sprprint7LocateZEP7__sFILEt:

00000000 <sprprint::LocateZ(__sFILE*, unsigned short)>:
   0:	e3500000 	cmp	r0, #0
   4:	e1a02001 	mov	r2, r1
   8:	01a0f00e 	moveq	pc, lr
   c:	e59f1000 	ldr	r1, [pc]	; 14 <sprprint::LocateZ(__sFILE*, unsigned short)+0x14>
  10:	eafffffe 	b	0 <fprintf>
  14:	00000000 	.word	0x00000000

Disassembly of section .text._ZN8sprprint5ColorEP7__sFILE10b8PpuColor:

00000000 <sprprint::Color(__sFILE*, b8PpuColor)>:
   0:	e3500000 	cmp	r0, #0
   4:	e1a02001 	mov	r2, r1
   8:	01a0f00e 	moveq	pc, lr
   c:	e59f1004 	ldr	r1, [pc, #4]	; 18 <sprprint::Color(__sFILE*, b8PpuColor)+0x18>
  10:	e2822032 	add	r2, r2, #50	; 0x32
  14:	eafffffe 	b	0 <fprintf>
  18:	00000000 	.word	0x00000000

Disassembly of section .text._ZN8sprprint7GetInfoEP7__sFILERNS_4InfoE:

00000000 <sprprint::GetInfo(__sFILE*, sprprint::Info&)>:
   0:	e2503000 	subs	r3, r0, #0
   4:	0a00000f 	beq	48 <sprprint::GetInfo(__sFILE*, sprprint::Info&)+0x48>
   8:	e92d4070 	push	{r4, r5, r6, lr}
   c:	e1d350fe 	ldrsh	r5, [r3, #14]
  10:	e3750001 	cmn	r5, #1
  14:	0a000009 	beq	40 <sprprint::GetInfo(__sFILE*, sprprint::Info&)+0x40>
  18:	e1a04001 	mov	r4, r1
  1c:	ebfffffe 	bl	0 <fflush>
  20:	e1a02004 	mov	r2, r4
  24:	e3a01001 	mov	r1, #1
  28:	e1a00005 	mov	r0, r5
  2c:	ebfffffe 	bl	0 <ioctl>
  30:	e3700001 	cmn	r0, #1
  34:	13a00000 	movne	r0, #0
  38:	03e00002 	mvneq	r0, #2
  3c:	e8bd8070 	pop	{r4, r5, r6, pc}
  40:	e3e00001 	mvn	r0, #1
  44:	e8bd8070 	pop	{r4, r5, r6, pc}
  48:	e3e00000 	mvn	r0, #0
  4c:	e1a0f00e 	mov	pc, lr

Disassembly of section .text.startup._GLOBAL__sub_I__Z13sprprint_openP4File:

00000000 <_GLOBAL__sub_I__Z13sprprint_openP4File>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e59f4068 	ldr	r4, [pc, #104]	; 74 <_GLOBAL__sub_I__Z13sprprint_openP4File+0x74>
   8:	e3a05000 	mov	r5, #0
   c:	e1a00004 	mov	r0, r4
  10:	e3a07007 	mov	r7, #7
  14:	e3a06010 	mov	r6, #16
  18:	e59f8058 	ldr	r8, [pc, #88]	; 78 <_GLOBAL__sub_I__Z13sprprint_openP4File+0x78>
  1c:	e4805004 	str	r5, [r0], #4
  20:	ebfffffe 	bl	0 <CEscapeSeqDecoder::CEscapeSeqDecoder()>
  24:	e2840024 	add	r0, r4, #36	; 0x24
  28:	e5845008 	str	r5, [r4, #8]
  2c:	e584500c 	str	r5, [r4, #12]
  30:	e5848010 	str	r8, [r4, #16]
  34:	e5c47015 	strb	r7, [r4, #21]
  38:	e5c46016 	strb	r6, [r4, #22]
  3c:	e1c451b8 	strh	r5, [r4, #24]
  40:	e5845020 	str	r5, [r4, #32]
  44:	ebfffffe 	bl	0 <CEscapeSeqDecoder::CEscapeSeqDecoder()>
  48:	e1a00005 	mov	r0, r5
  4c:	e5845028 	str	r5, [r4, #40]	; 0x28
  50:	e584502c 	str	r5, [r4, #44]	; 0x2c
  54:	e5848030 	str	r8, [r4, #48]	; 0x30
  58:	e5c47035 	strb	r7, [r4, #53]	; 0x35
  5c:	e5c46036 	strb	r6, [r4, #54]	; 0x36
  60:	e1c453b8 	strh	r5, [r4, #56]	; 0x38
  64:	e59f2010 	ldr	r2, [pc, #16]	; 7c <_GLOBAL__sub_I__Z13sprprint_openP4File+0x7c>
  68:	e59f1010 	ldr	r1, [pc, #16]	; 80 <_GLOBAL__sub_I__Z13sprprint_openP4File+0x80>
  6c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  70:	eafffffe 	b	0 <__aeabi_atexit>
  74:	00000000 	.word	0x00000000
  78:	01000808 	.word	0x01000808
	...

sublibc.o:     file format elf32-littlearm


Disassembly of section .text._Z14print_mallinfov:

00000000 <print_mallinfo()>:
   0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   8:	e1a0000d 	mov	r0, sp
   c:	ebfffffe 	bl	0 <mallinfo>
  10:	e59d1000 	ldr	r1, [sp]
  14:	e59f0074 	ldr	r0, [pc, #116]	; 90 <print_mallinfo()+0x90>
  18:	ebfffffe 	bl	0 <printf>
  1c:	e59d1004 	ldr	r1, [sp, #4]
  20:	e59f006c 	ldr	r0, [pc, #108]	; 94 <print_mallinfo()+0x94>
  24:	ebfffffe 	bl	0 <printf>
  28:	e59d1008 	ldr	r1, [sp, #8]
  2c:	e59f0064 	ldr	r0, [pc, #100]	; 98 <print_mallinfo()+0x98>
  30:	ebfffffe 	bl	0 <printf>
  34:	e59d100c 	ldr	r1, [sp, #12]
  38:	e59f005c 	ldr	r0, [pc, #92]	; 9c <print_mallinfo()+0x9c>
  3c:	ebfffffe 	bl	0 <printf>
  40:	e59d1010 	ldr	r1, [sp, #16]
  44:	e59f0054 	ldr	r0, [pc, #84]	; a0 <print_mallinfo()+0xa0>
  48:	ebfffffe 	bl	0 <printf>
  4c:	e59d1014 	ldr	r1, [sp, #20]
  50:	e59f004c 	ldr	r0, [pc, #76]	; a4 <print_mallinfo()+0xa4>
  54:	ebfffffe 	bl	0 <printf>
  58:	e59d1018 	ldr	r1, [sp, #24]
  5c:	e59f0044 	ldr	r0, [pc, #68]	; a8 <print_mallinfo()+0xa8>
  60:	ebfffffe 	bl	0 <printf>
  64:	e59d101c 	ldr	r1, [sp, #28]
  68:	e59f003c 	ldr	r0, [pc, #60]	; ac <print_mallinfo()+0xac>
  6c:	ebfffffe 	bl	0 <printf>
  70:	e59d1020 	ldr	r1, [sp, #32]
  74:	e59f0034 	ldr	r0, [pc, #52]	; b0 <print_mallinfo()+0xb0>
  78:	ebfffffe 	bl	0 <printf>
  7c:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
  80:	e59f002c 	ldr	r0, [pc, #44]	; b4 <print_mallinfo()+0xb4>
  84:	e28dd02c 	add	sp, sp, #44	; 0x2c
  88:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  8c:	eafffffe 	b	0 <printf>
  90:	00000000 	.word	0x00000000
  94:	0000002c 	.word	0x0000002c
  98:	00000058 	.word	0x00000058
  9c:	00000084 	.word	0x00000084
  a0:	000000b0 	.word	0x000000b0
  a4:	000000dc 	.word	0x000000dc
  a8:	00000108 	.word	0x00000108
  ac:	00000134 	.word	0x00000134
  b0:	00000160 	.word	0x00000160
  b4:	0000018c 	.word	0x0000018c

Disassembly of section .text._Z7malloczj:

00000000 <mallocz(unsigned int)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e1a05000 	mov	r5, r0
   8:	ebfffffe 	bl	0 <malloc>
   c:	e2504000 	subs	r4, r0, #0
  10:	0a000002 	beq	20 <mallocz(unsigned int)+0x20>
  14:	e1a02005 	mov	r2, r5
  18:	e3a01000 	mov	r1, #0
  1c:	ebfffffe 	bl	0 <memset>
  20:	e1a00004 	mov	r0, r4
  24:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._Z2fsB5cxx11PKcz:

00000000 <fs[abi:cxx11](char const*, ...)>:
   0:	e92d000e 	push	{r1, r2, r3}
   4:	e92d4070 	push	{r4, r5, r6, lr}
   8:	e1a04000 	mov	r4, r0
   c:	e24ddf43 	sub	sp, sp, #268	; 0x10c
  10:	e28d3e12 	add	r3, sp, #288	; 0x120
  14:	e3a01c01 	mov	r1, #256	; 0x100
  18:	e59d211c 	ldr	r2, [sp, #284]	; 0x11c
  1c:	e28d0008 	add	r0, sp, #8
  20:	e2846008 	add	r6, r4, #8
  24:	e58d3004 	str	r3, [sp, #4]
  28:	ebfffffe 	bl	0 <vsnprintf>
  2c:	e28d0008 	add	r0, sp, #8
  30:	e5846000 	str	r6, [r4]
  34:	ebfffffe 	bl	0 <strlen>
  38:	e350000f 	cmp	r0, #15
  3c:	e1a05000 	mov	r5, r0
  40:	8a00000e 	bhi	80 <fs[abi:cxx11](char const*, ...)+0x80>
  44:	e3500001 	cmp	r0, #1
  48:	0a000009 	beq	74 <fs[abi:cxx11](char const*, ...)+0x74>
  4c:	e3500000 	cmp	r0, #0
  50:	1a00000f 	bne	94 <fs[abi:cxx11](char const*, ...)+0x94>
  54:	e3a03000 	mov	r3, #0
  58:	e1a00004 	mov	r0, r4
  5c:	e5845004 	str	r5, [r4, #4]
  60:	e7c63005 	strb	r3, [r6, r5]
  64:	e28ddf43 	add	sp, sp, #268	; 0x10c
  68:	e8bd4070 	pop	{r4, r5, r6, lr}
  6c:	e28dd00c 	add	sp, sp, #12
  70:	e1a0f00e 	mov	pc, lr
  74:	e5dd3008 	ldrb	r3, [sp, #8]
  78:	e5c43008 	strb	r3, [r4, #8]
  7c:	eafffff4 	b	54 <fs[abi:cxx11](char const*, ...)+0x54>
  80:	e2800001 	add	r0, r0, #1
  84:	ebfffffe 	bl	0 <operator new(unsigned int)>
  88:	e1a06000 	mov	r6, r0
  8c:	e5845008 	str	r5, [r4, #8]
  90:	e5840000 	str	r0, [r4]
  94:	e1a00006 	mov	r0, r6
  98:	e1a02005 	mov	r2, r5
  9c:	e28d1008 	add	r1, sp, #8
  a0:	ebfffffe 	bl	0 <memcpy>
  a4:	e5946000 	ldr	r6, [r4]
  a8:	eaffffe9 	b	54 <fs[abi:cxx11](char const*, ...)+0x54>

submath.o:     file format elf32-littlearm


Disassembly of section .text._ZN3fpm5fixedIlxLj8EEdVERKS1_.part.0:

00000000 <fpm::fixed<long, long long, 8u>::operator/=(fpm::fixed<long, long long, 8u> const&) [clone .part.0]>:
   0:	e3a010e5 	mov	r1, #229	; 0xe5
   4:	e92d4010 	push	{r4, lr}
   8:	e59f3008 	ldr	r3, [pc, #8]	; 18 <fpm::fixed<long, long long, 8u>::operator/=(fpm::fixed<long, long long, 8u> const&) [clone .part.0]+0x18>
   c:	e59f2008 	ldr	r2, [pc, #8]	; 1c <fpm::fixed<long, long long, 8u>::operator/=(fpm::fixed<long, long long, 8u> const&) [clone .part.0]+0x1c>
  10:	e59f0008 	ldr	r0, [pc, #8]	; 20 <fpm::fixed<long, long long, 8u>::operator/=(fpm::fixed<long, long long, 8u> const&) [clone .part.0]+0x20>
  14:	ebfffffe 	bl	0 <__assert_func>
  18:	00000000 	.word	0x00000000
  1c:	00000010 	.word	0x00000010
  20:	00000120 	.word	0x00000120

Disassembly of section .text._ZN3fpm4fmodIlxLj8EEENS_5fixedIT_T0_XT1_EEES4_S4_.part.0:

00000000 <fpm::fixed<long, long long, 8u> fpm::fmod<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) [clone .part.0]>:
   0:	e3a010d0 	mov	r1, #208	; 0xd0
   4:	e92d4010 	push	{r4, lr}
   8:	e59f3008 	ldr	r3, [pc, #8]	; 18 <fpm::fixed<long, long long, 8u> fpm::fmod<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) [clone .part.0]+0x18>
   c:	e59f2008 	ldr	r2, [pc, #8]	; 1c <fpm::fixed<long, long long, 8u> fpm::fmod<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) [clone .part.0]+0x1c>
  10:	e59f0008 	ldr	r0, [pc, #8]	; 20 <fpm::fixed<long, long long, 8u> fpm::fmod<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) [clone .part.0]+0x20>
  14:	ebfffffe 	bl	0 <__assert_func>
  18:	00000000 	.word	0x00000000
  1c:	00000014 	.word	0x00000014
  20:	000000a4 	.word	0x000000a4

Disassembly of section .text._Z6sin_12m:

00000000 <sin_12(unsigned long)>:
   0:	e1a00a00 	lsl	r0, r0, #20
   4:	e1a00a20 	lsr	r0, r0, #20
   8:	e3500b01 	cmp	r0, #1024	; 0x400
   c:	9a00000d 	bls	48 <sin_12(unsigned long)+0x48>
  10:	e3500b02 	cmp	r0, #2048	; 0x800
  14:	9a000010 	bls	5c <sin_12(unsigned long)+0x5c>
  18:	e2400b02 	sub	r0, r0, #2048	; 0x800
  1c:	e3500b01 	cmp	r0, #1024	; 0x400
  20:	e3e03000 	mvn	r3, #0
  24:	9a000008 	bls	4c <sin_12(unsigned long)+0x4c>
  28:	e59f2034 	ldr	r2, [pc, #52]	; 64 <sin_12(unsigned long)+0x64>
  2c:	e2600b02 	rsb	r0, r0, #2048	; 0x800
  30:	e1a00080 	lsl	r0, r0, #1
  34:	e19200f0 	ldrsh	r0, [r2, r0]
  38:	e0000093 	mul	r0, r3, r0
  3c:	e1a00800 	lsl	r0, r0, #16
  40:	e1a00840 	asr	r0, r0, #16
  44:	e1a0f00e 	mov	pc, lr
  48:	e3a03001 	mov	r3, #1
  4c:	e59f2010 	ldr	r2, [pc, #16]	; 64 <sin_12(unsigned long)+0x64>
  50:	e1a00080 	lsl	r0, r0, #1
  54:	e19200f0 	ldrsh	r0, [r2, r0]
  58:	eafffff6 	b	38 <sin_12(unsigned long)+0x38>
  5c:	e3a03001 	mov	r3, #1
  60:	eafffff0 	b	28 <sin_12(unsigned long)+0x28>
  64:	00000000 	.word	0x00000000

Disassembly of section .text._Z6cos_12m:

00000000 <cos_12(unsigned long)>:
   0:	e2800b01 	add	r0, r0, #1024	; 0x400
   4:	e1a00a00 	lsl	r0, r0, #20
   8:	e1a00a20 	lsr	r0, r0, #20
   c:	e3500b01 	cmp	r0, #1024	; 0x400
  10:	9a00000d 	bls	4c <cos_12(unsigned long)+0x4c>
  14:	e3500b02 	cmp	r0, #2048	; 0x800
  18:	9a000010 	bls	60 <cos_12(unsigned long)+0x60>
  1c:	e2400b02 	sub	r0, r0, #2048	; 0x800
  20:	e3500b01 	cmp	r0, #1024	; 0x400
  24:	e3e03000 	mvn	r3, #0
  28:	9a000008 	bls	50 <cos_12(unsigned long)+0x50>
  2c:	e59f2034 	ldr	r2, [pc, #52]	; 68 <cos_12(unsigned long)+0x68>
  30:	e2600b02 	rsb	r0, r0, #2048	; 0x800
  34:	e1a00080 	lsl	r0, r0, #1
  38:	e19200f0 	ldrsh	r0, [r2, r0]
  3c:	e0000093 	mul	r0, r3, r0
  40:	e1a00800 	lsl	r0, r0, #16
  44:	e1a00840 	asr	r0, r0, #16
  48:	e1a0f00e 	mov	pc, lr
  4c:	e3a03001 	mov	r3, #1
  50:	e59f2010 	ldr	r2, [pc, #16]	; 68 <cos_12(unsigned long)+0x68>
  54:	e1a00080 	lsl	r0, r0, #1
  58:	e19200f0 	ldrsh	r0, [r2, r0]
  5c:	eafffff6 	b	3c <cos_12(unsigned long)+0x3c>
  60:	e3a03001 	mov	r3, #1
  64:	eafffff0 	b	2c <cos_12(unsigned long)+0x2c>
  68:	00000000 	.word	0x00000000

Disassembly of section .text._Z10rad_cos_12N3fpm5fixedIlxLj8EEEm:

00000000 <rad_cos_12(fpm::fixed<long, long long, 8u>, unsigned long)>:
   0:	e2811b01 	add	r1, r1, #1024	; 0x400
   4:	e1a01a01 	lsl	r1, r1, #20
   8:	e1a01a21 	lsr	r1, r1, #20
   c:	e3510b01 	cmp	r1, #1024	; 0x400
  10:	9a00000f 	bls	54 <rad_cos_12(fpm::fixed<long, long long, 8u>, unsigned long)+0x54>
  14:	e3510b02 	cmp	r1, #2048	; 0x800
  18:	9a000012 	bls	68 <rad_cos_12(fpm::fixed<long, long long, 8u>, unsigned long)+0x68>
  1c:	e2411b02 	sub	r1, r1, #2048	; 0x800
  20:	e3510b01 	cmp	r1, #1024	; 0x400
  24:	e3e02000 	mvn	r2, #0
  28:	9a00000a 	bls	58 <rad_cos_12(fpm::fixed<long, long long, 8u>, unsigned long)+0x58>
  2c:	e59f303c 	ldr	r3, [pc, #60]	; 70 <rad_cos_12(fpm::fixed<long, long long, 8u>, unsigned long)+0x70>
  30:	e2611b02 	rsb	r1, r1, #2048	; 0x800
  34:	e1a01081 	lsl	r1, r1, #1
  38:	e19330f1 	ldrsh	r3, [r3, r1]
  3c:	e0030392 	mul	r3, r2, r3
  40:	e1a03803 	lsl	r3, r3, #16
  44:	e1a03843 	asr	r3, r3, #16
  48:	e0000093 	mul	r0, r3, r0
  4c:	e1a00640 	asr	r0, r0, #12
  50:	e1a0f00e 	mov	pc, lr
  54:	e3a02001 	mov	r2, #1
  58:	e59f3010 	ldr	r3, [pc, #16]	; 70 <rad_cos_12(fpm::fixed<long, long long, 8u>, unsigned long)+0x70>
  5c:	e1a01081 	lsl	r1, r1, #1
  60:	e19330f1 	ldrsh	r3, [r3, r1]
  64:	eafffff4 	b	3c <rad_cos_12(fpm::fixed<long, long long, 8u>, unsigned long)+0x3c>
  68:	e3a02001 	mov	r2, #1
  6c:	eaffffee 	b	2c <rad_cos_12(fpm::fixed<long, long long, 8u>, unsigned long)+0x2c>
  70:	00000000 	.word	0x00000000

Disassembly of section .text._Z10rad_sin_12N3fpm5fixedIlxLj8EEEm:

00000000 <rad_sin_12(fpm::fixed<long, long long, 8u>, unsigned long)>:
   0:	e1a01a01 	lsl	r1, r1, #20
   4:	e1a01a21 	lsr	r1, r1, #20
   8:	e3510b01 	cmp	r1, #1024	; 0x400
   c:	9a00000f 	bls	50 <rad_sin_12(fpm::fixed<long, long long, 8u>, unsigned long)+0x50>
  10:	e3510b02 	cmp	r1, #2048	; 0x800
  14:	9a000012 	bls	64 <rad_sin_12(fpm::fixed<long, long long, 8u>, unsigned long)+0x64>
  18:	e2411b02 	sub	r1, r1, #2048	; 0x800
  1c:	e3510b01 	cmp	r1, #1024	; 0x400
  20:	e3e02000 	mvn	r2, #0
  24:	9a00000a 	bls	54 <rad_sin_12(fpm::fixed<long, long long, 8u>, unsigned long)+0x54>
  28:	e59f303c 	ldr	r3, [pc, #60]	; 6c <rad_sin_12(fpm::fixed<long, long long, 8u>, unsigned long)+0x6c>
  2c:	e2611b02 	rsb	r1, r1, #2048	; 0x800
  30:	e1a01081 	lsl	r1, r1, #1
  34:	e19330f1 	ldrsh	r3, [r3, r1]
  38:	e0030392 	mul	r3, r2, r3
  3c:	e1a03803 	lsl	r3, r3, #16
  40:	e1a03843 	asr	r3, r3, #16
  44:	e0000093 	mul	r0, r3, r0
  48:	e1a00640 	asr	r0, r0, #12
  4c:	e1a0f00e 	mov	pc, lr
  50:	e3a02001 	mov	r2, #1
  54:	e59f3010 	ldr	r3, [pc, #16]	; 6c <rad_sin_12(fpm::fixed<long, long long, 8u>, unsigned long)+0x6c>
  58:	e1a01081 	lsl	r1, r1, #1
  5c:	e19330f1 	ldrsh	r3, [r3, r1]
  60:	eafffff4 	b	38 <rad_sin_12(fpm::fixed<long, long long, 8u>, unsigned long)+0x38>
  64:	e3a02001 	mov	r2, #1
  68:	eaffffee 	b	28 <rad_sin_12(fpm::fixed<long, long long, 8u>, unsigned long)+0x28>
  6c:	00000000 	.word	0x00000000

Disassembly of section .text._Z19genrand_min_max_fx8N3fpm5fixedIlxLj8EEES1_:

00000000 <genrand_min_max_fx8(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e92d4010 	push	{r4, lr}
   4:	ebfffffe 	bl	0 <genrand_min_max>
   8:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZN3Vec3setEN3fpm5fixedIlxLj8EEES2_:

00000000 <Vec::set(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e8800006 	stm	r0, {r1, r2}
   4:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN3Vec3addEN3fpm5fixedIlxLj8EEES2_:

00000000 <Vec::add(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e590c000 	ldr	r12, [r0]
   4:	e08c1001 	add	r1, r12, r1
   8:	e590c004 	ldr	r12, [r0, #4]
   c:	e5801000 	str	r1, [r0]
  10:	e08cc002 	add	r12, r12, r2
  14:	e580c004 	str	r12, [r0, #4]
  18:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN3Vec3subEN3fpm5fixedIlxLj8EEES2_:

00000000 <Vec::sub(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e590c000 	ldr	r12, [r0]
   4:	e04c1001 	sub	r1, r12, r1
   8:	e590c004 	ldr	r12, [r0, #4]
   c:	e5801000 	str	r1, [r0]
  10:	e04cc002 	sub	r12, r12, r2
  14:	e580c004 	str	r12, [r0, #4]
  18:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN3Vec3mulEN3fpm5fixedIlxLj8EEE:

00000000 <Vec::mul(fpm::fixed<long, long long, 8u>)>:
   0:	e5903000 	ldr	r3, [r0]
   4:	e92d4030 	push	{r4, r5, lr}
   8:	e0c45391 	smull	r5, r4, r1, r3
   c:	e5903004 	ldr	r3, [r0, #4]
  10:	e0cce391 	smull	lr, r12, r1, r3
  14:	e1a03fc4 	asr	r3, r4, #31
  18:	e203307f 	and	r3, r3, #127	; 0x7f
  1c:	e0933005 	adds	r3, r3, r5
  20:	e2a41000 	adc	r1, r4, #0
  24:	e1a033a3 	lsr	r3, r3, #7
  28:	e1833c81 	orr	r3, r3, r1, lsl #25
  2c:	e1a04fa1 	lsr	r4, r1, #31
  30:	e1a05fc1 	asr	r5, r1, #31
  34:	e0944003 	adds	r4, r4, r3
  38:	e0233fc1 	eor	r3, r3, r1, asr #31
  3c:	e1a013c1 	asr	r1, r1, #7
  40:	e2a11000 	adc	r1, r1, #0
  44:	e0533005 	subs	r3, r3, r5
  48:	e2033001 	and	r3, r3, #1
  4c:	e0233005 	eor	r3, r3, r5
  50:	e1a040a4 	lsr	r4, r4, #1
  54:	e0533005 	subs	r3, r3, r5
  58:	e1844f81 	orr	r4, r4, r1, lsl #31
  5c:	e0844003 	add	r4, r4, r3
  60:	e1a03fcc 	asr	r3, r12, #31
  64:	e203307f 	and	r3, r3, #127	; 0x7f
  68:	e093300e 	adds	r3, r3, lr
  6c:	e2acc000 	adc	r12, r12, #0
  70:	e1a033a3 	lsr	r3, r3, #7
  74:	e1833c8c 	orr	r3, r3, r12, lsl #25
  78:	e1a01fac 	lsr	r1, r12, #31
  7c:	e0911003 	adds	r1, r1, r3
  80:	e1a0e3cc 	asr	lr, r12, #7
  84:	e0233fcc 	eor	r3, r3, r12, asr #31
  88:	e1a0cfcc 	asr	r12, r12, #31
  8c:	e2aee000 	adc	lr, lr, #0
  90:	e053300c 	subs	r3, r3, r12
  94:	e2033001 	and	r3, r3, #1
  98:	e023300c 	eor	r3, r3, r12
  9c:	e1a010a1 	lsr	r1, r1, #1
  a0:	e1811f8e 	orr	r1, r1, lr, lsl #31
  a4:	e053300c 	subs	r3, r3, r12
  a8:	e0811003 	add	r1, r1, r3
  ac:	e5804000 	str	r4, [r0]
  b0:	e5801004 	str	r1, [r0, #4]
  b4:	e8bd8030 	pop	{r4, r5, pc}

Disassembly of section .text._ZN3Vec3divEN3fpm5fixedIlxLj8EEE:

00000000 <Vec::div(fpm::fixed<long, long long, 8u>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e2515000 	subs	r5, r1, #0
   8:	e1a04000 	mov	r4, r0
   c:	05805000 	streq	r5, [r0]
  10:	05805004 	streq	r5, [r0, #4]
  14:	0a00002d 	beq	d0 <Vec::div(fpm::fixed<long, long long, 8u>)+0xd0>
  18:	e5900000 	ldr	r0, [r0]
  1c:	e1a06fc5 	asr	r6, r5, #31
  20:	e1a01fc0 	asr	r1, r0, #31
  24:	e1a01481 	lsl	r1, r1, #9
  28:	e1a02005 	mov	r2, r5
  2c:	e1a03006 	mov	r3, r6
  30:	e1811ba0 	orr	r1, r1, r0, lsr #23
  34:	e1a00480 	lsl	r0, r0, #9
  38:	ebfffffe 	bl	0 <__aeabi_ldivmod>
  3c:	e1a0e001 	mov	lr, r1
  40:	e1a0c000 	mov	r12, r0
  44:	e1a02005 	mov	r2, r5
  48:	e1a0500e 	mov	r5, lr
  4c:	e1a0efae 	lsr	lr, lr, #31
  50:	e09ee00c 	adds	lr, lr, r12
  54:	e1a03006 	mov	r3, r6
  58:	e02ccfc5 	eor	r12, r12, r5, asr #31
  5c:	e1a06fc5 	asr	r6, r5, #31
  60:	e2a55000 	adc	r5, r5, #0
  64:	e05cc006 	subs	r12, r12, r6
  68:	e5940004 	ldr	r0, [r4, #4]
  6c:	e20cc001 	and	r12, r12, #1
  70:	e1a0e0ae 	lsr	lr, lr, #1
  74:	e02cc006 	eor	r12, r12, r6
  78:	e05cc006 	subs	r12, r12, r6
  7c:	e1a01fc0 	asr	r1, r0, #31
  80:	e18eef85 	orr	lr, lr, r5, lsl #31
  84:	e08ee00c 	add	lr, lr, r12
  88:	e1a01481 	lsl	r1, r1, #9
  8c:	e1811ba0 	orr	r1, r1, r0, lsr #23
  90:	e584e000 	str	lr, [r4]
  94:	e1a00480 	lsl	r0, r0, #9
  98:	ebfffffe 	bl	0 <__aeabi_ldivmod>
  9c:	e1a02fa1 	lsr	r2, r1, #31
  a0:	e0922000 	adds	r2, r2, r0
  a4:	e0203fc1 	eor	r3, r0, r1, asr #31
  a8:	e2a10000 	adc	r0, r1, #0
  ac:	e1a01fc1 	asr	r1, r1, #31
  b0:	e0533001 	subs	r3, r3, r1
  b4:	e2033001 	and	r3, r3, #1
  b8:	e1a020a2 	lsr	r2, r2, #1
  bc:	e0233001 	eor	r3, r3, r1
  c0:	e0533001 	subs	r3, r3, r1
  c4:	e1822f80 	orr	r2, r2, r0, lsl #31
  c8:	e0822003 	add	r2, r2, r3
  cc:	e5842004 	str	r2, [r4, #4]
  d0:	e1a00004 	mov	r0, r4
  d4:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN3Vec5clampEN3fpm5fixedIlxLj8EEES2_S2_S2_:

00000000 <Vec::clamp(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e24dd010 	sub	sp, sp, #16
   4:	e58d3004 	str	r3, [sp, #4]
   8:	e5903000 	ldr	r3, [r0]
   c:	e58d100c 	str	r1, [sp, #12]
  10:	e1510003 	cmp	r1, r3
  14:	d1a01003 	movle	r1, r3
  18:	e58d2008 	str	r2, [sp, #8]
  1c:	e59d3008 	ldr	r3, [sp, #8]
  20:	d1a0c000 	movle	r12, r0
  24:	e5902004 	ldr	r2, [r0, #4]
  28:	c28dc00c 	addgt	r12, sp, #12
  2c:	e1530001 	cmp	r3, r1
  30:	e59d3004 	ldr	r3, [sp, #4]
  34:	d28dc008 	addle	r12, sp, #8
  38:	e1520003 	cmp	r2, r3
  3c:	a1a03002 	movge	r3, r2
  40:	e59c1000 	ldr	r1, [r12]
  44:	a2802004 	addge	r2, r0, #4
  48:	e5801000 	str	r1, [r0]
  4c:	e59d1010 	ldr	r1, [sp, #16]
  50:	b28d2004 	addlt	r2, sp, #4
  54:	e1510003 	cmp	r1, r3
  58:	d28d2010 	addle	r2, sp, #16
  5c:	e5923000 	ldr	r3, [r2]
  60:	e5803004 	str	r3, [r0, #4]
  64:	e28dd010 	add	sp, sp, #16
  68:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN3Vec4wrapEN3fpm5fixedIlxLj8EEES2_S2_S2_:

00000000 <Vec::wrap(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e1a05001 	mov	r5, r1
   8:	e1a04000 	mov	r4, r0
   c:	e5900000 	ldr	r0, [r0]
  10:	e0521001 	subs	r1, r2, r1
  14:	e0400005 	sub	r0, r0, r5
  18:	0a00000e 	beq	58 <Vec::wrap(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x58>
  1c:	e1a06003 	mov	r6, r3
  20:	ebfffffe 	bl	0 <__aeabi_idivmod>
  24:	e59d3010 	ldr	r3, [sp, #16]
  28:	e5940004 	ldr	r0, [r4, #4]
  2c:	e0811005 	add	r1, r1, r5
  30:	e0533006 	subs	r3, r3, r6
  34:	e0400006 	sub	r0, r0, r6
  38:	e5841000 	str	r1, [r4]
  3c:	0a000005 	beq	58 <Vec::wrap(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x58>
  40:	e1a01003 	mov	r1, r3
  44:	ebfffffe 	bl	0 <__aeabi_idivmod>
  48:	e0811006 	add	r1, r1, r6
  4c:	e1a00004 	mov	r0, r4
  50:	e5841004 	str	r1, [r4, #4]
  54:	e8bd8070 	pop	{r4, r5, r6, pc}
  58:	ebfffffe 	bl	0 <Vec::wrap(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>

Disassembly of section .text._ZN3Vec6swapXyEv:

00000000 <Vec::swapXy()>:
   0:	e8900006 	ldm	r0, {r1, r2}
   4:	e5801004 	str	r1, [r0, #4]
   8:	e5802000 	str	r2, [r0]
   c:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZNK3Vec8isInRectEN3fpm5fixedIlxLj8EEES2_S2_S2_:

00000000 <Vec::isInRect(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) const>:
   0:	e590c000 	ldr	r12, [r0]
   4:	e15c0001 	cmp	r12, r1
   8:	ba00000b 	blt	3c <Vec::isInRect(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) const+0x3c>
   c:	e0833001 	add	r3, r3, r1
  10:	e15c0003 	cmp	r12, r3
  14:	ca000008 	bgt	3c <Vec::isInRect(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) const+0x3c>
  18:	e5900004 	ldr	r0, [r0, #4]
  1c:	e1520000 	cmp	r2, r0
  20:	ca000005 	bgt	3c <Vec::isInRect(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) const+0x3c>
  24:	e59d3000 	ldr	r3, [sp]
  28:	e0833002 	add	r3, r3, r2
  2c:	e1500003 	cmp	r0, r3
  30:	c3a00000 	movgt	r0, #0
  34:	d3a00001 	movle	r0, #1
  38:	e1a0f00e 	mov	pc, lr
  3c:	e3a00000 	mov	r0, #0
  40:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZNK3Vec8isInRectERK4Rect:

00000000 <Vec::isInRect(Rect const&) const>:
   0:	e5902000 	ldr	r2, [r0]
   4:	e5913000 	ldr	r3, [r1]
   8:	e1530002 	cmp	r3, r2
   c:	ca00000d 	bgt	48 <Vec::isInRect(Rect const&) const+0x48>
  10:	e591c008 	ldr	r12, [r1, #8]
  14:	e083300c 	add	r3, r3, r12
  18:	e1520003 	cmp	r2, r3
  1c:	ca000009 	bgt	48 <Vec::isInRect(Rect const&) const+0x48>
  20:	e5900004 	ldr	r0, [r0, #4]
  24:	e5913004 	ldr	r3, [r1, #4]
  28:	e1500003 	cmp	r0, r3
  2c:	ba000005 	blt	48 <Vec::isInRect(Rect const&) const+0x48>
  30:	e591200c 	ldr	r2, [r1, #12]
  34:	e0833002 	add	r3, r3, r2
  38:	e1500003 	cmp	r0, r3
  3c:	c3a00000 	movgt	r0, #0
  40:	d3a00001 	movle	r0, #1
  44:	e1a0f00e 	mov	pc, lr
  48:	e3a00000 	mov	r0, #0
  4c:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZNK3Vec6equalsERKS_:

00000000 <Vec::equals(Vec const&) const>:
   0:	e5903000 	ldr	r3, [r0]
   4:	e5912000 	ldr	r2, [r1]
   8:	e1520003 	cmp	r2, r3
   c:	0a000001 	beq	18 <Vec::equals(Vec const&) const+0x18>
  10:	e3a00000 	mov	r0, #0
  14:	e1a0f00e 	mov	pc, lr
  18:	e5900004 	ldr	r0, [r0, #4]
  1c:	e5913004 	ldr	r3, [r1, #4]
  20:	e0403003 	sub	r3, r0, r3
  24:	e2730000 	rsbs	r0, r3, #0
  28:	e0a00003 	adc	r0, r0, r3
  2c:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN3Vec5floorEv:

00000000 <Vec::floor()>:
   0:	e5902000 	ldr	r2, [r0]
   4:	e3520000 	cmp	r2, #0
   8:	b24220ff 	sublt	r2, r2, #255	; 0xff
   c:	e3520000 	cmp	r2, #0
  10:	e28230ff 	add	r3, r2, #255	; 0xff
  14:	a1a03002 	movge	r3, r2
  18:	e5902004 	ldr	r2, [r0, #4]
  1c:	e3c330ff 	bic	r3, r3, #255	; 0xff
  20:	e3520000 	cmp	r2, #0
  24:	b24220ff 	sublt	r2, r2, #255	; 0xff
  28:	e3520000 	cmp	r2, #0
  2c:	e5803000 	str	r3, [r0]
  30:	e28230ff 	add	r3, r2, #255	; 0xff
  34:	a1a03002 	movge	r3, r2
  38:	e3c330ff 	bic	r3, r3, #255	; 0xff
  3c:	e5803004 	str	r3, [r0, #4]
  40:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZN3Vec5roundEv:

00000000 <Vec::round()>:
   0:	e5903000 	ldr	r3, [r0]
   4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   8:	e3530000 	cmp	r3, #0
   c:	e283c07f 	add	r12, r3, #127	; 0x7f
  10:	a1a0c003 	movge	r12, r3
  14:	e590e004 	ldr	lr, [r0, #4]
  18:	e1b033cc 	asrs	r3, r12, #7
  1c:	e2033001 	and	r3, r3, #1
  20:	42633000 	rsbmi	r3, r3, #0
  24:	e35e0000 	cmp	lr, #0
  28:	e28e107f 	add	r1, lr, #127	; 0x7f
  2c:	a1a0100e 	movge	r1, lr
  30:	e1a0efac 	lsr	lr, r12, #31
  34:	e08ec3cc 	add	r12, lr, r12, asr #7
  38:	e08330cc 	add	r3, r3, r12, asr #1
  3c:	e1a03403 	lsl	r3, r3, #8
  40:	e5803000 	str	r3, [r0]
  44:	e1b033c1 	asrs	r3, r1, #7
  48:	e1a0cfa1 	lsr	r12, r1, #31
  4c:	e2033001 	and	r3, r3, #1
  50:	e08c13c1 	add	r1, r12, r1, asr #7
  54:	42633000 	rsbmi	r3, r3, #0
  58:	e08330c1 	add	r3, r3, r1, asr #1
  5c:	e1a03403 	lsl	r3, r3, #8
  60:	e5803004 	str	r3, [r0, #4]
  64:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .text._ZN3Vec4ceilEv:

00000000 <Vec::ceil()>:
   0:	e5903000 	ldr	r3, [r0]
   4:	e3530000 	cmp	r3, #0
   8:	c28330ff 	addgt	r3, r3, #255	; 0xff
   c:	e3530000 	cmp	r3, #0
  10:	e28320ff 	add	r2, r3, #255	; 0xff
  14:	a1a02003 	movge	r2, r3
  18:	e5903004 	ldr	r3, [r0, #4]
  1c:	e3c220ff 	bic	r2, r2, #255	; 0xff
  20:	e3530000 	cmp	r3, #0
  24:	c28330ff 	addgt	r3, r3, #255	; 0xff
  28:	e3530000 	cmp	r3, #0
  2c:	e5802000 	str	r2, [r0]
  30:	e28320ff 	add	r2, r3, #255	; 0xff
  34:	a1a02003 	movge	r2, r3
  38:	e3c230ff 	bic	r3, r2, #255	; 0xff
  3c:	e5803004 	str	r3, [r0, #4]
  40:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._Z4qmodmm:

00000000 <qmod(unsigned long, unsigned long)>:
   0:	e2513000 	subs	r3, r1, #0
   4:	0a00000f 	beq	48 <qmod(unsigned long, unsigned long)+0x48>
   8:	e243c001 	sub	r12, r3, #1
   c:	e11c0003 	tst	r12, r3
  10:	e1a02000 	mov	r2, r0
  14:	0a000009 	beq	40 <qmod(unsigned long, unsigned long)+0x40>
  18:	e353007f 	cmp	r3, #127	; 0x7f
  1c:	8a00000b 	bhi	50 <qmod(unsigned long, unsigned long)+0x50>
  20:	e59f1038 	ldr	r1, [pc, #56]	; 60 <qmod(unsigned long, unsigned long)+0x60>
  24:	e7910103 	ldr	r0, [r1, r3, lsl #2]
  28:	e081c092 	umull	r12, r1, r2, r0
  2c:	e0010193 	mul	r1, r3, r1
  30:	e0420001 	sub	r0, r2, r1
  34:	e1530000 	cmp	r3, r0
  38:	90400003 	subls	r0, r0, r3
  3c:	e1a0f00e 	mov	pc, lr
  40:	e00c0000 	and	r0, r12, r0
  44:	e1a0f00e 	mov	pc, lr
  48:	e1a00003 	mov	r0, r3
  4c:	e1a0f00e 	mov	pc, lr
  50:	e92d4010 	push	{r4, lr}
  54:	ebfffffe 	bl	0 <__aeabi_uidivmod>
  58:	e1a00001 	mov	r0, r1
  5c:	e8bd8010 	pop	{r4, pc}
  60:	00000000 	.word	0x00000000

Disassembly of section .text._Z4qdivmm:

00000000 <qdiv(unsigned long, unsigned long)>:
   0:	e3510000 	cmp	r1, #0
   4:	0a000011 	beq	50 <qdiv(unsigned long, unsigned long)+0x50>
   8:	e2412001 	sub	r2, r1, #1
   c:	e1120001 	tst	r2, r1
  10:	e1a03000 	mov	r3, r0
  14:	0a000009 	beq	40 <qdiv(unsigned long, unsigned long)+0x40>
  18:	e351007f 	cmp	r1, #127	; 0x7f
  1c:	8a000007 	bhi	40 <qdiv(unsigned long, unsigned long)+0x40>
  20:	e59f2030 	ldr	r2, [pc, #48]	; 58 <qdiv(unsigned long, unsigned long)+0x58>
  24:	e7922101 	ldr	r2, [r2, r1, lsl #2]
  28:	e080c293 	umull	r12, r0, r3, r2
  2c:	e0020190 	mul	r2, r0, r1
  30:	e0433002 	sub	r3, r3, r2
  34:	e1510003 	cmp	r1, r3
  38:	92800001 	addls	r0, r0, #1
  3c:	e1a0f00e 	mov	pc, lr
  40:	e1a00003 	mov	r0, r3
  44:	e92d4010 	push	{r4, lr}
  48:	ebfffffe 	bl	0 <__aeabi_uidiv>
  4c:	e8bd8010 	pop	{r4, pc}
  50:	e1a00001 	mov	r0, r1
  54:	e1a0f00e 	mov	pc, lr
  58:	00000000 	.word	0x00000000

Disassembly of section .text._ZN3fpm3sinIlxLj8EEENS_5fixedIT_T0_XT1_EEES4_:

00000000 <fpm::fixed<long, long long, 8u> fpm::sin<long, long long, 8u>(fpm::fixed<long, long long, 8u>)>:
   0:	e59f1134 	ldr	r1, [pc, #308]	; 13c <fpm::fixed<long, long long, 8u> fpm::sin<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0x13c>
   4:	e92d4010 	push	{r4, lr}
   8:	e0c1c190 	smull	r12, r1, r0, r1
   c:	e1a0cfc0 	asr	r12, r0, #31
  10:	e06cc241 	rsb	r12, r12, r1, asr #4
  14:	e08c128c 	add	r1, r12, r12, lsl #5
  18:	e08cc081 	add	r12, r12, r1, lsl #1
  1c:	e06cc10c 	rsb	r12, r12, r12, lsl #2
  20:	e040c18c 	sub	r12, r0, r12, lsl #3
  24:	e1a01fcc 	asr	r1, r12, #31
  28:	e1a01481 	lsl	r1, r1, #9
  2c:	e3a03000 	mov	r3, #0
  30:	e59f2108 	ldr	r2, [pc, #264]	; 140 <fpm::fixed<long, long long, 8u> fpm::sin<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0x140>
  34:	e1a0048c 	lsl	r0, r12, #9
  38:	e1811bac 	orr	r1, r1, r12, lsr #23
  3c:	ebfffffe 	bl	0 <__aeabi_ldivmod>
  40:	e1a03fa1 	lsr	r3, r1, #31
  44:	e1a0cfc1 	asr	r12, r1, #31
  48:	e0933000 	adds	r3, r3, r0
  4c:	e0200fc1 	eor	r0, r0, r1, asr #31
  50:	e2a11000 	adc	r1, r1, #0
  54:	e050200c 	subs	r2, r0, r12
  58:	e2022001 	and	r2, r2, #1
  5c:	e022200c 	eor	r2, r2, r12
  60:	e1a030a3 	lsr	r3, r3, #1
  64:	e1833f81 	orr	r3, r3, r1, lsl #31
  68:	e052200c 	subs	r2, r2, r12
  6c:	e0933002 	adds	r3, r3, r2
  70:	42833b01 	addmi	r3, r3, #1024	; 0x400
  74:	e3530c02 	cmp	r3, #512	; 0x200
  78:	c3e01000 	mvngt	r1, #0
  7c:	d3a01001 	movle	r1, #1
  80:	c2433c02 	subgt	r3, r3, #512	; 0x200
  84:	e3530c01 	cmp	r3, #256	; 0x100
  88:	c2633c02 	rsbgt	r3, r3, #512	; 0x200
  8c:	e0c02393 	smull	r2, r0, r3, r3
  90:	e0010193 	mul	r1, r3, r1
  94:	e1a03422 	lsr	r3, r2, #8
  98:	e1833c00 	orr	r3, r3, r0, lsl #24
  9c:	e3a00024 	mov	r0, #36	; 0x24
  a0:	e1a0cc02 	lsl	r12, r2, #24
  a4:	e0833fac 	add	r3, r3, r12, lsr #31
  a8:	e08c2093 	umull	r2, r12, r3, r0
  ac:	e1a00c02 	lsl	r0, r2, #24
  b0:	e1a02422 	lsr	r2, r2, #8
  b4:	e1822c0c 	orr	r2, r2, r12, lsl #24
  b8:	e0822fa0 	add	r2, r2, r0, lsr #31
  bc:	e2622f52 	rsb	r2, r2, #328	; 0x148
  c0:	e08c0392 	umull	r0, r12, r2, r3
  c4:	e1a0efc2 	asr	lr, r2, #31
  c8:	e022ce93 	mla	r2, r3, lr, r12
  cc:	e1a03420 	lsr	r3, r0, #8
  d0:	e1833c02 	orr	r3, r3, r2, lsl #24
  d4:	e1a00c00 	lsl	r0, r0, #24
  d8:	e0833fa0 	add	r3, r3, r0, lsr #31
  dc:	e2633fc9 	rsb	r3, r3, #804	; 0x324
  e0:	e0c20193 	smull	r0, r2, r3, r1
  e4:	e1a03fc2 	asr	r3, r2, #31
  e8:	e203307f 	and	r3, r3, #127	; 0x7f
  ec:	e0933000 	adds	r3, r3, r0
  f0:	e2a22000 	adc	r2, r2, #0
  f4:	e1a033a3 	lsr	r3, r3, #7
  f8:	e1833c82 	orr	r3, r3, r2, lsl #25
  fc:	e1a00fa2 	lsr	r0, r2, #31
 100:	e1a01fc2 	asr	r1, r2, #31
 104:	e0900003 	adds	r0, r0, r3
 108:	e1a0c3c2 	asr	r12, r2, #7
 10c:	e0233fc2 	eor	r3, r3, r2, asr #31
 110:	e2ac2000 	adc	r2, r12, #0
 114:	e0533001 	subs	r3, r3, r1
 118:	e2033001 	and	r3, r3, #1
 11c:	e0233001 	eor	r3, r3, r1
 120:	e1a000a0 	lsr	r0, r0, #1
 124:	e1800f82 	orr	r0, r0, r2, lsl #31
 128:	e0533001 	subs	r3, r3, r1
 12c:	e0800003 	add	r0, r0, r3
 130:	e0800fa0 	add	r0, r0, r0, lsr #31
 134:	e1a000c0 	asr	r0, r0, #1
 138:	e8bd8010 	pop	{r4, pc}
 13c:	028c1979 	.word	0x028c1979
 140:	00000192 	.word	0x00000192

Disassembly of section .text._ZN3Vec12setWithAngleEN3fpm5fixedIlxLj8EEES2_:

00000000 <Vec::setWithAngle(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e2810e19 	add	r0, r1, #400	; 0x190
   c:	e2800002 	add	r0, r0, #2
  10:	e1a06001 	mov	r6, r1
  14:	e1a05002 	mov	r5, r2
  18:	ebfffffe 	bl	0 <Vec::setWithAngle(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  1c:	e1a03000 	mov	r3, r0
  20:	e0c21593 	smull	r1, r2, r3, r5
  24:	e1a00006 	mov	r0, r6
  28:	e1a03fc2 	asr	r3, r2, #31
  2c:	e203307f 	and	r3, r3, #127	; 0x7f
  30:	e0933001 	adds	r3, r3, r1
  34:	e2a22000 	adc	r2, r2, #0
  38:	e1a033a3 	lsr	r3, r3, #7
  3c:	e1833c82 	orr	r3, r3, r2, lsl #25
  40:	e1a01fa2 	lsr	r1, r2, #31
  44:	e1a0cfc2 	asr	r12, r2, #31
  48:	e0911003 	adds	r1, r1, r3
  4c:	e0233fc2 	eor	r3, r3, r2, asr #31
  50:	e1a023c2 	asr	r2, r2, #7
  54:	e2a22000 	adc	r2, r2, #0
  58:	e053300c 	subs	r3, r3, r12
  5c:	e2033001 	and	r3, r3, #1
  60:	e023300c 	eor	r3, r3, r12
  64:	e1a010a1 	lsr	r1, r1, #1
  68:	e053300c 	subs	r3, r3, r12
  6c:	e1811f82 	orr	r1, r1, r2, lsl #31
  70:	e0811003 	add	r1, r1, r3
  74:	e5841000 	str	r1, [r4]
  78:	ebfffffe 	bl	0 <Vec::setWithAngle(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  7c:	e1a03000 	mov	r3, r0
  80:	e0c21593 	smull	r1, r2, r3, r5
  84:	e1a00004 	mov	r0, r4
  88:	e1a03fc2 	asr	r3, r2, #31
  8c:	e203307f 	and	r3, r3, #127	; 0x7f
  90:	e0933001 	adds	r3, r3, r1
  94:	e2a22000 	adc	r2, r2, #0
  98:	e1a033a3 	lsr	r3, r3, #7
  9c:	e1833c82 	orr	r3, r3, r2, lsl #25
  a0:	e1a01fa2 	lsr	r1, r2, #31
  a4:	e0911003 	adds	r1, r1, r3
  a8:	e1a0c3c2 	asr	r12, r2, #7
  ac:	e0233fc2 	eor	r3, r3, r2, asr #31
  b0:	e1a02fc2 	asr	r2, r2, #31
  b4:	e2acc000 	adc	r12, r12, #0
  b8:	e0533002 	subs	r3, r3, r2
  bc:	e2033001 	and	r3, r3, #1
  c0:	e0233002 	eor	r3, r3, r2
  c4:	e1a010a1 	lsr	r1, r1, #1
  c8:	e1811f8c 	orr	r1, r1, r12, lsl #31
  cc:	e0533002 	subs	r3, r3, r2
  d0:	e0811003 	add	r1, r1, r3
  d4:	e5841004 	str	r1, [r4, #4]
  d8:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN3Vec12addWithAngleEN3fpm5fixedIlxLj8EEES2_:

00000000 <Vec::addWithAngle(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e92d4010 	push	{r4, lr}
   4:	e3a03000 	mov	r3, #0
   8:	e1a04000 	mov	r4, r0
   c:	e24dd008 	sub	sp, sp, #8
  10:	e1a0000d 	mov	r0, sp
  14:	e58d3000 	str	r3, [sp]
  18:	e58d3004 	str	r3, [sp, #4]
  1c:	ebfffffe 	bl	0 <Vec::addWithAngle(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  20:	e89d0003 	ldm	sp, {r0, r1}
  24:	e894000c 	ldm	r4, {r2, r3}
  28:	e0822000 	add	r2, r2, r0
  2c:	e1a00004 	mov	r0, r4
  30:	e0833001 	add	r3, r3, r1
  34:	e884000c 	stm	r4, {r2, r3}
  38:	e28dd008 	add	sp, sp, #8
  3c:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZN3Vec6rotateEN3fpm5fixedIlxLj8EEE:

00000000 <Vec::rotate(fpm::fixed<long, long long, 8u>)>:
   0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
   4:	e2516000 	subs	r6, r1, #0
   8:	e1a05000 	mov	r5, r0
   c:	0a000062 	beq	19c <Vec::rotate(fpm::fixed<long, long long, 8u>)+0x19c>
  10:	e2864e19 	add	r4, r6, #400	; 0x190
  14:	e2844002 	add	r4, r4, #2
  18:	e1a00004 	mov	r0, r4
  1c:	ebfffffe 	bl	0 <Vec::rotate(fpm::fixed<long, long long, 8u>)>
  20:	e1a03000 	mov	r3, r0
  24:	e5957000 	ldr	r7, [r5]
  28:	e1a00006 	mov	r0, r6
  2c:	e0c82793 	smull	r2, r8, r3, r7
  30:	e1a03fc8 	asr	r3, r8, #31
  34:	e203307f 	and	r3, r3, #127	; 0x7f
  38:	e0933002 	adds	r3, r3, r2
  3c:	e2a88000 	adc	r8, r8, #0
  40:	e1a0a3a3 	lsr	r10, r3, #7
  44:	ebfffffe 	bl	0 <Vec::rotate(fpm::fixed<long, long long, 8u>)>
  48:	e1a03000 	mov	r3, r0
  4c:	e1a00006 	mov	r0, r6
  50:	e5956004 	ldr	r6, [r5, #4]
  54:	e18aac88 	orr	r10, r10, r8, lsl #25
  58:	e1a0efc8 	asr	lr, r8, #31
  5c:	e1a093c8 	asr	r9, r8, #7
  60:	e02a2fc8 	eor	r2, r10, r8, asr #31
  64:	e0c18693 	smull	r8, r1, r3, r6
  68:	e1a0cfa9 	lsr	r12, r9, #31
  6c:	e1a03fc1 	asr	r3, r1, #31
  70:	e203307f 	and	r3, r3, #127	; 0x7f
  74:	e0933008 	adds	r3, r3, r8
  78:	e2a11000 	adc	r1, r1, #0
  7c:	e09cc00a 	adds	r12, r12, r10
  80:	e2a99000 	adc	r9, r9, #0
  84:	e052200e 	subs	r2, r2, lr
  88:	e2022001 	and	r2, r2, #1
  8c:	e022200e 	eor	r2, r2, lr
  90:	e1a0c0ac 	lsr	r12, r12, #1
  94:	e052200e 	subs	r2, r2, lr
  98:	e1a033a3 	lsr	r3, r3, #7
  9c:	e18ccf89 	orr	r12, r12, r9, lsl #31
  a0:	e08cc002 	add	r12, r12, r2
  a4:	e1833c81 	orr	r3, r3, r1, lsl #25
  a8:	e1a02fa1 	lsr	r2, r1, #31
  ac:	e1a0efc1 	asr	lr, r1, #31
  b0:	e0922003 	adds	r2, r2, r3
  b4:	e0233fc1 	eor	r3, r3, r1, asr #31
  b8:	e1a013c1 	asr	r1, r1, #7
  bc:	e2a11000 	adc	r1, r1, #0
  c0:	e053300e 	subs	r3, r3, lr
  c4:	e2033001 	and	r3, r3, #1
  c8:	e023300e 	eor	r3, r3, lr
  cc:	e1a020a2 	lsr	r2, r2, #1
  d0:	e053300e 	subs	r3, r3, lr
  d4:	e1822f81 	orr	r2, r2, r1, lsl #31
  d8:	e0822003 	add	r2, r2, r3
  dc:	e04c8002 	sub	r8, r12, r2
  e0:	ebfffffe 	bl	0 <Vec::rotate(fpm::fixed<long, long long, 8u>)>
  e4:	e1a03000 	mov	r3, r0
  e8:	e0c21793 	smull	r1, r2, r3, r7
  ec:	e1a00004 	mov	r0, r4
  f0:	e1a04fc2 	asr	r4, r2, #31
  f4:	e204407f 	and	r4, r4, #127	; 0x7f
  f8:	e0944001 	adds	r4, r4, r1
  fc:	e2a27000 	adc	r7, r2, #0
 100:	ebfffffe 	bl	0 <Vec::rotate(fpm::fixed<long, long long, 8u>)>
 104:	e1a043a4 	lsr	r4, r4, #7
 108:	e1844c87 	orr	r4, r4, r7, lsl #25
 10c:	e1a0cfc7 	asr	r12, r7, #31
 110:	e1a0e3c7 	asr	lr, r7, #7
 114:	e0242fc7 	eor	r2, r4, r7, asr #31
 118:	e5858000 	str	r8, [r5]
 11c:	e0c78690 	smull	r8, r7, r0, r6
 120:	e1a01fae 	lsr	r1, lr, #31
 124:	e1a03fc7 	asr	r3, r7, #31
 128:	e203307f 	and	r3, r3, #127	; 0x7f
 12c:	e0933008 	adds	r3, r3, r8
 130:	e2a76000 	adc	r6, r7, #0
 134:	e1a033a3 	lsr	r3, r3, #7
 138:	e1833c86 	orr	r3, r3, r6, lsl #25
 13c:	e1a00fa6 	lsr	r0, r6, #31
 140:	e0900003 	adds	r0, r0, r3
 144:	e1a07fc6 	asr	r7, r6, #31
 148:	e0233fc6 	eor	r3, r3, r6, asr #31
 14c:	e1a063c6 	asr	r6, r6, #7
 150:	e2a66000 	adc	r6, r6, #0
 154:	e0533007 	subs	r3, r3, r7
 158:	e2033001 	and	r3, r3, #1
 15c:	e0233007 	eor	r3, r3, r7
 160:	e0533007 	subs	r3, r3, r7
 164:	e0911004 	adds	r1, r1, r4
 168:	e2aee000 	adc	lr, lr, #0
 16c:	e052200c 	subs	r2, r2, r12
 170:	e2022001 	and	r2, r2, #1
 174:	e1a000a0 	lsr	r0, r0, #1
 178:	e1a010a1 	lsr	r1, r1, #1
 17c:	e022200c 	eor	r2, r2, r12
 180:	e1800f86 	orr	r0, r0, r6, lsl #31
 184:	e1811f8e 	orr	r1, r1, lr, lsl #31
 188:	e052200c 	subs	r2, r2, r12
 18c:	e0800003 	add	r0, r0, r3
 190:	e0811002 	add	r1, r1, r2
 194:	e0800001 	add	r0, r0, r1
 198:	e5850004 	str	r0, [r5, #4]
 19c:	e1a00005 	mov	r0, r5
 1a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

Disassembly of section .text._ZN3fpm4sqrtIlxLj8EEENS_5fixedIT_T0_XT1_EEES4_:

00000000 <fpm::fixed<long, long long, 8u> fpm::sqrt<long, long long, 8u>(fpm::fixed<long, long long, 8u>)>:
   0:	e3500000 	cmp	r0, #0
   4:	01a0f00e 	moveq	pc, lr
   8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   c:	e1a01fc0 	asr	r1, r0, #31
  10:	e1a05c40 	asr	r5, r0, #24
  14:	e1a04400 	lsl	r4, r0, #8
  18:	ebfffffe 	bl	0 <__clzdi2>
  1c:	e3a03001 	mov	r3, #1
  20:	e2600047 	rsb	r0, r0, #71	; 0x47
  24:	e3c00001 	bic	r0, r0, #1
  28:	e2402020 	sub	r2, r0, #32
  2c:	e1a02213 	lsl	r2, r3, r2
  30:	e2601020 	rsb	r1, r0, #32
  34:	e1822133 	orr	r2, r2, r3, lsr r1
  38:	e1a03013 	lsl	r3, r3, r0
  3c:	e1931002 	orrs	r1, r3, r2
  40:	0a000019 	beq	ac <fpm::fixed<long, long long, 8u> fpm::sqrt<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0xac>
  44:	e3a00000 	mov	r0, #0
  48:	e1a01000 	mov	r1, r0
  4c:	e090c003 	adds	r12, r0, r3
  50:	e0a1e002 	adc	lr, r1, r2
  54:	e154000c 	cmp	r4, r12
  58:	e1a000a0 	lsr	r0, r0, #1
  5c:	e0d5700e 	sbcs	r7, r5, lr
  60:	e1800f81 	orr	r0, r0, r1, lsl #31
  64:	e1a06123 	lsr	r6, r3, #2
  68:	e1a010c1 	asr	r1, r1, #1
  6c:	ba000005 	blt	88 <fpm::fixed<long, long long, 8u> fpm::sqrt<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0x88>
  70:	e054c00c 	subs	r12, r4, r12
  74:	e0c5e00e 	sbc	lr, r5, lr
  78:	e1a0400c 	mov	r4, r12
  7c:	e1a0500e 	mov	r5, lr
  80:	e0900003 	adds	r0, r0, r3
  84:	e0a11002 	adc	r1, r1, r2
  88:	e1863f02 	orr	r3, r6, r2, lsl #30
  8c:	e1a02142 	asr	r2, r2, #2
  90:	e193c002 	orrs	r12, r3, r2
  94:	1affffec 	bne	4c <fpm::fixed<long, long long, 8u> fpm::sqrt<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0x4c>
  98:	e1500004 	cmp	r0, r4
  9c:	e0d11005 	sbcs	r1, r1, r5
  a0:	aa000000 	bge	a8 <fpm::fixed<long, long long, 8u> fpm::sqrt<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0xa8>
  a4:	e2900001 	adds	r0, r0, #1
  a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  ac:	e1a00003 	mov	r0, r3
  b0:	e1a01002 	mov	r1, r2
  b4:	eafffff7 	b	98 <fpm::fixed<long, long long, 8u> fpm::sqrt<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0x98>

Disassembly of section .text._ZNK3Vec10distanceToEN3fpm5fixedIlxLj8EEES2_:

00000000 <Vec::distanceTo(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) const>:
   0:	e8901008 	ldm	r0, {r3, r12}
   4:	e042200c 	sub	r2, r2, r12
   8:	e0411003 	sub	r1, r1, r3
   c:	e92d4010 	push	{r4, lr}
  10:	e0cce191 	smull	lr, r12, r1, r1
  14:	e0c14292 	smull	r4, r1, r2, r2
  18:	e1a03fcc 	asr	r3, r12, #31
  1c:	e1a00fc1 	asr	r0, r1, #31
  20:	e200207f 	and	r2, r0, #127	; 0x7f
  24:	e20000ff 	and	r0, r0, #255	; 0xff
  28:	e0922004 	adds	r2, r2, r4
  2c:	e0900004 	adds	r0, r0, r4
  30:	e2a11000 	adc	r1, r1, #0
  34:	e1a00420 	lsr	r0, r0, #8
  38:	e1800c01 	orr	r0, r0, r1, lsl #24
  3c:	e1a02c02 	lsl	r2, r2, #24
  40:	e0800fa2 	add	r0, r0, r2, lsr #31
  44:	e203207f 	and	r2, r3, #127	; 0x7f
  48:	e20330ff 	and	r3, r3, #255	; 0xff
  4c:	e092200e 	adds	r2, r2, lr
  50:	e093300e 	adds	r3, r3, lr
  54:	e2acc000 	adc	r12, r12, #0
  58:	e1a03423 	lsr	r3, r3, #8
  5c:	e1a02c02 	lsl	r2, r2, #24
  60:	e1833c0c 	orr	r3, r3, r12, lsl #24
  64:	e0833fa2 	add	r3, r3, r2, lsr #31
  68:	e0800003 	add	r0, r0, r3
  6c:	ebfffffe 	bl	0 <Vec::distanceTo(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) const>
  70:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZNK3Vec10distanceToERKS_:

00000000 <Vec::distanceTo(Vec const&) const>:
   0:	e590c004 	ldr	r12, [r0, #4]
   4:	e5912004 	ldr	r2, [r1, #4]
   8:	e92d4010 	push	{r4, lr}
   c:	e042200c 	sub	r2, r2, r12
  10:	e0ce4292 	smull	r4, lr, r2, r2
  14:	e5913000 	ldr	r3, [r1]
  18:	e5901000 	ldr	r1, [r0]
  1c:	e1a00fce 	asr	r0, lr, #31
  20:	e0433001 	sub	r3, r3, r1
  24:	e0c1c393 	smull	r12, r1, r3, r3
  28:	e200207f 	and	r2, r0, #127	; 0x7f
  2c:	e20000ff 	and	r0, r0, #255	; 0xff
  30:	e0922004 	adds	r2, r2, r4
  34:	e0900004 	adds	r0, r0, r4
  38:	e2aee000 	adc	lr, lr, #0
  3c:	e1a00420 	lsr	r0, r0, #8
  40:	e1a03fc1 	asr	r3, r1, #31
  44:	e1800c0e 	orr	r0, r0, lr, lsl #24
  48:	e1a02c02 	lsl	r2, r2, #24
  4c:	e0800fa2 	add	r0, r0, r2, lsr #31
  50:	e203207f 	and	r2, r3, #127	; 0x7f
  54:	e20330ff 	and	r3, r3, #255	; 0xff
  58:	e092200c 	adds	r2, r2, r12
  5c:	e093300c 	adds	r3, r3, r12
  60:	e2a11000 	adc	r1, r1, #0
  64:	e1a03423 	lsr	r3, r3, #8
  68:	e1a02c02 	lsl	r2, r2, #24
  6c:	e1833c01 	orr	r3, r3, r1, lsl #24
  70:	e0833fa2 	add	r3, r3, r2, lsr #31
  74:	e0800003 	add	r0, r0, r3
  78:	ebfffffe 	bl	0 <Vec::distanceTo(Vec const&) const>
  7c:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZNK3Vec6lengthEv:

00000000 <Vec::length() const>:
   0:	e5902004 	ldr	r2, [r0, #4]
   4:	e92d4010 	push	{r4, lr}
   8:	e0ce4292 	smull	r4, lr, r2, r2
   c:	e5903000 	ldr	r3, [r0]
  10:	e1a00fce 	asr	r0, lr, #31
  14:	e0c1c393 	smull	r12, r1, r3, r3
  18:	e200207f 	and	r2, r0, #127	; 0x7f
  1c:	e20000ff 	and	r0, r0, #255	; 0xff
  20:	e0922004 	adds	r2, r2, r4
  24:	e0900004 	adds	r0, r0, r4
  28:	e2aee000 	adc	lr, lr, #0
  2c:	e1a00420 	lsr	r0, r0, #8
  30:	e1a03fc1 	asr	r3, r1, #31
  34:	e1800c0e 	orr	r0, r0, lr, lsl #24
  38:	e1a02c02 	lsl	r2, r2, #24
  3c:	e0800fa2 	add	r0, r0, r2, lsr #31
  40:	e203207f 	and	r2, r3, #127	; 0x7f
  44:	e20330ff 	and	r3, r3, #255	; 0xff
  48:	e092200c 	adds	r2, r2, r12
  4c:	e093300c 	adds	r3, r3, r12
  50:	e2a11000 	adc	r1, r1, #0
  54:	e1a03423 	lsr	r3, r3, #8
  58:	e1a02c02 	lsl	r2, r2, #24
  5c:	e1833c01 	orr	r3, r3, r1, lsl #24
  60:	e0833fa2 	add	r3, r3, r2, lsr #31
  64:	e0800003 	add	r0, r0, r3
  68:	ebfffffe 	bl	0 <Vec::length() const>
  6c:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZN3Vec9normalizeEv:

00000000 <Vec::normalize()>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e5906000 	ldr	r6, [r0]
   8:	e5905004 	ldr	r5, [r0, #4]
   c:	e1a04000 	mov	r4, r0
  10:	e0c10696 	smull	r0, r1, r6, r6
  14:	e1a03fc1 	asr	r3, r1, #31
  18:	e203207f 	and	r2, r3, #127	; 0x7f
  1c:	e20330ff 	and	r3, r3, #255	; 0xff
  20:	e0922000 	adds	r2, r2, r0
  24:	e0933000 	adds	r3, r3, r0
  28:	e2a11000 	adc	r1, r1, #0
  2c:	e1a03423 	lsr	r3, r3, #8
  30:	e1833c01 	orr	r3, r3, r1, lsl #24
  34:	e0c1c595 	smull	r12, r1, r5, r5
  38:	e1a02c02 	lsl	r2, r2, #24
  3c:	e0830fa2 	add	r0, r3, r2, lsr #31
  40:	e1a03fc1 	asr	r3, r1, #31
  44:	e203207f 	and	r2, r3, #127	; 0x7f
  48:	e20330ff 	and	r3, r3, #255	; 0xff
  4c:	e092200c 	adds	r2, r2, r12
  50:	e093300c 	adds	r3, r3, r12
  54:	e2a11000 	adc	r1, r1, #0
  58:	e1a03423 	lsr	r3, r3, #8
  5c:	e1833c01 	orr	r3, r3, r1, lsl #24
  60:	e1a02c02 	lsl	r2, r2, #24
  64:	e0833fa2 	add	r3, r3, r2, lsr #31
  68:	e0800003 	add	r0, r0, r3
  6c:	ebfffffe 	bl	0 <Vec::normalize()>
  70:	e2507000 	subs	r7, r0, #0
  74:	1a000001 	bne	80 <Vec::normalize()+0x80>
  78:	e1a00004 	mov	r0, r4
  7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  80:	e1a01fc6 	asr	r1, r6, #31
  84:	e1a08fc7 	asr	r8, r7, #31
  88:	e1a01481 	lsl	r1, r1, #9
  8c:	e1a02007 	mov	r2, r7
  90:	e1a03008 	mov	r3, r8
  94:	e1811ba6 	orr	r1, r1, r6, lsr #23
  98:	e1a00486 	lsl	r0, r6, #9
  9c:	ebfffffe 	bl	0 <__aeabi_ldivmod>
  a0:	e1a0e001 	mov	lr, r1
  a4:	e1a01fc5 	asr	r1, r5, #31
  a8:	e1a01481 	lsl	r1, r1, #9
  ac:	e1a0c000 	mov	r12, r0
  b0:	e1811ba5 	orr	r1, r1, r5, lsr #23
  b4:	e1a00485 	lsl	r0, r5, #9
  b8:	e1a0500e 	mov	r5, lr
  bc:	e1a0efae 	lsr	lr, lr, #31
  c0:	e1a06fc5 	asr	r6, r5, #31
  c4:	e09ee00c 	adds	lr, lr, r12
  c8:	e02ccfc5 	eor	r12, r12, r5, asr #31
  cc:	e2a55000 	adc	r5, r5, #0
  d0:	e05cc006 	subs	r12, r12, r6
  d4:	e20cc001 	and	r12, r12, #1
  d8:	e02cc006 	eor	r12, r12, r6
  dc:	e1a0e0ae 	lsr	lr, lr, #1
  e0:	e05cc006 	subs	r12, r12, r6
  e4:	e18eef85 	orr	lr, lr, r5, lsl #31
  e8:	e08ee00c 	add	lr, lr, r12
  ec:	e1a02007 	mov	r2, r7
  f0:	e1a03008 	mov	r3, r8
  f4:	e584e000 	str	lr, [r4]
  f8:	ebfffffe 	bl	0 <__aeabi_ldivmod>
  fc:	e1a03fa1 	lsr	r3, r1, #31
 100:	e0933000 	adds	r3, r3, r0
 104:	e2a12000 	adc	r2, r1, #0
 108:	e0200fc1 	eor	r0, r0, r1, asr #31
 10c:	e1a01fc1 	asr	r1, r1, #31
 110:	e0500001 	subs	r0, r0, r1
 114:	e2000001 	and	r0, r0, #1
 118:	e0200001 	eor	r0, r0, r1
 11c:	e1a030a3 	lsr	r3, r3, #1
 120:	e0500001 	subs	r0, r0, r1
 124:	e1833f82 	orr	r3, r3, r2, lsl #31
 128:	e0833000 	add	r3, r3, r0
 12c:	e5843004 	str	r3, [r4, #4]
 130:	e1a00004 	mov	r0, r4
 134:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

Disassembly of section .text._ZN3fpm6detail14atan_sanitizedIlxLj8EEENS_5fixedIT_T0_XT1_EEES5_:

00000000 <fpm::fixed<long, long long, 8u> fpm::detail::atan_sanitized<long, long long, 8u>(fpm::fixed<long, long long, 8u>)>:
   0:	e3500c01 	cmp	r0, #256	; 0x100
   4:	e92d4010 	push	{r4, lr}
   8:	8a000028 	bhi	b0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_sanitized<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0xb0>
   c:	e3a02014 	mov	r2, #20
  10:	e0cc3090 	smull	r3, r12, r0, r0
  14:	e1a01423 	lsr	r1, r3, #8
  18:	e1811c0c 	orr	r1, r1, r12, lsl #24
  1c:	e1a03c03 	lsl	r3, r3, #24
  20:	e0811fa3 	add	r1, r1, r3, lsr #31
  24:	e08c3291 	umull	r3, r12, r1, r2
  28:	e1a02c03 	lsl	r2, r3, #24
  2c:	e1a03423 	lsr	r3, r3, #8
  30:	e1833c0c 	orr	r3, r3, r12, lsl #24
  34:	e0833fa2 	add	r3, r3, r2, lsr #31
  38:	e243304a 	sub	r3, r3, #74	; 0x4a
  3c:	e082c193 	umull	r12, r2, r3, r1
  40:	e1a0efc3 	asr	lr, r3, #31
  44:	e0222e91 	mla	r2, r1, lr, r2
  48:	e1a03fc2 	asr	r3, r2, #31
  4c:	e203307f 	and	r3, r3, #127	; 0x7f
  50:	e093300c 	adds	r3, r3, r12
  54:	e2a22000 	adc	r2, r2, #0
  58:	e1a033a3 	lsr	r3, r3, #7
  5c:	e1833c82 	orr	r3, r3, r2, lsl #25
  60:	e1a01fa2 	lsr	r1, r2, #31
  64:	e0911003 	adds	r1, r1, r3
  68:	e1a0c3c2 	asr	r12, r2, #7
  6c:	e0233fc2 	eor	r3, r3, r2, asr #31
  70:	e1a02fc2 	asr	r2, r2, #31
  74:	e2acc000 	adc	r12, r12, #0
  78:	e0533002 	subs	r3, r3, r2
  7c:	e2033001 	and	r3, r3, #1
  80:	e0233002 	eor	r3, r3, r2
  84:	e1a010a1 	lsr	r1, r1, #1
  88:	e0533002 	subs	r3, r3, r2
  8c:	e1811f8c 	orr	r1, r1, r12, lsl #31
  90:	e0811003 	add	r1, r1, r3
  94:	e28110ff 	add	r1, r1, #255	; 0xff
  98:	e0c23091 	smull	r3, r2, r1, r0
  9c:	e1a00423 	lsr	r0, r3, #8
  a0:	e1800c02 	orr	r0, r0, r2, lsl #24
  a4:	e1a03c03 	lsl	r3, r3, #24
  a8:	e0800fa3 	add	r0, r0, r3, lsr #31
  ac:	e8bd8010 	pop	{r4, pc}
  b0:	e59f300c 	ldr	r3, [pc, #12]	; c4 <fpm::fixed<long, long long, 8u> fpm::detail::atan_sanitized<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0xc4>
  b4:	e59f200c 	ldr	r2, [pc, #12]	; c8 <fpm::fixed<long, long long, 8u> fpm::detail::atan_sanitized<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0xc8>
  b8:	e59f100c 	ldr	r1, [pc, #12]	; cc <fpm::fixed<long, long long, 8u> fpm::detail::atan_sanitized<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0xcc>
  bc:	e59f000c 	ldr	r0, [pc, #12]	; d0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_sanitized<long, long long, 8u>(fpm::fixed<long, long long, 8u>)+0xd0>
  c0:	ebfffffe 	bl	0 <__assert_func>
  c4:	00000000 	.word	0x00000000
  c8:	00000020 	.word	0x00000020
  cc:	0000024a 	.word	0x0000024a
  d0:	000000a4 	.word	0x000000a4

Disassembly of section .text._ZN3fpm6detail8atan_divIlxLj8EEENS_5fixedIT_T0_XT1_EEES5_S5_:

00000000 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>:
   0:	e251c000 	subs	r12, r1, #0
   4:	e92d4010 	push	{r4, lr}
   8:	0a00002f 	beq	cc <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0xcc>
   c:	e3500000 	cmp	r0, #0
  10:	ba000012 	blt	60 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x60>
  14:	e35c0000 	cmp	r12, #0
  18:	ba000023 	blt	ac <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0xac>
  1c:	e15c0000 	cmp	r12, r0
  20:	aa000014 	bge	78 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0x78>
  24:	e1a01fcc 	asr	r1, r12, #31
  28:	e1a01481 	lsl	r1, r1, #9
  2c:	e1a02000 	mov	r2, r0
  30:	e1a03fc0 	asr	r3, r0, #31
  34:	e1811bac 	orr	r1, r1, r12, lsr #23
  38:	e1a0048c 	lsl	r0, r12, #9
  3c:	ebfffffe 	bl	0 <__aeabi_ldivmod>
  40:	e1a030a0 	lsr	r3, r0, #1
  44:	e1833f81 	orr	r3, r3, r1, lsl #31
  48:	e2000001 	and	r0, r0, #1
  4c:	e0830000 	add	r0, r3, r0
  50:	ebfffffe 	bl	0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  54:	e2600e19 	rsb	r0, r0, #400	; 0x190
  58:	e2800002 	add	r0, r0, #2
  5c:	e8bd8010 	pop	{r4, pc}
  60:	e35c0000 	cmp	r12, #0
  64:	ba000014 	blt	bc <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0xbc>
  68:	e2600000 	rsb	r0, r0, #0
  6c:	ebfffffe 	bl	0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  70:	e2600000 	rsb	r0, r0, #0
  74:	e8bd8010 	pop	{r4, pc}
  78:	e1a01fc0 	asr	r1, r0, #31
  7c:	e1a01481 	lsl	r1, r1, #9
  80:	e1a03fcc 	asr	r3, r12, #31
  84:	e1a0200c 	mov	r2, r12
  88:	e1811ba0 	orr	r1, r1, r0, lsr #23
  8c:	e1a00480 	lsl	r0, r0, #9
  90:	ebfffffe 	bl	0 <__aeabi_ldivmod>
  94:	e1a030a0 	lsr	r3, r0, #1
  98:	e1833f81 	orr	r3, r3, r1, lsl #31
  9c:	e2000001 	and	r0, r0, #1
  a0:	e0830000 	add	r0, r3, r0
  a4:	ebfffffe 	bl	0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  a8:	e8bd8010 	pop	{r4, pc}
  ac:	e26c1000 	rsb	r1, r12, #0
  b0:	ebfffffe 	bl	0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  b4:	e2600000 	rsb	r0, r0, #0
  b8:	e8bd8010 	pop	{r4, pc}
  bc:	e26c1000 	rsb	r1, r12, #0
  c0:	e2600000 	rsb	r0, r0, #0
  c4:	ebfffffe 	bl	0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)>
  c8:	e8bd8010 	pop	{r4, pc}
  cc:	e59f300c 	ldr	r3, [pc, #12]	; e0 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0xe0>
  d0:	e59f200c 	ldr	r2, [pc, #12]	; e4 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0xe4>
  d4:	e59f100c 	ldr	r1, [pc, #12]	; e8 <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0xe8>
  d8:	e59f000c 	ldr	r0, [pc, #12]	; ec <fpm::fixed<long, long long, 8u> fpm::detail::atan_div<long, long long, 8u>(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>)+0xec>
  dc:	ebfffffe 	bl	0 <__assert_func>
  e0:	00000000 	.word	0x00000000
  e4:	00000010 	.word	0x00000010
  e8:	0000025e 	.word	0x0000025e
  ec:	000000a4 	.word	0x000000a4

Disassembly of section .text._ZNK3Vec7angleToEN3fpm5fixedIlxLj8EEES2_:

00000000 <Vec::angleTo(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) const>:
   0:	e5903000 	ldr	r3, [r0]
   4:	e5900004 	ldr	r0, [r0, #4]
   8:	e92d4070 	push	{r4, r5, r6, lr}
   c:	e0515003 	subs	r5, r1, r3
  10:	e0424000 	sub	r4, r2, r0
  14:	0a000007 	beq	38 <Vec::angleTo(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) const+0x38>
  18:	e1a00004 	mov	r0, r4
  1c:	e1a01005 	mov	r1, r5
  20:	ebfffffe 	bl	0 <Vec::angleTo(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) const>
  24:	e3550000 	cmp	r5, #0
  28:	a1a04000 	movge	r4, r0
  2c:	ba000008 	blt	54 <Vec::angleTo(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) const+0x54>
  30:	e1a00004 	mov	r0, r4
  34:	e8bd8070 	pop	{r4, r5, r6, pc}
  38:	e3540000 	cmp	r4, #0
  3c:	0afffffb 	beq	30 <Vec::angleTo(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) const+0x30>
  40:	c59f4020 	ldrgt	r4, [pc, #32]	; 68 <Vec::angleTo(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) const+0x68>
  44:	cafffff9 	bgt	30 <Vec::angleTo(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) const+0x30>
  48:	e59f401c 	ldr	r4, [pc, #28]	; 6c <Vec::angleTo(fpm::fixed<long, long long, 8u>, fpm::fixed<long, long long, 8u>) const+0x6c>
  4c:	e1a00004 	mov	r0, r4
  50:	e8bd8070 	pop	{r4, r5, r6, pc}
  54:	e3540000 	cmp	r4, #0
  58:	a2804fc9 	addge	r4, r0, #804	; 0x324
  5c:	b2404fc9 	sublt	r4, r0, #804	; 0x324
  60:	e1a00004 	mov	r0, r4
  64:	e8bd8070 	pop	{r4, r5, r6, pc}
  68:	00000192 	.word	0x00000192
  6c:	fffffe6e 	.word	0xfffffe6e

Disassembly of section .text._ZNK3Vec5angleEv:

00000000 <Vec::angle() const>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e5905000 	ldr	r5, [r0]
   8:	e5904004 	ldr	r4, [r0, #4]
   c:	e3550000 	cmp	r5, #0
  10:	0a000007 	beq	34 <Vec::angle() const+0x34>
  14:	e1a00004 	mov	r0, r4
  18:	e1a01005 	mov	r1, r5
  1c:	ebfffffe 	bl	0 <Vec::angle() const>
  20:	e3550000 	cmp	r5, #0
  24:	a1a04000 	movge	r4, r0
  28:	ba000008 	blt	50 <Vec::angle() const+0x50>
  2c:	e1a00004 	mov	r0, r4
  30:	e8bd8070 	pop	{r4, r5, r6, pc}
  34:	e3540000 	cmp	r4, #0
  38:	0afffffb 	beq	2c <Vec::angle() const+0x2c>
  3c:	c59f4020 	ldrgt	r4, [pc, #32]	; 64 <Vec::angle() const+0x64>
  40:	cafffff9 	bgt	2c <Vec::angle() const+0x2c>
  44:	e59f401c 	ldr	r4, [pc, #28]	; 68 <Vec::angle() const+0x68>
  48:	e1a00004 	mov	r0, r4
  4c:	e8bd8070 	pop	{r4, r5, r6, pc}
  50:	e3540000 	cmp	r4, #0
  54:	a2804fc9 	addge	r4, r0, #804	; 0x324
  58:	b2404fc9 	sublt	r4, r0, #804	; 0x324
  5c:	e1a00004 	mov	r0, r4
  60:	e8bd8070 	pop	{r4, r5, r6, pc}
  64:	00000192 	.word	0x00000192
  68:	fffffe6e 	.word	0xfffffe6e

tokenizer.o:     file format elf32-littlearm


Disassembly of section .text._ZNK9MacroDict7DumpAllEv:

00000000 <MacroDict::DumpAll() const>:
   0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   4:	e1a06000 	mov	r6, r0
   8:	e24dd014 	sub	sp, sp, #20
   c:	e59f005c 	ldr	r0, [pc, #92]	; 70 <MacroDict::DumpAll() const+0x70>
  10:	ebfffffe 	bl	0 <printf>
  14:	e596400c 	ldr	r4, [r6, #12]
  18:	e2866004 	add	r6, r6, #4
  1c:	e1560004 	cmp	r6, r4
  20:	0a00000e 	beq	60 <MacroDict::DumpAll() const+0x60>
  24:	e59f7048 	ldr	r7, [pc, #72]	; 74 <MacroDict::DumpAll() const+0x74>
  28:	e28d5004 	add	r5, sp, #4
  2c:	e5942018 	ldr	r2, [r4, #24]
  30:	e2843010 	add	r3, r4, #16
  34:	e8930003 	ldm	r3, {r0, r1}
  38:	e8850003 	stm	r5, {r0, r1}
  3c:	e1a01005 	mov	r1, r5
  40:	e1a00007 	mov	r0, r7
  44:	e58d200c 	str	r2, [sp, #12]
  48:	ebfffffe 	bl	0 <printf>
  4c:	e1a00004 	mov	r0, r4
  50:	ebfffffe 	bl	0 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)>
  54:	e1560000 	cmp	r6, r0
  58:	e1a04000 	mov	r4, r0
  5c:	1afffff2 	bne	2c <MacroDict::DumpAll() const+0x2c>
  60:	e59f0010 	ldr	r0, [pc, #16]	; 78 <MacroDict::DumpAll() const+0x78>
  64:	e28dd014 	add	sp, sp, #20
  68:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  6c:	eafffffe 	b	0 <printf>
  70:	00000000 	.word	0x00000000
  74:	00000018 	.word	0x00000018
  78:	00000028 	.word	0x00000028

Disassembly of section .text._ZNK9MacroDict3GetEPKc:

00000000 <MacroDict::Get(char const*) const>:
   0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   4:	e2516000 	subs	r6, r1, #0
   8:	e1a0700e 	mov	r7, lr
   c:	e1a05000 	mov	r5, r0
  10:	01a03006 	moveq	r3, r6
  14:	e24dd00c 	sub	sp, sp, #12
  18:	0a000009 	beq	44 <MacroDict::Get(char const*) const+0x44>
  1c:	e1a0000d 	mov	r0, sp
  20:	e3a03000 	mov	r3, #0
  24:	e2461001 	sub	r1, r6, #1
  28:	e5f12001 	ldrb	r2, [r1, #1]!
  2c:	e3520000 	cmp	r2, #0
  30:	0a000003 	beq	44 <MacroDict::Get(char const*) const+0x44>
  34:	e2833001 	add	r3, r3, #1
  38:	e3530007 	cmp	r3, #7
  3c:	e4c02001 	strb	r2, [r0], #1
  40:	1afffff8 	bne	28 <MacroDict::Get(char const*) const+0x28>
  44:	e3a02000 	mov	r2, #0
  48:	e5954008 	ldr	r4, [r5, #8]
  4c:	e2833008 	add	r3, r3, #8
  50:	e08d3003 	add	r3, sp, r3
  54:	e2858004 	add	r8, r5, #4
  58:	e1540002 	cmp	r4, r2
  5c:	e1a09008 	mov	r9, r8
  60:	e5432008 	strb	r2, [r3, #-8]
  64:	0a000015 	beq	c0 <MacroDict::Get(char const*) const+0xc0>
  68:	e2840010 	add	r0, r4, #16
  6c:	e1a0100d 	mov	r1, sp
  70:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  74:	e5943008 	ldr	r3, [r4, #8]
  78:	e594200c 	ldr	r2, [r4, #12]
  7c:	e3500000 	cmp	r0, #0
  80:	a1a09004 	movge	r9, r4
  84:	b1a04002 	movlt	r4, r2
  88:	a1a04003 	movge	r4, r3
  8c:	e3540000 	cmp	r4, #0
  90:	1afffff4 	bne	68 <MacroDict::Get(char const*) const+0x68>
  94:	e1580009 	cmp	r8, r9
  98:	0a000008 	beq	c0 <MacroDict::Get(char const*) const+0xc0>
  9c:	e1a0000d 	mov	r0, sp
  a0:	e2891010 	add	r1, r9, #16
  a4:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  a8:	e3500000 	cmp	r0, #0
  ac:	ba000002 	blt	bc <MacroDict::Get(char const*) const+0xbc>
  b0:	e5990018 	ldr	r0, [r9, #24]
  b4:	e28dd00c 	add	sp, sp, #12
  b8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  bc:	e1a09008 	mov	r9, r8
  c0:	e1a01006 	mov	r1, r6
  c4:	e59f0088 	ldr	r0, [pc, #136]	; 154 <MacroDict::Get(char const*) const+0x154>
  c8:	ebfffffe 	bl	0 <printf>
  cc:	e1a00005 	mov	r0, r5
  d0:	ebfffffe 	bl	0 <MacroDict::Get(char const*) const>
  d4:	e59f007c 	ldr	r0, [pc, #124]	; 158 <MacroDict::Get(char const*) const+0x158>
  d8:	ebfffffe 	bl	0 <b8SysPuts>
  dc:	e59f0078 	ldr	r0, [pc, #120]	; 15c <MacroDict::Get(char const*) const+0x15c>
  e0:	ebfffffe 	bl	0 <b8SysPuts>
  e4:	e59f0074 	ldr	r0, [pc, #116]	; 160 <MacroDict::Get(char const*) const+0x160>
  e8:	ebfffffe 	bl	0 <b8SysPuts>
  ec:	e3a00011 	mov	r0, #17
  f0:	ebfffffe 	bl	0 <b8SysPutNum>
  f4:	e59f0068 	ldr	r0, [pc, #104]	; 164 <MacroDict::Get(char const*) const+0x164>
  f8:	ebfffffe 	bl	0 <b8SysPuts>
  fc:	e59f0064 	ldr	r0, [pc, #100]	; 168 <MacroDict::Get(char const*) const+0x168>
 100:	ebfffffe 	bl	0 <b8SysPuts>
 104:	e59f0060 	ldr	r0, [pc, #96]	; 16c <MacroDict::Get(char const*) const+0x16c>
 108:	ebfffffe 	bl	0 <b8SysPuts>
 10c:	e59f005c 	ldr	r0, [pc, #92]	; 170 <MacroDict::Get(char const*) const+0x170>
 110:	ebfffffe 	bl	0 <b8SysPuts>
 114:	e59f0058 	ldr	r0, [pc, #88]	; 174 <MacroDict::Get(char const*) const+0x174>
 118:	ebfffffe 	bl	0 <b8SysPuts>
 11c:	e59f0054 	ldr	r0, [pc, #84]	; 178 <MacroDict::Get(char const*) const+0x178>
 120:	ebfffffe 	bl	0 <b8SysPuts>
 124:	e1a00007 	mov	r0, r7
 128:	ebfffffe 	bl	0 <b8SysPutHex>
 12c:	e59f0040 	ldr	r0, [pc, #64]	; 174 <MacroDict::Get(char const*) const+0x174>
 130:	ebfffffe 	bl	0 <b8SysPuts>
 134:	e59f0040 	ldr	r0, [pc, #64]	; 17c <MacroDict::Get(char const*) const+0x17c>
 138:	ebfffffe 	bl	0 <b8SysPuts>
 13c:	e59f003c 	ldr	r0, [pc, #60]	; 180 <MacroDict::Get(char const*) const+0x180>
 140:	ebfffffe 	bl	0 <b8SysPuts>
 144:	e1000070 	hlt	0x0000
 148:	e5990018 	ldr	r0, [r9, #24]
 14c:	e28dd00c 	add	sp, sp, #12
 150:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
 154:	00000000 	.word	0x00000000
 158:	00000014 	.word	0x00000014
 15c:	00000030 	.word	0x00000030
 160:	00000040 	.word	0x00000040
 164:	00000044 	.word	0x00000044
 168:	00000048 	.word	0x00000048
 16c:	0000004c 	.word	0x0000004c
 170:	00000050 	.word	0x00000050
 174:	00000060 	.word	0x00000060
 178:	00000064 	.word	0x00000064
 17c:	00000080 	.word	0x00000080
 180:	000000c8 	.word	0x000000c8

Disassembly of section .text._ZN10CTokenizer9GetStringEPKcS1_:

00000000 <CTokenizer::GetString(char const*, char const*)>:
   0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   4:	e3520000 	cmp	r2, #0
   8:	e1a06000 	mov	r6, r0
   c:	e1a05003 	mov	r5, r3
  10:	e24dd034 	sub	sp, sp, #52	; 0x34
  14:	0a000009 	beq	40 <CTokenizer::GetString(char const*, char const*)+0x40>
  18:	e2423001 	sub	r3, r2, #1
  1c:	e3a02000 	mov	r2, #0
  20:	e24d0001 	sub	r0, sp, #1
  24:	e5f3c001 	ldrb	r12, [r3, #1]!
  28:	e35c0000 	cmp	r12, #0
  2c:	0a000003 	beq	40 <CTokenizer::GetString(char const*, char const*)+0x40>
  30:	e2822001 	add	r2, r2, #1
  34:	e352000f 	cmp	r2, #15
  38:	e5e0c001 	strb	r12, [r0, #1]!
  3c:	1afffff8 	bne	24 <CTokenizer::GetString(char const*, char const*)+0x24>
  40:	e3a03000 	mov	r3, #0
  44:	e8910090 	ldm	r1, {r4, r7}
  48:	e2822030 	add	r2, r2, #48	; 0x30
  4c:	e08d2002 	add	r2, sp, r2
  50:	e1570004 	cmp	r7, r4
  54:	e5423030 	strb	r3, [r2, #-48]	; 0xffffffd0
  58:	1a000002 	bne	68 <CTokenizer::GetString(char const*, char const*)+0x68>
  5c:	ea000012 	b	ac <CTokenizer::GetString(char const*, char const*)+0xac>
  60:	e1570004 	cmp	r7, r4
  64:	0a000010 	beq	ac <CTokenizer::GetString(char const*, char const*)+0xac>
  68:	e1a01004 	mov	r1, r4
  6c:	e3a02020 	mov	r2, #32
  70:	e28d0010 	add	r0, sp, #16
  74:	ebfffffe 	bl	0 <memcpy>
  78:	e1a0000d 	mov	r0, sp
  7c:	e28d1010 	add	r1, sp, #16
  80:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  84:	e3500000 	cmp	r0, #0
  88:	e2844020 	add	r4, r4, #32
  8c:	1afffff3 	bne	60 <CTokenizer::GetString(char const*, char const*)+0x60>
  90:	e3a02010 	mov	r2, #16
  94:	e1a00006 	mov	r0, r6
  98:	e28d1020 	add	r1, sp, #32
  9c:	ebfffffe 	bl	0 <memcpy>
  a0:	e1a00006 	mov	r0, r6
  a4:	e28dd034 	add	sp, sp, #52	; 0x34
  a8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  ac:	e3550000 	cmp	r5, #0
  b0:	01a03005 	moveq	r3, r5
  b4:	0a000009 	beq	e0 <CTokenizer::GetString(char const*, char const*)+0xe0>
  b8:	e3a03000 	mov	r3, #0
  bc:	e2455001 	sub	r5, r5, #1
  c0:	e2461001 	sub	r1, r6, #1
  c4:	e5f52001 	ldrb	r2, [r5, #1]!
  c8:	e3520000 	cmp	r2, #0
  cc:	0a000003 	beq	e0 <CTokenizer::GetString(char const*, char const*)+0xe0>
  d0:	e2833001 	add	r3, r3, #1
  d4:	e353000f 	cmp	r3, #15
  d8:	e5e12001 	strb	r2, [r1, #1]!
  dc:	1afffff8 	bne	c4 <CTokenizer::GetString(char const*, char const*)+0xc4>
  e0:	e3a02000 	mov	r2, #0
  e4:	e1a00006 	mov	r0, r6
  e8:	e7c62003 	strb	r2, [r6, r3]
  ec:	e28dd034 	add	sp, sp, #52	; 0x34
  f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

Disassembly of section .text._ZN10CTokenizer9GetNumberEPKci:

00000000 <CTokenizer::GetNumber(char const*, int)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e3510000 	cmp	r1, #0
   8:	e1a05002 	mov	r5, r2
   c:	01a03001 	moveq	r3, r1
  10:	e24dd030 	sub	sp, sp, #48	; 0x30
  14:	0a000009 	beq	40 <CTokenizer::GetNumber(char const*, int)+0x40>
  18:	e3a03000 	mov	r3, #0
  1c:	e2411001 	sub	r1, r1, #1
  20:	e24d2001 	sub	r2, sp, #1
  24:	e5f1c001 	ldrb	r12, [r1, #1]!
  28:	e35c0000 	cmp	r12, #0
  2c:	0a000003 	beq	40 <CTokenizer::GetNumber(char const*, int)+0x40>
  30:	e2833001 	add	r3, r3, #1
  34:	e353000f 	cmp	r3, #15
  38:	e5e2c001 	strb	r12, [r2, #1]!
  3c:	1afffff8 	bne	24 <CTokenizer::GetNumber(char const*, int)+0x24>
  40:	e3a02000 	mov	r2, #0
  44:	e8900050 	ldm	r0, {r4, r6}
  48:	e2833030 	add	r3, r3, #48	; 0x30
  4c:	e08d3003 	add	r3, sp, r3
  50:	e1560004 	cmp	r6, r4
  54:	e5432030 	strb	r2, [r3, #-48]	; 0xffffffd0
  58:	1a000002 	bne	68 <CTokenizer::GetNumber(char const*, int)+0x68>
  5c:	ea000012 	b	ac <CTokenizer::GetNumber(char const*, int)+0xac>
  60:	e1560004 	cmp	r6, r4
  64:	0a000010 	beq	ac <CTokenizer::GetNumber(char const*, int)+0xac>
  68:	e1a01004 	mov	r1, r4
  6c:	e3a02020 	mov	r2, #32
  70:	e28d0010 	add	r0, sp, #16
  74:	ebfffffe 	bl	0 <memcpy>
  78:	e1a0000d 	mov	r0, sp
  7c:	e28d1010 	add	r1, sp, #16
  80:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  84:	e3500000 	cmp	r0, #0
  88:	e2844020 	add	r4, r4, #32
  8c:	1afffff3 	bne	60 <CTokenizer::GetNumber(char const*, int)+0x60>
  90:	e28d0020 	add	r0, sp, #32
  94:	ebfffffe 	bl	0 <cstr_strlen(char const*)>
  98:	e3500000 	cmp	r0, #0
  9c:	0a000002 	beq	ac <CTokenizer::GetNumber(char const*, int)+0xac>
  a0:	e28d0020 	add	r0, sp, #32
  a4:	ebfffffe 	bl	0 <atoi>
  a8:	e1a05000 	mov	r5, r0
  ac:	e1a00005 	mov	r0, r5
  b0:	e28dd030 	add	sp, sp, #48	; 0x30
  b4:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZNSt6vectorI8CFormulaSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_:

00000000 <void std::vector<CFormula, std::allocator<CFormula> >::_M_realloc_insert<CFormula const&>(__gnu_cxx::__normal_iterator<CFormula*, std::vector<CFormula, std::allocator<CFormula> > >, CFormula const&)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e5909000 	ldr	r9, [r0]
   8:	e5906004 	ldr	r6, [r0, #4]
   c:	e24dd014 	sub	sp, sp, #20
  10:	e0465009 	sub	r5, r6, r9
  14:	e1a052c5 	asr	r5, r5, #5
  18:	e375037f 	cmn	r5, #-67108863	; 0xfc000001
  1c:	0a00004b 	beq	150 <void std::vector<CFormula, std::allocator<CFormula> >::_M_realloc_insert<CFormula const&>(__gnu_cxx::__normal_iterator<CFormula*, std::vector<CFormula, std::allocator<CFormula> > >, CFormula const&)+0x150>
  20:	e3550001 	cmp	r5, #1
  24:	e1a04001 	mov	r4, r1
  28:	e1a01002 	mov	r1, r2
  2c:	21a02005 	movcs	r2, r5
  30:	33a02001 	movcc	r2, #1
  34:	e0955002 	adds	r5, r5, r2
  38:	e1a07000 	mov	r7, r0
  3c:	e1a0a004 	mov	r10, r4
  40:	2a00003e 	bcs	140 <void std::vector<CFormula, std::allocator<CFormula> >::_M_realloc_insert<CFormula const&>(__gnu_cxx::__normal_iterator<CFormula*, std::vector<CFormula, std::allocator<CFormula> > >, CFormula const&)+0x140>
  44:	e3550000 	cmp	r5, #0
  48:	e0443009 	sub	r3, r4, r9
  4c:	03a08020 	moveq	r8, #32
  50:	e58d3008 	str	r3, [sp, #8]
  54:	058d5004 	streq	r5, [sp, #4]
  58:	1a00002c 	bne	110 <void std::vector<CFormula, std::allocator<CFormula> >::_M_realloc_insert<CFormula const&>(__gnu_cxx::__normal_iterator<CFormula*, std::vector<CFormula, std::allocator<CFormula> > >, CFormula const&)+0x110>
  5c:	e99d0009 	ldmib	sp, {r0, r3}
  60:	e3a02020 	mov	r2, #32
  64:	e0830000 	add	r0, r3, r0
  68:	ebfffffe 	bl	0 <memcpy>
  6c:	e1540009 	cmp	r4, r9
  70:	0a00000e 	beq	b0 <void std::vector<CFormula, std::allocator<CFormula> >::_M_realloc_insert<CFormula const&>(__gnu_cxx::__normal_iterator<CFormula*, std::vector<CFormula, std::allocator<CFormula> > >, CFormula const&)+0xb0>
  74:	e1a0b009 	mov	r11, r9
  78:	e59d3004 	ldr	r3, [sp, #4]
  7c:	e2838020 	add	r8, r3, #32
  80:	e1a0100b 	mov	r1, r11
  84:	e2480020 	sub	r0, r8, #32
  88:	e3a02020 	mov	r2, #32
  8c:	e28bb020 	add	r11, r11, #32
  90:	ebfffffe 	bl	0 <memcpy>
  94:	e15b0004 	cmp	r11, r4
  98:	e2888020 	add	r8, r8, #32
  9c:	1afffff7 	bne	80 <void std::vector<CFormula, std::allocator<CFormula> >::_M_realloc_insert<CFormula const&>(__gnu_cxx::__normal_iterator<CFormula*, std::vector<CFormula, std::allocator<CFormula> > >, CFormula const&)+0x80>
  a0:	e59d3008 	ldr	r3, [sp, #8]
  a4:	e2838020 	add	r8, r3, #32
  a8:	e59d3004 	ldr	r3, [sp, #4]
  ac:	e0838008 	add	r8, r3, r8
  b0:	e1540006 	cmp	r4, r6
  b4:	0a00000a 	beq	e4 <void std::vector<CFormula, std::allocator<CFormula> >::_M_realloc_insert<CFormula const&>(__gnu_cxx::__normal_iterator<CFormula*, std::vector<CFormula, std::allocator<CFormula> > >, CFormula const&)+0xe4>
  b8:	e0464004 	sub	r4, r6, r4
  bc:	e288b020 	add	r11, r8, #32
  c0:	e3a02020 	mov	r2, #32
  c4:	e1a0100a 	mov	r1, r10
  c8:	e24b0020 	sub	r0, r11, #32
  cc:	e08aa002 	add	r10, r10, r2
  d0:	ebfffffe 	bl	0 <memcpy>
  d4:	e15a0006 	cmp	r10, r6
  d8:	e28bb020 	add	r11, r11, #32
  dc:	1afffff7 	bne	c0 <void std::vector<CFormula, std::allocator<CFormula> >::_M_realloc_insert<CFormula const&>(__gnu_cxx::__normal_iterator<CFormula*, std::vector<CFormula, std::allocator<CFormula> > >, CFormula const&)+0xc0>
  e0:	e0888004 	add	r8, r8, r4
  e4:	e3590000 	cmp	r9, #0
  e8:	0a000003 	beq	fc <void std::vector<CFormula, std::allocator<CFormula> >::_M_realloc_insert<CFormula const&>(__gnu_cxx::__normal_iterator<CFormula*, std::vector<CFormula, std::allocator<CFormula> > >, CFormula const&)+0xfc>
  ec:	e5971008 	ldr	r1, [r7, #8]
  f0:	e1a00009 	mov	r0, r9
  f4:	e0411009 	sub	r1, r1, r9
  f8:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  fc:	e59d3004 	ldr	r3, [sp, #4]
 100:	e5875008 	str	r5, [r7, #8]
 104:	e8870108 	stm	r7, {r3, r8}
 108:	e28dd014 	add	sp, sp, #20
 10c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 110:	e3e0233f 	mvn	r2, #-67108864	; 0xfc000000
 114:	e1550002 	cmp	r5, r2
 118:	21a05002 	movcs	r5, r2
 11c:	e1a05285 	lsl	r5, r5, #5
 120:	e1a00005 	mov	r0, r5
 124:	e58d100c 	str	r1, [sp, #12]
 128:	ebfffffe 	bl	0 <operator new(unsigned int)>
 12c:	e59d100c 	ldr	r1, [sp, #12]
 130:	e58d0004 	str	r0, [sp, #4]
 134:	e0805005 	add	r5, r0, r5
 138:	e2808020 	add	r8, r0, #32
 13c:	eaffffc6 	b	5c <void std::vector<CFormula, std::allocator<CFormula> >::_M_realloc_insert<CFormula const&>(__gnu_cxx::__normal_iterator<CFormula*, std::vector<CFormula, std::allocator<CFormula> > >, CFormula const&)+0x5c>
 140:	e0443009 	sub	r3, r4, r9
 144:	e3e0517e 	mvn	r5, #-2147483617	; 0x8000001f
 148:	e58d3008 	str	r3, [sp, #8]
 14c:	eafffff3 	b	120 <void std::vector<CFormula, std::allocator<CFormula> >::_M_realloc_insert<CFormula const&>(__gnu_cxx::__normal_iterator<CFormula*, std::vector<CFormula, std::allocator<CFormula> > >, CFormula const&)+0x120>
 150:	e59f0000 	ldr	r0, [pc]	; 158 <void std::vector<CFormula, std::allocator<CFormula> >::_M_realloc_insert<CFormula const&>(__gnu_cxx::__normal_iterator<CFormula*, std::vector<CFormula, std::allocator<CFormula> > >, CFormula const&)+0x158>
 154:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 158:	00000000 	.word	0x00000000

Disassembly of section .text._ZN10CTokenizerC2EPKcPK9MacroDict:

00000000 <CTokenizer::CTokenizer(char const*, MacroDict const*)>:
   0:	e3a03000 	mov	r3, #0
   4:	e1520003 	cmp	r2, r3
   8:	11510003 	cmpne	r1, r3
   c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  10:	e5803000 	str	r3, [r0]
  14:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  18:	e5803004 	str	r3, [r0, #4]
  1c:	e5803008 	str	r3, [r0, #8]
  20:	e1a05000 	mov	r5, r0
  24:	e5cd3008 	strb	r3, [sp, #8]
  28:	e5d10000 	ldrb	r0, [r1]
  2c:	e5cd3018 	strb	r3, [sp, #24]
  30:	0a000001 	beq	3c <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x3c>
  34:	e3500024 	cmp	r0, #36	; 0x24
  38:	0a0000a9 	beq	2e4 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x2e4>
  3c:	e3500000 	cmp	r0, #0
  40:	028d7008 	addeq	r7, sp, #8
  44:	0a00003a 	beq	134 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x134>
  48:	e3a03000 	mov	r3, #0
  4c:	e1a06003 	mov	r6, r3
  50:	e28d7008 	add	r7, sp, #8
  54:	e3500020 	cmp	r0, #32
  58:	0a000031 	beq	124 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x124>
  5c:	e3530001 	cmp	r3, #1
  60:	0a000040 	beq	168 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x168>
  64:	e1a09001 	mov	r9, r1
  68:	e2818001 	add	r8, r1, #1
  6c:	ebfffffe 	bl	0 <isalpha>
  70:	e2503000 	subs	r3, r0, #0
  74:	e5d94000 	ldrb	r4, [r9]
  78:	1a00000f 	bne	bc <CTokenizer::CTokenizer(char const*, MacroDict const*)+0xbc>
  7c:	e354005f 	cmp	r4, #95	; 0x5f
  80:	0a00000d 	beq	bc <CTokenizer::CTokenizer(char const*, MacroDict const*)+0xbc>
  84:	e354003d 	cmp	r4, #61	; 0x3d
  88:	0a000030 	beq	150 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x150>
  8c:	e5d90001 	ldrb	r0, [r9, #1]
  90:	e1a01008 	mov	r1, r8
  94:	e3500000 	cmp	r0, #0
  98:	0a000025 	beq	134 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x134>
  9c:	e3500020 	cmp	r0, #32
  a0:	0a00001f 	beq	124 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x124>
  a4:	ebfffffe 	bl	0 <isalpha>
  a8:	e2503000 	subs	r3, r0, #0
  ac:	e2899001 	add	r9, r9, #1
  b0:	e2888001 	add	r8, r8, #1
  b4:	e5d94000 	ldrb	r4, [r9]
  b8:	0affffef 	beq	7c <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x7c>
  bc:	e1a00007 	mov	r0, r7
  c0:	e5cd6005 	strb	r6, [sp, #5]
  c4:	e5cd4004 	strb	r4, [sp, #4]
  c8:	ebfffffe 	bl	0 <cstr_strlen(char const*)>
  cc:	e350000e 	cmp	r0, #14
  d0:	8a000009 	bhi	fc <CTokenizer::CTokenizer(char const*, MacroDict const*)+0xfc>
  d4:	e28d2004 	add	r2, sp, #4
  d8:	e0873000 	add	r3, r7, r0
  dc:	ea000004 	b	f4 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0xf4>
  e0:	e2800001 	add	r0, r0, #1
  e4:	e350000f 	cmp	r0, #15
  e8:	e4c34001 	strb	r4, [r3], #1
  ec:	0a000002 	beq	fc <CTokenizer::CTokenizer(char const*, MacroDict const*)+0xfc>
  f0:	e5f24001 	ldrb	r4, [r2, #1]!
  f4:	e3540000 	cmp	r4, #0
  f8:	1afffff8 	bne	e0 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0xe0>
  fc:	e2803028 	add	r3, r0, #40	; 0x28
 100:	e08d0003 	add	r0, sp, r3
 104:	e5406020 	strb	r6, [r0, #-32]	; 0xffffffe0
 108:	e5d90001 	ldrb	r0, [r9, #1]
 10c:	e1a01008 	mov	r1, r8
 110:	e3500000 	cmp	r0, #0
 114:	0a000006 	beq	134 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x134>
 118:	e3500020 	cmp	r0, #32
 11c:	1affffe0 	bne	a4 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0xa4>
 120:	e3a03000 	mov	r3, #0
 124:	e5d10001 	ldrb	r0, [r1, #1]
 128:	e2811001 	add	r1, r1, #1
 12c:	e3500000 	cmp	r0, #0
 130:	1affffc7 	bne	54 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x54>
 134:	e1a00007 	mov	r0, r7
 138:	ebfffffe 	bl	0 <cstr_strlen(char const*)>
 13c:	e3500000 	cmp	r0, #0
 140:	1a000058 	bne	2a8 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x2a8>
 144:	e1a00005 	mov	r0, r5
 148:	e28dd02c 	add	sp, sp, #44	; 0x2c
 14c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
 150:	e5d90001 	ldrb	r0, [r9, #1]
 154:	e2891001 	add	r1, r9, #1
 158:	e3500000 	cmp	r0, #0
 15c:	0afffff4 	beq	134 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x134>
 160:	e3500020 	cmp	r0, #32
 164:	0a000042 	beq	274 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x274>
 168:	e1a04001 	mov	r4, r1
 16c:	e2818001 	add	r8, r1, #1
 170:	ebfffffe 	bl	0 <isdigit>
 174:	e3500000 	cmp	r0, #0
 178:	1a00001f 	bne	1fc <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x1fc>
 17c:	e5d40000 	ldrb	r0, [r4]
 180:	ebfffffe 	bl	0 <isalpha>
 184:	e3500000 	cmp	r0, #0
 188:	e5d49000 	ldrb	r9, [r4]
 18c:	1a00001b 	bne	200 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x200>
 190:	e359002e 	cmp	r9, #46	; 0x2e
 194:	0a000019 	beq	200 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x200>
 198:	e359003b 	cmp	r9, #59	; 0x3b
 19c:	8a00003a 	bhi	28c <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x28c>
 1a0:	e359002a 	cmp	r9, #42	; 0x2a
 1a4:	9a00003a 	bls	294 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x294>
 1a8:	e249302b 	sub	r3, r9, #43	; 0x2b
 1ac:	e3530010 	cmp	r3, #16
 1b0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 1b4:	ea000036 	b	294 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x294>
 1b8:	00000200 	.word	0x00000200
 1bc:	000002fc 	.word	0x000002fc
 1c0:	00000200 	.word	0x00000200
 1c4:	00000294 	.word	0x00000294
 1c8:	00000294 	.word	0x00000294
 1cc:	00000294 	.word	0x00000294
 1d0:	00000294 	.word	0x00000294
 1d4:	00000294 	.word	0x00000294
 1d8:	00000294 	.word	0x00000294
 1dc:	00000294 	.word	0x00000294
 1e0:	00000294 	.word	0x00000294
 1e4:	00000294 	.word	0x00000294
 1e8:	00000294 	.word	0x00000294
 1ec:	00000294 	.word	0x00000294
 1f0:	00000294 	.word	0x00000294
 1f4:	00000294 	.word	0x00000294
 1f8:	000002fc 	.word	0x000002fc
 1fc:	e5d49000 	ldrb	r9, [r4]
 200:	e28d0018 	add	r0, sp, #24
 204:	e5cd6005 	strb	r6, [sp, #5]
 208:	e5cd9004 	strb	r9, [sp, #4]
 20c:	ebfffffe 	bl	0 <cstr_strlen(char const*)>
 210:	e350000e 	cmp	r0, #14
 214:	8a00000a 	bhi	244 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x244>
 218:	e280300f 	add	r3, r0, #15
 21c:	e28d2004 	add	r2, sp, #4
 220:	e0873003 	add	r3, r7, r3
 224:	ea000004 	b	23c <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x23c>
 228:	e2800001 	add	r0, r0, #1
 22c:	e350000f 	cmp	r0, #15
 230:	e5e39001 	strb	r9, [r3, #1]!
 234:	0a000002 	beq	244 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x244>
 238:	e5f29001 	ldrb	r9, [r2, #1]!
 23c:	e3590000 	cmp	r9, #0
 240:	1afffff8 	bne	228 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x228>
 244:	e2803028 	add	r3, r0, #40	; 0x28
 248:	e08d0003 	add	r0, sp, r3
 24c:	e5406010 	strb	r6, [r0, #-16]
 250:	e5d40001 	ldrb	r0, [r4, #1]
 254:	e1a01008 	mov	r1, r8
 258:	e3500000 	cmp	r0, #0
 25c:	0affffb4 	beq	134 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x134>
 260:	e3500020 	cmp	r0, #32
 264:	0a000002 	beq	274 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x274>
 268:	e2888001 	add	r8, r8, #1
 26c:	e2844001 	add	r4, r4, #1
 270:	eaffffbe 	b	170 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x170>
 274:	e5d10001 	ldrb	r0, [r1, #1]
 278:	e3a03001 	mov	r3, #1
 27c:	e3500000 	cmp	r0, #0
 280:	e2811001 	add	r1, r1, #1
 284:	1affff72 	bne	54 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x54>
 288:	eaffffa9 	b	134 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x134>
 28c:	e359005f 	cmp	r9, #95	; 0x5f
 290:	0affffda 	beq	200 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x200>
 294:	e5d40001 	ldrb	r0, [r4, #1]
 298:	e1a01008 	mov	r1, r8
 29c:	e3500000 	cmp	r0, #0
 2a0:	1affffee 	bne	260 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x260>
 2a4:	eaffffa2 	b	134 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x134>
 2a8:	e28d0018 	add	r0, sp, #24
 2ac:	ebfffffe 	bl	0 <cstr_strlen(char const*)>
 2b0:	e3500000 	cmp	r0, #0
 2b4:	0affffa2 	beq	144 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x144>
 2b8:	e5953004 	ldr	r3, [r5, #4]
 2bc:	e5952008 	ldr	r2, [r5, #8]
 2c0:	e1530002 	cmp	r3, r2
 2c4:	0a000024 	beq	35c <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x35c>
 2c8:	e1a00003 	mov	r0, r3
 2cc:	e3a02020 	mov	r2, #32
 2d0:	e1a01007 	mov	r1, r7
 2d4:	ebfffffe 	bl	0 <memcpy>
 2d8:	e2803020 	add	r3, r0, #32
 2dc:	e5853004 	str	r3, [r5, #4]
 2e0:	eaffff97 	b	144 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x144>
 2e4:	e2811001 	add	r1, r1, #1
 2e8:	e1a00002 	mov	r0, r2
 2ec:	ebfffffe 	bl	0 <CTokenizer::CTokenizer(char const*, MacroDict const*)>
 2f0:	e1a01000 	mov	r1, r0
 2f4:	e5d00000 	ldrb	r0, [r0]
 2f8:	eaffff4f 	b	3c <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x3c>
 2fc:	e5953004 	ldr	r3, [r5, #4]
 300:	e5952008 	ldr	r2, [r5, #8]
 304:	e1530002 	cmp	r3, r2
 308:	0a00000e 	beq	348 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x348>
 30c:	e1a00003 	mov	r0, r3
 310:	e3a02020 	mov	r2, #32
 314:	e1a01007 	mov	r1, r7
 318:	ebfffffe 	bl	0 <memcpy>
 31c:	e2803020 	add	r3, r0, #32
 320:	e5853004 	str	r3, [r5, #4]
 324:	e5cd6018 	strb	r6, [sp, #24]
 328:	e5d40001 	ldrb	r0, [r4, #1]
 32c:	e5cd6008 	strb	r6, [sp, #8]
 330:	e3500000 	cmp	r0, #0
 334:	e2841001 	add	r1, r4, #1
 338:	0affff7d 	beq	134 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x134>
 33c:	e3500020 	cmp	r0, #32
 340:	1affff47 	bne	64 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x64>
 344:	eaffff75 	b	120 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x120>
 348:	e1a01003 	mov	r1, r3
 34c:	e1a02007 	mov	r2, r7
 350:	e1a00005 	mov	r0, r5
 354:	ebfffffe 	bl	0 <CTokenizer::CTokenizer(char const*, MacroDict const*)>
 358:	eafffff1 	b	324 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x324>
 35c:	e1a02007 	mov	r2, r7
 360:	e1a01003 	mov	r1, r3
 364:	e1a00005 	mov	r0, r5
 368:	ebfffffe 	bl	0 <CTokenizer::CTokenizer(char const*, MacroDict const*)>
 36c:	eaffff74 	b	144 <CTokenizer::CTokenizer(char const*, MacroDict const*)+0x144>

Disassembly of section .text._ZNSt8_Rb_treeI4cstrILj8EESt4pairIKS1_PKcESt10_Select1stIS6_E7cmp_strSaIS6_EE24_M_get_insert_unique_posERS3_:

00000000 <std::_Rb_tree<cstr<8u>, std::pair<cstr<8u> const, char const*>, std::_Select1st<std::pair<cstr<8u> const, char const*> >, cmp_str, std::allocator<std::pair<cstr<8u> const, char const*> > >::_M_get_insert_unique_pos(cstr<8u> const&)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e5914008 	ldr	r4, [r1, #8]
   8:	e1a08001 	mov	r8, r1
   c:	e3540000 	cmp	r4, #0
  10:	e1a07000 	mov	r7, r0
  14:	e1a06002 	mov	r6, r2
  18:	02814004 	addeq	r4, r1, #4
  1c:	1a000001 	bne	28 <std::_Rb_tree<cstr<8u>, std::pair<cstr<8u> const, char const*>, std::_Select1st<std::pair<cstr<8u> const, char const*> >, cmp_str, std::allocator<std::pair<cstr<8u> const, char const*> > >::_M_get_insert_unique_pos(cstr<8u> const&)+0x28>
  20:	ea00000e 	b	60 <std::_Rb_tree<cstr<8u>, std::pair<cstr<8u> const, char const*>, std::_Select1st<std::pair<cstr<8u> const, char const*> >, cmp_str, std::allocator<std::pair<cstr<8u> const, char const*> > >::_M_get_insert_unique_pos(cstr<8u> const&)+0x60>
  24:	e1a04003 	mov	r4, r3
  28:	e2845010 	add	r5, r4, #16
  2c:	e1a01005 	mov	r1, r5
  30:	e1a00006 	mov	r0, r6
  34:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  38:	e594c008 	ldr	r12, [r4, #8]
  3c:	e3500000 	cmp	r0, #0
  40:	e594300c 	ldr	r3, [r4, #12]
  44:	b1a0300c 	movlt	r3, r12
  48:	b3a02001 	movlt	r2, #1
  4c:	a3a02000 	movge	r2, #0
  50:	e3530000 	cmp	r3, #0
  54:	1afffff2 	bne	24 <std::_Rb_tree<cstr<8u>, std::pair<cstr<8u> const, char const*>, std::_Select1st<std::pair<cstr<8u> const, char const*> >, cmp_str, std::allocator<std::pair<cstr<8u> const, char const*> > >::_M_get_insert_unique_pos(cstr<8u> const&)+0x24>
  58:	e3520000 	cmp	r2, #0
  5c:	0a000013 	beq	b0 <std::_Rb_tree<cstr<8u>, std::pair<cstr<8u> const, char const*>, std::_Select1st<std::pair<cstr<8u> const, char const*> >, cmp_str, std::allocator<std::pair<cstr<8u> const, char const*> > >::_M_get_insert_unique_pos(cstr<8u> const&)+0xb0>
  60:	e598300c 	ldr	r3, [r8, #12]
  64:	e1530004 	cmp	r3, r4
  68:	03a03000 	moveq	r3, #0
  6c:	08870018 	stmeq	r7, {r3, r4}
  70:	0a00000c 	beq	a8 <std::_Rb_tree<cstr<8u>, std::pair<cstr<8u> const, char const*>, std::_Select1st<std::pair<cstr<8u> const, char const*> >, cmp_str, std::allocator<std::pair<cstr<8u> const, char const*> > >::_M_get_insert_unique_pos(cstr<8u> const&)+0xa8>
  74:	e1a00004 	mov	r0, r4
  78:	ebfffffe 	bl	0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)>
  7c:	e1a08004 	mov	r8, r4
  80:	e1a04000 	mov	r4, r0
  84:	e2805010 	add	r5, r0, #16
  88:	e1a01006 	mov	r1, r6
  8c:	e1a00005 	mov	r0, r5
  90:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  94:	e3a03000 	mov	r3, #0
  98:	e3500000 	cmp	r0, #0
  9c:	b8870108 	stmlt	r7, {r3, r8}
  a0:	a5874000 	strge	r4, [r7]
  a4:	a5873004 	strge	r3, [r7, #4]
  a8:	e1a00007 	mov	r0, r7
  ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  b0:	e1a08004 	mov	r8, r4
  b4:	eafffff3 	b	88 <std::_Rb_tree<cstr<8u>, std::pair<cstr<8u> const, char const*>, std::_Select1st<std::pair<cstr<8u> const, char const*> >, cmp_str, std::allocator<std::pair<cstr<8u> const, char const*> > >::_M_get_insert_unique_pos(cstr<8u> const&)+0x88>

Disassembly of section .text._ZN9MacroDictC2EjPK5Macro:

00000000 <MacroDict::MacroDict(unsigned int, Macro const*)>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e3a04000 	mov	r4, #0
   8:	e2808004 	add	r8, r0, #4
   c:	e24dd024 	sub	sp, sp, #36	; 0x24
  10:	e2513000 	subs	r3, r1, #0
  14:	e1a07000 	mov	r7, r0
  18:	e58d3004 	str	r3, [sp, #4]
  1c:	e5c04004 	strb	r4, [r0, #4]
  20:	e5804008 	str	r4, [r0, #8]
  24:	e580800c 	str	r8, [r0, #12]
  28:	e5808010 	str	r8, [r0, #16]
  2c:	e5804014 	str	r4, [r0, #20]
  30:	0a000087 	beq	254 <MacroDict::MacroDict(unsigned int, Macro const*)+0x254>
  34:	e1a0a004 	mov	r10, r4
  38:	e2826008 	add	r6, r2, #8
  3c:	e9160208 	ldmdb	r6, {r3, r9}
  40:	e3530000 	cmp	r3, #0
  44:	0a000009 	beq	70 <MacroDict::MacroDict(unsigned int, Macro const*)+0x70>
  48:	e2431001 	sub	r1, r3, #1
  4c:	e3a03000 	mov	r3, #0
  50:	e28d0010 	add	r0, sp, #16
  54:	e5f12001 	ldrb	r2, [r1, #1]!
  58:	e3520000 	cmp	r2, #0
  5c:	0a000003 	beq	70 <MacroDict::MacroDict(unsigned int, Macro const*)+0x70>
  60:	e2833001 	add	r3, r3, #1
  64:	e3530007 	cmp	r3, #7
  68:	e4c02001 	strb	r2, [r0], #1
  6c:	1afffff8 	bne	54 <MacroDict::MacroDict(unsigned int, Macro const*)+0x54>
  70:	e3a02000 	mov	r2, #0
  74:	e2833020 	add	r3, r3, #32
  78:	e08d3003 	add	r3, sp, r3
  7c:	e3540000 	cmp	r4, #0
  80:	e5432010 	strb	r2, [r3, #-16]
  84:	0a00001b 	beq	f8 <MacroDict::MacroDict(unsigned int, Macro const*)+0xf8>
  88:	e1a05008 	mov	r5, r8
  8c:	e2840010 	add	r0, r4, #16
  90:	e28d1010 	add	r1, sp, #16
  94:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  98:	e5943008 	ldr	r3, [r4, #8]
  9c:	e594200c 	ldr	r2, [r4, #12]
  a0:	e3500000 	cmp	r0, #0
  a4:	a1a05004 	movge	r5, r4
  a8:	b1a04002 	movlt	r4, r2
  ac:	a1a04003 	movge	r4, r3
  b0:	e3540000 	cmp	r4, #0
  b4:	1afffff4 	bne	8c <MacroDict::MacroDict(unsigned int, Macro const*)+0x8c>
  b8:	e1580005 	cmp	r8, r5
  bc:	0a00000d 	beq	f8 <MacroDict::MacroDict(unsigned int, Macro const*)+0xf8>
  c0:	e285b010 	add	r11, r5, #16
  c4:	e1a0100b 	mov	r1, r11
  c8:	e28d0010 	add	r0, sp, #16
  cc:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
  d0:	e3500000 	cmp	r0, #0
  d4:	ba000031 	blt	1a0 <MacroDict::MacroDict(unsigned int, Macro const*)+0x1a0>
  d8:	e59d3004 	ldr	r3, [sp, #4]
  dc:	e28aa001 	add	r10, r10, #1
  e0:	e153000a 	cmp	r3, r10
  e4:	e5859018 	str	r9, [r5, #24]
  e8:	e2866008 	add	r6, r6, #8
  ec:	0a000058 	beq	254 <MacroDict::MacroDict(unsigned int, Macro const*)+0x254>
  f0:	e5974008 	ldr	r4, [r7, #8]
  f4:	eaffffd0 	b	3c <MacroDict::MacroDict(unsigned int, Macro const*)+0x3c>
  f8:	e3a0001c 	mov	r0, #28
  fc:	ebfffffe 	bl	0 <operator new(unsigned int)>
 100:	e2804010 	add	r4, r0, #16
 104:	e1a05000 	mov	r5, r0
 108:	e3a02008 	mov	r2, #8
 10c:	e1a00004 	mov	r0, r4
 110:	e28d1010 	add	r1, sp, #16
 114:	ebfffffe 	bl	0 <memcpy>
 118:	e3a03000 	mov	r3, #0
 11c:	e5853018 	str	r3, [r5, #24]
 120:	e5973014 	ldr	r3, [r7, #20]
 124:	e58d4000 	str	r4, [sp]
 128:	e3530000 	cmp	r3, #0
 12c:	0a000005 	beq	148 <MacroDict::MacroDict(unsigned int, Macro const*)+0x148>
 130:	e5970010 	ldr	r0, [r7, #16]
 134:	e1a01004 	mov	r1, r4
 138:	e2800010 	add	r0, r0, #16
 13c:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
 140:	e3500000 	cmp	r0, #0
 144:	ba000045 	blt	260 <MacroDict::MacroDict(unsigned int, Macro const*)+0x260>
 148:	e1a02004 	mov	r2, r4
 14c:	e1a01007 	mov	r1, r7
 150:	e28d0018 	add	r0, sp, #24
 154:	ebfffffe 	bl	0 <MacroDict::MacroDict(unsigned int, Macro const*)>
 158:	e59d3018 	ldr	r3, [sp, #24]
 15c:	e59d401c 	ldr	r4, [sp, #28]
 160:	e3540000 	cmp	r4, #0
 164:	0a000035 	beq	240 <MacroDict::MacroDict(unsigned int, Macro const*)+0x240>
 168:	e2530000 	subs	r0, r3, #0
 16c:	13a00001 	movne	r0, #1
 170:	e1580004 	cmp	r8, r4
 174:	03800001 	orreq	r0, r0, #1
 178:	e3500000 	cmp	r0, #0
 17c:	0a000050 	beq	2c4 <MacroDict::MacroDict(unsigned int, Macro const*)+0x2c4>
 180:	e1a03008 	mov	r3, r8
 184:	e1a02004 	mov	r2, r4
 188:	e1a01005 	mov	r1, r5
 18c:	ebfffffe 	bl	0 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)>
 190:	e5973014 	ldr	r3, [r7, #20]
 194:	e2833001 	add	r3, r3, #1
 198:	e5873014 	str	r3, [r7, #20]
 19c:	eaffffcd 	b	d8 <MacroDict::MacroDict(unsigned int, Macro const*)+0xd8>
 1a0:	e3a0001c 	mov	r0, #28
 1a4:	ebfffffe 	bl	0 <operator new(unsigned int)>
 1a8:	e3a02008 	mov	r2, #8
 1ac:	e28d1010 	add	r1, sp, #16
 1b0:	e58d0008 	str	r0, [sp, #8]
 1b4:	e2800010 	add	r0, r0, #16
 1b8:	e58d0000 	str	r0, [sp]
 1bc:	ebfffffe 	bl	0 <memcpy>
 1c0:	e59d3008 	ldr	r3, [sp, #8]
 1c4:	e1a0100b 	mov	r1, r11
 1c8:	e59d0000 	ldr	r0, [sp]
 1cc:	e5834018 	str	r4, [r3, #24]
 1d0:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
 1d4:	e3500000 	cmp	r0, #0
 1d8:	aa000011 	bge	224 <MacroDict::MacroDict(unsigned int, Macro const*)+0x224>
 1dc:	e597300c 	ldr	r3, [r7, #12]
 1e0:	e1530005 	cmp	r3, r5
 1e4:	0a00000a 	beq	214 <MacroDict::MacroDict(unsigned int, Macro const*)+0x214>
 1e8:	e1a00005 	mov	r0, r5
 1ec:	ebfffffe 	bl	0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)>
 1f0:	e59d1000 	ldr	r1, [sp]
 1f4:	e1a04000 	mov	r4, r0
 1f8:	e2800010 	add	r0, r0, #16
 1fc:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
 200:	e3500000 	cmp	r0, #0
 204:	aa00002b 	bge	2b8 <MacroDict::MacroDict(unsigned int, Macro const*)+0x2b8>
 208:	e594300c 	ldr	r3, [r4, #12]
 20c:	e3530000 	cmp	r3, #0
 210:	0a000035 	beq	2ec <MacroDict::MacroDict(unsigned int, Macro const*)+0x2ec>
 214:	e1a03005 	mov	r3, r5
 218:	e1a04005 	mov	r4, r5
 21c:	e59d5008 	ldr	r5, [sp, #8]
 220:	eaffffd0 	b	168 <MacroDict::MacroDict(unsigned int, Macro const*)+0x168>
 224:	e1a0000b 	mov	r0, r11
 228:	e59d1000 	ldr	r1, [sp]
 22c:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
 230:	e3500000 	cmp	r0, #0
 234:	ba00000c 	blt	26c <MacroDict::MacroDict(unsigned int, Macro const*)+0x26c>
 238:	e1a03005 	mov	r3, r5
 23c:	e59d5008 	ldr	r5, [sp, #8]
 240:	e1a00005 	mov	r0, r5
 244:	e3a0101c 	mov	r1, #28
 248:	e1a05003 	mov	r5, r3
 24c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
 250:	eaffffa0 	b	d8 <MacroDict::MacroDict(unsigned int, Macro const*)+0xd8>
 254:	e1a00007 	mov	r0, r7
 258:	e28dd024 	add	sp, sp, #36	; 0x24
 25c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 260:	e3a03000 	mov	r3, #0
 264:	e5974010 	ldr	r4, [r7, #16]
 268:	eaffffbc 	b	160 <MacroDict::MacroDict(unsigned int, Macro const*)+0x160>
 26c:	e5972010 	ldr	r2, [r7, #16]
 270:	e1520005 	cmp	r2, r5
 274:	0a000018 	beq	2dc <MacroDict::MacroDict(unsigned int, Macro const*)+0x2dc>
 278:	e1a00005 	mov	r0, r5
 27c:	ebfffffe 	bl	0 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)>
 280:	e1a03000 	mov	r3, r0
 284:	e59d0000 	ldr	r0, [sp]
 288:	e2831010 	add	r1, r3, #16
 28c:	e58d300c 	str	r3, [sp, #12]
 290:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
 294:	e3500000 	cmp	r0, #0
 298:	aa000006 	bge	2b8 <MacroDict::MacroDict(unsigned int, Macro const*)+0x2b8>
 29c:	e595200c 	ldr	r2, [r5, #12]
 2a0:	e3520000 	cmp	r2, #0
 2a4:	0a00000f 	beq	2e8 <MacroDict::MacroDict(unsigned int, Macro const*)+0x2e8>
 2a8:	e59d300c 	ldr	r3, [sp, #12]
 2ac:	e59d5008 	ldr	r5, [sp, #8]
 2b0:	e1a04003 	mov	r4, r3
 2b4:	eaffffa9 	b	160 <MacroDict::MacroDict(unsigned int, Macro const*)+0x160>
 2b8:	e59d5008 	ldr	r5, [sp, #8]
 2bc:	e59d2000 	ldr	r2, [sp]
 2c0:	eaffffa1 	b	14c <MacroDict::MacroDict(unsigned int, Macro const*)+0x14c>
 2c4:	e284b010 	add	r11, r4, #16
 2c8:	e1a0100b 	mov	r1, r11
 2cc:	e59d0000 	ldr	r0, [sp]
 2d0:	ebfffffe 	bl	0 <cstr_strcmp(char const*, char const*)>
 2d4:	e1a00fa0 	lsr	r0, r0, #31
 2d8:	eaffffa8 	b	180 <MacroDict::MacroDict(unsigned int, Macro const*)+0x180>
 2dc:	e1a04005 	mov	r4, r5
 2e0:	e59d5008 	ldr	r5, [sp, #8]
 2e4:	eafffff7 	b	2c8 <MacroDict::MacroDict(unsigned int, Macro const*)+0x2c8>
 2e8:	e1a04005 	mov	r4, r5
 2ec:	e3a00000 	mov	r0, #0
 2f0:	e59d5008 	ldr	r5, [sp, #8]
 2f4:	eaffff9d 	b	170 <MacroDict::MacroDict(unsigned int, Macro const*)+0x170>

zpack.o:     file format elf32-littlearm


Disassembly of section .text._ZN4Pipe14CMemBufferPipe6vOnPopERh:

00000000 <Pipe::CMemBufferPipe::vOnPop(unsigned char&)>:
   0:	e590c00c 	ldr	r12, [r0, #12]
   4:	e5903010 	ldr	r3, [r0, #16]
   8:	e5902008 	ldr	r2, [r0, #8]
   c:	e043300c 	sub	r3, r3, r12
  10:	e1520003 	cmp	r2, r3
  14:	37dc3002 	ldrbcc	r3, [r12, r2]
  18:	33a00001 	movcc	r0, #1
  1c:	35c13000 	strbcc	r3, [r1]
  20:	23a00000 	movcs	r0, #0
  24:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe14CMemBufferPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED2Ev:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::~_Sp_counted_ptr_inplace()>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe14CMemBufferPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::_M_dispose()>:
   0:	e590300c 	ldr	r3, [r0, #12]
   4:	e280000c 	add	r0, r0, #12
   8:	e5933008 	ldr	r3, [r3, #8]
   c:	e1a0f003 	mov	pc, r3

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe9CNullPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED2Ev:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::~_Sp_counted_ptr_inplace()>:
   0:	e1a0f00e 	mov	pc, lr

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe9CNullPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::_M_dispose()>:
   0:	e590300c 	ldr	r3, [r0, #12]
   4:	e280000c 	add	r0, r0, #12
   8:	e5933008 	ldr	r3, [r3, #8]
   c:	e1a0f003 	mov	pc, r3

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe9CNullPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::~_Sp_counted_ptr_inplace()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e3a01018 	mov	r1, #24
   c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  10:	e1a00004 	mov	r0, r4
  14:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe14CMemBufferPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::~_Sp_counted_ptr_inplace()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e3a01024 	mov	r1, #36	; 0x24
   c:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  10:	e1a00004 	mov	r0, r4
  14:	e8bd8010 	pop	{r4, pc}

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe9CNullPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)>:
   0:	e59f3028 	ldr	r3, [pc, #40]	; 30 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x30>
   4:	e92d4010 	push	{r4, lr}
   8:	e1510003 	cmp	r1, r3
   c:	e280400c 	add	r4, r0, #12
  10:	0a000004 	beq	28 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x28>
  14:	e1a00001 	mov	r0, r1
  18:	e59f1014 	ldr	r1, [pc, #20]	; 34 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x34>
  1c:	ebfffffe 	bl	0 <std::type_info::operator==(std::type_info const&) const>
  20:	e3500000 	cmp	r0, #0
  24:	03a04000 	moveq	r4, #0
  28:	e1a00004 	mov	r0, r4
  2c:	e8bd8010 	pop	{r4, pc}
	...

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe14CMemBufferPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)>:
   0:	e59f3028 	ldr	r3, [pc, #40]	; 30 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x30>
   4:	e92d4010 	push	{r4, lr}
   8:	e1510003 	cmp	r1, r3
   c:	e280400c 	add	r4, r0, #12
  10:	0a000004 	beq	28 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x28>
  14:	e1a00001 	mov	r0, r1
  18:	e59f1014 	ldr	r1, [pc, #20]	; 34 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::_M_get_deleter(std::type_info const&)+0x34>
  1c:	ebfffffe 	bl	0 <std::type_info::operator==(std::type_info const&) const>
  20:	e3500000 	cmp	r0, #0
  24:	03a04000 	moveq	r4, #0
  28:	e1a00004 	mov	r0, r4
  2c:	e8bd8010 	pop	{r4, pc}
	...

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe14CMemBufferPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CMemBufferPipe, std::allocator<Pipe::CMemBufferPipe>, (__gnu_cxx::_Lock_policy)0>::_M_destroy()>:
   0:	e3a01024 	mov	r1, #36	; 0x24
   4:	eafffffe 	b	0 <operator delete(void*, unsigned int)>

Disassembly of section .text._ZNSt23_Sp_counted_ptr_inplaceIN4Pipe9CNullPipeESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv:

00000000 <std::_Sp_counted_ptr_inplace<Pipe::CNullPipe, std::allocator<Pipe::CNullPipe>, (__gnu_cxx::_Lock_policy)0>::_M_destroy()>:
   0:	e3a01018 	mov	r1, #24
   4:	eafffffe 	b	0 <operator delete(void*, unsigned int)>

Disassembly of section .text._ZN4Pipe14CMemBufferPipeD0Ev:

00000000 <Pipe::CMemBufferPipe::~CMemBufferPipe()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e590000c 	ldr	r0, [r0, #12]
   c:	e59f3028 	ldr	r3, [pc, #40]	; 3c <Pipe::CMemBufferPipe::~CMemBufferPipe()+0x3c>
  10:	e3500000 	cmp	r0, #0
  14:	e5843000 	str	r3, [r4]
  18:	0a000002 	beq	28 <Pipe::CMemBufferPipe::~CMemBufferPipe()+0x28>
  1c:	e5941014 	ldr	r1, [r4, #20]
  20:	e0411000 	sub	r1, r1, r0
  24:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  28:	e1a00004 	mov	r0, r4
  2c:	e3a01018 	mov	r1, #24
  30:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  34:	e1a00004 	mov	r0, r4
  38:	e8bd8010 	pop	{r4, pc}
  3c:	00000008 	.word	0x00000008

Disassembly of section .text._ZN4Pipe14CMemBufferPipeD2Ev:

00000000 <Pipe::CMemBufferPipe::~CMemBufferPipe()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e590000c 	ldr	r0, [r0, #12]
   c:	e59f301c 	ldr	r3, [pc, #28]	; 30 <Pipe::CMemBufferPipe::~CMemBufferPipe()+0x30>
  10:	e3500000 	cmp	r0, #0
  14:	e5843000 	str	r3, [r4]
  18:	0a000002 	beq	28 <Pipe::CMemBufferPipe::~CMemBufferPipe()+0x28>
  1c:	e5941014 	ldr	r1, [r4, #20]
  20:	e0411000 	sub	r1, r1, r0
  24:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  28:	e1a00004 	mov	r0, r4
  2c:	e8bd8010 	pop	{r4, pc}
  30:	00000008 	.word	0x00000008

Disassembly of section .text._ZN5ZPack13CZPackEncoder5SetInESt10shared_ptrIN4Pipe5CPipeEE:

00000000 <ZPack::CZPackEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e8910048 	ldm	r1, {r3, r6}
   8:	e5905004 	ldr	r5, [r0, #4]
   c:	e5803000 	str	r3, [r0]
  10:	e1560005 	cmp	r6, r5
  14:	0a00001b 	beq	88 <ZPack::CZPackEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x88>
  18:	e3560000 	cmp	r6, #0
  1c:	15963004 	ldrne	r3, [r6, #4]
  20:	e1a04000 	mov	r4, r0
  24:	12833001 	addne	r3, r3, #1
  28:	15863004 	strne	r3, [r6, #4]
  2c:	e3550000 	cmp	r5, #0
  30:	0a000013 	beq	84 <ZPack::CZPackEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  34:	e5953004 	ldr	r3, [r5, #4]
  38:	e2433001 	sub	r3, r3, #1
  3c:	e3530000 	cmp	r3, #0
  40:	e5853004 	str	r3, [r5, #4]
  44:	1a00000e 	bne	84 <ZPack::CZPackEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  48:	e5953000 	ldr	r3, [r5]
  4c:	e1a00005 	mov	r0, r5
  50:	e5933008 	ldr	r3, [r3, #8]
  54:	e1a0e00f 	mov	lr, pc
  58:	e1a0f003 	mov	pc, r3
  5c:	e5953008 	ldr	r3, [r5, #8]
  60:	e2433001 	sub	r3, r3, #1
  64:	e3530000 	cmp	r3, #0
  68:	e5853008 	str	r3, [r5, #8]
  6c:	1a000004 	bne	84 <ZPack::CZPackEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  70:	e5953000 	ldr	r3, [r5]
  74:	e1a00005 	mov	r0, r5
  78:	e593300c 	ldr	r3, [r3, #12]
  7c:	e1a0e00f 	mov	lr, pc
  80:	e1a0f003 	mov	pc, r3
  84:	e5846004 	str	r6, [r4, #4]
  88:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN5ZPack13CZPackEncoder6SetOutESt10shared_ptrIN4Pipe5CPipeEE:

00000000 <ZPack::CZPackEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e8910048 	ldm	r1, {r3, r6}
   8:	e590500c 	ldr	r5, [r0, #12]
   c:	e5803008 	str	r3, [r0, #8]
  10:	e1560005 	cmp	r6, r5
  14:	0a00001b 	beq	88 <ZPack::CZPackEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x88>
  18:	e3560000 	cmp	r6, #0
  1c:	15963004 	ldrne	r3, [r6, #4]
  20:	e1a04000 	mov	r4, r0
  24:	12833001 	addne	r3, r3, #1
  28:	15863004 	strne	r3, [r6, #4]
  2c:	e3550000 	cmp	r5, #0
  30:	0a000013 	beq	84 <ZPack::CZPackEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  34:	e5953004 	ldr	r3, [r5, #4]
  38:	e2433001 	sub	r3, r3, #1
  3c:	e3530000 	cmp	r3, #0
  40:	e5853004 	str	r3, [r5, #4]
  44:	1a00000e 	bne	84 <ZPack::CZPackEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  48:	e5953000 	ldr	r3, [r5]
  4c:	e1a00005 	mov	r0, r5
  50:	e5933008 	ldr	r3, [r3, #8]
  54:	e1a0e00f 	mov	lr, pc
  58:	e1a0f003 	mov	pc, r3
  5c:	e5953008 	ldr	r3, [r5, #8]
  60:	e2433001 	sub	r3, r3, #1
  64:	e3530000 	cmp	r3, #0
  68:	e5853008 	str	r3, [r5, #8]
  6c:	1a000004 	bne	84 <ZPack::CZPackEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  70:	e5953000 	ldr	r3, [r5]
  74:	e1a00005 	mov	r0, r5
  78:	e593300c 	ldr	r3, [r3, #12]
  7c:	e1a0e00f 	mov	lr, pc
  80:	e1a0f003 	mov	pc, r3
  84:	e584600c 	str	r6, [r4, #12]
  88:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN5ZPack13CZPackEncoder6EncodeEv:

00000000 <ZPack::CZPackEncoder::Encode()>:
   0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e3a04000 	mov	r4, #0
   8:	e1a05000 	mov	r5, r0
   c:	e24dd04c 	sub	sp, sp, #76	; 0x4c
  10:	e5956000 	ldr	r6, [r5]
  14:	e28d1017 	add	r1, sp, #23
  18:	e5963000 	ldr	r3, [r6]
  1c:	e1a00006 	mov	r0, r6
  20:	e5933004 	ldr	r3, [r3, #4]
  24:	e1a0e00f 	mov	lr, pc
  28:	e1a0f003 	mov	pc, r3
  2c:	e2503000 	subs	r3, r0, #0
  30:	1a0001d2 	bne	780 <ZPack::CZPackEncoder::Encode()+0x780>
  34:	e5952000 	ldr	r2, [r5]
  38:	e3a00018 	mov	r0, #24
  3c:	e5823008 	str	r3, [r2, #8]
  40:	ebfffffe 	bl	0 <operator new(unsigned int)>
  44:	e3a07001 	mov	r7, #1
  48:	e1a09000 	mov	r9, r0
  4c:	e1a06000 	mov	r6, r0
  50:	e59f8844 	ldr	r8, [pc, #2116]	; 89c <ZPack::CZPackEncoder::Encode()+0x89c>
  54:	e5807004 	str	r7, [r0, #4]
  58:	e5807008 	str	r7, [r0, #8]
  5c:	e489800c 	str	r8, [r9], #12
  60:	e1a00009 	mov	r0, r9
  64:	ebfffffe 	bl	0 <Pipe::CNullPipe::CNullPipe()>
  68:	e3a00018 	mov	r0, #24
  6c:	e58d602c 	str	r6, [sp, #44]	; 0x2c
  70:	e58d9028 	str	r9, [sp, #40]	; 0x28
  74:	ebfffffe 	bl	0 <operator new(unsigned int)>
  78:	e5807004 	str	r7, [r0, #4]
  7c:	e5807008 	str	r7, [r0, #8]
  80:	e1a07000 	mov	r7, r0
  84:	e1a06000 	mov	r6, r0
  88:	e487800c 	str	r8, [r7], #12
  8c:	e1a00007 	mov	r0, r7
  90:	ebfffffe 	bl	0 <Pipe::CNullPipe::CNullPipe()>
  94:	e895000c 	ldm	r5, {r2, r3}
  98:	e3530000 	cmp	r3, #0
  9c:	e58d7030 	str	r7, [sp, #48]	; 0x30
  a0:	e58d2038 	str	r2, [sp, #56]	; 0x38
  a4:	e58d6034 	str	r6, [sp, #52]	; 0x34
  a8:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  ac:	0a000002 	beq	bc <ZPack::CZPackEncoder::Encode()+0xbc>
  b0:	e5932004 	ldr	r2, [r3, #4]
  b4:	e2822001 	add	r2, r2, #1
  b8:	e5832004 	str	r2, [r3, #4]
  bc:	e28d1038 	add	r1, sp, #56	; 0x38
  c0:	e28d0028 	add	r0, sp, #40	; 0x28
  c4:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)>
  c8:	e59d603c 	ldr	r6, [sp, #60]	; 0x3c
  cc:	e3560000 	cmp	r6, #0
  d0:	0a000013 	beq	124 <ZPack::CZPackEncoder::Encode()+0x124>
  d4:	e5963004 	ldr	r3, [r6, #4]
  d8:	e2433001 	sub	r3, r3, #1
  dc:	e3530000 	cmp	r3, #0
  e0:	e5863004 	str	r3, [r6, #4]
  e4:	1a00000e 	bne	124 <ZPack::CZPackEncoder::Encode()+0x124>
  e8:	e5963000 	ldr	r3, [r6]
  ec:	e1a00006 	mov	r0, r6
  f0:	e5933008 	ldr	r3, [r3, #8]
  f4:	e1a0e00f 	mov	lr, pc
  f8:	e1a0f003 	mov	pc, r3
  fc:	e5963008 	ldr	r3, [r6, #8]
 100:	e2433001 	sub	r3, r3, #1
 104:	e3530000 	cmp	r3, #0
 108:	e5863008 	str	r3, [r6, #8]
 10c:	1a000004 	bne	124 <ZPack::CZPackEncoder::Encode()+0x124>
 110:	e5963000 	ldr	r3, [r6]
 114:	e1a00006 	mov	r0, r6
 118:	e593300c 	ldr	r3, [r3, #12]
 11c:	e1a0e00f 	mov	lr, pc
 120:	e1a0f003 	mov	pc, r3
 124:	e3a00024 	mov	r0, #36	; 0x24
 128:	ebfffffe 	bl	0 <operator new(unsigned int)>
 12c:	e1a06000 	mov	r6, r0
 130:	e3a0c001 	mov	r12, #1
 134:	e1a07006 	mov	r7, r6
 138:	e3a03000 	mov	r3, #0
 13c:	e3a02002 	mov	r2, #2
 140:	e586c008 	str	r12, [r6, #8]
 144:	e59fc754 	ldr	r12, [pc, #1876]	; 8a0 <ZPack::CZPackEncoder::Encode()+0x8a0>
 148:	e59fa754 	ldr	r10, [pc, #1876]	; 8a4 <ZPack::CZPackEncoder::Encode()+0x8a4>
 14c:	e487c00c 	str	r12, [r7], #12
 150:	e5873004 	str	r3, [r7, #4]
 154:	e5873008 	str	r3, [r7, #8]
 158:	e28d1038 	add	r1, sp, #56	; 0x38
 15c:	e28d0028 	add	r0, sp, #40	; 0x28
 160:	e5862004 	str	r2, [r6, #4]
 164:	e586a00c 	str	r10, [r6, #12]
 168:	e5863018 	str	r3, [r6, #24]
 16c:	e586301c 	str	r3, [r6, #28]
 170:	e5863020 	str	r3, [r6, #32]
 174:	e58d603c 	str	r6, [sp, #60]	; 0x3c
 178:	e58d7038 	str	r7, [sp, #56]	; 0x38
 17c:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)>
 180:	e59d903c 	ldr	r9, [sp, #60]	; 0x3c
 184:	e3590000 	cmp	r9, #0
 188:	0a000013 	beq	1dc <ZPack::CZPackEncoder::Encode()+0x1dc>
 18c:	e5993004 	ldr	r3, [r9, #4]
 190:	e2433001 	sub	r3, r3, #1
 194:	e3530000 	cmp	r3, #0
 198:	e5893004 	str	r3, [r9, #4]
 19c:	1a00000e 	bne	1dc <ZPack::CZPackEncoder::Encode()+0x1dc>
 1a0:	e5993000 	ldr	r3, [r9]
 1a4:	e1a00009 	mov	r0, r9
 1a8:	e5933008 	ldr	r3, [r3, #8]
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e1a0f003 	mov	pc, r3
 1b4:	e5993008 	ldr	r3, [r9, #8]
 1b8:	e2433001 	sub	r3, r3, #1
 1bc:	e3530000 	cmp	r3, #0
 1c0:	e5893008 	str	r3, [r9, #8]
 1c4:	1a000004 	bne	1dc <ZPack::CZPackEncoder::Encode()+0x1dc>
 1c8:	e5993000 	ldr	r3, [r9]
 1cc:	e1a00009 	mov	r0, r9
 1d0:	e593300c 	ldr	r3, [r3, #12]
 1d4:	e1a0e00f 	mov	lr, pc
 1d8:	e1a0f003 	mov	pc, r3
 1dc:	e28d0028 	add	r0, sp, #40	; 0x28
 1e0:	ebfffffe 	bl	0 <Huffman::CHuffmanEncoder::Encode()>
 1e4:	e3a03000 	mov	r3, #0
 1e8:	e5863014 	str	r3, [r6, #20]
 1ec:	e596301c 	ldr	r3, [r6, #28]
 1f0:	e3a00018 	mov	r0, #24
 1f4:	e58d3008 	str	r3, [sp, #8]
 1f8:	e5963018 	ldr	r3, [r6, #24]
 1fc:	e3a09001 	mov	r9, #1
 200:	e58d300c 	str	r3, [sp, #12]
 204:	ebfffffe 	bl	0 <operator new(unsigned int)>
 208:	e1a01000 	mov	r1, r0
 20c:	e1a0b000 	mov	r11, r0
 210:	e5809004 	str	r9, [r0, #4]
 214:	e5809008 	str	r9, [r0, #8]
 218:	e481800c 	str	r8, [r1], #12
 21c:	e1a00001 	mov	r0, r1
 220:	e58d1004 	str	r1, [sp, #4]
 224:	ebfffffe 	bl	0 <Pipe::CNullPipe::CNullPipe()>
 228:	e59d1004 	ldr	r1, [sp, #4]
 22c:	e3a00018 	mov	r0, #24
 230:	e58d1038 	str	r1, [sp, #56]	; 0x38
 234:	e58db03c 	str	r11, [sp, #60]	; 0x3c
 238:	ebfffffe 	bl	0 <operator new(unsigned int)>
 23c:	e5809004 	str	r9, [r0, #4]
 240:	e5809008 	str	r9, [r0, #8]
 244:	e1a09000 	mov	r9, r0
 248:	e1a0b000 	mov	r11, r0
 24c:	e489800c 	str	r8, [r9], #12
 250:	e1a00009 	mov	r0, r9
 254:	ebfffffe 	bl	0 <Pipe::CNullPipe::CNullPipe()>
 258:	e5963004 	ldr	r3, [r6, #4]
 25c:	e28d1020 	add	r1, sp, #32
 260:	e2833001 	add	r3, r3, #1
 264:	e5863004 	str	r3, [r6, #4]
 268:	e28d0038 	add	r0, sp, #56	; 0x38
 26c:	e58d9040 	str	r9, [sp, #64]	; 0x40
 270:	e58db044 	str	r11, [sp, #68]	; 0x44
 274:	e58d7020 	str	r7, [sp, #32]
 278:	e58d6024 	str	r6, [sp, #36]	; 0x24
 27c:	ebfffffe 	bl	0 <Rle::CRleEncoder::SetIn(std::shared_ptr<Pipe::CPipe>)>
 280:	e59d8024 	ldr	r8, [sp, #36]	; 0x24
 284:	e3580000 	cmp	r8, #0
 288:	0a000013 	beq	2dc <ZPack::CZPackEncoder::Encode()+0x2dc>
 28c:	e5983004 	ldr	r3, [r8, #4]
 290:	e2433001 	sub	r3, r3, #1
 294:	e3530000 	cmp	r3, #0
 298:	e5883004 	str	r3, [r8, #4]
 29c:	1a00000e 	bne	2dc <ZPack::CZPackEncoder::Encode()+0x2dc>
 2a0:	e5983000 	ldr	r3, [r8]
 2a4:	e1a00008 	mov	r0, r8
 2a8:	e5933008 	ldr	r3, [r3, #8]
 2ac:	e1a0e00f 	mov	lr, pc
 2b0:	e1a0f003 	mov	pc, r3
 2b4:	e5983008 	ldr	r3, [r8, #8]
 2b8:	e2433001 	sub	r3, r3, #1
 2bc:	e3530000 	cmp	r3, #0
 2c0:	e5883008 	str	r3, [r8, #8]
 2c4:	1a000004 	bne	2dc <ZPack::CZPackEncoder::Encode()+0x2dc>
 2c8:	e5983000 	ldr	r3, [r8]
 2cc:	e1a00008 	mov	r0, r8
 2d0:	e593300c 	ldr	r3, [r3, #12]
 2d4:	e1a0e00f 	mov	lr, pc
 2d8:	e1a0f003 	mov	pc, r3
 2dc:	e3a00024 	mov	r0, #36	; 0x24
 2e0:	ebfffffe 	bl	0 <operator new(unsigned int)>
 2e4:	e1a0b000 	mov	r11, r0
 2e8:	e3a0e001 	mov	lr, #1
 2ec:	e1a0800b 	mov	r8, r11
 2f0:	e3a02000 	mov	r2, #0
 2f4:	e3a0c002 	mov	r12, #2
 2f8:	e59f35a0 	ldr	r3, [pc, #1440]	; 8a0 <ZPack::CZPackEncoder::Encode()+0x8a0>
 2fc:	e58be008 	str	lr, [r11, #8]
 300:	e488300c 	str	r3, [r8], #12
 304:	e5882004 	str	r2, [r8, #4]
 308:	e5882008 	str	r2, [r8, #8]
 30c:	e28d1020 	add	r1, sp, #32
 310:	e58ba00c 	str	r10, [r11, #12]
 314:	e28d0038 	add	r0, sp, #56	; 0x38
 318:	e58bc004 	str	r12, [r11, #4]
 31c:	e58b2018 	str	r2, [r11, #24]
 320:	e58b201c 	str	r2, [r11, #28]
 324:	e58b2020 	str	r2, [r11, #32]
 328:	e58db024 	str	r11, [sp, #36]	; 0x24
 32c:	e58d8020 	str	r8, [sp, #32]
 330:	ebfffffe 	bl	0 <Rle::CRleEncoder::SetOut(std::shared_ptr<Pipe::CPipe>)>
 334:	e59da024 	ldr	r10, [sp, #36]	; 0x24
 338:	e35a0000 	cmp	r10, #0
 33c:	0a000013 	beq	390 <ZPack::CZPackEncoder::Encode()+0x390>
 340:	e59a2004 	ldr	r2, [r10, #4]
 344:	e2422001 	sub	r2, r2, #1
 348:	e3520000 	cmp	r2, #0
 34c:	e58a2004 	str	r2, [r10, #4]
 350:	1a00000e 	bne	390 <ZPack::CZPackEncoder::Encode()+0x390>
 354:	e59a2000 	ldr	r2, [r10]
 358:	e1a0000a 	mov	r0, r10
 35c:	e5922008 	ldr	r2, [r2, #8]
 360:	e1a0e00f 	mov	lr, pc
 364:	e1a0f002 	mov	pc, r2
 368:	e59a2008 	ldr	r2, [r10, #8]
 36c:	e2422001 	sub	r2, r2, #1
 370:	e3520000 	cmp	r2, #0
 374:	e58a2008 	str	r2, [r10, #8]
 378:	1a000004 	bne	390 <ZPack::CZPackEncoder::Encode()+0x390>
 37c:	e59a2000 	ldr	r2, [r10]
 380:	e1a0000a 	mov	r0, r10
 384:	e592200c 	ldr	r2, [r2, #12]
 388:	e1a0e00f 	mov	lr, pc
 38c:	e1a0f002 	mov	pc, r2
 390:	e59d200c 	ldr	r2, [sp, #12]
 394:	e59d3008 	ldr	r3, [sp, #8]
 398:	e28d0038 	add	r0, sp, #56	; 0x38
 39c:	e0439002 	sub	r9, r3, r2
 3a0:	ebfffffe 	bl	0 <Rle::CRleEncoder::Encode()>
 3a4:	e1540009 	cmp	r4, r9
 3a8:	21a01009 	movcs	r1, r9
 3ac:	31a01004 	movcc	r1, r4
 3b0:	e59b0018 	ldr	r0, [r11, #24]
 3b4:	e59b201c 	ldr	r2, [r11, #28]
 3b8:	e0422000 	sub	r2, r2, r0
 3bc:	e1520001 	cmp	r2, r1
 3c0:	31a00002 	movcc	r0, r2
 3c4:	21a00001 	movcs	r0, r1
 3c8:	e1540000 	cmp	r4, r0
 3cc:	03a09003 	moveq	r9, #3
 3d0:	0a000006 	beq	3f0 <ZPack::CZPackEncoder::Encode()+0x3f0>
 3d4:	e1590000 	cmp	r9, r0
 3d8:	03a09001 	moveq	r9, #1
 3dc:	0a000003 	beq	3f0 <ZPack::CZPackEncoder::Encode()+0x3f0>
 3e0:	e1520001 	cmp	r2, r1
 3e4:	93a09000 	movls	r9, #0
 3e8:	83a09001 	movhi	r9, #1
 3ec:	e1a09089 	lsl	r9, r9, #1
 3f0:	e595a008 	ldr	r10, [r5, #8]
 3f4:	e3a01099 	mov	r1, #153	; 0x99
 3f8:	e59a2000 	ldr	r2, [r10]
 3fc:	e1a0000a 	mov	r0, r10
 400:	e5922000 	ldr	r2, [r2]
 404:	e1a0e00f 	mov	lr, pc
 408:	e1a0f002 	mov	pc, r2
 40c:	e3500000 	cmp	r0, #0
 410:	159a2004 	ldrne	r2, [r10, #4]
 414:	e1a01009 	mov	r1, r9
 418:	12822001 	addne	r2, r2, #1
 41c:	158a2004 	strne	r2, [r10, #4]
 420:	e595a008 	ldr	r10, [r5, #8]
 424:	e59a2000 	ldr	r2, [r10]
 428:	e1a0000a 	mov	r0, r10
 42c:	e5922000 	ldr	r2, [r2]
 430:	e1a0e00f 	mov	lr, pc
 434:	e1a0f002 	mov	pc, r2
 438:	e3500000 	cmp	r0, #0
 43c:	0a000002 	beq	44c <ZPack::CZPackEncoder::Encode()+0x44c>
 440:	e59a2004 	ldr	r2, [r10, #4]
 444:	e2822001 	add	r2, r2, #1
 448:	e58a2004 	str	r2, [r10, #4]
 44c:	e3590002 	cmp	r9, #2
 450:	0a0000f2 	beq	820 <ZPack::CZPackEncoder::Encode()+0x820>
 454:	e3590003 	cmp	r9, #3
 458:	0a0000cd 	beq	794 <ZPack::CZPackEncoder::Encode()+0x794>
 45c:	e3590001 	cmp	r9, #1
 460:	0a0000ff 	beq	864 <ZPack::CZPackEncoder::Encode()+0x864>
 464:	e5951008 	ldr	r1, [r5, #8]
 468:	e59b2004 	ldr	r2, [r11, #4]
 46c:	e58d1020 	str	r1, [sp, #32]
 470:	e3a01000 	mov	r1, #0
 474:	e2822001 	add	r2, r2, #1
 478:	e58b2004 	str	r2, [r11, #4]
 47c:	e595200c 	ldr	r2, [r5, #12]
 480:	e58d8018 	str	r8, [sp, #24]
 484:	e3520000 	cmp	r2, #0
 488:	e58db01c 	str	r11, [sp, #28]
 48c:	e58d2024 	str	r2, [sp, #36]	; 0x24
 490:	e58b1014 	str	r1, [r11, #20]
 494:	0a000002 	beq	4a4 <ZPack::CZPackEncoder::Encode()+0x4a4>
 498:	e5921004 	ldr	r1, [r2, #4]
 49c:	e2811001 	add	r1, r1, #1
 4a0:	e5821004 	str	r1, [r2, #4]
 4a4:	e28d1020 	add	r1, sp, #32
 4a8:	e28d0018 	add	r0, sp, #24
 4ac:	ebfffffe 	bl	0 <Pipe::Move(std::shared_ptr<Pipe::CPipe>, std::shared_ptr<Pipe::CPipe>)>
 4b0:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
 4b4:	e3540000 	cmp	r4, #0
 4b8:	0a000013 	beq	50c <ZPack::CZPackEncoder::Encode()+0x50c>
 4bc:	e5942004 	ldr	r2, [r4, #4]
 4c0:	e2422001 	sub	r2, r2, #1
 4c4:	e3520000 	cmp	r2, #0
 4c8:	e5842004 	str	r2, [r4, #4]
 4cc:	1a00000e 	bne	50c <ZPack::CZPackEncoder::Encode()+0x50c>
 4d0:	e5942000 	ldr	r2, [r4]
 4d4:	e1a00004 	mov	r0, r4
 4d8:	e5922008 	ldr	r2, [r2, #8]
 4dc:	e1a0e00f 	mov	lr, pc
 4e0:	e1a0f002 	mov	pc, r2
 4e4:	e5942008 	ldr	r2, [r4, #8]
 4e8:	e2422001 	sub	r2, r2, #1
 4ec:	e3520000 	cmp	r2, #0
 4f0:	e5842008 	str	r2, [r4, #8]
 4f4:	1a000004 	bne	50c <ZPack::CZPackEncoder::Encode()+0x50c>
 4f8:	e5942000 	ldr	r2, [r4]
 4fc:	e1a00004 	mov	r0, r4
 500:	e592200c 	ldr	r2, [r2, #12]
 504:	e1a0e00f 	mov	lr, pc
 508:	e1a0f002 	mov	pc, r2
 50c:	e59d401c 	ldr	r4, [sp, #28]
 510:	e3540000 	cmp	r4, #0
 514:	0a000013 	beq	568 <ZPack::CZPackEncoder::Encode()+0x568>
 518:	e5942004 	ldr	r2, [r4, #4]
 51c:	e2422001 	sub	r2, r2, #1
 520:	e3520000 	cmp	r2, #0
 524:	e5842004 	str	r2, [r4, #4]
 528:	1a00000e 	bne	568 <ZPack::CZPackEncoder::Encode()+0x568>
 52c:	e5942000 	ldr	r2, [r4]
 530:	e1a00004 	mov	r0, r4
 534:	e5922008 	ldr	r2, [r2, #8]
 538:	e1a0e00f 	mov	lr, pc
 53c:	e1a0f002 	mov	pc, r2
 540:	e5942008 	ldr	r2, [r4, #8]
 544:	e2422001 	sub	r2, r2, #1
 548:	e3520000 	cmp	r2, #0
 54c:	e5842008 	str	r2, [r4, #8]
 550:	1a000004 	bne	568 <ZPack::CZPackEncoder::Encode()+0x568>
 554:	e5942000 	ldr	r2, [r4]
 558:	e1a00004 	mov	r0, r4
 55c:	e592200c 	ldr	r2, [r2, #12]
 560:	e1a0e00f 	mov	lr, pc
 564:	e1a0f002 	mov	pc, r2
 568:	e59b2004 	ldr	r2, [r11, #4]
 56c:	e2422001 	sub	r2, r2, #1
 570:	e3520000 	cmp	r2, #0
 574:	e58b2004 	str	r2, [r11, #4]
 578:	1a00000e 	bne	5b8 <ZPack::CZPackEncoder::Encode()+0x5b8>
 57c:	e59b2000 	ldr	r2, [r11]
 580:	e1a0000b 	mov	r0, r11
 584:	e5922008 	ldr	r2, [r2, #8]
 588:	e1a0e00f 	mov	lr, pc
 58c:	e1a0f002 	mov	pc, r2
 590:	e59b2008 	ldr	r2, [r11, #8]
 594:	e2422001 	sub	r2, r2, #1
 598:	e3520000 	cmp	r2, #0
 59c:	e58b2008 	str	r2, [r11, #8]
 5a0:	1a000004 	bne	5b8 <ZPack::CZPackEncoder::Encode()+0x5b8>
 5a4:	e59b2000 	ldr	r2, [r11]
 5a8:	e1a0000b 	mov	r0, r11
 5ac:	e592300c 	ldr	r3, [r2, #12]
 5b0:	e1a0e00f 	mov	lr, pc
 5b4:	e1a0f003 	mov	pc, r3
 5b8:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
 5bc:	e3540000 	cmp	r4, #0
 5c0:	0a000013 	beq	614 <ZPack::CZPackEncoder::Encode()+0x614>
 5c4:	e5943004 	ldr	r3, [r4, #4]
 5c8:	e2433001 	sub	r3, r3, #1
 5cc:	e3530000 	cmp	r3, #0
 5d0:	e5843004 	str	r3, [r4, #4]
 5d4:	1a00000e 	bne	614 <ZPack::CZPackEncoder::Encode()+0x614>
 5d8:	e5943000 	ldr	r3, [r4]
 5dc:	e1a00004 	mov	r0, r4
 5e0:	e5933008 	ldr	r3, [r3, #8]
 5e4:	e1a0e00f 	mov	lr, pc
 5e8:	e1a0f003 	mov	pc, r3
 5ec:	e5943008 	ldr	r3, [r4, #8]
 5f0:	e2433001 	sub	r3, r3, #1
 5f4:	e3530000 	cmp	r3, #0
 5f8:	e5843008 	str	r3, [r4, #8]
 5fc:	1a000004 	bne	614 <ZPack::CZPackEncoder::Encode()+0x614>
 600:	e5943000 	ldr	r3, [r4]
 604:	e1a00004 	mov	r0, r4
 608:	e593300c 	ldr	r3, [r3, #12]
 60c:	e1a0e00f 	mov	lr, pc
 610:	e1a0f003 	mov	pc, r3
 614:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
 618:	e3540000 	cmp	r4, #0
 61c:	0a000013 	beq	670 <ZPack::CZPackEncoder::Encode()+0x670>
 620:	e5943004 	ldr	r3, [r4, #4]
 624:	e2433001 	sub	r3, r3, #1
 628:	e3530000 	cmp	r3, #0
 62c:	e5843004 	str	r3, [r4, #4]
 630:	1a00000e 	bne	670 <ZPack::CZPackEncoder::Encode()+0x670>
 634:	e5943000 	ldr	r3, [r4]
 638:	e1a00004 	mov	r0, r4
 63c:	e5933008 	ldr	r3, [r3, #8]
 640:	e1a0e00f 	mov	lr, pc
 644:	e1a0f003 	mov	pc, r3
 648:	e5943008 	ldr	r3, [r4, #8]
 64c:	e2433001 	sub	r3, r3, #1
 650:	e3530000 	cmp	r3, #0
 654:	e5843008 	str	r3, [r4, #8]
 658:	1a000004 	bne	670 <ZPack::CZPackEncoder::Encode()+0x670>
 65c:	e5943000 	ldr	r3, [r4]
 660:	e1a00004 	mov	r0, r4
 664:	e593300c 	ldr	r3, [r3, #12]
 668:	e1a0e00f 	mov	lr, pc
 66c:	e1a0f003 	mov	pc, r3
 670:	e5963004 	ldr	r3, [r6, #4]
 674:	e2433001 	sub	r3, r3, #1
 678:	e3530000 	cmp	r3, #0
 67c:	e5863004 	str	r3, [r6, #4]
 680:	1a00000e 	bne	6c0 <ZPack::CZPackEncoder::Encode()+0x6c0>
 684:	e5963000 	ldr	r3, [r6]
 688:	e1a00006 	mov	r0, r6
 68c:	e5933008 	ldr	r3, [r3, #8]
 690:	e1a0e00f 	mov	lr, pc
 694:	e1a0f003 	mov	pc, r3
 698:	e5963008 	ldr	r3, [r6, #8]
 69c:	e2433001 	sub	r3, r3, #1
 6a0:	e3530000 	cmp	r3, #0
 6a4:	e5863008 	str	r3, [r6, #8]
 6a8:	1a000004 	bne	6c0 <ZPack::CZPackEncoder::Encode()+0x6c0>
 6ac:	e5963000 	ldr	r3, [r6]
 6b0:	e1a00006 	mov	r0, r6
 6b4:	e593300c 	ldr	r3, [r3, #12]
 6b8:	e1a0e00f 	mov	lr, pc
 6bc:	e1a0f003 	mov	pc, r3
 6c0:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
 6c4:	e3540000 	cmp	r4, #0
 6c8:	0a000013 	beq	71c <ZPack::CZPackEncoder::Encode()+0x71c>
 6cc:	e5943004 	ldr	r3, [r4, #4]
 6d0:	e2433001 	sub	r3, r3, #1
 6d4:	e3530000 	cmp	r3, #0
 6d8:	e5843004 	str	r3, [r4, #4]
 6dc:	1a00000e 	bne	71c <ZPack::CZPackEncoder::Encode()+0x71c>
 6e0:	e5943000 	ldr	r3, [r4]
 6e4:	e1a00004 	mov	r0, r4
 6e8:	e5933008 	ldr	r3, [r3, #8]
 6ec:	e1a0e00f 	mov	lr, pc
 6f0:	e1a0f003 	mov	pc, r3
 6f4:	e5943008 	ldr	r3, [r4, #8]
 6f8:	e2433001 	sub	r3, r3, #1
 6fc:	e3530000 	cmp	r3, #0
 700:	e5843008 	str	r3, [r4, #8]
 704:	1a000004 	bne	71c <ZPack::CZPackEncoder::Encode()+0x71c>
 708:	e5943000 	ldr	r3, [r4]
 70c:	e1a00004 	mov	r0, r4
 710:	e593300c 	ldr	r3, [r3, #12]
 714:	e1a0e00f 	mov	lr, pc
 718:	e1a0f003 	mov	pc, r3
 71c:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
 720:	e3540000 	cmp	r4, #0
 724:	0a000013 	beq	778 <ZPack::CZPackEncoder::Encode()+0x778>
 728:	e5943004 	ldr	r3, [r4, #4]
 72c:	e2433001 	sub	r3, r3, #1
 730:	e3530000 	cmp	r3, #0
 734:	e5843004 	str	r3, [r4, #4]
 738:	1a00000e 	bne	778 <ZPack::CZPackEncoder::Encode()+0x778>
 73c:	e5943000 	ldr	r3, [r4]
 740:	e1a00004 	mov	r0, r4
 744:	e5933008 	ldr	r3, [r3, #8]
 748:	e1a0e00f 	mov	lr, pc
 74c:	e1a0f003 	mov	pc, r3
 750:	e5943008 	ldr	r3, [r4, #8]
 754:	e2433001 	sub	r3, r3, #1
 758:	e3530000 	cmp	r3, #0
 75c:	e5843008 	str	r3, [r4, #8]
 760:	1a000004 	bne	778 <ZPack::CZPackEncoder::Encode()+0x778>
 764:	e5943000 	ldr	r3, [r4]
 768:	e1a00004 	mov	r0, r4
 76c:	e593300c 	ldr	r3, [r3, #12]
 770:	e1a0e00f 	mov	lr, pc
 774:	e1a0f003 	mov	pc, r3
 778:	e28dd04c 	add	sp, sp, #76	; 0x4c
 77c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 780:	e5963008 	ldr	r3, [r6, #8]
 784:	e2844001 	add	r4, r4, #1
 788:	e2833001 	add	r3, r3, #1
 78c:	e5863008 	str	r3, [r6, #8]
 790:	eafffe1e 	b	10 <ZPack::CZPackEncoder::Encode()+0x10>
 794:	e5957008 	ldr	r7, [r5, #8]
 798:	e20410ff 	and	r1, r4, #255	; 0xff
 79c:	e5972000 	ldr	r2, [r7]
 7a0:	e1a00007 	mov	r0, r7
 7a4:	e5922000 	ldr	r2, [r2]
 7a8:	e1a0e00f 	mov	lr, pc
 7ac:	e1a0f002 	mov	pc, r2
 7b0:	e3500000 	cmp	r0, #0
 7b4:	15972004 	ldrne	r2, [r7, #4]
 7b8:	e1a01424 	lsr	r1, r4, #8
 7bc:	12822001 	addne	r2, r2, #1
 7c0:	15872004 	strne	r2, [r7, #4]
 7c4:	e5957008 	ldr	r7, [r5, #8]
 7c8:	e20110ff 	and	r1, r1, #255	; 0xff
 7cc:	e5972000 	ldr	r2, [r7]
 7d0:	e1a00007 	mov	r0, r7
 7d4:	e5922000 	ldr	r2, [r2]
 7d8:	e1a0e00f 	mov	lr, pc
 7dc:	e1a0f002 	mov	pc, r2
 7e0:	e3500000 	cmp	r0, #0
 7e4:	15972004 	ldrne	r2, [r7, #4]
 7e8:	e1a01824 	lsr	r1, r4, #16
 7ec:	e5954008 	ldr	r4, [r5, #8]
 7f0:	12822001 	addne	r2, r2, #1
 7f4:	15872004 	strne	r2, [r7, #4]
 7f8:	e5942000 	ldr	r2, [r4]
 7fc:	e1a00004 	mov	r0, r4
 800:	e5922000 	ldr	r2, [r2]
 804:	e20110ff 	and	r1, r1, #255	; 0xff
 808:	e1a0e00f 	mov	lr, pc
 80c:	e1a0f002 	mov	pc, r2
 810:	e3500000 	cmp	r0, #0
 814:	15942004 	ldrne	r2, [r4, #4]
 818:	12822001 	addne	r2, r2, #1
 81c:	15842004 	strne	r2, [r4, #4]
 820:	e3a01000 	mov	r1, #0
 824:	e5952000 	ldr	r2, [r5]
 828:	e5821008 	str	r1, [r2, #8]
 82c:	e58d2018 	str	r2, [sp, #24]
 830:	e5952004 	ldr	r2, [r5, #4]
 834:	e1520001 	cmp	r2, r1
 838:	15921004 	ldrne	r1, [r2, #4]
 83c:	e58d201c 	str	r2, [sp, #28]
 840:	12811001 	addne	r1, r1, #1
 844:	15821004 	strne	r1, [r2, #4]
 848:	e595200c 	ldr	r2, [r5, #12]
 84c:	e5951008 	ldr	r1, [r5, #8]
 850:	e3520000 	cmp	r2, #0
 854:	e58d1020 	str	r1, [sp, #32]
 858:	e58d2024 	str	r2, [sp, #36]	; 0x24
 85c:	1affff0d 	bne	498 <ZPack::CZPackEncoder::Encode()+0x498>
 860:	eaffff0f 	b	4a4 <ZPack::CZPackEncoder::Encode()+0x4a4>
 864:	e5951008 	ldr	r1, [r5, #8]
 868:	e5962004 	ldr	r2, [r6, #4]
 86c:	e58d1020 	str	r1, [sp, #32]
 870:	e3a01000 	mov	r1, #0
 874:	e2822001 	add	r2, r2, #1
 878:	e5862004 	str	r2, [r6, #4]
 87c:	e595200c 	ldr	r2, [r5, #12]
 880:	e58d7018 	str	r7, [sp, #24]
 884:	e3520000 	cmp	r2, #0
 888:	e58d601c 	str	r6, [sp, #28]
 88c:	e58d2024 	str	r2, [sp, #36]	; 0x24
 890:	e5861014 	str	r1, [r6, #20]
 894:	1afffeff 	bne	498 <ZPack::CZPackEncoder::Encode()+0x498>
 898:	eaffff01 	b	4a4 <ZPack::CZPackEncoder::Encode()+0x4a4>
 89c:	00000008 	.word	0x00000008
 8a0:	00000008 	.word	0x00000008
 8a4:	00000008 	.word	0x00000008

Disassembly of section .text._ZN5ZPack13CZPackDecoder5SetInESt10shared_ptrIN4Pipe5CPipeEE:

00000000 <ZPack::CZPackDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e8910048 	ldm	r1, {r3, r6}
   8:	e5905004 	ldr	r5, [r0, #4]
   c:	e5803000 	str	r3, [r0]
  10:	e1560005 	cmp	r6, r5
  14:	0a00001b 	beq	88 <ZPack::CZPackDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x88>
  18:	e3560000 	cmp	r6, #0
  1c:	15963004 	ldrne	r3, [r6, #4]
  20:	e1a04000 	mov	r4, r0
  24:	12833001 	addne	r3, r3, #1
  28:	15863004 	strne	r3, [r6, #4]
  2c:	e3550000 	cmp	r5, #0
  30:	0a000013 	beq	84 <ZPack::CZPackDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  34:	e5953004 	ldr	r3, [r5, #4]
  38:	e2433001 	sub	r3, r3, #1
  3c:	e3530000 	cmp	r3, #0
  40:	e5853004 	str	r3, [r5, #4]
  44:	1a00000e 	bne	84 <ZPack::CZPackDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  48:	e5953000 	ldr	r3, [r5]
  4c:	e1a00005 	mov	r0, r5
  50:	e5933008 	ldr	r3, [r3, #8]
  54:	e1a0e00f 	mov	lr, pc
  58:	e1a0f003 	mov	pc, r3
  5c:	e5953008 	ldr	r3, [r5, #8]
  60:	e2433001 	sub	r3, r3, #1
  64:	e3530000 	cmp	r3, #0
  68:	e5853008 	str	r3, [r5, #8]
  6c:	1a000004 	bne	84 <ZPack::CZPackDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)+0x84>
  70:	e5953000 	ldr	r3, [r5]
  74:	e1a00005 	mov	r0, r5
  78:	e593300c 	ldr	r3, [r3, #12]
  7c:	e1a0e00f 	mov	lr, pc
  80:	e1a0f003 	mov	pc, r3
  84:	e5846004 	str	r6, [r4, #4]
  88:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN5ZPack13CZPackDecoder6SetOutESt10shared_ptrIN4Pipe5CPipeEE:

00000000 <ZPack::CZPackDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e8910048 	ldm	r1, {r3, r6}
   8:	e590500c 	ldr	r5, [r0, #12]
   c:	e5803008 	str	r3, [r0, #8]
  10:	e1560005 	cmp	r6, r5
  14:	0a00001b 	beq	88 <ZPack::CZPackDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x88>
  18:	e3560000 	cmp	r6, #0
  1c:	15963004 	ldrne	r3, [r6, #4]
  20:	e1a04000 	mov	r4, r0
  24:	12833001 	addne	r3, r3, #1
  28:	15863004 	strne	r3, [r6, #4]
  2c:	e3550000 	cmp	r5, #0
  30:	0a000013 	beq	84 <ZPack::CZPackDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  34:	e5953004 	ldr	r3, [r5, #4]
  38:	e2433001 	sub	r3, r3, #1
  3c:	e3530000 	cmp	r3, #0
  40:	e5853004 	str	r3, [r5, #4]
  44:	1a00000e 	bne	84 <ZPack::CZPackDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  48:	e5953000 	ldr	r3, [r5]
  4c:	e1a00005 	mov	r0, r5
  50:	e5933008 	ldr	r3, [r3, #8]
  54:	e1a0e00f 	mov	lr, pc
  58:	e1a0f003 	mov	pc, r3
  5c:	e5953008 	ldr	r3, [r5, #8]
  60:	e2433001 	sub	r3, r3, #1
  64:	e3530000 	cmp	r3, #0
  68:	e5853008 	str	r3, [r5, #8]
  6c:	1a000004 	bne	84 <ZPack::CZPackDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)+0x84>
  70:	e5953000 	ldr	r3, [r5]
  74:	e1a00005 	mov	r0, r5
  78:	e593300c 	ldr	r3, [r3, #12]
  7c:	e1a0e00f 	mov	lr, pc
  80:	e1a0f003 	mov	pc, r3
  84:	e584600c 	str	r6, [r4, #12]
  88:	e8bd8070 	pop	{r4, r5, r6, pc}

Disassembly of section .text._ZN5ZPack13CZPackDecoder6DecodeEv:

00000000 <ZPack::CZPackDecoder::Decode()>:
   0:	e3a03000 	mov	r3, #0
   4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
   8:	e5905000 	ldr	r5, [r0]
   c:	e24dd034 	sub	sp, sp, #52	; 0x34
  10:	e5cd3006 	strb	r3, [sp, #6]
  14:	e5953000 	ldr	r3, [r5]
  18:	e1a04000 	mov	r4, r0
  1c:	e5933004 	ldr	r3, [r3, #4]
  20:	e1a00005 	mov	r0, r5
  24:	e28d1006 	add	r1, sp, #6
  28:	e1a0e00f 	mov	lr, pc
  2c:	e1a0f003 	mov	pc, r3
  30:	e3500000 	cmp	r0, #0
  34:	15953008 	ldrne	r3, [r5, #8]
  38:	12833001 	addne	r3, r3, #1
  3c:	15853008 	strne	r3, [r5, #8]
  40:	e5dd3006 	ldrb	r3, [sp, #6]
  44:	e3530099 	cmp	r3, #153	; 0x99
  48:	13a04001 	movne	r4, #1
  4c:	0a000002 	beq	5c <ZPack::CZPackDecoder::Decode()+0x5c>
  50:	e1a00004 	mov	r0, r4
  54:	e28dd034 	add	sp, sp, #52	; 0x34
  58:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
  5c:	e3a03000 	mov	r3, #0
  60:	e5945000 	ldr	r5, [r4]
  64:	e5cd3007 	strb	r3, [sp, #7]
  68:	e5953000 	ldr	r3, [r5]
  6c:	e1a00005 	mov	r0, r5
  70:	e5933004 	ldr	r3, [r3, #4]
  74:	e28d1007 	add	r1, sp, #7
  78:	e1a0e00f 	mov	lr, pc
  7c:	e1a0f003 	mov	pc, r3
  80:	e3500000 	cmp	r0, #0
  84:	15953008 	ldrne	r3, [r5, #8]
  88:	12833001 	addne	r3, r3, #1
  8c:	15853008 	strne	r3, [r5, #8]
  90:	e5dd5007 	ldrb	r5, [sp, #7]
  94:	e2055003 	and	r5, r5, #3
  98:	e3550002 	cmp	r5, #2
  9c:	0a0000ed 	beq	458 <ZPack::CZPackDecoder::Decode()+0x458>
  a0:	e3550003 	cmp	r5, #3
  a4:	0a0000b2 	beq	374 <ZPack::CZPackDecoder::Decode()+0x374>
  a8:	e3550001 	cmp	r5, #1
  ac:	e3a00018 	mov	r0, #24
  b0:	0a000104 	beq	4c8 <ZPack::CZPackDecoder::Decode()+0x4c8>
  b4:	ebfffffe 	bl	0 <operator new(unsigned int)>
  b8:	e3a06001 	mov	r6, #1
  bc:	e1a08000 	mov	r8, r0
  c0:	e1a05000 	mov	r5, r0
  c4:	e59f78c0 	ldr	r7, [pc, #2240]	; 98c <ZPack::CZPackDecoder::Decode()+0x98c>
  c8:	e5806004 	str	r6, [r0, #4]
  cc:	e5806008 	str	r6, [r0, #8]
  d0:	e488700c 	str	r7, [r8], #12
  d4:	e1a00008 	mov	r0, r8
  d8:	ebfffffe 	bl	0 <Pipe::CNullPipe::CNullPipe()>
  dc:	e3a00018 	mov	r0, #24
  e0:	e58d8010 	str	r8, [sp, #16]
  e4:	e58d5014 	str	r5, [sp, #20]
  e8:	ebfffffe 	bl	0 <operator new(unsigned int)>
  ec:	e5806004 	str	r6, [r0, #4]
  f0:	e5806008 	str	r6, [r0, #8]
  f4:	e1a06000 	mov	r6, r0
  f8:	e1a05000 	mov	r5, r0
  fc:	e486700c 	str	r7, [r6], #12
 100:	e1a00006 	mov	r0, r6
 104:	ebfffffe 	bl	0 <Pipe::CNullPipe::CNullPipe()>
 108:	e894000c 	ldm	r4, {r2, r3}
 10c:	e3530000 	cmp	r3, #0
 110:	e58d2020 	str	r2, [sp, #32]
 114:	15932004 	ldrne	r2, [r3, #4]
 118:	e28d8020 	add	r8, sp, #32
 11c:	12822001 	addne	r2, r2, #1
 120:	e28d9010 	add	r9, sp, #16
 124:	e58d501c 	str	r5, [sp, #28]
 128:	e58d6018 	str	r6, [sp, #24]
 12c:	e58d3024 	str	r3, [sp, #36]	; 0x24
 130:	e1a01008 	mov	r1, r8
 134:	15832004 	strne	r2, [r3, #4]
 138:	e1a00009 	mov	r0, r9
 13c:	ebfffffe 	bl	0 <Rle::CRleDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)>
 140:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
 144:	e3550000 	cmp	r5, #0
 148:	0a000013 	beq	19c <ZPack::CZPackDecoder::Decode()+0x19c>
 14c:	e5953004 	ldr	r3, [r5, #4]
 150:	e2433001 	sub	r3, r3, #1
 154:	e3530000 	cmp	r3, #0
 158:	e5853004 	str	r3, [r5, #4]
 15c:	1a00000e 	bne	19c <ZPack::CZPackDecoder::Decode()+0x19c>
 160:	e5953000 	ldr	r3, [r5]
 164:	e1a00005 	mov	r0, r5
 168:	e5933008 	ldr	r3, [r3, #8]
 16c:	e1a0e00f 	mov	lr, pc
 170:	e1a0f003 	mov	pc, r3
 174:	e5953008 	ldr	r3, [r5, #8]
 178:	e2433001 	sub	r3, r3, #1
 17c:	e3530000 	cmp	r3, #0
 180:	e5853008 	str	r3, [r5, #8]
 184:	1a000004 	bne	19c <ZPack::CZPackDecoder::Decode()+0x19c>
 188:	e5953000 	ldr	r3, [r5]
 18c:	e1a00005 	mov	r0, r5
 190:	e593300c 	ldr	r3, [r3, #12]
 194:	e1a0e00f 	mov	lr, pc
 198:	e1a0f003 	mov	pc, r3
 19c:	e3a00024 	mov	r0, #36	; 0x24
 1a0:	ebfffffe 	bl	0 <operator new(unsigned int)>
 1a4:	e1a06000 	mov	r6, r0
 1a8:	e3a05001 	mov	r5, #1
 1ac:	e1a0a006 	mov	r10, r6
 1b0:	e3a03000 	mov	r3, #0
 1b4:	e3a02002 	mov	r2, #2
 1b8:	e59fe7d0 	ldr	lr, [pc, #2000]	; 990 <ZPack::CZPackDecoder::Decode()+0x990>
 1bc:	e59fc7d0 	ldr	r12, [pc, #2000]	; 994 <ZPack::CZPackDecoder::Decode()+0x994>
 1c0:	e5865008 	str	r5, [r6, #8]
 1c4:	e48ae00c 	str	lr, [r10], #12
 1c8:	e58a3004 	str	r3, [r10, #4]
 1cc:	e58a3008 	str	r3, [r10, #8]
 1d0:	e1a01008 	mov	r1, r8
 1d4:	e1a00009 	mov	r0, r9
 1d8:	e586c00c 	str	r12, [r6, #12]
 1dc:	e5862004 	str	r2, [r6, #4]
 1e0:	e5863018 	str	r3, [r6, #24]
 1e4:	e586301c 	str	r3, [r6, #28]
 1e8:	e5863020 	str	r3, [r6, #32]
 1ec:	e58d6024 	str	r6, [sp, #36]	; 0x24
 1f0:	e58da020 	str	r10, [sp, #32]
 1f4:	ebfffffe 	bl	0 <Rle::CRleDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)>
 1f8:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
 1fc:	e3550000 	cmp	r5, #0
 200:	0a000013 	beq	254 <ZPack::CZPackDecoder::Decode()+0x254>
 204:	e5953004 	ldr	r3, [r5, #4]
 208:	e2433001 	sub	r3, r3, #1
 20c:	e3530000 	cmp	r3, #0
 210:	e5853004 	str	r3, [r5, #4]
 214:	1a00000e 	bne	254 <ZPack::CZPackDecoder::Decode()+0x254>
 218:	e5953000 	ldr	r3, [r5]
 21c:	e1a00005 	mov	r0, r5
 220:	e5933008 	ldr	r3, [r3, #8]
 224:	e1a0e00f 	mov	lr, pc
 228:	e1a0f003 	mov	pc, r3
 22c:	e5953008 	ldr	r3, [r5, #8]
 230:	e2433001 	sub	r3, r3, #1
 234:	e3530000 	cmp	r3, #0
 238:	e5853008 	str	r3, [r5, #8]
 23c:	1a000004 	bne	254 <ZPack::CZPackDecoder::Decode()+0x254>
 240:	e5953000 	ldr	r3, [r5]
 244:	e1a00005 	mov	r0, r5
 248:	e593300c 	ldr	r3, [r3, #12]
 24c:	e1a0e00f 	mov	lr, pc
 250:	e1a0f003 	mov	pc, r3
 254:	e1a00009 	mov	r0, r9
 258:	ebfffffe 	bl	0 <Rle::CRleDecoder::Decode()>
 25c:	e3500000 	cmp	r0, #0
 260:	13a04002 	movne	r4, #2
 264:	0a00013c 	beq	75c <ZPack::CZPackDecoder::Decode()+0x75c>
 268:	e5963004 	ldr	r3, [r6, #4]
 26c:	e2433001 	sub	r3, r3, #1
 270:	e3530000 	cmp	r3, #0
 274:	e5863004 	str	r3, [r6, #4]
 278:	1a00000e 	bne	2b8 <ZPack::CZPackDecoder::Decode()+0x2b8>
 27c:	e5963000 	ldr	r3, [r6]
 280:	e1a00006 	mov	r0, r6
 284:	e5933008 	ldr	r3, [r3, #8]
 288:	e1a0e00f 	mov	lr, pc
 28c:	e1a0f003 	mov	pc, r3
 290:	e5963008 	ldr	r3, [r6, #8]
 294:	e2433001 	sub	r3, r3, #1
 298:	e3530000 	cmp	r3, #0
 29c:	e5863008 	str	r3, [r6, #8]
 2a0:	1a000004 	bne	2b8 <ZPack::CZPackDecoder::Decode()+0x2b8>
 2a4:	e5963000 	ldr	r3, [r6]
 2a8:	e1a00006 	mov	r0, r6
 2ac:	e593300c 	ldr	r3, [r3, #12]
 2b0:	e1a0e00f 	mov	lr, pc
 2b4:	e1a0f003 	mov	pc, r3
 2b8:	e59d501c 	ldr	r5, [sp, #28]
 2bc:	e3550000 	cmp	r5, #0
 2c0:	0a000013 	beq	314 <ZPack::CZPackDecoder::Decode()+0x314>
 2c4:	e5953004 	ldr	r3, [r5, #4]
 2c8:	e2433001 	sub	r3, r3, #1
 2cc:	e3530000 	cmp	r3, #0
 2d0:	e5853004 	str	r3, [r5, #4]
 2d4:	1a00000e 	bne	314 <ZPack::CZPackDecoder::Decode()+0x314>
 2d8:	e5953000 	ldr	r3, [r5]
 2dc:	e1a00005 	mov	r0, r5
 2e0:	e5933008 	ldr	r3, [r3, #8]
 2e4:	e1a0e00f 	mov	lr, pc
 2e8:	e1a0f003 	mov	pc, r3
 2ec:	e5953008 	ldr	r3, [r5, #8]
 2f0:	e2433001 	sub	r3, r3, #1
 2f4:	e3530000 	cmp	r3, #0
 2f8:	e5853008 	str	r3, [r5, #8]
 2fc:	1a000004 	bne	314 <ZPack::CZPackDecoder::Decode()+0x314>
 300:	e5953000 	ldr	r3, [r5]
 304:	e1a00005 	mov	r0, r5
 308:	e593300c 	ldr	r3, [r3, #12]
 30c:	e1a0e00f 	mov	lr, pc
 310:	e1a0f003 	mov	pc, r3
 314:	e59d5014 	ldr	r5, [sp, #20]
 318:	e3550000 	cmp	r5, #0
 31c:	0affff4b 	beq	50 <ZPack::CZPackDecoder::Decode()+0x50>
 320:	e5953004 	ldr	r3, [r5, #4]
 324:	e2433001 	sub	r3, r3, #1
 328:	e3530000 	cmp	r3, #0
 32c:	e5853004 	str	r3, [r5, #4]
 330:	1affff46 	bne	50 <ZPack::CZPackDecoder::Decode()+0x50>
 334:	e5953000 	ldr	r3, [r5]
 338:	e1a00005 	mov	r0, r5
 33c:	e5933008 	ldr	r3, [r3, #8]
 340:	e1a0e00f 	mov	lr, pc
 344:	e1a0f003 	mov	pc, r3
 348:	e5953008 	ldr	r3, [r5, #8]
 34c:	e2433001 	sub	r3, r3, #1
 350:	e3530000 	cmp	r3, #0
 354:	e5853008 	str	r3, [r5, #8]
 358:	1affff3c 	bne	50 <ZPack::CZPackDecoder::Decode()+0x50>
 35c:	e5953000 	ldr	r3, [r5]
 360:	e1a00005 	mov	r0, r5
 364:	e593300c 	ldr	r3, [r3, #12]
 368:	e1a0e00f 	mov	lr, pc
 36c:	e1a0f003 	mov	pc, r3
 370:	eaffff36 	b	50 <ZPack::CZPackDecoder::Decode()+0x50>
 374:	e3a05000 	mov	r5, #0
 378:	e1a09005 	mov	r9, r5
 37c:	e1a07005 	mov	r7, r5
 380:	e28d8020 	add	r8, sp, #32
 384:	e5946000 	ldr	r6, [r4]
 388:	e5cd7020 	strb	r7, [sp, #32]
 38c:	e5963000 	ldr	r3, [r6]
 390:	e1a01008 	mov	r1, r8
 394:	e1a00006 	mov	r0, r6
 398:	e5933004 	ldr	r3, [r3, #4]
 39c:	e1a0e00f 	mov	lr, pc
 3a0:	e1a0f003 	mov	pc, r3
 3a4:	e3500000 	cmp	r0, #0
 3a8:	0a000026 	beq	448 <ZPack::CZPackDecoder::Decode()+0x448>
 3ac:	e5963008 	ldr	r3, [r6, #8]
 3b0:	e2833001 	add	r3, r3, #1
 3b4:	e5863008 	str	r3, [r6, #8]
 3b8:	e5dd3020 	ldrb	r3, [sp, #32]
 3bc:	e1899513 	orr	r9, r9, r3, lsl r5
 3c0:	e2855008 	add	r5, r5, #8
 3c4:	e3550018 	cmp	r5, #24
 3c8:	1affffed 	bne	384 <ZPack::CZPackDecoder::Decode()+0x384>
 3cc:	e3590000 	cmp	r9, #0
 3d0:	13a07000 	movne	r7, #0
 3d4:	1a000012 	bne	424 <ZPack::CZPackDecoder::Decode()+0x424>
 3d8:	ea000036 	b	4b8 <ZPack::CZPackDecoder::Decode()+0x4b8>
 3dc:	e5953008 	ldr	r3, [r5, #8]
 3e0:	e5946008 	ldr	r6, [r4, #8]
 3e4:	e2833001 	add	r3, r3, #1
 3e8:	e5853008 	str	r3, [r5, #8]
 3ec:	e5963000 	ldr	r3, [r6]
 3f0:	e1a00006 	mov	r0, r6
 3f4:	e5933000 	ldr	r3, [r3]
 3f8:	e5dd1020 	ldrb	r1, [sp, #32]
 3fc:	e1a0e00f 	mov	lr, pc
 400:	e1a0f003 	mov	pc, r3
 404:	e3500000 	cmp	r0, #0
 408:	e2877001 	add	r7, r7, #1
 40c:	0a00000d 	beq	448 <ZPack::CZPackDecoder::Decode()+0x448>
 410:	e5963004 	ldr	r3, [r6, #4]
 414:	e1570009 	cmp	r7, r9
 418:	e2833001 	add	r3, r3, #1
 41c:	e5863004 	str	r3, [r6, #4]
 420:	0a000024 	beq	4b8 <ZPack::CZPackDecoder::Decode()+0x4b8>
 424:	e5945000 	ldr	r5, [r4]
 428:	e1a01008 	mov	r1, r8
 42c:	e5953000 	ldr	r3, [r5]
 430:	e1a00005 	mov	r0, r5
 434:	e5933004 	ldr	r3, [r3, #4]
 438:	e1a0e00f 	mov	lr, pc
 43c:	e1a0f003 	mov	pc, r3
 440:	e3500000 	cmp	r0, #0
 444:	1affffe4 	bne	3dc <ZPack::CZPackDecoder::Decode()+0x3dc>
 448:	e3a04002 	mov	r4, #2
 44c:	e1a00004 	mov	r0, r4
 450:	e28dd034 	add	sp, sp, #52	; 0x34
 454:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 458:	e894000c 	ldm	r4, {r2, r3}
 45c:	e3530000 	cmp	r3, #0
 460:	e58d2010 	str	r2, [sp, #16]
 464:	15932004 	ldrne	r2, [r3, #4]
 468:	e58d3014 	str	r3, [sp, #20]
 46c:	12822001 	addne	r2, r2, #1
 470:	15832004 	strne	r2, [r3, #4]
 474:	e594300c 	ldr	r3, [r4, #12]
 478:	e5942008 	ldr	r2, [r4, #8]
 47c:	e3530000 	cmp	r3, #0
 480:	e58d2020 	str	r2, [sp, #32]
 484:	15932004 	ldrne	r2, [r3, #4]
 488:	e58d3024 	str	r3, [sp, #36]	; 0x24
 48c:	12822001 	addne	r2, r2, #1
 490:	15832004 	strne	r2, [r3, #4]
 494:	e28d1020 	add	r1, sp, #32
 498:	e28d0010 	add	r0, sp, #16
 49c:	ebfffffe 	bl	0 <Pipe::Move(std::shared_ptr<Pipe::CPipe>, std::shared_ptr<Pipe::CPipe>)>
 4a0:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
 4a4:	e3540000 	cmp	r4, #0
 4a8:	1a000096 	bne	708 <ZPack::CZPackDecoder::Decode()+0x708>
 4ac:	e59d4014 	ldr	r4, [sp, #20]
 4b0:	e3540000 	cmp	r4, #0
 4b4:	1a00007e 	bne	6b4 <ZPack::CZPackDecoder::Decode()+0x6b4>
 4b8:	e3a04000 	mov	r4, #0
 4bc:	e1a00004 	mov	r0, r4
 4c0:	e28dd034 	add	sp, sp, #52	; 0x34
 4c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 4c8:	ebfffffe 	bl	0 <operator new(unsigned int)>
 4cc:	e1a07000 	mov	r7, r0
 4d0:	e1a06000 	mov	r6, r0
 4d4:	e59f84b0 	ldr	r8, [pc, #1200]	; 98c <ZPack::CZPackDecoder::Decode()+0x98c>
 4d8:	e5805004 	str	r5, [r0, #4]
 4dc:	e5805008 	str	r5, [r0, #8]
 4e0:	e487800c 	str	r8, [r7], #12
 4e4:	e1a00007 	mov	r0, r7
 4e8:	ebfffffe 	bl	0 <Pipe::CNullPipe::CNullPipe()>
 4ec:	e3a00018 	mov	r0, #24
 4f0:	e58d6024 	str	r6, [sp, #36]	; 0x24
 4f4:	e58d7020 	str	r7, [sp, #32]
 4f8:	ebfffffe 	bl	0 <operator new(unsigned int)>
 4fc:	e5805004 	str	r5, [r0, #4]
 500:	e5805008 	str	r5, [r0, #8]
 504:	e1a05000 	mov	r5, r0
 508:	e1a06000 	mov	r6, r0
 50c:	e485800c 	str	r8, [r5], #12
 510:	e1a00005 	mov	r0, r5
 514:	ebfffffe 	bl	0 <Pipe::CNullPipe::CNullPipe()>
 518:	e894000c 	ldm	r4, {r2, r3}
 51c:	e3530000 	cmp	r3, #0
 520:	e58d2010 	str	r2, [sp, #16]
 524:	15932004 	ldrne	r2, [r3, #4]
 528:	e28d9010 	add	r9, sp, #16
 52c:	12822001 	addne	r2, r2, #1
 530:	e28d8020 	add	r8, sp, #32
 534:	e58d5028 	str	r5, [sp, #40]	; 0x28
 538:	e58d602c 	str	r6, [sp, #44]	; 0x2c
 53c:	e58d3014 	str	r3, [sp, #20]
 540:	e1a01009 	mov	r1, r9
 544:	15832004 	strne	r2, [r3, #4]
 548:	e1a00008 	mov	r0, r8
 54c:	ebfffffe 	bl	0 <Huffman::CHuffmanDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)>
 550:	e59d5014 	ldr	r5, [sp, #20]
 554:	e3550000 	cmp	r5, #0
 558:	0a000013 	beq	5ac <ZPack::CZPackDecoder::Decode()+0x5ac>
 55c:	e5953004 	ldr	r3, [r5, #4]
 560:	e2433001 	sub	r3, r3, #1
 564:	e3530000 	cmp	r3, #0
 568:	e5853004 	str	r3, [r5, #4]
 56c:	1a00000e 	bne	5ac <ZPack::CZPackDecoder::Decode()+0x5ac>
 570:	e5953000 	ldr	r3, [r5]
 574:	e1a00005 	mov	r0, r5
 578:	e5933008 	ldr	r3, [r3, #8]
 57c:	e1a0e00f 	mov	lr, pc
 580:	e1a0f003 	mov	pc, r3
 584:	e5953008 	ldr	r3, [r5, #8]
 588:	e2433001 	sub	r3, r3, #1
 58c:	e3530000 	cmp	r3, #0
 590:	e5853008 	str	r3, [r5, #8]
 594:	1a000004 	bne	5ac <ZPack::CZPackDecoder::Decode()+0x5ac>
 598:	e5953000 	ldr	r3, [r5]
 59c:	e1a00005 	mov	r0, r5
 5a0:	e593300c 	ldr	r3, [r3, #12]
 5a4:	e1a0e00f 	mov	lr, pc
 5a8:	e1a0f003 	mov	pc, r3
 5ac:	e594300c 	ldr	r3, [r4, #12]
 5b0:	e5942008 	ldr	r2, [r4, #8]
 5b4:	e3530000 	cmp	r3, #0
 5b8:	e58d2010 	str	r2, [sp, #16]
 5bc:	15932004 	ldrne	r2, [r3, #4]
 5c0:	e58d3014 	str	r3, [sp, #20]
 5c4:	12822001 	addne	r2, r2, #1
 5c8:	15832004 	strne	r2, [r3, #4]
 5cc:	e1a01009 	mov	r1, r9
 5d0:	e1a00008 	mov	r0, r8
 5d4:	ebfffffe 	bl	0 <Huffman::CHuffmanDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)>
 5d8:	e59d4014 	ldr	r4, [sp, #20]
 5dc:	e3540000 	cmp	r4, #0
 5e0:	0a000013 	beq	634 <ZPack::CZPackDecoder::Decode()+0x634>
 5e4:	e5943004 	ldr	r3, [r4, #4]
 5e8:	e2433001 	sub	r3, r3, #1
 5ec:	e3530000 	cmp	r3, #0
 5f0:	e5843004 	str	r3, [r4, #4]
 5f4:	1a00000e 	bne	634 <ZPack::CZPackDecoder::Decode()+0x634>
 5f8:	e5943000 	ldr	r3, [r4]
 5fc:	e1a00004 	mov	r0, r4
 600:	e5933008 	ldr	r3, [r3, #8]
 604:	e1a0e00f 	mov	lr, pc
 608:	e1a0f003 	mov	pc, r3
 60c:	e5943008 	ldr	r3, [r4, #8]
 610:	e2433001 	sub	r3, r3, #1
 614:	e3530000 	cmp	r3, #0
 618:	e5843008 	str	r3, [r4, #8]
 61c:	1a000004 	bne	634 <ZPack::CZPackDecoder::Decode()+0x634>
 620:	e5943000 	ldr	r3, [r4]
 624:	e1a00004 	mov	r0, r4
 628:	e593300c 	ldr	r3, [r3, #12]
 62c:	e1a0e00f 	mov	lr, pc
 630:	e1a0f003 	mov	pc, r3
 634:	e1a00008 	mov	r0, r8
 638:	ebfffffe 	bl	0 <Huffman::CHuffmanDecoder::Decode()>
 63c:	e2504000 	subs	r4, r0, #0
 640:	13a04001 	movne	r4, #1
 644:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
 648:	e1a04084 	lsl	r4, r4, #1
 64c:	e3550000 	cmp	r5, #0
 650:	0a000013 	beq	6a4 <ZPack::CZPackDecoder::Decode()+0x6a4>
 654:	e5953004 	ldr	r3, [r5, #4]
 658:	e2433001 	sub	r3, r3, #1
 65c:	e3530000 	cmp	r3, #0
 660:	e5853004 	str	r3, [r5, #4]
 664:	1a00000e 	bne	6a4 <ZPack::CZPackDecoder::Decode()+0x6a4>
 668:	e5953000 	ldr	r3, [r5]
 66c:	e1a00005 	mov	r0, r5
 670:	e5933008 	ldr	r3, [r3, #8]
 674:	e1a0e00f 	mov	lr, pc
 678:	e1a0f003 	mov	pc, r3
 67c:	e5953008 	ldr	r3, [r5, #8]
 680:	e2433001 	sub	r3, r3, #1
 684:	e3530000 	cmp	r3, #0
 688:	e5853008 	str	r3, [r5, #8]
 68c:	1a000004 	bne	6a4 <ZPack::CZPackDecoder::Decode()+0x6a4>
 690:	e5953000 	ldr	r3, [r5]
 694:	e1a00005 	mov	r0, r5
 698:	e593300c 	ldr	r3, [r3, #12]
 69c:	e1a0e00f 	mov	lr, pc
 6a0:	e1a0f003 	mov	pc, r3
 6a4:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
 6a8:	e3550000 	cmp	r5, #0
 6ac:	1affff1b 	bne	320 <ZPack::CZPackDecoder::Decode()+0x320>
 6b0:	eafffe66 	b	50 <ZPack::CZPackDecoder::Decode()+0x50>
 6b4:	e5943004 	ldr	r3, [r4, #4]
 6b8:	e2433001 	sub	r3, r3, #1
 6bc:	e3530000 	cmp	r3, #0
 6c0:	e5843004 	str	r3, [r4, #4]
 6c4:	1affff7b 	bne	4b8 <ZPack::CZPackDecoder::Decode()+0x4b8>
 6c8:	e5943000 	ldr	r3, [r4]
 6cc:	e1a00004 	mov	r0, r4
 6d0:	e5933008 	ldr	r3, [r3, #8]
 6d4:	e1a0e00f 	mov	lr, pc
 6d8:	e1a0f003 	mov	pc, r3
 6dc:	e5943008 	ldr	r3, [r4, #8]
 6e0:	e2433001 	sub	r3, r3, #1
 6e4:	e3530000 	cmp	r3, #0
 6e8:	e5843008 	str	r3, [r4, #8]
 6ec:	1affff71 	bne	4b8 <ZPack::CZPackDecoder::Decode()+0x4b8>
 6f0:	e5943000 	ldr	r3, [r4]
 6f4:	e1a00004 	mov	r0, r4
 6f8:	e593300c 	ldr	r3, [r3, #12]
 6fc:	e1a0e00f 	mov	lr, pc
 700:	e1a0f003 	mov	pc, r3
 704:	eaffff6b 	b	4b8 <ZPack::CZPackDecoder::Decode()+0x4b8>
 708:	e5943004 	ldr	r3, [r4, #4]
 70c:	e2433001 	sub	r3, r3, #1
 710:	e3530000 	cmp	r3, #0
 714:	e5843004 	str	r3, [r4, #4]
 718:	1affff63 	bne	4ac <ZPack::CZPackDecoder::Decode()+0x4ac>
 71c:	e5943000 	ldr	r3, [r4]
 720:	e1a00004 	mov	r0, r4
 724:	e5933008 	ldr	r3, [r3, #8]
 728:	e1a0e00f 	mov	lr, pc
 72c:	e1a0f003 	mov	pc, r3
 730:	e5943008 	ldr	r3, [r4, #8]
 734:	e2433001 	sub	r3, r3, #1
 738:	e3530000 	cmp	r3, #0
 73c:	e5843008 	str	r3, [r4, #8]
 740:	1affff59 	bne	4ac <ZPack::CZPackDecoder::Decode()+0x4ac>
 744:	e5943000 	ldr	r3, [r4]
 748:	e1a00004 	mov	r0, r4
 74c:	e593300c 	ldr	r3, [r3, #12]
 750:	e1a0e00f 	mov	lr, pc
 754:	e1a0f003 	mov	pc, r3
 758:	eaffff53 	b	4ac <ZPack::CZPackDecoder::Decode()+0x4ac>
 75c:	e3a00018 	mov	r0, #24
 760:	ebfffffe 	bl	0 <operator new(unsigned int)>
 764:	e3a09001 	mov	r9, #1
 768:	e1a0b000 	mov	r11, r0
 76c:	e1a05000 	mov	r5, r0
 770:	e5809004 	str	r9, [r0, #4]
 774:	e5809008 	str	r9, [r0, #8]
 778:	e48b700c 	str	r7, [r11], #12
 77c:	e1a0000b 	mov	r0, r11
 780:	ebfffffe 	bl	0 <Pipe::CNullPipe::CNullPipe()>
 784:	e3a00018 	mov	r0, #24
 788:	e58d5024 	str	r5, [sp, #36]	; 0x24
 78c:	e58db020 	str	r11, [sp, #32]
 790:	ebfffffe 	bl	0 <operator new(unsigned int)>
 794:	e5809004 	str	r9, [r0, #4]
 798:	e5809008 	str	r9, [r0, #8]
 79c:	e1a09000 	mov	r9, r0
 7a0:	e1a05000 	mov	r5, r0
 7a4:	e489700c 	str	r7, [r9], #12
 7a8:	e1a00009 	mov	r0, r9
 7ac:	ebfffffe 	bl	0 <Pipe::CNullPipe::CNullPipe()>
 7b0:	e5963004 	ldr	r3, [r6, #4]
 7b4:	e1a00008 	mov	r0, r8
 7b8:	e2833001 	add	r3, r3, #1
 7bc:	e5863004 	str	r3, [r6, #4]
 7c0:	e28d1008 	add	r1, sp, #8
 7c4:	e58d502c 	str	r5, [sp, #44]	; 0x2c
 7c8:	e58d9028 	str	r9, [sp, #40]	; 0x28
 7cc:	e58da008 	str	r10, [sp, #8]
 7d0:	e58d600c 	str	r6, [sp, #12]
 7d4:	ebfffffe 	bl	0 <Huffman::CHuffmanDecoder::SetIn(std::shared_ptr<Pipe::CPipe>)>
 7d8:	e59d500c 	ldr	r5, [sp, #12]
 7dc:	e3550000 	cmp	r5, #0
 7e0:	0a000013 	beq	834 <ZPack::CZPackDecoder::Decode()+0x834>
 7e4:	e5953004 	ldr	r3, [r5, #4]
 7e8:	e2433001 	sub	r3, r3, #1
 7ec:	e3530000 	cmp	r3, #0
 7f0:	e5853004 	str	r3, [r5, #4]
 7f4:	1a00000e 	bne	834 <ZPack::CZPackDecoder::Decode()+0x834>
 7f8:	e5953000 	ldr	r3, [r5]
 7fc:	e1a00005 	mov	r0, r5
 800:	e5933008 	ldr	r3, [r3, #8]
 804:	e1a0e00f 	mov	lr, pc
 808:	e1a0f003 	mov	pc, r3
 80c:	e5953008 	ldr	r3, [r5, #8]
 810:	e2433001 	sub	r3, r3, #1
 814:	e3530000 	cmp	r3, #0
 818:	e5853008 	str	r3, [r5, #8]
 81c:	1a000004 	bne	834 <ZPack::CZPackDecoder::Decode()+0x834>
 820:	e5953000 	ldr	r3, [r5]
 824:	e1a00005 	mov	r0, r5
 828:	e593300c 	ldr	r3, [r3, #12]
 82c:	e1a0e00f 	mov	lr, pc
 830:	e1a0f003 	mov	pc, r3
 834:	e594300c 	ldr	r3, [r4, #12]
 838:	e5942008 	ldr	r2, [r4, #8]
 83c:	e3530000 	cmp	r3, #0
 840:	e58d2008 	str	r2, [sp, #8]
 844:	15932004 	ldrne	r2, [r3, #4]
 848:	e58d300c 	str	r3, [sp, #12]
 84c:	12822001 	addne	r2, r2, #1
 850:	15832004 	strne	r2, [r3, #4]
 854:	e1a00008 	mov	r0, r8
 858:	e28d1008 	add	r1, sp, #8
 85c:	ebfffffe 	bl	0 <Huffman::CHuffmanDecoder::SetOut(std::shared_ptr<Pipe::CPipe>)>
 860:	e59d400c 	ldr	r4, [sp, #12]
 864:	e3540000 	cmp	r4, #0
 868:	0a000013 	beq	8bc <ZPack::CZPackDecoder::Decode()+0x8bc>
 86c:	e5943004 	ldr	r3, [r4, #4]
 870:	e2433001 	sub	r3, r3, #1
 874:	e3530000 	cmp	r3, #0
 878:	e5843004 	str	r3, [r4, #4]
 87c:	1a00000e 	bne	8bc <ZPack::CZPackDecoder::Decode()+0x8bc>
 880:	e5943000 	ldr	r3, [r4]
 884:	e1a00004 	mov	r0, r4
 888:	e5933008 	ldr	r3, [r3, #8]
 88c:	e1a0e00f 	mov	lr, pc
 890:	e1a0f003 	mov	pc, r3
 894:	e5943008 	ldr	r3, [r4, #8]
 898:	e2433001 	sub	r3, r3, #1
 89c:	e3530000 	cmp	r3, #0
 8a0:	e5843008 	str	r3, [r4, #8]
 8a4:	1a000004 	bne	8bc <ZPack::CZPackDecoder::Decode()+0x8bc>
 8a8:	e5943000 	ldr	r3, [r4]
 8ac:	e1a00004 	mov	r0, r4
 8b0:	e593300c 	ldr	r3, [r3, #12]
 8b4:	e1a0e00f 	mov	lr, pc
 8b8:	e1a0f003 	mov	pc, r3
 8bc:	e1a00008 	mov	r0, r8
 8c0:	ebfffffe 	bl	0 <Huffman::CHuffmanDecoder::Decode()>
 8c4:	e2504000 	subs	r4, r0, #0
 8c8:	13a04001 	movne	r4, #1
 8cc:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
 8d0:	e1a04084 	lsl	r4, r4, #1
 8d4:	e3550000 	cmp	r5, #0
 8d8:	0a000013 	beq	92c <ZPack::CZPackDecoder::Decode()+0x92c>
 8dc:	e5953004 	ldr	r3, [r5, #4]
 8e0:	e2433001 	sub	r3, r3, #1
 8e4:	e3530000 	cmp	r3, #0
 8e8:	e5853004 	str	r3, [r5, #4]
 8ec:	1a00000e 	bne	92c <ZPack::CZPackDecoder::Decode()+0x92c>
 8f0:	e5953000 	ldr	r3, [r5]
 8f4:	e1a00005 	mov	r0, r5
 8f8:	e5933008 	ldr	r3, [r3, #8]
 8fc:	e1a0e00f 	mov	lr, pc
 900:	e1a0f003 	mov	pc, r3
 904:	e5953008 	ldr	r3, [r5, #8]
 908:	e2433001 	sub	r3, r3, #1
 90c:	e3530000 	cmp	r3, #0
 910:	e5853008 	str	r3, [r5, #8]
 914:	1a000004 	bne	92c <ZPack::CZPackDecoder::Decode()+0x92c>
 918:	e5953000 	ldr	r3, [r5]
 91c:	e1a00005 	mov	r0, r5
 920:	e593300c 	ldr	r3, [r3, #12]
 924:	e1a0e00f 	mov	lr, pc
 928:	e1a0f003 	mov	pc, r3
 92c:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
 930:	e3550000 	cmp	r5, #0
 934:	0afffe4b 	beq	268 <ZPack::CZPackDecoder::Decode()+0x268>
 938:	e5953004 	ldr	r3, [r5, #4]
 93c:	e2433001 	sub	r3, r3, #1
 940:	e3530000 	cmp	r3, #0
 944:	e5853004 	str	r3, [r5, #4]
 948:	1afffe46 	bne	268 <ZPack::CZPackDecoder::Decode()+0x268>
 94c:	e5953000 	ldr	r3, [r5]
 950:	e1a00005 	mov	r0, r5
 954:	e5933008 	ldr	r3, [r3, #8]
 958:	e1a0e00f 	mov	lr, pc
 95c:	e1a0f003 	mov	pc, r3
 960:	e5953008 	ldr	r3, [r5, #8]
 964:	e2433001 	sub	r3, r3, #1
 968:	e3530000 	cmp	r3, #0
 96c:	e5853008 	str	r3, [r5, #8]
 970:	1afffe3c 	bne	268 <ZPack::CZPackDecoder::Decode()+0x268>
 974:	e5953000 	ldr	r3, [r5]
 978:	e1a00005 	mov	r0, r5
 97c:	e593300c 	ldr	r3, [r3, #12]
 980:	e1a0e00f 	mov	lr, pc
 984:	e1a0f003 	mov	pc, r3
 988:	eafffe36 	b	268 <ZPack::CZPackDecoder::Decode()+0x268>
 98c:	00000008 	.word	0x00000008
 990:	00000008 	.word	0x00000008
 994:	00000008 	.word	0x00000008

Disassembly of section .text._ZNSt6vectorIhSaIhEE17_M_realloc_insertIJRKhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_:

00000000 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)>:
   0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
   4:	e8900480 	ldm	r0, {r7, r10}
   8:	e04a3007 	sub	r3, r10, r7
   c:	e3730106 	cmn	r3, #-2147483647	; 0x80000001
  10:	0a00003f 	beq	114 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x114>
  14:	e3530001 	cmp	r3, #1
  18:	e1a0b002 	mov	r11, r2
  1c:	21a02003 	movcs	r2, r3
  20:	33a02001 	movcc	r2, #1
  24:	e0934002 	adds	r4, r3, r2
  28:	e1a06000 	mov	r6, r0
  2c:	e1a08001 	mov	r8, r1
  30:	2a000034 	bcs	108 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x108>
  34:	e3540000 	cmp	r4, #0
  38:	01a09004 	moveq	r9, r4
  3c:	e0415007 	sub	r5, r1, r7
  40:	1a000028 	bne	e8 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0xe8>
  44:	e5db3000 	ldrb	r3, [r11]
  48:	e3550000 	cmp	r5, #0
  4c:	e7c93005 	strb	r3, [r9, r5]
  50:	e04aa008 	sub	r10, r10, r8
  54:	ca000017 	bgt	b8 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0xb8>
  58:	e2855001 	add	r5, r5, #1
  5c:	e35a0000 	cmp	r10, #0
  60:	e0895005 	add	r5, r9, r5
  64:	ca00000b 	bgt	98 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x98>
  68:	e3570000 	cmp	r7, #0
  6c:	e085500a 	add	r5, r5, r10
  70:	1a000003 	bne	84 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x84>
  74:	e5869000 	str	r9, [r6]
  78:	e5865004 	str	r5, [r6, #4]
  7c:	e5864008 	str	r4, [r6, #8]
  80:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
  84:	e5961008 	ldr	r1, [r6, #8]
  88:	e0411007 	sub	r1, r1, r7
  8c:	e1a00007 	mov	r0, r7
  90:	ebfffffe 	bl	0 <operator delete(void*, unsigned int)>
  94:	eafffff6 	b	74 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x74>
  98:	e1a00005 	mov	r0, r5
  9c:	e1a01008 	mov	r1, r8
  a0:	e1a0200a 	mov	r2, r10
  a4:	ebfffffe 	bl	0 <memcpy>
  a8:	e3570000 	cmp	r7, #0
  ac:	e085500a 	add	r5, r5, r10
  b0:	0affffef 	beq	74 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x74>
  b4:	eafffff2 	b	84 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x84>
  b8:	e1a02005 	mov	r2, r5
  bc:	e1a01007 	mov	r1, r7
  c0:	e1a00009 	mov	r0, r9
  c4:	ebfffffe 	bl	0 <memmove>
  c8:	e2855001 	add	r5, r5, #1
  cc:	e35a0000 	cmp	r10, #0
  d0:	e0895005 	add	r5, r9, r5
  d4:	caffffef 	bgt	98 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x98>
  d8:	e5961008 	ldr	r1, [r6, #8]
  dc:	e085500a 	add	r5, r5, r10
  e0:	e0411007 	sub	r1, r1, r7
  e4:	eaffffe8 	b	8c <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x8c>
  e8:	e3e03102 	mvn	r3, #-2147483648	; 0x80000000
  ec:	e1540003 	cmp	r4, r3
  f0:	21a04003 	movcs	r4, r3
  f4:	e1a00004 	mov	r0, r4
  f8:	ebfffffe 	bl	0 <operator new(unsigned int)>
  fc:	e1a09000 	mov	r9, r0
 100:	e0804004 	add	r4, r0, r4
 104:	eaffffce 	b	44 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x44>
 108:	e3e04102 	mvn	r4, #-2147483648	; 0x80000000
 10c:	e0415007 	sub	r5, r1, r7
 110:	eafffff7 	b	f4 <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0xf4>
 114:	e59f0000 	ldr	r0, [pc]	; 11c <void std::vector<unsigned char, std::allocator<unsigned char> >::_M_realloc_insert<unsigned char const&>(__gnu_cxx::__normal_iterator<unsigned char*, std::vector<unsigned char, std::allocator<unsigned char> > >, unsigned char const&)+0x11c>
 118:	ebfffffe 	bl	0 <std::__throw_length_error(char const*)>
 11c:	00000000 	.word	0x00000000

Disassembly of section .text._ZN4Pipe14CMemBufferPipe7vOnPushEh:

00000000 <Pipe::CMemBufferPipe::vOnPush(unsigned char)>:
   0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   4:	e24dd00c 	sub	sp, sp, #12
   8:	e5903014 	ldr	r3, [r0, #20]
   c:	e5cd1007 	strb	r1, [sp, #7]
  10:	e5901010 	ldr	r1, [r0, #16]
  14:	e1510003 	cmp	r1, r3
  18:	0a000007 	beq	3c <Pipe::CMemBufferPipe::vOnPush(unsigned char)+0x3c>
  1c:	e5dd3007 	ldrb	r3, [sp, #7]
  20:	e5c13000 	strb	r3, [r1]
  24:	e5903010 	ldr	r3, [r0, #16]
  28:	e2833001 	add	r3, r3, #1
  2c:	e5803010 	str	r3, [r0, #16]
  30:	e3a00001 	mov	r0, #1
  34:	e28dd00c 	add	sp, sp, #12
  38:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  3c:	e28d2007 	add	r2, sp, #7
  40:	e280000c 	add	r0, r0, #12
  44:	ebfffffe 	bl	0 <Pipe::CMemBufferPipe::vOnPush(unsigned char)>
  48:	e3a00001 	mov	r0, #1
  4c:	e28dd00c 	add	sp, sp, #12
  50:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

helper_nes_ctrl.png.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <b8_image_helper_nes_ctrl_get>:
   0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
   4:	e28db000 	add	r11, sp, #0
   8:	e24dd00c 	sub	sp, sp, #12
   c:	e50b0008 	str	r0, [r11, #-8]
  10:	e50b100c 	str	r1, [r11, #-12]
  14:	e51b3008 	ldr	r3, [r11, #-8]
  18:	e3a02040 	mov	r2, #64	; 0x40
  1c:	e1c320b0 	strh	r2, [r3]
  20:	e51b300c 	ldr	r3, [r11, #-12]
  24:	e3a02080 	mov	r2, #128	; 0x80
  28:	e1c320b0 	strh	r2, [r3]
  2c:	e59f300c 	ldr	r3, [pc, #12]	; 40 <b8_image_helper_nes_ctrl_get+0x40>
  30:	e1a00003 	mov	r0, r3
  34:	e28bd000 	add	sp, r11, #0
  38:	e49db004 	pop	{r11}		; (ldr r11, [sp], #4)
  3c:	e12fff1e 	bx	lr
  40:	00000000 	.word	0x00000000
